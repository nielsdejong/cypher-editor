(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("codemirror"));
	else if(typeof define === 'function' && define.amd)
		define(["codemirror"], factory);
	else if(typeof exports === 'object')
		exports["CypherCodeMirror"] = factory(require("codemirror"));
	else
		root["CypherCodeMirror"] = factory(root["codemirror"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_25__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 46);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

function arrayToString(a) {
    return "[" + a.join(", ") + "]";
}

String.prototype.seed = String.prototype.seed || Math.round(Math.random() * Math.pow(2, 32));

String.prototype.hashCode = function () {
    var remainder, bytes, h1, h1b, c1, c1b, c2, c2b, k1, i,
        key = this.toString();

    remainder = key.length & 3; // key.length % 4
    bytes = key.length - remainder;
    h1 = String.prototype.seed;
    c1 = 0xcc9e2d51;
    c2 = 0x1b873593;
    i = 0;

    while (i < bytes) {
        k1 =
            ((key.charCodeAt(i) & 0xff)) |
            ((key.charCodeAt(++i) & 0xff) << 8) |
            ((key.charCodeAt(++i) & 0xff) << 16) |
            ((key.charCodeAt(++i) & 0xff) << 24);
        ++i;

        k1 = ((((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16))) & 0xffffffff;
        k1 = (k1 << 15) | (k1 >>> 17);
        k1 = ((((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16))) & 0xffffffff;

        h1 ^= k1;
        h1 = (h1 << 13) | (h1 >>> 19);
        h1b = ((((h1 & 0xffff) * 5) + ((((h1 >>> 16) * 5) & 0xffff) << 16))) & 0xffffffff;
        h1 = (((h1b & 0xffff) + 0x6b64) + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16));
    }

    k1 = 0;

    switch (remainder) {
        case 3:
            k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;
        case 2:
            k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;
        case 1:
            k1 ^= (key.charCodeAt(i) & 0xff);

            k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;
            k1 = (k1 << 15) | (k1 >>> 17);
            k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;
            h1 ^= k1;
    }

    h1 ^= key.length;

    h1 ^= h1 >>> 16;
    h1 = (((h1 & 0xffff) * 0x85ebca6b) + ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) & 0xffffffff;
    h1 ^= h1 >>> 13;
    h1 = ((((h1 & 0xffff) * 0xc2b2ae35) + ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16))) & 0xffffffff;
    h1 ^= h1 >>> 16;

    return h1 >>> 0;
};

function standardEqualsFunction(a, b) {
    return a.equals(b);
}

function standardHashCodeFunction(a) {
    return a.hashCode();
}

function Set(hashFunction, equalsFunction) {
    this.data = {};
    this.hashFunction = hashFunction || standardHashCodeFunction;
    this.equalsFunction = equalsFunction || standardEqualsFunction;
    return this;
}

Object.defineProperty(Set.prototype, "length", {
    get: function () {
        var l = 0;
        for (var key in this.data) {
            if (key.indexOf("hash_") === 0) {
                l = l + this.data[key].length;
            }
        }
        return l;
    }
});

Set.prototype.add = function (value) {
    var hash = this.hashFunction(value);
    var key = "hash_" + hash;
    if (key in this.data) {
        var values = this.data[key];
        for (var i = 0; i < values.length; i++) {
            if (this.equalsFunction(value, values[i])) {
                return values[i];
            }
        }
        values.push(value);
        return value;
    } else {
        this.data[key] = [value];
        return value;
    }
};

Set.prototype.contains = function (value) {
    return this.get(value) != null;
};

Set.prototype.get = function (value) {
    var hash = this.hashFunction(value);
    var key = "hash_" + hash;
    if (key in this.data) {
        var values = this.data[key];
        for (var i = 0; i < values.length; i++) {
            if (this.equalsFunction(value, values[i])) {
                return values[i];
            }
        }
    }
    return null;
};

Set.prototype.values = function () {
    var l = [];
    for (var key in this.data) {
        if (key.indexOf("hash_") === 0) {
            l = l.concat(this.data[key]);
        }
    }
    return l;
};

Set.prototype.toString = function () {
    return arrayToString(this.values());
};

function BitSet() {
    this.data = [];
    return this;
}

BitSet.prototype.add = function (value) {
    this.data[value] = true;
};

BitSet.prototype.or = function (set) {
    var bits = this;
    Object.keys(set.data).map(function (alt) {
        bits.add(alt);
    });
};

BitSet.prototype.remove = function (value) {
    delete this.data[value];
};

BitSet.prototype.contains = function (value) {
    return this.data[value] === true;
};

BitSet.prototype.values = function () {
    return Object.keys(this.data);
};

BitSet.prototype.minValue = function () {
    return Math.min.apply(null, this.values());
};

BitSet.prototype.hashCode = function () {
    var hash = new Hash();
    hash.update(this.values());
    return hash.finish();
};

BitSet.prototype.equals = function (other) {
    if (!(other instanceof BitSet)) {
        return false;
    }
    return this.hashCode() === other.hashCode();
};

Object.defineProperty(BitSet.prototype, "length", {
    get: function () {
        return this.values().length;
    }
});

BitSet.prototype.toString = function () {
    return "{" + this.values().join(", ") + "}";
};

function Map(hashFunction, equalsFunction) {
    this.data = {};
    this.hashFunction = hashFunction || standardHashCodeFunction;
    this.equalsFunction = equalsFunction || standardEqualsFunction;
    return this;
}

Object.defineProperty(Map.prototype, "length", {
    get: function () {
        var l = 0;
        for (var hashKey in this.data) {
            if (hashKey.indexOf("hash_") === 0) {
                l = l + this.data[hashKey].length;
            }
        }
        return l;
    }
});

Map.prototype.put = function (key, value) {
    var hashKey = "hash_" + this.hashFunction(key);
    if (hashKey in this.data) {
        var entries = this.data[hashKey];
        for (var i = 0; i < entries.length; i++) {
            var entry = entries[i];
            if (this.equalsFunction(key, entry.key)) {
                var oldValue = entry.value;
                entry.value = value;
                return oldValue;
            }
        }
        entries.push({key:key, value:value});
        return value;
    } else {
        this.data[hashKey] = [{key:key, value:value}];
        return value;
    }
};

Map.prototype.containsKey = function (key) {
    var hashKey = "hash_" + this.hashFunction(key);
    if(hashKey in this.data) {
        var entries = this.data[hashKey];
        for (var i = 0; i < entries.length; i++) {
            var entry = entries[i];
            if (this.equalsFunction(key, entry.key))
                return true;
        }
    }
    return false;
};

Map.prototype.get = function (key) {
    var hashKey = "hash_" + this.hashFunction(key);
    if(hashKey in this.data) {
        var entries = this.data[hashKey];
        for (var i = 0; i < entries.length; i++) {
            var entry = entries[i];
            if (this.equalsFunction(key, entry.key))
                return entry.value;
        }
    }
    return null;
};

Map.prototype.entries = function () {
    var l = [];
    for (var key in this.data) {
        if (key.indexOf("hash_") === 0) {
            l = l.concat(this.data[key]);
        }
    }
    return l;
};


Map.prototype.getKeys = function () {
    return this.entries().map(function(e) {
        return e.key;
    });
};


Map.prototype.getValues = function () {
    return this.entries().map(function(e) {
            return e.value;
    });
};


Map.prototype.toString = function () {
    var ss = this.entries().map(function(entry) {
        return '{' + entry.key + ':' + entry.value + '}';
    });
    return '[' + ss.join(", ") + ']';
};


function AltDict() {
    this.data = {};
    return this;
}


AltDict.prototype.get = function (key) {
    key = "k-" + key;
    if (key in this.data) {
        return this.data[key];
    } else {
        return null;
    }
};

AltDict.prototype.put = function (key, value) {
    key = "k-" + key;
    this.data[key] = value;
};

AltDict.prototype.values = function () {
    var data = this.data;
    var keys = Object.keys(this.data);
    return keys.map(function (key) {
        return data[key];
    });
};

function DoubleDict() {
    return this;
}

function Hash() {
    this.count = 0;
    this.hash = 0;
    return this;
}

Hash.prototype.update = function () {
    for(var i=0;i<arguments.length;i++) {
        var value = arguments[i];
        if (value == null)
            continue;
        if(Array.isArray(value))
            this.update.apply(value);
        else {
            var k = 0;
            switch (typeof(value)) {
                case 'undefined':
                case 'function':
                    continue;
                case 'number':
                case 'boolean':
                    k = value;
                    break;
                case 'string':
                    k = value.hashCode();
                    break;
                default:
                    value.updateHashCode(this);
                    continue;
            }
            k = k * 0xCC9E2D51;
            k = (k << 15) | (k >>> (32 - 15));
            k = k * 0x1B873593;
            this.count = this.count + 1;
            var hash = this.hash ^ k;
            hash = (hash << 13) | (hash >>> (32 - 13));
            hash = hash * 5 + 0xE6546B64;
            this.hash = hash;
        }
    }
}

Hash.prototype.finish = function () {
    var hash = this.hash ^ (this.count * 4);
    hash = hash ^ (hash >>> 16);
    hash = hash * 0x85EBCA6B;
    hash = hash ^ (hash >>> 13);
    hash = hash * 0xC2B2AE35;
    hash = hash ^ (hash >>> 16);
    return hash;
}

function hashStuff() {
    var hash = new Hash();
    hash.update.apply(arguments);
    return hash.finish();
}

DoubleDict.prototype.get = function (a, b) {
    var d = this[a] || null;
    return d === null ? null : (d[b] || null);
};

DoubleDict.prototype.set = function (a, b, o) {
    var d = this[a] || null;
    if (d === null) {
        d = {};
        this[a] = d;
    }
    d[b] = o;
};


function escapeWhitespace(s, escapeSpaces) {
    s = s.replace("\t", "\\t");
    s = s.replace("\n", "\\n");
    s = s.replace("\r", "\\r");
    if (escapeSpaces) {
        s = s.replace(" ", "\u00B7");
    }
    return s;
}

function titleCase(str) {
    return str.replace(/\w\S*/g, function (txt) {
        return txt.charAt(0).toUpperCase() + txt.substr(1);
    });
};

function equalArrays(a, b)
{
    if (!Array.isArray(a) || !Array.isArray(b))
        return false;
    if (a == b)
        return true;
    if (a.length != b.length)
        return false;
    for (var i = 0; i < a.length; i++) {
        if (a[i] == b[i])
            continue;
        if (!a[i].equals(b[i]))
            return false;
    }
    return true;
};

exports.Hash = Hash;
exports.Set = Set;
exports.Map = Map;
exports.BitSet = BitSet;
exports.AltDict = AltDict;
exports.DoubleDict = DoubleDict;
exports.hashStuff = hashStuff;
exports.escapeWhitespace = escapeWhitespace;
exports.arrayToString = arrayToString;
exports.titleCase = titleCase;
exports.equalArrays = equalArrays;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SYMBOLIC_CONTEXTS = exports.COMPLETION_CANDIDATES = exports.SYMBOLIC_NAME_CONTEXT = exports.QUERY_CONTEXT = exports.ATOM_CONTEXT = exports.STRING_LITERAL_CONTEXT = exports.MAP_LITERAL_ENTRY = exports.PROPERTIES_CONTEXT = exports.MAP_LITERAL_CONTEXT = exports.PROPERTY_LOOKUP_CONTEXT = exports.RELATIONSHIP_PATTERN_CONTEXT = exports.RELATIONSHIP_TYPES_CONTEXT = exports.RELATIONSHIP_TYPE_OPTIONAL_COLON_CONTEXT = exports.RELATIONSHIP_TYPE_CONTEXT = exports.NODE_LABELS_CONTEXT = exports.NODE_LABEL_CONTEXT = exports.NODE_PATTERN_CONTEXT = exports.PATTERN_ELEMENT_CONTEXT = exports.EXPRESSION_CONTEXT = exports.CALL_CONTEXT = exports.EXISTS_FUNCTION_NAME_CONTEXT = exports.FILTER_FUNCTION_NAME_CONTEXT = exports.ALL_SHORTEST_PATH_FUNCTION_NAME_CONTEXT = exports.SHORTEST_PATH_FUNCTION_NAME_CONTEXT = exports.REDUCE_FUNCTION_NAME_CONTEXT = exports.EXTRACT_FUNCTION_NAME_CONTEXT = exports.NONE_FUNCTION_NAME_CONTEXT = exports.SINGLE_FUNCTION_NAME_CONTEXT = exports.ANY_FUNCTION_NAME_CONTEXT = exports.ALL_FUNCTION_NAME_CONTEXT = exports.PROCEDURE_RESULTS_CONTEXT = exports.PROCEDURE_OUTPUT_CONTEXT = exports.CONSOLE_COMMAND_PATH_CONTEXT = exports.CONSOLE_COMMAND_SUBCOMMAND_CONTEXT = exports.CONSOLE_COMMAND_PARAMETER_CONTEXT = exports.CONSOLE_COMMAND_PARAMETERS_CONTEXT = exports.CONSOLE_COMMAND_CONTEXT = exports.CONSOLE_COMMAND_NAME_CONTEXT = exports.PROCEDURE_NAME_CONTEXT = exports.FUNCTION_NAME_CONTEXT = exports.PARAMETER_CONTEXT = exports.PARAMETER_NAME_CONTEXT = exports.PROPERTY_KEY_NAME_CONTEXT = exports.RELATIONSHIP_TYPE_NAME_CONTEXT = exports.LABEL_NAME_CONTEXT = exports.VARIABLE_CONTEXT = undefined;

var _CypherParser = __webpack_require__(27);

var VARIABLE_CONTEXT = exports.VARIABLE_CONTEXT = _CypherParser.CypherParser.VariableContext.prototype.constructor.name; /*
                                                                                                                          * Copyright (c) 2002-2017 "Neo Technology,"
                                                                                                                          * Network Engine for Objects in Lund AB [http://neotechnology.com]
                                                                                                                          *
                                                                                                                          * This file is part of Neo4j.
                                                                                                                          *
                                                                                                                          * Neo4j is free software: you can redistribute it and/or modify
                                                                                                                          * it under the terms of the GNU General Public License as published by
                                                                                                                          * the Free Software Foundation, either version 3 of the License, or
                                                                                                                          * (at your option) any later version.
                                                                                                                          *
                                                                                                                          * This program is distributed in the hope that it will be useful,
                                                                                                                          * but WITHOUT ANY WARRANTY; without even the implied warranty of
                                                                                                                          * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                                                                                                          * GNU General Public License for more details.
                                                                                                                          *
                                                                                                                          * You should have received a copy of the GNU General Public License
                                                                                                                          * along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                                                                                                          */

/* eslint-disable max-len */
var LABEL_NAME_CONTEXT = exports.LABEL_NAME_CONTEXT = _CypherParser.CypherParser.LabelNameContext.prototype.constructor.name;
var RELATIONSHIP_TYPE_NAME_CONTEXT = exports.RELATIONSHIP_TYPE_NAME_CONTEXT = _CypherParser.CypherParser.RelTypeNameContext.prototype.constructor.name;
var PROPERTY_KEY_NAME_CONTEXT = exports.PROPERTY_KEY_NAME_CONTEXT = _CypherParser.CypherParser.PropertyKeyNameContext.prototype.constructor.name;
var PARAMETER_NAME_CONTEXT = exports.PARAMETER_NAME_CONTEXT = _CypherParser.CypherParser.ParameterNameContext.prototype.constructor.name;
var PARAMETER_CONTEXT = exports.PARAMETER_CONTEXT = _CypherParser.CypherParser.ParameterContext.prototype.constructor.name;
var FUNCTION_NAME_CONTEXT = exports.FUNCTION_NAME_CONTEXT = _CypherParser.CypherParser.FunctionInvocationBodyContext.prototype.constructor.name;
var PROCEDURE_NAME_CONTEXT = exports.PROCEDURE_NAME_CONTEXT = _CypherParser.CypherParser.ProcedureInvocationBodyContext.prototype.constructor.name;
var CONSOLE_COMMAND_NAME_CONTEXT = exports.CONSOLE_COMMAND_NAME_CONTEXT = _CypherParser.CypherParser.CypherConsoleCommandNameContext.prototype.constructor.name;
var CONSOLE_COMMAND_CONTEXT = exports.CONSOLE_COMMAND_CONTEXT = _CypherParser.CypherParser.CypherConsoleCommandContext.prototype.constructor.name;
var CONSOLE_COMMAND_PARAMETERS_CONTEXT = exports.CONSOLE_COMMAND_PARAMETERS_CONTEXT = _CypherParser.CypherParser.CypherConsoleCommandParametersContext.prototype.constructor.name;
var CONSOLE_COMMAND_PARAMETER_CONTEXT = exports.CONSOLE_COMMAND_PARAMETER_CONTEXT = _CypherParser.CypherParser.CypherConsoleCommandParameterContext.prototype.constructor.name;
var CONSOLE_COMMAND_SUBCOMMAND_CONTEXT = exports.CONSOLE_COMMAND_SUBCOMMAND_CONTEXT = _CypherParser.CypherParser.SubCommandContext.prototype.constructor.name;
var CONSOLE_COMMAND_PATH_CONTEXT = exports.CONSOLE_COMMAND_PATH_CONTEXT = _CypherParser.CypherParser.CommandPathContext.prototype.constructor.name;
var PROCEDURE_OUTPUT_CONTEXT = exports.PROCEDURE_OUTPUT_CONTEXT = _CypherParser.CypherParser.ProcedureOutputContext.prototype.constructor.name;
var PROCEDURE_RESULTS_CONTEXT = exports.PROCEDURE_RESULTS_CONTEXT = _CypherParser.CypherParser.ProcedureResultsContext.prototype.constructor.name;

var ALL_FUNCTION_NAME_CONTEXT = exports.ALL_FUNCTION_NAME_CONTEXT = _CypherParser.CypherParser.AllFunctionNameContext.prototype.constructor.name;
var ANY_FUNCTION_NAME_CONTEXT = exports.ANY_FUNCTION_NAME_CONTEXT = _CypherParser.CypherParser.AnyFunctionNameContext.prototype.constructor.name;
var SINGLE_FUNCTION_NAME_CONTEXT = exports.SINGLE_FUNCTION_NAME_CONTEXT = _CypherParser.CypherParser.SingleFunctionNameContext.prototype.constructor.name;
var NONE_FUNCTION_NAME_CONTEXT = exports.NONE_FUNCTION_NAME_CONTEXT = _CypherParser.CypherParser.NoneFunctionNameContext.prototype.constructor.name;
var EXTRACT_FUNCTION_NAME_CONTEXT = exports.EXTRACT_FUNCTION_NAME_CONTEXT = _CypherParser.CypherParser.ExtractFunctionNameContext.prototype.constructor.name;
var REDUCE_FUNCTION_NAME_CONTEXT = exports.REDUCE_FUNCTION_NAME_CONTEXT = _CypherParser.CypherParser.ReduceFunctionNameContext.prototype.constructor.name;
var SHORTEST_PATH_FUNCTION_NAME_CONTEXT = exports.SHORTEST_PATH_FUNCTION_NAME_CONTEXT = _CypherParser.CypherParser.ShortestPathFunctionNameContext.prototype.constructor.name;
var ALL_SHORTEST_PATH_FUNCTION_NAME_CONTEXT = exports.ALL_SHORTEST_PATH_FUNCTION_NAME_CONTEXT = _CypherParser.CypherParser.AllShortestPathFunctionNameContext.prototype.constructor.name;
var FILTER_FUNCTION_NAME_CONTEXT = exports.FILTER_FUNCTION_NAME_CONTEXT = _CypherParser.CypherParser.FilterFunctionNameContext.prototype.constructor.name;
var EXISTS_FUNCTION_NAME_CONTEXT = exports.EXISTS_FUNCTION_NAME_CONTEXT = _CypherParser.CypherParser.ExistsFunctionNameContext.prototype.constructor.name;

var CALL_CONTEXT = exports.CALL_CONTEXT = _CypherParser.CypherParser.CallContext.prototype.constructor.name;
var EXPRESSION_CONTEXT = exports.EXPRESSION_CONTEXT = _CypherParser.CypherParser.ExpressionContext.prototype.constructor.name;
var PATTERN_ELEMENT_CONTEXT = exports.PATTERN_ELEMENT_CONTEXT = _CypherParser.CypherParser.PatternElementContext.prototype.constructor.name;
var NODE_PATTERN_CONTEXT = exports.NODE_PATTERN_CONTEXT = _CypherParser.CypherParser.NodePatternContext.prototype.constructor.name;
var NODE_LABEL_CONTEXT = exports.NODE_LABEL_CONTEXT = _CypherParser.CypherParser.NodeLabelContext.prototype.constructor.name;
var NODE_LABELS_CONTEXT = exports.NODE_LABELS_CONTEXT = _CypherParser.CypherParser.NodeLabelsContext.prototype.constructor.name;
var RELATIONSHIP_TYPE_CONTEXT = exports.RELATIONSHIP_TYPE_CONTEXT = _CypherParser.CypherParser.RelationshipTypeContext.prototype.constructor.name;
var RELATIONSHIP_TYPE_OPTIONAL_COLON_CONTEXT = exports.RELATIONSHIP_TYPE_OPTIONAL_COLON_CONTEXT = _CypherParser.CypherParser.RelationshipTypeOptionalColonContext.prototype.constructor.name;
var RELATIONSHIP_TYPES_CONTEXT = exports.RELATIONSHIP_TYPES_CONTEXT = _CypherParser.CypherParser.RelationshipTypesContext.prototype.constructor.name;
var RELATIONSHIP_PATTERN_CONTEXT = exports.RELATIONSHIP_PATTERN_CONTEXT = _CypherParser.CypherParser.RelationshipPatternContext.prototype.constructor.name;
var PROPERTY_LOOKUP_CONTEXT = exports.PROPERTY_LOOKUP_CONTEXT = _CypherParser.CypherParser.PropertyLookupContext.prototype.constructor.name;
var MAP_LITERAL_CONTEXT = exports.MAP_LITERAL_CONTEXT = _CypherParser.CypherParser.MapLiteralContext.prototype.constructor.name;
var PROPERTIES_CONTEXT = exports.PROPERTIES_CONTEXT = _CypherParser.CypherParser.PropertiesContext.prototype.constructor.name;
var MAP_LITERAL_ENTRY = exports.MAP_LITERAL_ENTRY = _CypherParser.CypherParser.LiteralEntryContext.prototype.constructor.name;
var STRING_LITERAL_CONTEXT = exports.STRING_LITERAL_CONTEXT = _CypherParser.CypherParser.StringLiteralContext.prototype.constructor.name;
var ATOM_CONTEXT = exports.ATOM_CONTEXT = _CypherParser.CypherParser.AtomContext.prototype.constructor.name;

var QUERY_CONTEXT = exports.QUERY_CONTEXT = _CypherParser.CypherParser.CypherQueryContext.prototype.constructor.name;
var SYMBOLIC_NAME_CONTEXT = exports.SYMBOLIC_NAME_CONTEXT = _CypherParser.CypherParser.SymbolicNameContext.prototype.constructor.name;

var COMPLETION_CANDIDATES = exports.COMPLETION_CANDIDATES = [STRING_LITERAL_CONTEXT, VARIABLE_CONTEXT, PROCEDURE_NAME_CONTEXT, FUNCTION_NAME_CONTEXT, CONSOLE_COMMAND_NAME_CONTEXT, NODE_LABEL_CONTEXT, RELATIONSHIP_TYPE_CONTEXT, RELATIONSHIP_TYPE_OPTIONAL_COLON_CONTEXT];

var SYMBOLIC_CONTEXTS = exports.SYMBOLIC_CONTEXTS = [VARIABLE_CONTEXT, LABEL_NAME_CONTEXT, RELATIONSHIP_TYPE_NAME_CONTEXT, PROPERTY_KEY_NAME_CONTEXT, PARAMETER_NAME_CONTEXT];

/***/ }),
/* 2 */
/***/ (function(module, exports) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

// A token has properties: text, type, line, character position in the line
// (so we can ignore tabs), token channel, index, and source from which
// we obtained this token.

function Token() {
	this.source = null;
	this.type = null; // token type of the token
	this.channel = null; // The parser ignores everything not on DEFAULT_CHANNEL
	this.start = null; // optional; return -1 if not implemented.
	this.stop = null; // optional; return -1 if not implemented.
	this.tokenIndex = null; // from 0..n-1 of the token object in the input stream
	this.line = null; // line=1..n of the 1st character
	this.column = null; // beginning of the line at which it occurs, 0..n-1
	this._text = null; // text of the token.
	return this;
}

Token.INVALID_TYPE = 0;

// During lookahead operations, this "token" signifies we hit rule end ATN state
// and did not follow it despite needing to.
Token.EPSILON = -2;

Token.MIN_USER_TOKEN_TYPE = 1;

Token.EOF = -1;

// All tokens go to the parser (unless skip() is called in that rule)
// on a particular "channel". The parser tunes to a particular channel
// so that whitespace etc... can go to the parser on a "hidden" channel.

Token.DEFAULT_CHANNEL = 0;

// Anything on different channel than DEFAULT_CHANNEL is not parsed
// by parser.

Token.HIDDEN_CHANNEL = 1;

// Explicitly set the text for this token. If {code text} is not
// {@code null}, then {@link //getText} will return this value rather than
// extracting the text from the input.
//
// @param text The explicit text of the token, or {@code null} if the text
// should be obtained from the input along with the start and stop indexes
// of the token.

Object.defineProperty(Token.prototype, "text", {
	get : function() {
		return this._text;
	},
	set : function(text) {
		this._text = text;
	}
});

Token.prototype.getTokenSource = function() {
	return this.source[0];
};

Token.prototype.getInputStream = function() {
	return this.source[1];
};

function CommonToken(source, type, channel, start, stop) {
	Token.call(this);
	this.source = source !== undefined ? source : CommonToken.EMPTY_SOURCE;
	this.type = type !== undefined ? type : null;
	this.channel = channel !== undefined ? channel : Token.DEFAULT_CHANNEL;
	this.start = start !== undefined ? start : -1;
	this.stop = stop !== undefined ? stop : -1;
	this.tokenIndex = -1;
	if (this.source[0] !== null) {
		this.line = source[0].line;
		this.column = source[0].column;
	} else {
		this.column = -1;
	}
	return this;
}

CommonToken.prototype = Object.create(Token.prototype);
CommonToken.prototype.constructor = CommonToken;

// An empty {@link Pair} which is used as the default value of
// {@link //source} for tokens that do not have a source.
CommonToken.EMPTY_SOURCE = [ null, null ];

// Constructs a new {@link CommonToken} as a copy of another {@link Token}.
//
// <p>
// If {@code oldToken} is also a {@link CommonToken} instance, the newly
// constructed token will share a reference to the {@link //text} field and
// the {@link Pair} stored in {@link //source}. Otherwise, {@link //text} will
// be assigned the result of calling {@link //getText}, and {@link //source}
// will be constructed from the result of {@link Token//getTokenSource} and
// {@link Token//getInputStream}.</p>
//
// @param oldToken The token to copy.
//
CommonToken.prototype.clone = function() {
	var t = new CommonToken(this.source, this.type, this.channel, this.start,
			this.stop);
	t.tokenIndex = this.tokenIndex;
	t.line = this.line;
	t.column = this.column;
	t.text = this.text;
	return t;
};

Object.defineProperty(CommonToken.prototype, "text", {
	get : function() {
		if (this._text !== null) {
			return this._text;
		}
		var input = this.getInputStream();
		if (input === null) {
			return null;
		}
		var n = input.size;
		if (this.start < n && this.stop < n) {
			return input.getText(this.start, this.stop);
		} else {
			return "<EOF>";
		}
	},
	set : function(text) {
		this._text = text;
	}
});

CommonToken.prototype.toString = function() {
	var txt = this.text;
	if (txt !== null) {
		txt = txt.replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t");
	} else {
		txt = "<no text>";
	}
	return "[@" + this.tokenIndex + "," + this.start + ":" + this.stop + "='" +
			txt + "',<" + this.type + ">" +
			(this.channel > 0 ? ",channel=" + this.channel : "") + "," +
			this.line + ":" + this.column + "]";
};

exports.Token = Token;
exports.CommonToken = CommonToken;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
/*
 * Copyright (c) 2002-2017 "Neo Technology,"
 * Network Engine for Objects in Lund AB [http://neotechnology.com]
 *
 * This file is part of Neo4j.
 *
 * Neo4j is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var KEYWORD = exports.KEYWORD = 'keyword';
var LABEL = exports.LABEL = 'label';
var VARIABLE = exports.VARIABLE = 'variable';
var PARAMETER = exports.PARAMETER = 'parameter';
var PROPERTY_KEY = exports.PROPERTY_KEY = 'propertyKey';
var RELATIONSHIP_TYPE = exports.RELATIONSHIP_TYPE = 'relationshipType';
var FUNCTION_NAME = exports.FUNCTION_NAME = 'function';
var PROCEDURE_NAME = exports.PROCEDURE_NAME = 'procedure';
var CONSOLE_COMMAND_NAME = exports.CONSOLE_COMMAND_NAME = 'consoleCommand';
var CONSOLE_COMMAND_SUBCOMMAND = exports.CONSOLE_COMMAND_SUBCOMMAND = 'consoleCommandSubcommand';
var PROCEDURE_OUTPUT = exports.PROCEDURE_OUTPUT = 'procedureOutput';

// Return no autocompletion
var NOOP = exports.NOOP = 'noop';

// Default
var ALL = exports.ALL = [VARIABLE, PARAMETER, PROPERTY_KEY, FUNCTION_NAME, KEYWORD].map(function (type) {
  return { type: type };
});

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

/*jslint smarttabs:true */

var Token = __webpack_require__(2).Token;

/* stop is not included! */
function Interval(start, stop) {
	this.start = start;
	this.stop = stop;
	return this;
}

Interval.prototype.contains = function(item) {
	return item >= this.start && item < this.stop;
};

Interval.prototype.toString = function() {
	if(this.start===this.stop-1) {
		return this.start.toString();
	} else {
		return this.start.toString() + ".." + (this.stop-1).toString();
	}
};


Object.defineProperty(Interval.prototype, "length", {
	get : function() {
		return this.stop - this.start;
	}
});

function IntervalSet() {
	this.intervals = null;
	this.readOnly = false;
}

IntervalSet.prototype.first = function(v) {
	if (this.intervals === null || this.intervals.length===0) {
		return Token.INVALID_TYPE;
	} else {
		return this.intervals[0].start;
	}
};

IntervalSet.prototype.addOne = function(v) {
	this.addInterval(new Interval(v, v + 1));
};

IntervalSet.prototype.addRange = function(l, h) {
	this.addInterval(new Interval(l, h + 1));
};

IntervalSet.prototype.addInterval = function(v) {
	if (this.intervals === null) {
		this.intervals = [];
		this.intervals.push(v);
	} else {
		// find insert pos
		for (var k = 0; k < this.intervals.length; k++) {
			var i = this.intervals[k];
			// distinct range -> insert
			if (v.stop < i.start) {
				this.intervals.splice(k, 0, v);
				return;
			}
			// contiguous range -> adjust
			else if (v.stop === i.start) {
				this.intervals[k].start = v.start;
				return;
			}
			// overlapping range -> adjust and reduce
			else if (v.start <= i.stop) {
				this.intervals[k] = new Interval(Math.min(i.start, v.start), Math.max(i.stop, v.stop));
				this.reduce(k);
				return;
			}
		}
		// greater than any existing
		this.intervals.push(v);
	}
};

IntervalSet.prototype.addSet = function(other) {
	if (other.intervals !== null) {
		for (var k = 0; k < other.intervals.length; k++) {
			var i = other.intervals[k];
			this.addInterval(new Interval(i.start, i.stop));
		}
	}
	return this;
};

IntervalSet.prototype.reduce = function(k) {
	// only need to reduce if k is not the last
	if (k < this.intervalslength - 1) {
		var l = this.intervals[k];
		var r = this.intervals[k + 1];
		// if r contained in l
		if (l.stop >= r.stop) {
			this.intervals.pop(k + 1);
			this.reduce(k);
		} else if (l.stop >= r.start) {
			this.intervals[k] = new Interval(l.start, r.stop);
			this.intervals.pop(k + 1);
		}
	}
};

IntervalSet.prototype.complement = function(start, stop) {
    var result = new IntervalSet();
    result.addInterval(new Interval(start,stop+1));
    for(var i=0; i<this.intervals.length; i++) {
        result.removeRange(this.intervals[i]);
    }
    return result;
};

IntervalSet.prototype.contains = function(item) {
	if (this.intervals === null) {
		return false;
	} else {
		for (var k = 0; k < this.intervals.length; k++) {
			if(this.intervals[k].contains(item)) {
				return true;
			}
		}
		return false;
	}
};

Object.defineProperty(IntervalSet.prototype, "length", {
	get : function() {
		var len = 0;
		this.intervals.map(function(i) {len += i.length;});
		return len;
	}
});

IntervalSet.prototype.removeRange = function(v) {
    if(v.start===v.stop-1) {
        this.removeOne(v.start);
    } else if (this.intervals!==null) {
        var k = 0;
        for(var n=0; n<this.intervals.length; n++) {
            var i = this.intervals[k];
            // intervals are ordered
            if (v.stop<=i.start) {
                return;
            }
            // check for including range, split it
            else if(v.start>i.start && v.stop<i.stop) {
                this.intervals[k] = new Interval(i.start, v.start);
                var x = new Interval(v.stop, i.stop);
                this.intervals.splice(k, 0, x);
                return;
            }
            // check for included range, remove it
            else if(v.start<=i.start && v.stop>=i.stop) {
                this.intervals.splice(k, 1);
                k = k - 1; // need another pass
            }
            // check for lower boundary
            else if(v.start<i.stop) {
                this.intervals[k] = new Interval(i.start, v.start);
            }
            // check for upper boundary
            else if(v.stop<i.stop) {
                this.intervals[k] = new Interval(v.stop, i.stop);
            }
            k += 1;
        }
    }
};

IntervalSet.prototype.removeOne = function(v) {
	if (this.intervals !== null) {
		for (var k = 0; k < this.intervals.length; k++) {
			var i = this.intervals[k];
			// intervals is ordered
			if (v < i.start) {
				return;
			}
			// check for single value range
			else if (v === i.start && v === i.stop - 1) {
				this.intervals.splice(k, 1);
				return;
			}
			// check for lower boundary
			else if (v === i.start) {
				this.intervals[k] = new Interval(i.start + 1, i.stop);
				return;
			}
			// check for upper boundary
			else if (v === i.stop - 1) {
				this.intervals[k] = new Interval(i.start, i.stop - 1);
				return;
			}
			// split existing range
			else if (v < i.stop - 1) {
				var x = new Interval(i.start, v);
				i.start = v + 1;
				this.intervals.splice(k, 0, x);
				return;
			}
		}
	}
};

IntervalSet.prototype.toString = function(literalNames, symbolicNames, elemsAreChar) {
	literalNames = literalNames || null;
	symbolicNames = symbolicNames || null;
	elemsAreChar = elemsAreChar || false;
	if (this.intervals === null) {
		return "{}";
	} else if(literalNames!==null || symbolicNames!==null) {
		return this.toTokenString(literalNames, symbolicNames);
	} else if(elemsAreChar) {
		return this.toCharString();
	} else {
		return this.toIndexString();
	}
};

IntervalSet.prototype.toCharString = function() {
	var names = [];
	for (var i = 0; i < this.intervals.length; i++) {
		var v = this.intervals[i];
		if(v.stop===v.start+1) {
			if ( v.start===Token.EOF ) {
				names.push("<EOF>");
			} else {
				names.push("'" + String.fromCharCode(v.start) + "'");
			}
		} else {
			names.push("'" + String.fromCharCode(v.start) + "'..'" + String.fromCharCode(v.stop-1) + "'");
		}
	}
	if (names.length > 1) {
		return "{" + names.join(", ") + "}";
	} else {
		return names[0];
	}
};


IntervalSet.prototype.toIndexString = function() {
	var names = [];
	for (var i = 0; i < this.intervals.length; i++) {
		var v = this.intervals[i];
		if(v.stop===v.start+1) {
			if ( v.start===Token.EOF ) {
				names.push("<EOF>");
			} else {
				names.push(v.start.toString());
			}
		} else {
			names.push(v.start.toString() + ".." + (v.stop-1).toString());
		}
	}
	if (names.length > 1) {
		return "{" + names.join(", ") + "}";
	} else {
		return names[0];
	}
};


IntervalSet.prototype.toTokenString = function(literalNames, symbolicNames) {
	var names = [];
	for (var i = 0; i < this.intervals.length; i++) {
		var v = this.intervals[i];
		for (var j = v.start; j < v.stop; j++) {
			names.push(this.elementName(literalNames, symbolicNames, j));
		}
	}
	if (names.length > 1) {
		return "{" + names.join(", ") + "}";
	} else {
		return names[0];
	}
};

IntervalSet.prototype.elementName = function(literalNames, symbolicNames, a) {
	if (a === Token.EOF) {
		return "<EOF>";
	} else if (a === Token.EPSILON) {
		return "<EPSILON>";
	} else {
		return literalNames[a] || symbolicNames[a];
	}
};

exports.Interval = Interval;
exports.IntervalSet = IntervalSet;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 * Copyright (c) 2002-2017 "Neo Technology,"
 * Network Engine for Objects in Lund AB [http://neotechnology.com]
 *
 * This file is part of Neo4j.
 *
 * Neo4j is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var TreeUtils = exports.TreeUtils = function () {
  function TreeUtils() {
    _classCallCheck(this, TreeUtils);
  }

  _createClass(TreeUtils, null, [{
    key: "findParent",
    value: function findParent(pt, type) {
      var el = pt;
      while (true) {
        // eslint-disable-line no-constant-condition
        if (el == null) {
          return null;
        }
        if (el.constructor.name === type) {
          return el;
        }
        el = el.parentCtx;
      }
    }
  }, {
    key: "findAnyParent",
    value: function findAnyParent(pt) {
      var types = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      var el = pt;
      while (true) {
        // eslint-disable-line no-constant-condition
        if (el == null) {
          return null;
        }
        if (types.indexOf(el.constructor.name) > -1) {
          return el;
        }
        el = el.parentCtx;
      }
    }
  }, {
    key: "findChild",
    value: function findChild(element, type) {
      if (element == null) {
        return null;
      }

      if (element.constructor.name === type) {
        return element;
      }

      if (element.children != null) {
        for (var i = 0; i < element.children.length; i += 1) {
          var e = element.children[i];
          var result = TreeUtils.findChild(e, type);
          if (result != null) {
            return result;
          }
        }
      }

      return null;
    }
  }, {
    key: "getPosition",
    value: function getPosition(el) {
      if (el != null) {
        var start = el.start,
            stop = el.stop,
            symbol = el.symbol;

        if (symbol != null) {
          return {
            start: symbol.start,
            stop: symbol.stop
          };
        } else if (start != null && stop != null) {
          return {
            start: start.start,
            stop: stop.stop
          };
        }
      }

      return null;
    }
  }, {
    key: "hasErrorNode",
    value: function hasErrorNode(element) {
      if (element == null) {
        return false;
      }

      if (element.isErrorNode && element.isErrorNode()) {
        return true;
      }

      if (element.children != null) {
        for (var i = 0; i < element.children.length; i += 1) {
          var e = element.children[i];
          var childHasErrorNode = TreeUtils.hasErrorNode(e);
          if (childHasErrorNode) {
            return true;
          }
        }
      }

      return false;
    }
  }]);

  return TreeUtils;
}();

/***/ }),
/* 6 */
/***/ (function(module, exports) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

// The following images show the relation of states and
// {@link ATNState//transitions} for various grammar constructs.
//
// <ul>
//
// <li>Solid edges marked with an &//0949; indicate a required
// {@link EpsilonTransition}.</li>
//
// <li>Dashed edges indicate locations where any transition derived from
// {@link Transition} might appear.</li>
//
// <li>Dashed nodes are place holders for either a sequence of linked
// {@link BasicState} states or the inclusion of a block representing a nested
// construct in one of the forms below.</li>
//
// <li>Nodes showing multiple outgoing alternatives with a {@code ...} support
// any number of alternatives (one or more). Nodes without the {@code ...} only
// support the exact number of alternatives shown in the diagram.</li>
//
// </ul>
//
// <h2>Basic Blocks</h2>
//
// <h3>Rule</h3>
//
// <embed src="images/Rule.svg" type="image/svg+xml"/>
//
// <h3>Block of 1 or more alternatives</h3>
//
// <embed src="images/Block.svg" type="image/svg+xml"/>
//
// <h2>Greedy Loops</h2>
//
// <h3>Greedy Closure: {@code (...)*}</h3>
//
// <embed src="images/ClosureGreedy.svg" type="image/svg+xml"/>
//
// <h3>Greedy Positive Closure: {@code (...)+}</h3>
//
// <embed src="images/PositiveClosureGreedy.svg" type="image/svg+xml"/>
//
// <h3>Greedy Optional: {@code (...)?}</h3>
//
// <embed src="images/OptionalGreedy.svg" type="image/svg+xml"/>
//
// <h2>Non-Greedy Loops</h2>
//
// <h3>Non-Greedy Closure: {@code (...)*?}</h3>
//
// <embed src="images/ClosureNonGreedy.svg" type="image/svg+xml"/>
//
// <h3>Non-Greedy Positive Closure: {@code (...)+?}</h3>
//
// <embed src="images/PositiveClosureNonGreedy.svg" type="image/svg+xml"/>
//
// <h3>Non-Greedy Optional: {@code (...)??}</h3>
//
// <embed src="images/OptionalNonGreedy.svg" type="image/svg+xml"/>
//

var INITIAL_NUM_TRANSITIONS = 4;

function ATNState() {
    // Which ATN are we in?
    this.atn = null;
    this.stateNumber = ATNState.INVALID_STATE_NUMBER;
    this.stateType = null;
    this.ruleIndex = 0; // at runtime, we don't have Rule objects
    this.epsilonOnlyTransitions = false;
    // Track the transitions emanating from this ATN state.
    this.transitions = [];
    // Used to cache lookahead during parsing, not used during construction
    this.nextTokenWithinRule = null;
    return this;
}

// constants for serialization
ATNState.INVALID_TYPE = 0;
ATNState.BASIC = 1;
ATNState.RULE_START = 2;
ATNState.BLOCK_START = 3;
ATNState.PLUS_BLOCK_START = 4;
ATNState.STAR_BLOCK_START = 5;
ATNState.TOKEN_START = 6;
ATNState.RULE_STOP = 7;
ATNState.BLOCK_END = 8;
ATNState.STAR_LOOP_BACK = 9;
ATNState.STAR_LOOP_ENTRY = 10;
ATNState.PLUS_LOOP_BACK = 11;
ATNState.LOOP_END = 12;

ATNState.serializationNames = [
            "INVALID",
            "BASIC",
            "RULE_START",
            "BLOCK_START",
            "PLUS_BLOCK_START",
            "STAR_BLOCK_START",
            "TOKEN_START",
            "RULE_STOP",
            "BLOCK_END",
            "STAR_LOOP_BACK",
            "STAR_LOOP_ENTRY",
            "PLUS_LOOP_BACK",
            "LOOP_END" ];

ATNState.INVALID_STATE_NUMBER = -1;

ATNState.prototype.toString = function() {
	return this.stateNumber;
};

ATNState.prototype.equals = function(other) {
    if (other instanceof ATNState) {
        return this.stateNumber===other.stateNumber;
    } else {
        return false;
    }
};

ATNState.prototype.isNonGreedyExitState = function() {
    return false;
};


ATNState.prototype.addTransition = function(trans, index) {
	if(index===undefined) {
		index = -1;
	}
    if (this.transitions.length===0) {
        this.epsilonOnlyTransitions = trans.isEpsilon;
    } else if(this.epsilonOnlyTransitions !== trans.isEpsilon) {
        this.epsilonOnlyTransitions = false;
    }
    if (index===-1) {
        this.transitions.push(trans);
    } else {
        this.transitions.splice(index, 1, trans);
    }
};

function BasicState() {
	ATNState.call(this);
    this.stateType = ATNState.BASIC;
    return this;
}

BasicState.prototype = Object.create(ATNState.prototype);
BasicState.prototype.constructor = BasicState;


function DecisionState() {
	ATNState.call(this);
    this.decision = -1;
    this.nonGreedy = false;
    return this;
}

DecisionState.prototype = Object.create(ATNState.prototype);
DecisionState.prototype.constructor = DecisionState;


//  The start of a regular {@code (...)} block.
function BlockStartState() {
	DecisionState.call(this);
	this.endState = null;
	return this;
}

BlockStartState.prototype = Object.create(DecisionState.prototype);
BlockStartState.prototype.constructor = BlockStartState;


function BasicBlockStartState() {
	BlockStartState.call(this);
	this.stateType = ATNState.BLOCK_START;
	return this;
}

BasicBlockStartState.prototype = Object.create(BlockStartState.prototype);
BasicBlockStartState.prototype.constructor = BasicBlockStartState;


// Terminal node of a simple {@code (a|b|c)} block.
function BlockEndState() {
	ATNState.call(this);
	this.stateType = ATNState.BLOCK_END;
    this.startState = null;
    return this;
}

BlockEndState.prototype = Object.create(ATNState.prototype);
BlockEndState.prototype.constructor = BlockEndState;


// The last node in the ATN for a rule, unless that rule is the start symbol.
//  In that case, there is one transition to EOF. Later, we might encode
//  references to all calls to this rule to compute FOLLOW sets for
//  error handling.
//
function RuleStopState() {
	ATNState.call(this);
    this.stateType = ATNState.RULE_STOP;
    return this;
}

RuleStopState.prototype = Object.create(ATNState.prototype);
RuleStopState.prototype.constructor = RuleStopState;

function RuleStartState() {
	ATNState.call(this);
	this.stateType = ATNState.RULE_START;
	this.stopState = null;
	this.isPrecedenceRule = false;
	return this;
}

RuleStartState.prototype = Object.create(ATNState.prototype);
RuleStartState.prototype.constructor = RuleStartState;

// Decision state for {@code A+} and {@code (A|B)+}.  It has two transitions:
//  one to the loop back to start of the block and one to exit.
//
function PlusLoopbackState() {
	DecisionState.call(this);
	this.stateType = ATNState.PLUS_LOOP_BACK;
	return this;
}

PlusLoopbackState.prototype = Object.create(DecisionState.prototype);
PlusLoopbackState.prototype.constructor = PlusLoopbackState;


// Start of {@code (A|B|...)+} loop. Technically a decision state, but
//  we don't use for code generation; somebody might need it, so I'm defining
//  it for completeness. In reality, the {@link PlusLoopbackState} node is the
//  real decision-making note for {@code A+}.
//
function PlusBlockStartState() {
	BlockStartState.call(this);
	this.stateType = ATNState.PLUS_BLOCK_START;
    this.loopBackState = null;
    return this;
}

PlusBlockStartState.prototype = Object.create(BlockStartState.prototype);
PlusBlockStartState.prototype.constructor = PlusBlockStartState;

// The block that begins a closure loop.
function StarBlockStartState() {
	BlockStartState.call(this);
	this.stateType = ATNState.STAR_BLOCK_START;
	return this;
}

StarBlockStartState.prototype = Object.create(BlockStartState.prototype);
StarBlockStartState.prototype.constructor = StarBlockStartState;


function StarLoopbackState() {
	ATNState.call(this);
	this.stateType = ATNState.STAR_LOOP_BACK;
	return this;
}

StarLoopbackState.prototype = Object.create(ATNState.prototype);
StarLoopbackState.prototype.constructor = StarLoopbackState;


function StarLoopEntryState() {
	DecisionState.call(this);
	this.stateType = ATNState.STAR_LOOP_ENTRY;
    this.loopBackState = null;
    // Indicates whether this state can benefit from a precedence DFA during SLL decision making.
    this.isPrecedenceDecision = null;
    return this;
}

StarLoopEntryState.prototype = Object.create(DecisionState.prototype);
StarLoopEntryState.prototype.constructor = StarLoopEntryState;


// Mark the end of a * or + loop.
function LoopEndState() {
	ATNState.call(this);
	this.stateType = ATNState.LOOP_END;
	this.loopBackState = null;
	return this;
}

LoopEndState.prototype = Object.create(ATNState.prototype);
LoopEndState.prototype.constructor = LoopEndState;


// The Tokens rule start state linking to each lexer rule start state */
function TokensStartState() {
	DecisionState.call(this);
	this.stateType = ATNState.TOKEN_START;
	return this;
}

TokensStartState.prototype = Object.create(DecisionState.prototype);
TokensStartState.prototype.constructor = TokensStartState;

exports.ATNState = ATNState;
exports.BasicState = BasicState;
exports.DecisionState = DecisionState;
exports.BlockStartState = BlockStartState;
exports.BlockEndState = BlockEndState;
exports.LoopEndState = LoopEndState;
exports.RuleStartState = RuleStartState;
exports.RuleStopState = RuleStopState;
exports.TokensStartState = TokensStartState;
exports.PlusLoopbackState = PlusLoopbackState;
exports.StarLoopbackState = StarLoopbackState;
exports.StarLoopEntryState = StarLoopEntryState;
exports.PlusBlockStartState = PlusBlockStartState;
exports.StarBlockStartState = StarBlockStartState;
exports.BasicBlockStartState = BasicBlockStartState;


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// The basic notion of a tree has a parent, a payload, and a list of children.
//  It is the most abstract interface for all the trees used by ANTLR.
///

var Token = __webpack_require__(2).Token;
var Interval = __webpack_require__(4).Interval;
var INVALID_INTERVAL = new Interval(-1, -2);
var Utils = __webpack_require__(0);


function Tree() {
	return this;
}

function SyntaxTree() {
	Tree.call(this);
	return this;
}

SyntaxTree.prototype = Object.create(Tree.prototype);
SyntaxTree.prototype.constructor = SyntaxTree;

function ParseTree() {
	SyntaxTree.call(this);
	return this;
}

ParseTree.prototype = Object.create(SyntaxTree.prototype);
ParseTree.prototype.constructor = ParseTree;

function RuleNode() {
	ParseTree.call(this);
	return this;
}

RuleNode.prototype = Object.create(ParseTree.prototype);
RuleNode.prototype.constructor = RuleNode;

function TerminalNode() {
	ParseTree.call(this);
	return this;
}

TerminalNode.prototype = Object.create(ParseTree.prototype);
TerminalNode.prototype.constructor = TerminalNode;

function ErrorNode() {
	TerminalNode.call(this);
	return this;
}

ErrorNode.prototype = Object.create(TerminalNode.prototype);
ErrorNode.prototype.constructor = ErrorNode;

function ParseTreeVisitor() {
	return this;
}

ParseTreeVisitor.prototype.visit = function(ctx) {
 	if (Array.isArray(ctx)) {
		return ctx.map(function(child) {
            return child.accept(this);
        }, this);
	} else {
		return ctx.accept(this);
	}
};

ParseTreeVisitor.prototype.visitChildren = function(ctx) {
  return this.visit(ctx.children);
}

ParseTreeVisitor.prototype.visitTerminal = function(node) {
};

ParseTreeVisitor.prototype.visitErrorNode = function(node) {
};


function ParseTreeListener() {
	return this;
}

ParseTreeListener.prototype.visitTerminal = function(node) {
};

ParseTreeListener.prototype.visitErrorNode = function(node) {
};

ParseTreeListener.prototype.enterEveryRule = function(node) {
};

ParseTreeListener.prototype.exitEveryRule = function(node) {
};

function TerminalNodeImpl(symbol) {
	TerminalNode.call(this);
	this.parentCtx = null;
	this.symbol = symbol;
	return this;
}

TerminalNodeImpl.prototype = Object.create(TerminalNode.prototype);
TerminalNodeImpl.prototype.constructor = TerminalNodeImpl;

TerminalNodeImpl.prototype.getChild = function(i) {
	return null;
};

TerminalNodeImpl.prototype.getSymbol = function() {
	return this.symbol;
};

TerminalNodeImpl.prototype.getParent = function() {
	return this.parentCtx;
};

TerminalNodeImpl.prototype.getPayload = function() {
	return this.symbol;
};

TerminalNodeImpl.prototype.getSourceInterval = function() {
	if (this.symbol === null) {
		return INVALID_INTERVAL;
	}
	var tokenIndex = this.symbol.tokenIndex;
	return new Interval(tokenIndex, tokenIndex);
};

TerminalNodeImpl.prototype.getChildCount = function() {
	return 0;
};

TerminalNodeImpl.prototype.accept = function(visitor) {
	return visitor.visitTerminal(this);
};

TerminalNodeImpl.prototype.getText = function() {
	return this.symbol.text;
};

TerminalNodeImpl.prototype.toString = function() {
	if (this.symbol.type === Token.EOF) {
		return "<EOF>";
	} else {
		return this.symbol.text;
	}
};

// Represents a token that was consumed during resynchronization
// rather than during a valid match operation. For example,
// we will create this kind of a node during single token insertion
// and deletion as well as during "consume until error recovery set"
// upon no viable alternative exceptions.

function ErrorNodeImpl(token) {
	TerminalNodeImpl.call(this, token);
	return this;
}

ErrorNodeImpl.prototype = Object.create(TerminalNodeImpl.prototype);
ErrorNodeImpl.prototype.constructor = ErrorNodeImpl;

ErrorNodeImpl.prototype.isErrorNode = function() {
	return true;
};

ErrorNodeImpl.prototype.accept = function(visitor) {
	return visitor.visitErrorNode(this);
};

function ParseTreeWalker() {
	return this;
}

ParseTreeWalker.prototype.walk = function(listener, t) {
	var errorNode = t instanceof ErrorNode ||
			(t.isErrorNode !== undefined && t.isErrorNode());
	if (errorNode) {
		listener.visitErrorNode(t);
	} else if (t instanceof TerminalNode) {
		listener.visitTerminal(t);
	} else {
		this.enterRule(listener, t);
		for (var i = 0; i < t.getChildCount(); i++) {
			var child = t.getChild(i);
			this.walk(listener, child);
		}
		this.exitRule(listener, t);
	}
};
//
// The discovery of a rule node, involves sending two events: the generic
// {@link ParseTreeListener//enterEveryRule} and a
// {@link RuleContext}-specific event. First we trigger the generic and then
// the rule specific. We to them in reverse order upon finishing the node.
//
ParseTreeWalker.prototype.enterRule = function(listener, r) {
	var ctx = r.getRuleContext();
	listener.enterEveryRule(ctx);
	ctx.enterRule(listener);
};

ParseTreeWalker.prototype.exitRule = function(listener, r) {
	var ctx = r.getRuleContext();
	ctx.exitRule(listener);
	listener.exitEveryRule(ctx);
};

ParseTreeWalker.DEFAULT = new ParseTreeWalker();

exports.RuleNode = RuleNode;
exports.ErrorNode = ErrorNode;
exports.TerminalNode = TerminalNode;
exports.ErrorNodeImpl = ErrorNodeImpl;
exports.TerminalNodeImpl = TerminalNodeImpl;
exports.ParseTreeListener = ParseTreeListener;
exports.ParseTreeVisitor = ParseTreeVisitor;
exports.ParseTreeWalker = ParseTreeWalker;
exports.INVALID_INTERVAL = INVALID_INTERVAL;


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

// The root of the ANTLR exception hierarchy. In general, ANTLR tracks just
//  3 kinds of errors: prediction errors, failed predicate errors, and
//  mismatched input errors. In each case, the parser knows where it is
//  in the input, where it is in the ATN, the rule invocation stack,
//  and what kind of problem occurred.

var PredicateTransition = __webpack_require__(12).PredicateTransition;

function RecognitionException(params) {
	Error.call(this);
	if (!!Error.captureStackTrace) {
        Error.captureStackTrace(this, RecognitionException);
	} else {
		var stack = new Error().stack;
	}
	this.message = params.message;
    this.recognizer = params.recognizer;
    this.input = params.input;
    this.ctx = params.ctx;
    // The current {@link Token} when an error occurred. Since not all streams
    // support accessing symbols by index, we have to track the {@link Token}
    // instance itself.
    this.offendingToken = null;
    // Get the ATN state number the parser was in at the time the error
    // occurred. For {@link NoViableAltException} and
    // {@link LexerNoViableAltException} exceptions, this is the
    // {@link DecisionState} number. For others, it is the state whose outgoing
    // edge we couldn't match.
    this.offendingState = -1;
    if (this.recognizer!==null) {
        this.offendingState = this.recognizer.state;
    }
    return this;
}

RecognitionException.prototype = Object.create(Error.prototype);
RecognitionException.prototype.constructor = RecognitionException;

// <p>If the state number is not known, this method returns -1.</p>

//
// Gets the set of input symbols which could potentially follow the
// previously matched symbol at the time this exception was thrown.
//
// <p>If the set of expected tokens is not known and could not be computed,
// this method returns {@code null}.</p>
//
// @return The set of token types that could potentially follow the current
// state in the ATN, or {@code null} if the information is not available.
// /
RecognitionException.prototype.getExpectedTokens = function() {
    if (this.recognizer!==null) {
        return this.recognizer.atn.getExpectedTokens(this.offendingState, this.ctx);
    } else {
        return null;
    }
};

RecognitionException.prototype.toString = function() {
    return this.message;
};

function LexerNoViableAltException(lexer, input, startIndex, deadEndConfigs) {
	RecognitionException.call(this, {message:"", recognizer:lexer, input:input, ctx:null});
    this.startIndex = startIndex;
    this.deadEndConfigs = deadEndConfigs;
    return this;
}

LexerNoViableAltException.prototype = Object.create(RecognitionException.prototype);
LexerNoViableAltException.prototype.constructor = LexerNoViableAltException;

LexerNoViableAltException.prototype.toString = function() {
    var symbol = "";
    if (this.startIndex >= 0 && this.startIndex < this.input.size) {
        symbol = this.input.getText((this.startIndex,this.startIndex));
    }
    return "LexerNoViableAltException" + symbol;
};

// Indicates that the parser could not decide which of two or more paths
// to take based upon the remaining input. It tracks the starting token
// of the offending input and also knows where the parser was
// in the various paths when the error. Reported by reportNoViableAlternative()
//
function NoViableAltException(recognizer, input, startToken, offendingToken, deadEndConfigs, ctx) {
	ctx = ctx || recognizer._ctx;
	offendingToken = offendingToken || recognizer.getCurrentToken();
	startToken = startToken || recognizer.getCurrentToken();
	input = input || recognizer.getInputStream();
	RecognitionException.call(this, {message:"", recognizer:recognizer, input:input, ctx:ctx});
    // Which configurations did we try at input.index() that couldn't match
	// input.LT(1)?//
    this.deadEndConfigs = deadEndConfigs;
    // The token object at the start index; the input stream might
    // not be buffering tokens so get a reference to it. (At the
    // time the error occurred, of course the stream needs to keep a
    // buffer all of the tokens but later we might not have access to those.)
    this.startToken = startToken;
    this.offendingToken = offendingToken;
}

NoViableAltException.prototype = Object.create(RecognitionException.prototype);
NoViableAltException.prototype.constructor = NoViableAltException;

// This signifies any kind of mismatched input exceptions such as
// when the current input does not match the expected token.
//
function InputMismatchException(recognizer) {
	RecognitionException.call(this, {message:"", recognizer:recognizer, input:recognizer.getInputStream(), ctx:recognizer._ctx});
    this.offendingToken = recognizer.getCurrentToken();
}

InputMismatchException.prototype = Object.create(RecognitionException.prototype);
InputMismatchException.prototype.constructor = InputMismatchException;

// A semantic predicate failed during validation. Validation of predicates
// occurs when normally parsing the alternative just like matching a token.
// Disambiguating predicate evaluation occurs when we test a predicate during
// prediction.

function FailedPredicateException(recognizer, predicate, message) {
	RecognitionException.call(this, {message:this.formatMessage(predicate,message || null), recognizer:recognizer,
                         input:recognizer.getInputStream(), ctx:recognizer._ctx});
    var s = recognizer._interp.atn.states[recognizer.state];
    var trans = s.transitions[0];
    if (trans instanceof PredicateTransition) {
        this.ruleIndex = trans.ruleIndex;
        this.predicateIndex = trans.predIndex;
    } else {
        this.ruleIndex = 0;
        this.predicateIndex = 0;
    }
    this.predicate = predicate;
    this.offendingToken = recognizer.getCurrentToken();
    return this;
}

FailedPredicateException.prototype = Object.create(RecognitionException.prototype);
FailedPredicateException.prototype.constructor = FailedPredicateException;

FailedPredicateException.prototype.formatMessage = function(predicate, message) {
    if (message !==null) {
        return message;
    } else {
        return "failed predicate: {" + predicate + "}?";
    }
};

function ParseCancellationException() {
	Error.call(this);
	Error.captureStackTrace(this, ParseCancellationException);
	return this;
}

ParseCancellationException.prototype = Object.create(Error.prototype);
ParseCancellationException.prototype.constructor = ParseCancellationException;

exports.RecognitionException = RecognitionException;
exports.NoViableAltException = NoViableAltException;
exports.LexerNoViableAltException = LexerNoViableAltException;
exports.InputMismatchException = InputMismatchException;
exports.FailedPredicateException = FailedPredicateException;
exports.ParseCancellationException = ParseCancellationException;


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
exports.atn = __webpack_require__(52);
exports.codepointat = __webpack_require__(35);
exports.dfa = __webpack_require__(59);
exports.fromcodepoint = __webpack_require__(36);
exports.tree = __webpack_require__(61);
exports.error = __webpack_require__(62);
exports.Token = __webpack_require__(2).Token;
exports.CharStreams = __webpack_require__(64).CharStreams;
exports.CommonToken = __webpack_require__(2).CommonToken;
exports.InputStream = __webpack_require__(22).InputStream;
exports.FileStream = __webpack_require__(65).FileStream;
exports.CommonTokenStream = __webpack_require__(66).CommonTokenStream;
exports.Lexer = __webpack_require__(18).Lexer;
exports.Parser = __webpack_require__(68).Parser;
var pc = __webpack_require__(10);
exports.PredictionContextCache = pc.PredictionContextCache;
exports.ParserRuleContext = __webpack_require__(21).ParserRuleContext;
exports.Interval = __webpack_require__(4).Interval;
exports.Utils = __webpack_require__(0);


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

var RuleContext = __webpack_require__(17).RuleContext;
var Hash = __webpack_require__(0).Hash;

function PredictionContext(cachedHashCode) {
	this.cachedHashCode = cachedHashCode;
}

// Represents {@code $} in local context prediction, which means wildcard.
// {@code//+x =//}.
// /
PredictionContext.EMPTY = null;

// Represents {@code $} in an array in full context mode, when {@code $}
// doesn't mean wildcard: {@code $ + x = [$,x]}. Here,
// {@code $} = {@link //EMPTY_RETURN_STATE}.
// /
PredictionContext.EMPTY_RETURN_STATE = 0x7FFFFFFF;

PredictionContext.globalNodeCount = 1;
PredictionContext.id = PredictionContext.globalNodeCount;

// Stores the computed hash code of this {@link PredictionContext}. The hash
// code is computed in parts to match the following reference algorithm.
//
// <pre>
// private int referenceHashCode() {
// int hash = {@link MurmurHash//initialize MurmurHash.initialize}({@link
// //INITIAL_HASH});
//
// for (int i = 0; i &lt; {@link //size()}; i++) {
// hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link //getParent
// getParent}(i));
// }
//
// for (int i = 0; i &lt; {@link //size()}; i++) {
// hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link
// //getReturnState getReturnState}(i));
// }
//
// hash = {@link MurmurHash//finish MurmurHash.finish}(hash, 2// {@link
// //size()});
// return hash;
// }
// </pre>
// /

// This means only the {@link //EMPTY} context is in set.
PredictionContext.prototype.isEmpty = function() {
	return this === PredictionContext.EMPTY;
};

PredictionContext.prototype.hasEmptyPath = function() {
	return this.getReturnState(this.length - 1) === PredictionContext.EMPTY_RETURN_STATE;
};

PredictionContext.prototype.hashCode = function() {
	return this.cachedHashCode;
};


PredictionContext.prototype.updateHashCode = function(hash) {
    hash.update(this.cachedHashCode);
};
/*
function calculateHashString(parent, returnState) {
	return "" + parent + returnState;
}
*/

// Used to cache {@link PredictionContext} objects. Its used for the shared
// context cash associated with contexts in DFA states. This cache
// can be used for both lexers and parsers.

function PredictionContextCache() {
	this.cache = {};
	return this;
}

// Add a context to the cache and return it. If the context already exists,
// return that one instead and do not add a new context to the cache.
// Protect shared cache from unsafe thread access.
//
PredictionContextCache.prototype.add = function(ctx) {
	if (ctx === PredictionContext.EMPTY) {
		return PredictionContext.EMPTY;
	}
	var existing = this.cache[ctx] || null;
	if (existing !== null) {
		return existing;
	}
	this.cache[ctx] = ctx;
	return ctx;
};

PredictionContextCache.prototype.get = function(ctx) {
	return this.cache[ctx] || null;
};

Object.defineProperty(PredictionContextCache.prototype, "length", {
	get : function() {
		return this.cache.length;
	}
});

function SingletonPredictionContext(parent, returnState) {
	var hashCode = 0;
	if(parent !== null) {
		var hash = new Hash();
		hash.update(parent, returnState);
        hashCode = hash.finish();
	}
	PredictionContext.call(this, hashCode);
	this.parentCtx = parent;
	this.returnState = returnState;
}

SingletonPredictionContext.prototype = Object.create(PredictionContext.prototype);
SingletonPredictionContext.prototype.contructor = SingletonPredictionContext;

SingletonPredictionContext.create = function(parent, returnState) {
	if (returnState === PredictionContext.EMPTY_RETURN_STATE && parent === null) {
		// someone can pass in the bits of an array ctx that mean $
		return PredictionContext.EMPTY;
	} else {
		return new SingletonPredictionContext(parent, returnState);
	}
};

Object.defineProperty(SingletonPredictionContext.prototype, "length", {
	get : function() {
		return 1;
	}
});

SingletonPredictionContext.prototype.getParent = function(index) {
	return this.parentCtx;
};

SingletonPredictionContext.prototype.getReturnState = function(index) {
	return this.returnState;
};

SingletonPredictionContext.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof SingletonPredictionContext)) {
		return false;
	} else if (this.hashCode() !== other.hashCode()) {
		return false; // can't be same if hash is different
	} else {
		if(this.returnState !== other.returnState)
            return false;
        else if(this.parentCtx==null)
            return other.parentCtx==null
		else
            return this.parentCtx.equals(other.parentCtx);
	}
};

SingletonPredictionContext.prototype.toString = function() {
	var up = this.parentCtx === null ? "" : this.parentCtx.toString();
	if (up.length === 0) {
		if (this.returnState === PredictionContext.EMPTY_RETURN_STATE) {
			return "$";
		} else {
			return "" + this.returnState;
		}
	} else {
		return "" + this.returnState + " " + up;
	}
};

function EmptyPredictionContext() {
	SingletonPredictionContext.call(this, null, PredictionContext.EMPTY_RETURN_STATE);
	return this;
}

EmptyPredictionContext.prototype = Object.create(SingletonPredictionContext.prototype);
EmptyPredictionContext.prototype.constructor = EmptyPredictionContext;

EmptyPredictionContext.prototype.isEmpty = function() {
	return true;
};

EmptyPredictionContext.prototype.getParent = function(index) {
	return null;
};

EmptyPredictionContext.prototype.getReturnState = function(index) {
	return this.returnState;
};

EmptyPredictionContext.prototype.equals = function(other) {
	return this === other;
};

EmptyPredictionContext.prototype.toString = function() {
	return "$";
};

PredictionContext.EMPTY = new EmptyPredictionContext();

function ArrayPredictionContext(parents, returnStates) {
	// Parent can be null only if full ctx mode and we make an array
	// from {@link //EMPTY} and non-empty. We merge {@link //EMPTY} by using
	// null parent and
	// returnState == {@link //EMPTY_RETURN_STATE}.
	var h = new Hash();
	h.update(parents, returnStates);
	var hashCode = h.finish();
	PredictionContext.call(this, hashCode);
	this.parents = parents;
	this.returnStates = returnStates;
	return this;
}

ArrayPredictionContext.prototype = Object.create(PredictionContext.prototype);
ArrayPredictionContext.prototype.constructor = ArrayPredictionContext;

ArrayPredictionContext.prototype.isEmpty = function() {
	// since EMPTY_RETURN_STATE can only appear in the last position, we
	// don't need to verify that size==1
	return this.returnStates[0] === PredictionContext.EMPTY_RETURN_STATE;
};

Object.defineProperty(ArrayPredictionContext.prototype, "length", {
	get : function() {
		return this.returnStates.length;
	}
});

ArrayPredictionContext.prototype.getParent = function(index) {
	return this.parents[index];
};

ArrayPredictionContext.prototype.getReturnState = function(index) {
	return this.returnStates[index];
};

ArrayPredictionContext.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof ArrayPredictionContext)) {
		return false;
	} else if (this.hashCode() !== other.hashCode()) {
		return false; // can't be same if hash is different
	} else {
		return this.returnStates === other.returnStates &&
				this.parents === other.parents;
	}
};

ArrayPredictionContext.prototype.toString = function() {
	if (this.isEmpty()) {
		return "[]";
	} else {
		var s = "[";
		for (var i = 0; i < this.returnStates.length; i++) {
			if (i > 0) {
				s = s + ", ";
			}
			if (this.returnStates[i] === PredictionContext.EMPTY_RETURN_STATE) {
				s = s + "$";
				continue;
			}
			s = s + this.returnStates[i];
			if (this.parents[i] !== null) {
				s = s + " " + this.parents[i];
			} else {
				s = s + "null";
			}
		}
		return s + "]";
	}
};

// Convert a {@link RuleContext} tree to a {@link PredictionContext} graph.
// Return {@link //EMPTY} if {@code outerContext} is empty or null.
// /
function predictionContextFromRuleContext(atn, outerContext) {
	if (outerContext === undefined || outerContext === null) {
		outerContext = RuleContext.EMPTY;
	}
	// if we are in RuleContext of start rule, s, then PredictionContext
	// is EMPTY. Nobody called us. (if we are empty, return empty)
	if (outerContext.parentCtx === null || outerContext === RuleContext.EMPTY) {
		return PredictionContext.EMPTY;
	}
	// If we have a parent, convert it to a PredictionContext graph
	var parent = predictionContextFromRuleContext(atn, outerContext.parentCtx);
	var state = atn.states[outerContext.invokingState];
	var transition = state.transitions[0];
	return SingletonPredictionContext.create(parent, transition.followState.stateNumber);
}
/*
function calculateListsHashString(parents, returnStates) {
	var s = "";
	parents.map(function(p) {
		s = s + p;
	});
	returnStates.map(function(r) {
		s = s + r;
	});
	return s;
}
*/
function merge(a, b, rootIsWildcard, mergeCache) {
	// share same graph if both same
	if (a === b) {
		return a;
	}
	if (a instanceof SingletonPredictionContext && b instanceof SingletonPredictionContext) {
		return mergeSingletons(a, b, rootIsWildcard, mergeCache);
	}
	// At least one of a or b is array
	// If one is $ and rootIsWildcard, return $ as// wildcard
	if (rootIsWildcard) {
		if (a instanceof EmptyPredictionContext) {
			return a;
		}
		if (b instanceof EmptyPredictionContext) {
			return b;
		}
	}
	// convert singleton so both are arrays to normalize
	if (a instanceof SingletonPredictionContext) {
		a = new ArrayPredictionContext([a.getParent()], [a.returnState]);
	}
	if (b instanceof SingletonPredictionContext) {
		b = new ArrayPredictionContext([b.getParent()], [b.returnState]);
	}
	return mergeArrays(a, b, rootIsWildcard, mergeCache);
}

//
// Merge two {@link SingletonPredictionContext} instances.
//
// <p>Stack tops equal, parents merge is same; return left graph.<br>
// <embed src="images/SingletonMerge_SameRootSamePar.svg"
// type="image/svg+xml"/></p>
//
// <p>Same stack top, parents differ; merge parents giving array node, then
// remainders of those graphs. A new root node is created to point to the
// merged parents.<br>
// <embed src="images/SingletonMerge_SameRootDiffPar.svg"
// type="image/svg+xml"/></p>
//
// <p>Different stack tops pointing to same parent. Make array node for the
// root where both element in the root point to the same (original)
// parent.<br>
// <embed src="images/SingletonMerge_DiffRootSamePar.svg"
// type="image/svg+xml"/></p>
//
// <p>Different stack tops pointing to different parents. Make array node for
// the root where each element points to the corresponding original
// parent.<br>
// <embed src="images/SingletonMerge_DiffRootDiffPar.svg"
// type="image/svg+xml"/></p>
//
// @param a the first {@link SingletonPredictionContext}
// @param b the second {@link SingletonPredictionContext}
// @param rootIsWildcard {@code true} if this is a local-context merge,
// otherwise false to indicate a full-context merge
// @param mergeCache
// /
function mergeSingletons(a, b, rootIsWildcard, mergeCache) {
	if (mergeCache !== null) {
		var previous = mergeCache.get(a, b);
		if (previous !== null) {
			return previous;
		}
		previous = mergeCache.get(b, a);
		if (previous !== null) {
			return previous;
		}
	}

	var rootMerge = mergeRoot(a, b, rootIsWildcard);
	if (rootMerge !== null) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, rootMerge);
		}
		return rootMerge;
	}
	if (a.returnState === b.returnState) {
		var parent = merge(a.parentCtx, b.parentCtx, rootIsWildcard, mergeCache);
		// if parent is same as existing a or b parent or reduced to a parent,
		// return it
		if (parent === a.parentCtx) {
			return a; // ax + bx = ax, if a=b
		}
		if (parent === b.parentCtx) {
			return b; // ax + bx = bx, if a=b
		}
		// else: ax + ay = a'[x,y]
		// merge parents x and y, giving array node with x,y then remainders
		// of those graphs. dup a, a' points at merged array
		// new joined parent so create new singleton pointing to it, a'
		var spc = SingletonPredictionContext.create(parent, a.returnState);
		if (mergeCache !== null) {
			mergeCache.set(a, b, spc);
		}
		return spc;
	} else { // a != b payloads differ
		// see if we can collapse parents due to $+x parents if local ctx
		var singleParent = null;
		if (a === b || (a.parentCtx !== null && a.parentCtx === b.parentCtx)) { // ax +
																				// bx =
																				// [a,b]x
			singleParent = a.parentCtx;
		}
		if (singleParent !== null) { // parents are same
			// sort payloads and use same parent
			var payloads = [ a.returnState, b.returnState ];
			if (a.returnState > b.returnState) {
				payloads[0] = b.returnState;
				payloads[1] = a.returnState;
			}
			var parents = [ singleParent, singleParent ];
			var apc = new ArrayPredictionContext(parents, payloads);
			if (mergeCache !== null) {
				mergeCache.set(a, b, apc);
			}
			return apc;
		}
		// parents differ and can't merge them. Just pack together
		// into array; can't merge.
		// ax + by = [ax,by]
		var payloads = [ a.returnState, b.returnState ];
		var parents = [ a.parentCtx, b.parentCtx ];
		if (a.returnState > b.returnState) { // sort by payload
			payloads[0] = b.returnState;
			payloads[1] = a.returnState;
			parents = [ b.parentCtx, a.parentCtx ];
		}
		var a_ = new ArrayPredictionContext(parents, payloads);
		if (mergeCache !== null) {
			mergeCache.set(a, b, a_);
		}
		return a_;
	}
}

//
// Handle case where at least one of {@code a} or {@code b} is
// {@link //EMPTY}. In the following diagrams, the symbol {@code $} is used
// to represent {@link //EMPTY}.
//
// <h2>Local-Context Merges</h2>
//
// <p>These local-context merge operations are used when {@code rootIsWildcard}
// is true.</p>
//
// <p>{@link //EMPTY} is superset of any graph; return {@link //EMPTY}.<br>
// <embed src="images/LocalMerge_EmptyRoot.svg" type="image/svg+xml"/></p>
//
// <p>{@link //EMPTY} and anything is {@code //EMPTY}, so merged parent is
// {@code //EMPTY}; return left graph.<br>
// <embed src="images/LocalMerge_EmptyParent.svg" type="image/svg+xml"/></p>
//
// <p>Special case of last merge if local context.<br>
// <embed src="images/LocalMerge_DiffRoots.svg" type="image/svg+xml"/></p>
//
// <h2>Full-Context Merges</h2>
//
// <p>These full-context merge operations are used when {@code rootIsWildcard}
// is false.</p>
//
// <p><embed src="images/FullMerge_EmptyRoots.svg" type="image/svg+xml"/></p>
//
// <p>Must keep all contexts; {@link //EMPTY} in array is a special value (and
// null parent).<br>
// <embed src="images/FullMerge_EmptyRoot.svg" type="image/svg+xml"/></p>
//
// <p><embed src="images/FullMerge_SameRoot.svg" type="image/svg+xml"/></p>
//
// @param a the first {@link SingletonPredictionContext}
// @param b the second {@link SingletonPredictionContext}
// @param rootIsWildcard {@code true} if this is a local-context merge,
// otherwise false to indicate a full-context merge
// /
function mergeRoot(a, b, rootIsWildcard) {
	if (rootIsWildcard) {
		if (a === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // // + b =//
		}
		if (b === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // a +// =//
		}
	} else {
		if (a === PredictionContext.EMPTY && b === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // $ + $ = $
		} else if (a === PredictionContext.EMPTY) { // $ + x = [$,x]
			var payloads = [ b.returnState,
					PredictionContext.EMPTY_RETURN_STATE ];
			var parents = [ b.parentCtx, null ];
			return new ArrayPredictionContext(parents, payloads);
		} else if (b === PredictionContext.EMPTY) { // x + $ = [$,x] ($ is always first if present)
			var payloads = [ a.returnState, PredictionContext.EMPTY_RETURN_STATE ];
			var parents = [ a.parentCtx, null ];
			return new ArrayPredictionContext(parents, payloads);
		}
	}
	return null;
}

//
// Merge two {@link ArrayPredictionContext} instances.
//
// <p>Different tops, different parents.<br>
// <embed src="images/ArrayMerge_DiffTopDiffPar.svg" type="image/svg+xml"/></p>
//
// <p>Shared top, same parents.<br>
// <embed src="images/ArrayMerge_ShareTopSamePar.svg" type="image/svg+xml"/></p>
//
// <p>Shared top, different parents.<br>
// <embed src="images/ArrayMerge_ShareTopDiffPar.svg" type="image/svg+xml"/></p>
//
// <p>Shared top, all shared parents.<br>
// <embed src="images/ArrayMerge_ShareTopSharePar.svg"
// type="image/svg+xml"/></p>
//
// <p>Equal tops, merge parents and reduce top to
// {@link SingletonPredictionContext}.<br>
// <embed src="images/ArrayMerge_EqualTop.svg" type="image/svg+xml"/></p>
// /
function mergeArrays(a, b, rootIsWildcard, mergeCache) {
	if (mergeCache !== null) {
		var previous = mergeCache.get(a, b);
		if (previous !== null) {
			return previous;
		}
		previous = mergeCache.get(b, a);
		if (previous !== null) {
			return previous;
		}
	}
	// merge sorted payloads a + b => M
	var i = 0; // walks a
	var j = 0; // walks b
	var k = 0; // walks target M array

	var mergedReturnStates = [];
	var mergedParents = [];
	// walk and merge to yield mergedParents, mergedReturnStates
	while (i < a.returnStates.length && j < b.returnStates.length) {
		var a_parent = a.parents[i];
		var b_parent = b.parents[j];
		if (a.returnStates[i] === b.returnStates[j]) {
			// same payload (stack tops are equal), must yield merged singleton
			var payload = a.returnStates[i];
			// $+$ = $
			var bothDollars = payload === PredictionContext.EMPTY_RETURN_STATE &&
					a_parent === null && b_parent === null;
			var ax_ax = (a_parent !== null && b_parent !== null && a_parent === b_parent); // ax+ax
																							// ->
																							// ax
			if (bothDollars || ax_ax) {
				mergedParents[k] = a_parent; // choose left
				mergedReturnStates[k] = payload;
			} else { // ax+ay -> a'[x,y]
				var mergedParent = merge(a_parent, b_parent, rootIsWildcard, mergeCache);
				mergedParents[k] = mergedParent;
				mergedReturnStates[k] = payload;
			}
			i += 1; // hop over left one as usual
			j += 1; // but also skip one in right side since we merge
		} else if (a.returnStates[i] < b.returnStates[j]) { // copy a[i] to M
			mergedParents[k] = a_parent;
			mergedReturnStates[k] = a.returnStates[i];
			i += 1;
		} else { // b > a, copy b[j] to M
			mergedParents[k] = b_parent;
			mergedReturnStates[k] = b.returnStates[j];
			j += 1;
		}
		k += 1;
	}
	// copy over any payloads remaining in either array
	if (i < a.returnStates.length) {
		for (var p = i; p < a.returnStates.length; p++) {
			mergedParents[k] = a.parents[p];
			mergedReturnStates[k] = a.returnStates[p];
			k += 1;
		}
	} else {
		for (var p = j; p < b.returnStates.length; p++) {
			mergedParents[k] = b.parents[p];
			mergedReturnStates[k] = b.returnStates[p];
			k += 1;
		}
	}
	// trim merged if we combined a few that had same stack tops
	if (k < mergedParents.length) { // write index < last position; trim
		if (k === 1) { // for just one merged element, return singleton top
			var a_ = SingletonPredictionContext.create(mergedParents[0],
					mergedReturnStates[0]);
			if (mergeCache !== null) {
				mergeCache.set(a, b, a_);
			}
			return a_;
		}
		mergedParents = mergedParents.slice(0, k);
		mergedReturnStates = mergedReturnStates.slice(0, k);
	}

	var M = new ArrayPredictionContext(mergedParents, mergedReturnStates);

	// if we created same array as a or b, return that instead
	// TODO: track whether this is possible above during merge sort for speed
	if (M === a) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, a);
		}
		return a;
	}
	if (M === b) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, b);
		}
		return b;
	}
	combineCommonParents(mergedParents);

	if (mergeCache !== null) {
		mergeCache.set(a, b, M);
	}
	return M;
}

//
// Make pass over all <em>M</em> {@code parents}; merge any {@code equals()}
// ones.
// /
function combineCommonParents(parents) {
	var uniqueParents = {};

	for (var p = 0; p < parents.length; p++) {
		var parent = parents[p];
		if (!(parent in uniqueParents)) {
			uniqueParents[parent] = parent;
		}
	}
	for (var q = 0; q < parents.length; q++) {
		parents[q] = uniqueParents[parents[q]];
	}
}

function getCachedPredictionContext(context, contextCache, visited) {
	if (context.isEmpty()) {
		return context;
	}
	var existing = visited[context] || null;
	if (existing !== null) {
		return existing;
	}
	existing = contextCache.get(context);
	if (existing !== null) {
		visited[context] = existing;
		return existing;
	}
	var changed = false;
	var parents = [];
	for (var i = 0; i < parents.length; i++) {
		var parent = getCachedPredictionContext(context.getParent(i), contextCache, visited);
		if (changed || parent !== context.getParent(i)) {
			if (!changed) {
				parents = [];
				for (var j = 0; j < context.length; j++) {
					parents[j] = context.getParent(j);
				}
				changed = true;
			}
			parents[i] = parent;
		}
	}
	if (!changed) {
		contextCache.add(context);
		visited[context] = context;
		return context;
	}
	var updated = null;
	if (parents.length === 0) {
		updated = PredictionContext.EMPTY;
	} else if (parents.length === 1) {
		updated = SingletonPredictionContext.create(parents[0], context
				.getReturnState(0));
	} else {
		updated = new ArrayPredictionContext(parents, context.returnStates);
	}
	contextCache.add(updated);
	visited[updated] = updated;
	visited[context] = updated;

	return updated;
}

// ter's recursive version of Sam's getAllNodes()
function getAllContextNodes(context, nodes, visited) {
	if (nodes === null) {
		nodes = [];
		return getAllContextNodes(context, nodes, visited);
	} else if (visited === null) {
		visited = {};
		return getAllContextNodes(context, nodes, visited);
	} else {
		if (context === null || visited[context] !== null) {
			return nodes;
		}
		visited[context] = context;
		nodes.push(context);
		for (var i = 0; i < context.length; i++) {
			getAllContextNodes(context.getParent(i), nodes, visited);
		}
		return nodes;
	}
}

exports.merge = merge;
exports.PredictionContext = PredictionContext;
exports.PredictionContextCache = PredictionContextCache;
exports.SingletonPredictionContext = SingletonPredictionContext;
exports.predictionContextFromRuleContext = predictionContextFromRuleContext;
exports.getCachedPredictionContext = getCachedPredictionContext;


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var LL1Analyzer = __webpack_require__(53).LL1Analyzer;
var IntervalSet = __webpack_require__(4).IntervalSet;

function ATN(grammarType , maxTokenType) {

    // Used for runtime deserialization of ATNs from strings///
    // The type of the ATN.
    this.grammarType = grammarType;
    // The maximum value for any symbol recognized by a transition in the ATN.
    this.maxTokenType = maxTokenType;
    this.states = [];
    // Each subrule/rule is a decision point and we must track them so we
    //  can go back later and build DFA predictors for them.  This includes
    //  all the rules, subrules, optional blocks, ()+, ()* etc...
    this.decisionToState = [];
    // Maps from rule index to starting state number.
    this.ruleToStartState = [];
    // Maps from rule index to stop state number.
    this.ruleToStopState = null;
    this.modeNameToStartState = {};
    // For lexer ATNs, this maps the rule index to the resulting token type.
    // For parser ATNs, this maps the rule index to the generated bypass token
    // type if the
    // {@link ATNDeserializationOptions//isGenerateRuleBypassTransitions}
    // deserialization option was specified; otherwise, this is {@code null}.
    this.ruleToTokenType = null;
    // For lexer ATNs, this is an array of {@link LexerAction} objects which may
    // be referenced by action transitions in the ATN.
    this.lexerActions = null;
    this.modeToStartState = [];

    return this;
}

// Compute the set of valid tokens that can occur starting in state {@code s}.
//  If {@code ctx} is null, the set of tokens will not include what can follow
//  the rule surrounding {@code s}. In other words, the set will be
//  restricted to tokens reachable staying within {@code s}'s rule.
ATN.prototype.nextTokensInContext = function(s, ctx) {
    var anal = new LL1Analyzer(this);
    return anal.LOOK(s, null, ctx);
};

// Compute the set of valid tokens that can occur starting in {@code s} and
// staying in same rule. {@link Token//EPSILON} is in set if we reach end of
// rule.
ATN.prototype.nextTokensNoContext = function(s) {
    if (s.nextTokenWithinRule !== null ) {
        return s.nextTokenWithinRule;
    }
    s.nextTokenWithinRule = this.nextTokensInContext(s, null);
    s.nextTokenWithinRule.readOnly = true;
    return s.nextTokenWithinRule;
};

ATN.prototype.nextTokens = function(s, ctx) {
    if ( ctx===undefined ) {
        return this.nextTokensNoContext(s);
    } else {
        return this.nextTokensInContext(s, ctx);
    }
};

ATN.prototype.addState = function( state) {
    if ( state !== null ) {
        state.atn = this;
        state.stateNumber = this.states.length;
    }
    this.states.push(state);
};

ATN.prototype.removeState = function( state) {
    this.states[state.stateNumber] = null; // just free mem, don't shift states in list
};

ATN.prototype.defineDecisionState = function( s) {
    this.decisionToState.push(s);
    s.decision = this.decisionToState.length-1;
    return s.decision;
};

ATN.prototype.getDecisionState = function( decision) {
    if (this.decisionToState.length===0) {
        return null;
    } else {
        return this.decisionToState[decision];
    }
};

// Computes the set of input symbols which could follow ATN state number
// {@code stateNumber} in the specified full {@code context}. This method
// considers the complete parser context, but does not evaluate semantic
// predicates (i.e. all predicates encountered during the calculation are
// assumed true). If a path in the ATN exists from the starting state to the
// {@link RuleStopState} of the outermost context without matching any
// symbols, {@link Token//EOF} is added to the returned set.
//
// <p>If {@code context} is {@code null}, it is treated as
// {@link ParserRuleContext//EMPTY}.</p>
//
// @param stateNumber the ATN state number
// @param context the full parse context
// @return The set of potentially valid input symbols which could follow the
// specified state in the specified context.
// @throws IllegalArgumentException if the ATN does not contain a state with
// number {@code stateNumber}
var Token = __webpack_require__(2).Token;

ATN.prototype.getExpectedTokens = function( stateNumber, ctx ) {
    if ( stateNumber < 0 || stateNumber >= this.states.length ) {
        throw("Invalid state number.");
    }
    var s = this.states[stateNumber];
    var following = this.nextTokens(s);
    if (!following.contains(Token.EPSILON)) {
        return following;
    }
    var expected = new IntervalSet();
    expected.addSet(following);
    expected.removeOne(Token.EPSILON);
    while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {
        var invokingState = this.states[ctx.invokingState];
        var rt = invokingState.transitions[0];
        following = this.nextTokens(rt.followState);
        expected.addSet(following);
        expected.removeOne(Token.EPSILON);
        ctx = ctx.parentCtx;
    }
    if (following.contains(Token.EPSILON)) {
        expected.addOne(Token.EOF);
    }
    return expected;
};

ATN.INVALID_ALT_NUMBER = 0;

exports.ATN = ATN;

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//  An ATN transition between any two ATN states.  Subclasses define
//  atom, set, epsilon, action, predicate, rule transitions.
//
//  <p>This is a one way link.  It emanates from a state (usually via a list of
//  transitions) and has a target state.</p>
//
//  <p>Since we never have to change the ATN transitions once we construct it,
//  we can fix these transitions as specific classes. The DFA transitions
//  on the other hand need to update the labels as it adds transitions to
//  the states. We'll use the term Edge for the DFA to distinguish them from
//  ATN transitions.</p>

var Token = __webpack_require__(2).Token;
var Interval = __webpack_require__(4).Interval;
var IntervalSet = __webpack_require__(4).IntervalSet;
var Predicate = __webpack_require__(14).Predicate;
var PrecedencePredicate = __webpack_require__(14).PrecedencePredicate;

function Transition (target) {
    // The target of this transition.
    if (target===undefined || target===null) {
        throw "target cannot be null.";
    }
    this.target = target;
    // Are we epsilon, action, sempred?
    this.isEpsilon = false;
    this.label = null;
    return this;
}
    // constants for serialization
Transition.EPSILON = 1;
Transition.RANGE = 2;
Transition.RULE = 3;
Transition.PREDICATE = 4; // e.g., {isType(input.LT(1))}?
Transition.ATOM = 5;
Transition.ACTION = 6;
Transition.SET = 7; // ~(A|B) or ~atom, wildcard, which convert to next 2
Transition.NOT_SET = 8;
Transition.WILDCARD = 9;
Transition.PRECEDENCE = 10;

Transition.serializationNames = [
            "INVALID",
            "EPSILON",
            "RANGE",
            "RULE",
            "PREDICATE",
            "ATOM",
            "ACTION",
            "SET",
            "NOT_SET",
            "WILDCARD",
            "PRECEDENCE"
        ];

Transition.serializationTypes = {
        EpsilonTransition: Transition.EPSILON,
        RangeTransition: Transition.RANGE,
        RuleTransition: Transition.RULE,
        PredicateTransition: Transition.PREDICATE,
        AtomTransition: Transition.ATOM,
        ActionTransition: Transition.ACTION,
        SetTransition: Transition.SET,
        NotSetTransition: Transition.NOT_SET,
        WildcardTransition: Transition.WILDCARD,
        PrecedencePredicateTransition: Transition.PRECEDENCE
    };


// TODO: make all transitions sets? no, should remove set edges
function AtomTransition(target, label) {
	Transition.call(this, target);
	this.label_ = label; // The token type or character value; or, signifies special label.
    this.label = this.makeLabel();
    this.serializationType = Transition.ATOM;
    return this;
}

AtomTransition.prototype = Object.create(Transition.prototype);
AtomTransition.prototype.constructor = AtomTransition;

AtomTransition.prototype.makeLabel = function() {
	var s = new IntervalSet();
    s.addOne(this.label_);
    return s;
};

AtomTransition.prototype.matches = function( symbol, minVocabSymbol,  maxVocabSymbol) {
    return this.label_ === symbol;
};

AtomTransition.prototype.toString = function() {
	return this.label_;
};

function RuleTransition(ruleStart, ruleIndex, precedence, followState) {
	Transition.call(this, ruleStart);
    this.ruleIndex = ruleIndex; // ptr to the rule definition object for this rule ref
    this.precedence = precedence;
    this.followState = followState; // what node to begin computations following ref to rule
    this.serializationType = Transition.RULE;
    this.isEpsilon = true;
    return this;
}

RuleTransition.prototype = Object.create(Transition.prototype);
RuleTransition.prototype.constructor = RuleTransition;

RuleTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};


function EpsilonTransition(target, outermostPrecedenceReturn) {
	Transition.call(this, target);
    this.serializationType = Transition.EPSILON;
    this.isEpsilon = true;
    this.outermostPrecedenceReturn = outermostPrecedenceReturn;
    return this;
}

EpsilonTransition.prototype = Object.create(Transition.prototype);
EpsilonTransition.prototype.constructor = EpsilonTransition;

EpsilonTransition.prototype.matches = function( symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

EpsilonTransition.prototype.toString = function() {
	return "epsilon";
};

function RangeTransition(target, start, stop) {
	Transition.call(this, target);
	this.serializationType = Transition.RANGE;
    this.start = start;
    this.stop = stop;
    this.label = this.makeLabel();
    return this;
}

RangeTransition.prototype = Object.create(Transition.prototype);
RangeTransition.prototype.constructor = RangeTransition;

RangeTransition.prototype.makeLabel = function() {
    var s = new IntervalSet();
    s.addRange(this.start, this.stop);
    return s;
};

RangeTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return symbol >= this.start && symbol <= this.stop;
};

RangeTransition.prototype.toString = function() {
	return "'" + String.fromCharCode(this.start) + "'..'" + String.fromCharCode(this.stop) + "'";
};

function AbstractPredicateTransition(target) {
	Transition.call(this, target);
	return this;
}

AbstractPredicateTransition.prototype = Object.create(Transition.prototype);
AbstractPredicateTransition.prototype.constructor = AbstractPredicateTransition;

function PredicateTransition(target, ruleIndex, predIndex, isCtxDependent) {
	AbstractPredicateTransition.call(this, target);
    this.serializationType = Transition.PREDICATE;
    this.ruleIndex = ruleIndex;
    this.predIndex = predIndex;
    this.isCtxDependent = isCtxDependent; // e.g., $i ref in pred
    this.isEpsilon = true;
    return this;
}

PredicateTransition.prototype = Object.create(AbstractPredicateTransition.prototype);
PredicateTransition.prototype.constructor = PredicateTransition;

PredicateTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

PredicateTransition.prototype.getPredicate = function() {
	return new Predicate(this.ruleIndex, this.predIndex, this.isCtxDependent);
};

PredicateTransition.prototype.toString = function() {
	return "pred_" + this.ruleIndex + ":" + this.predIndex;
};

function ActionTransition(target, ruleIndex, actionIndex, isCtxDependent) {
	Transition.call(this, target);
    this.serializationType = Transition.ACTION;
    this.ruleIndex = ruleIndex;
    this.actionIndex = actionIndex===undefined ? -1 : actionIndex;
    this.isCtxDependent = isCtxDependent===undefined ? false : isCtxDependent; // e.g., $i ref in pred
    this.isEpsilon = true;
    return this;
}

ActionTransition.prototype = Object.create(Transition.prototype);
ActionTransition.prototype.constructor = ActionTransition;


ActionTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

ActionTransition.prototype.toString = function() {
	return "action_" + this.ruleIndex + ":" + this.actionIndex;
};


// A transition containing a set of values.
function SetTransition(target, set) {
	Transition.call(this, target);
	this.serializationType = Transition.SET;
    if (set !==undefined && set !==null) {
        this.label = set;
    } else {
        this.label = new IntervalSet();
        this.label.addOne(Token.INVALID_TYPE);
    }
    return this;
}

SetTransition.prototype = Object.create(Transition.prototype);
SetTransition.prototype.constructor = SetTransition;

SetTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return this.label.contains(symbol);
};


SetTransition.prototype.toString = function() {
	return this.label.toString();
};

function NotSetTransition(target, set) {
	SetTransition.call(this, target, set);
	this.serializationType = Transition.NOT_SET;
	return this;
}

NotSetTransition.prototype = Object.create(SetTransition.prototype);
NotSetTransition.prototype.constructor = NotSetTransition;

NotSetTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return symbol >= minVocabSymbol && symbol <= maxVocabSymbol &&
			!SetTransition.prototype.matches.call(this, symbol, minVocabSymbol, maxVocabSymbol);
};

NotSetTransition.prototype.toString = function() {
	return '~' + SetTransition.prototype.toString.call(this);
};

function WildcardTransition(target) {
	Transition.call(this, target);
	this.serializationType = Transition.WILDCARD;
	return this;
}

WildcardTransition.prototype = Object.create(Transition.prototype);
WildcardTransition.prototype.constructor = WildcardTransition;


WildcardTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return symbol >= minVocabSymbol && symbol <= maxVocabSymbol;
};

WildcardTransition.prototype.toString = function() {
	return ".";
};

function PrecedencePredicateTransition(target, precedence) {
	AbstractPredicateTransition.call(this, target);
    this.serializationType = Transition.PRECEDENCE;
    this.precedence = precedence;
    this.isEpsilon = true;
    return this;
}

PrecedencePredicateTransition.prototype = Object.create(AbstractPredicateTransition.prototype);
PrecedencePredicateTransition.prototype.constructor = PrecedencePredicateTransition;

PrecedencePredicateTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

PrecedencePredicateTransition.prototype.getPredicate = function() {
	return new PrecedencePredicate(this.precedence);
};

PrecedencePredicateTransition.prototype.toString = function() {
	return this.precedence + " >= _p";
};

exports.Transition = Transition;
exports.AtomTransition = AtomTransition;
exports.SetTransition = SetTransition;
exports.NotSetTransition = NotSetTransition;
exports.RuleTransition = RuleTransition;
exports.ActionTransition = ActionTransition;
exports.EpsilonTransition = EpsilonTransition;
exports.RangeTransition = RangeTransition;
exports.WildcardTransition = WildcardTransition;
exports.PredicateTransition = PredicateTransition;
exports.PrecedencePredicateTransition = PrecedencePredicateTransition;
exports.AbstractPredicateTransition = AbstractPredicateTransition;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

//
// Specialized {@link Set}{@code <}{@link ATNConfig}{@code >} that can track
// info about the set, with support for combining similar configurations using a
// graph-structured stack.
///

var ATN = __webpack_require__(11).ATN;
var Utils = __webpack_require__(0);
var Hash = Utils.Hash;
var Set = Utils.Set;
var SemanticContext = __webpack_require__(14).SemanticContext;
var merge = __webpack_require__(10).merge;

function hashATNConfig(c) {
	return c.hashCodeForConfigSet();
}

function equalATNConfigs(a, b) {
	if ( a===b ) {
		return true;
	} else if ( a===null || b===null ) {
		return false;
	} else
       return a.equalsForConfigSet(b);
 }


function ATNConfigSet(fullCtx) {
	//
	// The reason that we need this is because we don't want the hash map to use
	// the standard hash code and equals. We need all configurations with the
	// same
	// {@code (s,i,_,semctx)} to be equal. Unfortunately, this key effectively
	// doubles
	// the number of objects associated with ATNConfigs. The other solution is
	// to
	// use a hash table that lets us specify the equals/hashcode operation.
	// All configs but hashed by (s, i, _, pi) not including context. Wiped out
	// when we go readonly as this set becomes a DFA state.
	this.configLookup = new Set(hashATNConfig, equalATNConfigs);
	// Indicates that this configuration set is part of a full context
	// LL prediction. It will be used to determine how to merge $. With SLL
	// it's a wildcard whereas it is not for LL context merge.
	this.fullCtx = fullCtx === undefined ? true : fullCtx;
	// Indicates that the set of configurations is read-only. Do not
	// allow any code to manipulate the set; DFA states will point at
	// the sets and they must not change. This does not protect the other
	// fields; in particular, conflictingAlts is set after
	// we've made this readonly.
	this.readOnly = false;
	// Track the elements as they are added to the set; supports get(i)///
	this.configs = [];

	// TODO: these fields make me pretty uncomfortable but nice to pack up info
	// together, saves recomputation
	// TODO: can we track conflicts as they are added to save scanning configs
	// later?
	this.uniqueAlt = 0;
	this.conflictingAlts = null;

	// Used in parser and lexer. In lexer, it indicates we hit a pred
	// while computing a closure operation. Don't make a DFA state from this.
	this.hasSemanticContext = false;
	this.dipsIntoOuterContext = false;

	this.cachedHashCode = -1;

	return this;
}

// Adding a new config means merging contexts with existing configs for
// {@code (s, i, pi, _)}, where {@code s} is the
// {@link ATNConfig//state}, {@code i} is the {@link ATNConfig//alt}, and
// {@code pi} is the {@link ATNConfig//semanticContext}. We use
// {@code (s,i,pi)} as key.
//
// <p>This method updates {@link //dipsIntoOuterContext} and
// {@link //hasSemanticContext} when necessary.</p>
// /
ATNConfigSet.prototype.add = function(config, mergeCache) {
	if (mergeCache === undefined) {
		mergeCache = null;
	}
	if (this.readOnly) {
		throw "This set is readonly";
	}
	if (config.semanticContext !== SemanticContext.NONE) {
		this.hasSemanticContext = true;
	}
	if (config.reachesIntoOuterContext > 0) {
		this.dipsIntoOuterContext = true;
	}
	var existing = this.configLookup.add(config);
	if (existing === config) {
		this.cachedHashCode = -1;
		this.configs.push(config); // track order here
		return true;
	}
	// a previous (s,i,pi,_), merge with it and save result
	var rootIsWildcard = !this.fullCtx;
	var merged = merge(existing.context, config.context, rootIsWildcard, mergeCache);
	// no need to check for existing.context, config.context in cache
	// since only way to create new graphs is "call rule" and here. We
	// cache at both places.
	existing.reachesIntoOuterContext = Math.max( existing.reachesIntoOuterContext, config.reachesIntoOuterContext);
	// make sure to preserve the precedence filter suppression during the merge
	if (config.precedenceFilterSuppressed) {
		existing.precedenceFilterSuppressed = true;
	}
	existing.context = merged; // replace context; no need to alt mapping
	return true;
};

ATNConfigSet.prototype.getStates = function() {
	var states = new Set();
	for (var i = 0; i < this.configs.length; i++) {
		states.add(this.configs[i].state);
	}
	return states;
};

ATNConfigSet.prototype.getPredicates = function() {
	var preds = [];
	for (var i = 0; i < this.configs.length; i++) {
		var c = this.configs[i].semanticContext;
		if (c !== SemanticContext.NONE) {
			preds.push(c.semanticContext);
		}
	}
	return preds;
};

Object.defineProperty(ATNConfigSet.prototype, "items", {
	get : function() {
		return this.configs;
	}
});

ATNConfigSet.prototype.optimizeConfigs = function(interpreter) {
	if (this.readOnly) {
		throw "This set is readonly";
	}
	if (this.configLookup.length === 0) {
		return;
	}
	for (var i = 0; i < this.configs.length; i++) {
		var config = this.configs[i];
		config.context = interpreter.getCachedContext(config.context);
	}
};

ATNConfigSet.prototype.addAll = function(coll) {
	for (var i = 0; i < coll.length; i++) {
		this.add(coll[i]);
	}
	return false;
};

ATNConfigSet.prototype.equals = function(other) {
	return this === other ||
		(other instanceof ATNConfigSet &&
		Utils.equalArrays(this.configs, other.configs) &&
		this.fullCtx === other.fullCtx &&
		this.uniqueAlt === other.uniqueAlt &&
		this.conflictingAlts === other.conflictingAlts &&
		this.hasSemanticContext === other.hasSemanticContext &&
		this.dipsIntoOuterContext === other.dipsIntoOuterContext);
};

ATNConfigSet.prototype.hashCode = function() {
    var hash = new Hash();
    this.updateHashCode(hash);
    return hash.finish();
};


ATNConfigSet.prototype.updateHashCode = function(hash) {
	if (this.readOnly) {
		if (this.cachedHashCode === -1) {
            var hash = new Hash();
            hash.update(this.configs);
			this.cachedHashCode = hash.finish();
		}
        hash.update(this.cachedHashCode);
	} else {
        hash.update(this.configs);
	}
};


Object.defineProperty(ATNConfigSet.prototype, "length", {
	get : function() {
		return this.configs.length;
	}
});

ATNConfigSet.prototype.isEmpty = function() {
	return this.configs.length === 0;
};

ATNConfigSet.prototype.contains = function(item) {
	if (this.configLookup === null) {
		throw "This method is not implemented for readonly sets.";
	}
	return this.configLookup.contains(item);
};

ATNConfigSet.prototype.containsFast = function(item) {
	if (this.configLookup === null) {
		throw "This method is not implemented for readonly sets.";
	}
	return this.configLookup.containsFast(item);
};

ATNConfigSet.prototype.clear = function() {
	if (this.readOnly) {
		throw "This set is readonly";
	}
	this.configs = [];
	this.cachedHashCode = -1;
	this.configLookup = new Set();
};

ATNConfigSet.prototype.setReadonly = function(readOnly) {
	this.readOnly = readOnly;
	if (readOnly) {
		this.configLookup = null; // can't mod, no need for lookup cache
	}
};

ATNConfigSet.prototype.toString = function() {
	return Utils.arrayToString(this.configs) +
		(this.hasSemanticContext ? ",hasSemanticContext=" + this.hasSemanticContext : "") +
		(this.uniqueAlt !== ATN.INVALID_ALT_NUMBER ? ",uniqueAlt=" + this.uniqueAlt : "") +
		(this.conflictingAlts !== null ? ",conflictingAlts=" + this.conflictingAlts : "") +
		(this.dipsIntoOuterContext ? ",dipsIntoOuterContext" : "");
};

function OrderedATNConfigSet() {
	ATNConfigSet.call(this);
	this.configLookup = new Set();
	return this;
}

OrderedATNConfigSet.prototype = Object.create(ATNConfigSet.prototype);
OrderedATNConfigSet.prototype.constructor = OrderedATNConfigSet;

exports.ATNConfigSet = ATNConfigSet;
exports.OrderedATNConfigSet = OrderedATNConfigSet;


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

// A tree structure used to record the semantic context in which
//  an ATN configuration is valid.  It's either a single predicate,
//  a conjunction {@code p1&&p2}, or a sum of products {@code p1||p2}.
//
//  <p>I have scoped the {@link AND}, {@link OR}, and {@link Predicate} subclasses of
//  {@link SemanticContext} within the scope of this outer class.</p>
//

var Set = __webpack_require__(0).Set;
var Hash = __webpack_require__(0).Hash;

function SemanticContext() {
	return this;
}

SemanticContext.prototype.hashCode = function() {
    var hash = new Hash();
    this.updateHashCode(hash);
    return hash.finish();
};

// For context independent predicates, we evaluate them without a local
// context (i.e., null context). That way, we can evaluate them without
// having to create proper rule-specific context during prediction (as
// opposed to the parser, which creates them naturally). In a practical
// sense, this avoids a cast exception from RuleContext to myruleContext.
//
// <p>For context dependent predicates, we must pass in a local context so that
// references such as $arg evaluate properly as _localctx.arg. We only
// capture context dependent predicates in the context in which we begin
// prediction, so we passed in the outer context here in case of context
// dependent predicate evaluation.</p>
//
SemanticContext.prototype.evaluate = function(parser, outerContext) {
};

//
// Evaluate the precedence predicates for the context and reduce the result.
//
// @param parser The parser instance.
// @param outerContext The current parser context object.
// @return The simplified semantic context after precedence predicates are
// evaluated, which will be one of the following values.
// <ul>
// <li>{@link //NONE}: if the predicate simplifies to {@code true} after
// precedence predicates are evaluated.</li>
// <li>{@code null}: if the predicate simplifies to {@code false} after
// precedence predicates are evaluated.</li>
// <li>{@code this}: if the semantic context is not changed as a result of
// precedence predicate evaluation.</li>
// <li>A non-{@code null} {@link SemanticContext}: the new simplified
// semantic context after precedence predicates are evaluated.</li>
// </ul>
//
SemanticContext.prototype.evalPrecedence = function(parser, outerContext) {
	return this;
};

SemanticContext.andContext = function(a, b) {
	if (a === null || a === SemanticContext.NONE) {
		return b;
	}
	if (b === null || b === SemanticContext.NONE) {
		return a;
	}
	var result = new AND(a, b);
	if (result.opnds.length === 1) {
		return result.opnds[0];
	} else {
		return result;
	}
};

SemanticContext.orContext = function(a, b) {
	if (a === null) {
		return b;
	}
	if (b === null) {
		return a;
	}
	if (a === SemanticContext.NONE || b === SemanticContext.NONE) {
		return SemanticContext.NONE;
	}
	var result = new OR(a, b);
	if (result.opnds.length === 1) {
		return result.opnds[0];
	} else {
		return result;
	}
};

function Predicate(ruleIndex, predIndex, isCtxDependent) {
	SemanticContext.call(this);
	this.ruleIndex = ruleIndex === undefined ? -1 : ruleIndex;
	this.predIndex = predIndex === undefined ? -1 : predIndex;
	this.isCtxDependent = isCtxDependent === undefined ? false : isCtxDependent; // e.g., $i ref in pred
	return this;
}

Predicate.prototype = Object.create(SemanticContext.prototype);
Predicate.prototype.constructor = Predicate;

//The default {@link SemanticContext}, which is semantically equivalent to
//a predicate of the form {@code {true}?}.
//
SemanticContext.NONE = new Predicate();


Predicate.prototype.evaluate = function(parser, outerContext) {
	var localctx = this.isCtxDependent ? outerContext : null;
	return parser.sempred(localctx, this.ruleIndex, this.predIndex);
};

Predicate.prototype.updateHashCode = function(hash) {
	hash.update(this.ruleIndex, this.predIndex, this.isCtxDependent);
};

Predicate.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof Predicate)) {
		return false;
	} else {
		return this.ruleIndex === other.ruleIndex &&
				this.predIndex === other.predIndex &&
				this.isCtxDependent === other.isCtxDependent;
	}
};

Predicate.prototype.toString = function() {
	return "{" + this.ruleIndex + ":" + this.predIndex + "}?";
};

function PrecedencePredicate(precedence) {
	SemanticContext.call(this);
	this.precedence = precedence === undefined ? 0 : precedence;
}

PrecedencePredicate.prototype = Object.create(SemanticContext.prototype);
PrecedencePredicate.prototype.constructor = PrecedencePredicate;

PrecedencePredicate.prototype.evaluate = function(parser, outerContext) {
	return parser.precpred(outerContext, this.precedence);
};

PrecedencePredicate.prototype.evalPrecedence = function(parser, outerContext) {
	if (parser.precpred(outerContext, this.precedence)) {
		return SemanticContext.NONE;
	} else {
		return null;
	}
};

PrecedencePredicate.prototype.compareTo = function(other) {
	return this.precedence - other.precedence;
};

PrecedencePredicate.prototype.updateHashCode = function(hash) {
    hash.update(31);
};

PrecedencePredicate.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof PrecedencePredicate)) {
		return false;
	} else {
		return this.precedence === other.precedence;
	}
};

PrecedencePredicate.prototype.toString = function() {
	return "{"+this.precedence+">=prec}?";
};



PrecedencePredicate.filterPrecedencePredicates = function(set) {
	var result = [];
	set.values().map( function(context) {
		if (context instanceof PrecedencePredicate) {
			result.push(context);
		}
	});
	return result;
};


// A semantic context which is true whenever none of the contained contexts
// is false.
//
function AND(a, b) {
	SemanticContext.call(this);
	var operands = new Set();
	if (a instanceof AND) {
		a.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(a);
	}
	if (b instanceof AND) {
		b.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(b);
	}
	var precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);
	if (precedencePredicates.length > 0) {
		// interested in the transition with the lowest precedence
		var reduced = null;
		precedencePredicates.map( function(p) {
			if(reduced===null || p.precedence<reduced.precedence) {
				reduced = p;
			}
		});
		operands.add(reduced);
	}
	this.opnds = operands.values();
	return this;
}

AND.prototype = Object.create(SemanticContext.prototype);
AND.prototype.constructor = AND;

AND.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof AND)) {
		return false;
	} else {
		return this.opnds === other.opnds;
	}
};

AND.prototype.updateHashCode = function(hash) {
    hash.update(this.opnds, "AND");
};
//
// {@inheritDoc}
//
// <p>
// The evaluation of predicates by this context is short-circuiting, but
// unordered.</p>
//
AND.prototype.evaluate = function(parser, outerContext) {
	for (var i = 0; i < this.opnds.length; i++) {
		if (!this.opnds[i].evaluate(parser, outerContext)) {
			return false;
		}
	}
	return true;
};

AND.prototype.evalPrecedence = function(parser, outerContext) {
	var differs = false;
	var operands = [];
	for (var i = 0; i < this.opnds.length; i++) {
		var context = this.opnds[i];
		var evaluated = context.evalPrecedence(parser, outerContext);
		differs |= (evaluated !== context);
		if (evaluated === null) {
			// The AND context is false if any element is false
			return null;
		} else if (evaluated !== SemanticContext.NONE) {
			// Reduce the result by skipping true elements
			operands.push(evaluated);
		}
	}
	if (!differs) {
		return this;
	}
	if (operands.length === 0) {
		// all elements were true, so the AND context is true
		return SemanticContext.NONE;
	}
	var result = null;
	operands.map(function(o) {
		result = result === null ? o : SemanticContext.andContext(result, o);
	});
	return result;
};

AND.prototype.toString = function() {
	var s = "";
	this.opnds.map(function(o) {
		s += "&& " + o.toString();
	});
	return s.length > 3 ? s.slice(3) : s;
};

//
// A semantic context which is true whenever at least one of the contained
// contexts is true.
//
function OR(a, b) {
	SemanticContext.call(this);
	var operands = new Set();
	if (a instanceof OR) {
		a.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(a);
	}
	if (b instanceof OR) {
		b.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(b);
	}

	var precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);
	if (precedencePredicates.length > 0) {
		// interested in the transition with the highest precedence
		var s = precedencePredicates.sort(function(a, b) {
			return a.compareTo(b);
		});
		var reduced = s[s.length-1];
		operands.add(reduced);
	}
	this.opnds = operands.values();
	return this;
}

OR.prototype = Object.create(SemanticContext.prototype);
OR.prototype.constructor = OR;

OR.prototype.constructor = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof OR)) {
		return false;
	} else {
		return this.opnds === other.opnds;
	}
};

OR.prototype.updateHashCode = function(hash) {
    hash.update(this.opnds, "OR");
};

// <p>
// The evaluation of predicates by this context is short-circuiting, but
// unordered.</p>
//
OR.prototype.evaluate = function(parser, outerContext) {
	for (var i = 0; i < this.opnds.length; i++) {
		if (this.opnds[i].evaluate(parser, outerContext)) {
			return true;
		}
	}
	return false;
};

OR.prototype.evalPrecedence = function(parser, outerContext) {
	var differs = false;
	var operands = [];
	for (var i = 0; i < this.opnds.length; i++) {
		var context = this.opnds[i];
		var evaluated = context.evalPrecedence(parser, outerContext);
		differs |= (evaluated !== context);
		if (evaluated === SemanticContext.NONE) {
			// The OR context is true if any element is true
			return SemanticContext.NONE;
		} else if (evaluated !== null) {
			// Reduce the result by skipping false elements
			operands.push(evaluated);
		}
	}
	if (!differs) {
		return this;
	}
	if (operands.length === 0) {
		// all elements were false, so the OR context is false
		return null;
	}
	var result = null;
	operands.map(function(o) {
		return result === null ? o : SemanticContext.orContext(result, o);
	});
	return result;
};

OR.prototype.toString = function() {
	var s = "";
	this.opnds.map(function(o) {
		s += "|| " + o.toString();
	});
	return s.length > 3 ? s.slice(3) : s;
};

exports.SemanticContext = SemanticContext;
exports.PrecedencePredicate = PrecedencePredicate;
exports.Predicate = Predicate;


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

var ATNConfigSet = __webpack_require__(13).ATNConfigSet;
var Utils = __webpack_require__(0);
var Hash = Utils.Hash;
var Set = Utils.Set;

// Map a predicate to a predicted alternative.///

function PredPrediction(pred, alt) {
	this.alt = alt;
	this.pred = pred;
	return this;
}

PredPrediction.prototype.toString = function() {
	return "(" + this.pred + ", " + this.alt + ")";
};

// A DFA state represents a set of possible ATN configurations.
// As Aho, Sethi, Ullman p. 117 says "The DFA uses its state
// to keep track of all possible states the ATN can be in after
// reading each input symbol. That is to say, after reading
// input a1a2..an, the DFA is in a state that represents the
// subset T of the states of the ATN that are reachable from the
// ATN's start state along some path labeled a1a2..an."
// In conventional NFA&rarr;DFA conversion, therefore, the subset T
// would be a bitset representing the set of states the
// ATN could be in. We need to track the alt predicted by each
// state as well, however. More importantly, we need to maintain
// a stack of states, tracking the closure operations as they
// jump from rule to rule, emulating rule invocations (method calls).
// I have to add a stack to simulate the proper lookahead sequences for
// the underlying LL grammar from which the ATN was derived.
//
// <p>I use a set of ATNConfig objects not simple states. An ATNConfig
// is both a state (ala normal conversion) and a RuleContext describing
// the chain of rules (if any) followed to arrive at that state.</p>
//
// <p>A DFA state may have multiple references to a particular state,
// but with different ATN contexts (with same or different alts)
// meaning that state was reached via a different set of rule invocations.</p>
// /

function DFAState(stateNumber, configs) {
	if (stateNumber === null) {
		stateNumber = -1;
	}
	if (configs === null) {
		configs = new ATNConfigSet();
	}
	this.stateNumber = stateNumber;
	this.configs = configs;
	// {@code edges[symbol]} points to target of symbol. Shift up by 1 so (-1)
	// {@link Token//EOF} maps to {@code edges[0]}.
	this.edges = null;
	this.isAcceptState = false;
	// if accept state, what ttype do we match or alt do we predict?
	// This is set to {@link ATN//INVALID_ALT_NUMBER} when {@link
	// //predicates}{@code !=null} or
	// {@link //requiresFullContext}.
	this.prediction = 0;
	this.lexerActionExecutor = null;
	// Indicates that this state was created during SLL prediction that
	// discovered a conflict between the configurations in the state. Future
	// {@link ParserATNSimulator//execATN} invocations immediately jumped doing
	// full context prediction if this field is true.
	this.requiresFullContext = false;
	// During SLL parsing, this is a list of predicates associated with the
	// ATN configurations of the DFA state. When we have predicates,
	// {@link //requiresFullContext} is {@code false} since full context
	// prediction evaluates predicates
	// on-the-fly. If this is not null, then {@link //prediction} is
	// {@link ATN//INVALID_ALT_NUMBER}.
	//
	// <p>We only use these for non-{@link //requiresFullContext} but
	// conflicting states. That
	// means we know from the context (it's $ or we don't dip into outer
	// context) that it's an ambiguity not a conflict.</p>
	//
	// <p>This list is computed by {@link
	// ParserATNSimulator//predicateDFAState}.</p>
	this.predicates = null;
	return this;
}

// Get the set of all alts mentioned by all ATN configurations in this
// DFA state.
DFAState.prototype.getAltSet = function() {
	var alts = new Set();
	if (this.configs !== null) {
		for (var i = 0; i < this.configs.length; i++) {
			var c = this.configs[i];
			alts.add(c.alt);
		}
	}
	if (alts.length === 0) {
		return null;
	} else {
		return alts;
	}
};

// Two {@link DFAState} instances are equal if their ATN configuration sets
// are the same. This method is used to see if a state already exists.
//
// <p>Because the number of alternatives and number of ATN configurations are
// finite, there is a finite number of DFA states that can be processed.
// This is necessary to show that the algorithm terminates.</p>
//
// <p>Cannot test the DFA state numbers here because in
// {@link ParserATNSimulator//addDFAState} we need to know if any other state
// exists that has this exact set of ATN configurations. The
// {@link //stateNumber} is irrelevant.</p>
DFAState.prototype.equals = function(other) {
	// compare set of ATN configurations in this set with other
	return this === other ||
			(other instanceof DFAState &&
				this.configs.equals(other.configs));
};

DFAState.prototype.toString = function() {
	var s = "" + this.stateNumber + ":" + this.configs;
	if(this.isAcceptState) {
        s = s + "=>";
        if (this.predicates !== null)
            s = s + this.predicates;
        else
            s = s + this.prediction;
    }
	return s;
};

DFAState.prototype.hashCode = function() {
	var hash = new Hash();
	hash.update(this.configs);
	if(this.isAcceptState) {
        if (this.predicates !== null)
            hash.update(this.predicates);
        else
            hash.update(this.prediction);
    }
    return hash.finish();
};

exports.DFAState = DFAState;
exports.PredPrediction = PredPrediction;


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// A tuple: (ATN state, predicted alt, syntactic, semantic context).
//  The syntactic context is a graph-structured stack node whose
//  path(s) to the root is the rule invocation(s)
//  chain used to arrive at the state.  The semantic context is
//  the tree of semantic predicates encountered before reaching
//  an ATN state.
///

var DecisionState = __webpack_require__(6).DecisionState;
var SemanticContext = __webpack_require__(14).SemanticContext;
var Hash = __webpack_require__(0).Hash;


function checkParams(params, isCfg) {
	if(params===null) {
		var result = { state:null, alt:null, context:null, semanticContext:null };
		if(isCfg) {
			result.reachesIntoOuterContext = 0;
		}
		return result;
	} else {
		var props = {};
		props.state = params.state || null;
		props.alt = (params.alt === undefined) ? null : params.alt;
		props.context = params.context || null;
		props.semanticContext = params.semanticContext || null;
		if(isCfg) {
			props.reachesIntoOuterContext = params.reachesIntoOuterContext || 0;
			props.precedenceFilterSuppressed = params.precedenceFilterSuppressed || false;
		}
		return props;
	}
}

function ATNConfig(params, config) {
	this.checkContext(params, config);
	params = checkParams(params);
	config = checkParams(config, true);
    // The ATN state associated with this configuration///
    this.state = params.state!==null ? params.state : config.state;
    // What alt (or lexer rule) is predicted by this configuration///
    this.alt = params.alt!==null ? params.alt : config.alt;
    // The stack of invoking states leading to the rule/states associated
    //  with this config.  We track only those contexts pushed during
    //  execution of the ATN simulator.
    this.context = params.context!==null ? params.context : config.context;
    this.semanticContext = params.semanticContext!==null ? params.semanticContext :
        (config.semanticContext!==null ? config.semanticContext : SemanticContext.NONE);
    // We cannot execute predicates dependent upon local context unless
    // we know for sure we are in the correct context. Because there is
    // no way to do this efficiently, we simply cannot evaluate
    // dependent predicates unless we are in the rule that initially
    // invokes the ATN simulator.
    //
    // closure() tracks the depth of how far we dip into the
    // outer context: depth &gt; 0.  Note that it may not be totally
    // accurate depth since I don't ever decrement. TODO: make it a boolean then
    this.reachesIntoOuterContext = config.reachesIntoOuterContext;
    this.precedenceFilterSuppressed = config.precedenceFilterSuppressed;
    return this;
}

ATNConfig.prototype.checkContext = function(params, config) {
	if((params.context===null || params.context===undefined) &&
			(config===null || config.context===null || config.context===undefined)) {
		this.context = null;
	}
};


ATNConfig.prototype.hashCode = function() {
    var hash = new Hash();
    this.updateHashCode(hash);
    return hash.finish();
};


ATNConfig.prototype.updateHashCode = function(hash) {
    hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext);
};

// An ATN configuration is equal to another if both have
//  the same state, they predict the same alternative, and
//  syntactic/semantic contexts are the same.

ATNConfig.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof ATNConfig)) {
        return false;
    } else {
        return this.state.stateNumber===other.state.stateNumber &&
            this.alt===other.alt &&
            (this.context===null ? other.context===null : this.context.equals(other.context)) &&
            this.semanticContext.equals(other.semanticContext) &&
            this.precedenceFilterSuppressed===other.precedenceFilterSuppressed;
    }
};


ATNConfig.prototype.hashCodeForConfigSet = function() {
    var hash = new Hash();
    hash.update(this.state.stateNumber, this.alt, this.semanticContext);
    return hash.finish();
};


ATNConfig.prototype.equalsForConfigSet = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof ATNConfig)) {
        return false;
    } else {
        return this.state.stateNumber===other.state.stateNumber &&
            this.alt===other.alt &&
            this.semanticContext.equals(other.semanticContext);
    }
};


ATNConfig.prototype.toString = function() {
    return "(" + this.state + "," + this.alt +
        (this.context!==null ? ",[" + this.context.toString() + "]" : "") +
        (this.semanticContext !== SemanticContext.NONE ?
                ("," + this.semanticContext.toString())
                : "") +
        (this.reachesIntoOuterContext>0 ?
                (",up=" + this.reachesIntoOuterContext)
                : "") + ")";
};


function LexerATNConfig(params, config) {
	ATNConfig.call(this, params, config);

    // This is the backing field for {@link //getLexerActionExecutor}.
	var lexerActionExecutor = params.lexerActionExecutor || null;
    this.lexerActionExecutor = lexerActionExecutor || (config!==null ? config.lexerActionExecutor : null);
    this.passedThroughNonGreedyDecision = config!==null ? this.checkNonGreedyDecision(config, this.state) : false;
    return this;
}

LexerATNConfig.prototype = Object.create(ATNConfig.prototype);
LexerATNConfig.prototype.constructor = LexerATNConfig;

LexerATNConfig.prototype.updateHashCode = function(hash) {
    hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext, this.passedThroughNonGreedyDecision, this.lexerActionExecutor);
};

LexerATNConfig.prototype.equals = function(other) {
    return this === other ||
            (other instanceof LexerATNConfig &&
            this.passedThroughNonGreedyDecision == other.passedThroughNonGreedyDecision &&
            (this.lexerActionExecutor ? this.lexerActionExecutor.equals(other.lexerActionExecutor) : !other.lexerActionExecutor) &&
            ATNConfig.prototype.equals.call(this, other));
};

LexerATNConfig.prototype.hashCodeForConfigSet = LexerATNConfig.prototype.hashCode;

LexerATNConfig.prototype.equalsForConfigSet = LexerATNConfig.prototype.equals;


LexerATNConfig.prototype.checkNonGreedyDecision = function(source, target) {
    return source.passedThroughNonGreedyDecision ||
        (target instanceof DecisionState) && target.nonGreedy;
};

exports.ATNConfig = ATNConfig;
exports.LexerATNConfig = LexerATNConfig;

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

//  A rule context is a record of a single rule invocation. It knows
//  which context invoked it, if any. If there is no parent context, then
//  naturally the invoking state is not valid.  The parent link
//  provides a chain upwards from the current rule invocation to the root
//  of the invocation tree, forming a stack. We actually carry no
//  information about the rule associated with this context (except
//  when parsing). We keep only the state number of the invoking state from
//  the ATN submachine that invoked this. Contrast this with the s
//  pointer inside ParserRuleContext that tracks the current state
//  being "executed" for the current rule.
//
//  The parent contexts are useful for computing lookahead sets and
//  getting error information.
//
//  These objects are used during parsing and prediction.
//  For the special case of parsers, we use the subclass
//  ParserRuleContext.
//
//  @see ParserRuleContext
///

var RuleNode = __webpack_require__(7).RuleNode;
var INVALID_INTERVAL = __webpack_require__(7).INVALID_INTERVAL;
var INVALID_ALT_NUMBER = __webpack_require__(11).INVALID_ALT_NUMBER;

function RuleContext(parent, invokingState) {
	RuleNode.call(this);
	// What context invoked this rule?
	this.parentCtx = parent || null;
	// What state invoked the rule associated with this context?
	// The "return address" is the followState of invokingState
	// If parent is null, this should be -1.
	this.invokingState = invokingState || -1;
	return this;
}

RuleContext.prototype = Object.create(RuleNode.prototype);
RuleContext.prototype.constructor = RuleContext;

RuleContext.prototype.depth = function() {
	var n = 0;
	var p = this;
	while (p !== null) {
		p = p.parentCtx;
		n += 1;
	}
	return n;
};

// A context is empty if there is no invoking state; meaning nobody call
// current context.
RuleContext.prototype.isEmpty = function() {
	return this.invokingState === -1;
};

// satisfy the ParseTree / SyntaxTree interface

RuleContext.prototype.getSourceInterval = function() {
	return INVALID_INTERVAL;
};

RuleContext.prototype.getRuleContext = function() {
	return this;
};

RuleContext.prototype.getPayload = function() {
	return this;
};

// Return the combined text of all child nodes. This method only considers
// tokens which have been added to the parse tree.
// <p>
// Since tokens on hidden channels (e.g. whitespace or comments) are not
// added to the parse trees, they will not appear in the output of this
// method.
// /
RuleContext.prototype.getText = function() {
	if (this.getChildCount() === 0) {
		return "";
	} else {
		return this.children.map(function(child) {
			return child.getText();
		}).join("");
	}
};

// For rule associated with this parse tree internal node, return
// the outer alternative number used to match the input. Default
// implementation does not compute nor store this alt num. Create
// a subclass of ParserRuleContext with backing field and set
// option contextSuperClass.
// to set it.
RuleContext.prototype.getAltNumber = function() { return INVALID_ALT_NUMBER; }

// Set the outer alternative number for this context node. Default
// implementation does nothing to avoid backing field overhead for
// trees that don't need it.  Create
// a subclass of ParserRuleContext with backing field and set
// option contextSuperClass.
RuleContext.prototype.setAltNumber = function(altNumber) { }

RuleContext.prototype.getChild = function(i) {
	return null;
};

RuleContext.prototype.getChildCount = function() {
	return 0;
};

RuleContext.prototype.accept = function(visitor) {
	return visitor.visitChildren(this);
};

//need to manage circular dependencies, so export now
exports.RuleContext = RuleContext;
var Trees = __webpack_require__(28).Trees;


// Print out a whole tree, not just a node, in LISP format
// (root child1 .. childN). Print just a node if this is a leaf.
//

RuleContext.prototype.toStringTree = function(ruleNames, recog) {
	return Trees.toStringTree(this, ruleNames, recog);
};

RuleContext.prototype.toString = function(ruleNames, stop) {
	ruleNames = ruleNames || null;
	stop = stop || null;
	var p = this;
	var s = "[";
	while (p !== null && p !== stop) {
		if (ruleNames === null) {
			if (!p.isEmpty()) {
				s += p.invokingState;
			}
		} else {
			var ri = p.ruleIndex;
			var ruleName = (ri >= 0 && ri < ruleNames.length) ? ruleNames[ri]
					: "" + ri;
			s += ruleName;
		}
		if (p.parentCtx !== null && (ruleNames !== null || !p.parentCtx.isEmpty())) {
			s += " ";
		}
		p = p.parentCtx;
	}
	s += "]";
	return s;
};



/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// A lexer is recognizer that draws input symbols from a character stream.
//  lexer grammars result in a subclass of this object. A Lexer object
//  uses simplified match() and error recovery mechanisms in the interest of speed.

var Token = __webpack_require__(2).Token;
var Recognizer = __webpack_require__(32).Recognizer;
var CommonTokenFactory = __webpack_require__(56).CommonTokenFactory;
var RecognitionException  = __webpack_require__(8).RecognitionException;
var LexerNoViableAltException = __webpack_require__(8).LexerNoViableAltException;

function TokenSource() {
	return this;
}

function Lexer(input) {
	Recognizer.call(this);
	this._input = input;
	this._factory = CommonTokenFactory.DEFAULT;
	this._tokenFactorySourcePair = [ this, input ];

	this._interp = null; // child classes must populate this

	// The goal of all lexer rules/methods is to create a token object.
	// this is an instance variable as multiple rules may collaborate to
	// create a single token. nextToken will return this object after
	// matching lexer rule(s). If you subclass to allow multiple token
	// emissions, then set this to the last token to be matched or
	// something nonnull so that the auto token emit mechanism will not
	// emit another token.
	this._token = null;

	// What character index in the stream did the current token start at?
	// Needed, for example, to get the text for current token. Set at
	// the start of nextToken.
	this._tokenStartCharIndex = -1;

	// The line on which the first character of the token resides///
	this._tokenStartLine = -1;

	// The character position of first character within the line///
	this._tokenStartColumn = -1;

	// Once we see EOF on char stream, next token will be EOF.
	// If you have DONE : EOF ; then you see DONE EOF.
	this._hitEOF = false;

	// The channel number for the current token///
	this._channel = Token.DEFAULT_CHANNEL;

	// The token type for the current token///
	this._type = Token.INVALID_TYPE;

	this._modeStack = [];
	this._mode = Lexer.DEFAULT_MODE;

	// You can set the text for the current token to override what is in
	// the input char buffer. Use setText() or can set this instance var.
	// /
	this._text = null;

	return this;
}

Lexer.prototype = Object.create(Recognizer.prototype);
Lexer.prototype.constructor = Lexer;

Lexer.DEFAULT_MODE = 0;
Lexer.MORE = -2;
Lexer.SKIP = -3;

Lexer.DEFAULT_TOKEN_CHANNEL = Token.DEFAULT_CHANNEL;
Lexer.HIDDEN = Token.HIDDEN_CHANNEL;
Lexer.MIN_CHAR_VALUE = 0x0000;
Lexer.MAX_CHAR_VALUE = 0x10FFFF;

Lexer.prototype.reset = function() {
	// wack Lexer state variables
	if (this._input !== null) {
		this._input.seek(0); // rewind the input
	}
	this._token = null;
	this._type = Token.INVALID_TYPE;
	this._channel = Token.DEFAULT_CHANNEL;
	this._tokenStartCharIndex = -1;
	this._tokenStartColumn = -1;
	this._tokenStartLine = -1;
	this._text = null;

	this._hitEOF = false;
	this._mode = Lexer.DEFAULT_MODE;
	this._modeStack = [];

	this._interp.reset();
};

// Return a token from this source; i.e., match a token on the char stream.
Lexer.prototype.nextToken = function() {
	if (this._input === null) {
		throw "nextToken requires a non-null input stream.";
	}

	// Mark start location in char stream so unbuffered streams are
	// guaranteed at least have text of current token
	var tokenStartMarker = this._input.mark();
	try {
		while (true) {
			if (this._hitEOF) {
				this.emitEOF();
				return this._token;
			}
			this._token = null;
			this._channel = Token.DEFAULT_CHANNEL;
			this._tokenStartCharIndex = this._input.index;
			this._tokenStartColumn = this._interp.column;
			this._tokenStartLine = this._interp.line;
			this._text = null;
			var continueOuter = false;
			while (true) {
				this._type = Token.INVALID_TYPE;
				var ttype = Lexer.SKIP;
				try {
					ttype = this._interp.match(this._input, this._mode);
				} catch (e) {
				    if(e instanceof RecognitionException) {
                        this.notifyListeners(e); // report error
                        this.recover(e);
                    } else {
                        console.log(e.stack);
                        throw e;
                    }
				}
				if (this._input.LA(1) === Token.EOF) {
					this._hitEOF = true;
				}
				if (this._type === Token.INVALID_TYPE) {
					this._type = ttype;
				}
				if (this._type === Lexer.SKIP) {
					continueOuter = true;
					break;
				}
				if (this._type !== Lexer.MORE) {
					break;
				}
			}
			if (continueOuter) {
				continue;
			}
			if (this._token === null) {
				this.emit();
			}
			return this._token;
		}
	} finally {
		// make sure we release marker after match or
		// unbuffered char stream will keep buffering
		this._input.release(tokenStartMarker);
	}
};

// Instruct the lexer to skip creating a token for current lexer rule
// and look for another token. nextToken() knows to keep looking when
// a lexer rule finishes with token set to SKIP_TOKEN. Recall that
// if token==null at end of any token rule, it creates one for you
// and emits it.
// /
Lexer.prototype.skip = function() {
	this._type = Lexer.SKIP;
};

Lexer.prototype.more = function() {
	this._type = Lexer.MORE;
};

Lexer.prototype.mode = function(m) {
	this._mode = m;
};

Lexer.prototype.pushMode = function(m) {
	if (this._interp.debug) {
		console.log("pushMode " + m);
	}
	this._modeStack.push(this._mode);
	this.mode(m);
};

Lexer.prototype.popMode = function() {
	if (this._modeStack.length === 0) {
		throw "Empty Stack";
	}
	if (this._interp.debug) {
		console.log("popMode back to " + this._modeStack.slice(0, -1));
	}
	this.mode(this._modeStack.pop());
	return this._mode;
};

// Set the char stream and reset the lexer
Object.defineProperty(Lexer.prototype, "inputStream", {
	get : function() {
		return this._input;
	},
	set : function(input) {
		this._input = null;
		this._tokenFactorySourcePair = [ this, this._input ];
		this.reset();
		this._input = input;
		this._tokenFactorySourcePair = [ this, this._input ];
	}
});

Object.defineProperty(Lexer.prototype, "sourceName", {
	get : function sourceName() {
		return this._input.sourceName;
	}
});

// By default does not support multiple emits per nextToken invocation
// for efficiency reasons. Subclass and override this method, nextToken,
// and getToken (to push tokens into a list and pull from that list
// rather than a single variable as this implementation does).
// /
Lexer.prototype.emitToken = function(token) {
	this._token = token;
};

// The standard method called to automatically emit a token at the
// outermost lexical rule. The token object should point into the
// char buffer start..stop. If there is a text override in 'text',
// use that to set the token's text. Override this method to emit
// custom Token objects or provide a new factory.
// /
Lexer.prototype.emit = function() {
	var t = this._factory.create(this._tokenFactorySourcePair, this._type,
			this._text, this._channel, this._tokenStartCharIndex, this
					.getCharIndex() - 1, this._tokenStartLine,
			this._tokenStartColumn);
	this.emitToken(t);
	return t;
};

Lexer.prototype.emitEOF = function() {
	var cpos = this.column;
	var lpos = this.line;
	var eof = this._factory.create(this._tokenFactorySourcePair, Token.EOF,
			null, Token.DEFAULT_CHANNEL, this._input.index,
			this._input.index - 1, lpos, cpos);
	this.emitToken(eof);
	return eof;
};

Object.defineProperty(Lexer.prototype, "type", {
	get : function() {
		return this.type;
	},
	set : function(type) {
		this._type = type;
	}
});

Object.defineProperty(Lexer.prototype, "line", {
	get : function() {
		return this._interp.line;
	},
	set : function(line) {
		this._interp.line = line;
	}
});

Object.defineProperty(Lexer.prototype, "column", {
	get : function() {
		return this._interp.column;
	},
	set : function(column) {
		this._interp.column = column;
	}
});


// What is the index of the current character of lookahead?///
Lexer.prototype.getCharIndex = function() {
	return this._input.index;
};

// Return the text matched so far for the current token or any text override.
//Set the complete text of this token; it wipes any previous changes to the text.
Object.defineProperty(Lexer.prototype, "text", {
	get : function() {
		if (this._text !== null) {
			return this._text;
		} else {
			return this._interp.getText(this._input);
		}
	},
	set : function(text) {
		this._text = text;
	}
});
// Return a list of all Token objects in input char stream.
// Forces load of all tokens. Does not include EOF token.
// /
Lexer.prototype.getAllTokens = function() {
	var tokens = [];
	var t = this.nextToken();
	while (t.type !== Token.EOF) {
		tokens.push(t);
		t = this.nextToken();
	}
	return tokens;
};

Lexer.prototype.notifyListeners = function(e) {
	var start = this._tokenStartCharIndex;
	var stop = this._input.index;
	var text = this._input.getText(start, stop);
	var msg = "token recognition error at: '" + this.getErrorDisplay(text) + "'";
	var listener = this.getErrorListenerDispatch();
	listener.syntaxError(this, null, this._tokenStartLine,
			this._tokenStartColumn, msg, e);
};

Lexer.prototype.getErrorDisplay = function(s) {
	var d = [];
	for (var i = 0; i < s.length; i++) {
		d.push(s[i]);
	}
	return d.join('');
};

Lexer.prototype.getErrorDisplayForChar = function(c) {
	if (c.charCodeAt(0) === Token.EOF) {
		return "<EOF>";
	} else if (c === '\n') {
		return "\\n";
	} else if (c === '\t') {
		return "\\t";
	} else if (c === '\r') {
		return "\\r";
	} else {
		return c;
	}
};

Lexer.prototype.getCharErrorDisplay = function(c) {
	return "'" + this.getErrorDisplayForChar(c) + "'";
};

// Lexers can normally match any char in it's vocabulary after matching
// a token, so do the easy thing and just kill a character and hope
// it all works out. You can instead use the rule invocation stack
// to do sophisticated error recovery if you are in a fragment rule.
// /
Lexer.prototype.recover = function(re) {
	if (this._input.LA(1) !== Token.EOF) {
		if (re instanceof LexerNoViableAltException) {
			// skip a char and try again
			this._interp.consume(this._input);
		} else {
			// TODO: Do we lose character or line position information?
			this._input.consume();
		}
	}
};

exports.Lexer = Lexer;


/***/ }),
/* 19 */
/***/ (function(module, exports) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

// Provides an empty default implementation of {@link ANTLRErrorListener}. The
// default implementation of each method does nothing, but can be overridden as
// necessary.

function ErrorListener() {
	return this;
}

ErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {
};

ErrorListener.prototype.reportAmbiguity = function(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
};

ErrorListener.prototype.reportAttemptingFullContext = function(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
};

ErrorListener.prototype.reportContextSensitivity = function(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
};

function ConsoleErrorListener() {
	ErrorListener.call(this);
	return this;
}

ConsoleErrorListener.prototype = Object.create(ErrorListener.prototype);
ConsoleErrorListener.prototype.constructor = ConsoleErrorListener;

//
// Provides a default instance of {@link ConsoleErrorListener}.
//
ConsoleErrorListener.INSTANCE = new ConsoleErrorListener();

//
// {@inheritDoc}
//
// <p>
// This implementation prints messages to {@link System//err} containing the
// values of {@code line}, {@code charPositionInLine}, and {@code msg} using
// the following format.</p>
//
// <pre>
// line <em>line</em>:<em>charPositionInLine</em> <em>msg</em>
// </pre>
//
ConsoleErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {
    console.error("line " + line + ":" + column + " " + msg);
};

function ProxyErrorListener(delegates) {
	ErrorListener.call(this);
    if (delegates===null) {
        throw "delegates";
    }
    this.delegates = delegates;
	return this;
}

ProxyErrorListener.prototype = Object.create(ErrorListener.prototype);
ProxyErrorListener.prototype.constructor = ProxyErrorListener;

ProxyErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {
    this.delegates.map(function(d) { d.syntaxError(recognizer, offendingSymbol, line, column, msg, e); });
};

ProxyErrorListener.prototype.reportAmbiguity = function(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
    this.delegates.map(function(d) { d.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs); });
};

ProxyErrorListener.prototype.reportAttemptingFullContext = function(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
	this.delegates.map(function(d) { d.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs); });
};

ProxyErrorListener.prototype.reportContextSensitivity = function(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
	this.delegates.map(function(d) { d.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs); });
};

exports.ErrorListener = ErrorListener;
exports.ConsoleErrorListener = ConsoleErrorListener;
exports.ProxyErrorListener = ProxyErrorListener;



/***/ }),
/* 20 */
/***/ (function(module, exports) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

// A DFA walker that knows how to dump them to serialized strings.#/


function DFASerializer(dfa, literalNames, symbolicNames) {
	this.dfa = dfa;
	this.literalNames = literalNames || [];
	this.symbolicNames = symbolicNames || [];
	return this;
}

DFASerializer.prototype.toString = function() {
   if(this.dfa.s0 === null) {
       return null;
   }
   var buf = "";
   var states = this.dfa.sortedStates();
   for(var i=0;i<states.length;i++) {
       var s = states[i];
       if(s.edges!==null) {
            var n = s.edges.length;
            for(var j=0;j<n;j++) {
                var t = s.edges[j] || null;
                if(t!==null && t.stateNumber !== 0x7FFFFFFF) {
                    buf = buf.concat(this.getStateString(s));
                    buf = buf.concat("-");
                    buf = buf.concat(this.getEdgeLabel(j));
                    buf = buf.concat("->");
                    buf = buf.concat(this.getStateString(t));
                    buf = buf.concat('\n');
                }
            }
       }
   }
   return buf.length===0 ? null : buf;
};

DFASerializer.prototype.getEdgeLabel = function(i) {
    if (i===0) {
        return "EOF";
    } else if(this.literalNames !==null || this.symbolicNames!==null) {
        return this.literalNames[i-1] || this.symbolicNames[i-1];
    } else {
        return String.fromCharCode(i-1);
    }
};

DFASerializer.prototype.getStateString = function(s) {
    var baseStateStr = ( s.isAcceptState ? ":" : "") + "s" + s.stateNumber + ( s.requiresFullContext ? "^" : "");
    if(s.isAcceptState) {
        if (s.predicates !== null) {
            return baseStateStr + "=>" + s.predicates.toString();
        } else {
            return baseStateStr + "=>" + s.prediction.toString();
        }
    } else {
        return baseStateStr;
    }
};

function LexerDFASerializer(dfa) {
	DFASerializer.call(this, dfa, null);
	return this;
}

LexerDFASerializer.prototype = Object.create(DFASerializer.prototype);
LexerDFASerializer.prototype.constructor = LexerDFASerializer;

LexerDFASerializer.prototype.getEdgeLabel = function(i) {
	return "'" + String.fromCharCode(i) + "'";
};

exports.DFASerializer = DFASerializer;
exports.LexerDFASerializer = LexerDFASerializer;



/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

//* A rule invocation record for parsing.
//
//  Contains all of the information about the current rule not stored in the
//  RuleContext. It handles parse tree children list, Any ATN state
//  tracing, and the default values available for rule indications:
//  start, stop, rule index, current alt number, current
//  ATN state.
//
//  Subclasses made for each rule and grammar track the parameters,
//  return values, locals, and labels specific to that rule. These
//  are the objects that are returned from rules.
//
//  Note text is not an actual field of a rule return value; it is computed
//  from start and stop using the input stream's toString() method.  I
//  could add a ctor to this so that we can pass in and store the input
//  stream, but I'm not sure we want to do that.  It would seem to be undefined
//  to get the .text property anyway if the rule matches tokens from multiple
//  input streams.
//
//  I do not use getters for fields of objects that are used simply to
//  group values such as this aggregate.  The getters/setters are there to
//  satisfy the superclass interface.

var RuleContext = __webpack_require__(17).RuleContext;
var Tree = __webpack_require__(7);
var INVALID_INTERVAL = Tree.INVALID_INTERVAL;
var TerminalNode = Tree.TerminalNode;
var TerminalNodeImpl = Tree.TerminalNodeImpl;
var ErrorNodeImpl = Tree.ErrorNodeImpl;
var Interval = __webpack_require__(4).Interval;

function ParserRuleContext(parent, invokingStateNumber) {
	parent = parent || null;
	invokingStateNumber = invokingStateNumber || null;
	RuleContext.call(this, parent, invokingStateNumber);
	this.ruleIndex = -1;
    // * If we are debugging or building a parse tree for a visitor,
    // we need to track all of the tokens and rule invocations associated
    // with this rule's context. This is empty for parsing w/o tree constr.
    // operation because we don't the need to track the details about
    // how we parse this rule.
    // /
    this.children = null;
    this.start = null;
    this.stop = null;
    // The exception that forced this rule to return. If the rule successfully
    // completed, this is {@code null}.
    this.exception = null;
}

ParserRuleContext.prototype = Object.create(RuleContext.prototype);
ParserRuleContext.prototype.constructor = ParserRuleContext;

// * COPY a ctx (I'm deliberately not using copy constructor)///
ParserRuleContext.prototype.copyFrom = function(ctx) {
    // from RuleContext
    this.parentCtx = ctx.parentCtx;
    this.invokingState = ctx.invokingState;
    this.children = null;
    this.start = ctx.start;
    this.stop = ctx.stop;
    // copy any error nodes to alt label node
    if(ctx.children) {
        this.children = [];
        // reset parent pointer for any error nodes
    	ctx.children.map(function(child) {
    		if (child instanceof ErrorNodeImpl) {
                this.children.push(child);
                child.parentCtx = this;
            }
		}, this);
	}
};

// Double dispatch methods for listeners
ParserRuleContext.prototype.enterRule = function(listener) {
};

ParserRuleContext.prototype.exitRule = function(listener) {
};

// * Does not set parent link; other add methods do that///
ParserRuleContext.prototype.addChild = function(child) {
    if (this.children === null) {
        this.children = [];
    }
    this.children.push(child);
    return child;
};

// * Used by enterOuterAlt to toss out a RuleContext previously added as
// we entered a rule. If we have // label, we will need to remove
// generic ruleContext object.
// /
ParserRuleContext.prototype.removeLastChild = function() {
    if (this.children !== null) {
        this.children.pop();
    }
};

ParserRuleContext.prototype.addTokenNode = function(token) {
    var node = new TerminalNodeImpl(token);
    this.addChild(node);
    node.parentCtx = this;
    return node;
};

ParserRuleContext.prototype.addErrorNode = function(badToken) {
    var node = new ErrorNodeImpl(badToken);
    this.addChild(node);
    node.parentCtx = this;
    return node;
};

ParserRuleContext.prototype.getChild = function(i, type) {
	type = type || null;
	if (this.children === null || i < 0 || i >= this.children.length) {
		return null;
	}
	if (type === null) {
		return this.children[i];
	} else {
		for(var j=0; j<this.children.length; j++) {
			var child = this.children[j];
			if(child instanceof type) {
				if(i===0) {
					return child;
				} else {
					i -= 1;
				}
			}
		}
		return null;
    }
};


ParserRuleContext.prototype.getToken = function(ttype, i) {
	if (this.children === null || i < 0 || i >= this.children.length) {
		return null;
	}
	for(var j=0; j<this.children.length; j++) {
		var child = this.children[j];
		if (child instanceof TerminalNode) {
			if (child.symbol.type === ttype) {
				if(i===0) {
					return child;
				} else {
					i -= 1;
				}
			}
        }
	}
    return null;
};

ParserRuleContext.prototype.getTokens = function(ttype ) {
    if (this.children=== null) {
        return [];
    } else {
		var tokens = [];
		for(var j=0; j<this.children.length; j++) {
			var child = this.children[j];
			if (child instanceof TerminalNode) {
				if (child.symbol.type === ttype) {
					tokens.push(child);
				}
			}
		}
		return tokens;
    }
};

ParserRuleContext.prototype.getTypedRuleContext = function(ctxType, i) {
    return this.getChild(i, ctxType);
};

ParserRuleContext.prototype.getTypedRuleContexts = function(ctxType) {
    if (this.children=== null) {
        return [];
    } else {
		var contexts = [];
		for(var j=0; j<this.children.length; j++) {
			var child = this.children[j];
			if (child instanceof ctxType) {
				contexts.push(child);
			}
		}
		return contexts;
	}
};

ParserRuleContext.prototype.getChildCount = function() {
	if (this.children=== null) {
		return 0;
	} else {
		return this.children.length;
	}
};

ParserRuleContext.prototype.getSourceInterval = function() {
    if( this.start === null || this.stop === null) {
        return INVALID_INTERVAL;
    } else {
        return new Interval(this.start.tokenIndex, this.stop.tokenIndex);
    }
};

RuleContext.EMPTY = new ParserRuleContext();

function InterpreterRuleContext(parent, invokingStateNumber, ruleIndex) {
	ParserRuleContext.call(parent, invokingStateNumber);
    this.ruleIndex = ruleIndex;
    return this;
}

InterpreterRuleContext.prototype = Object.create(ParserRuleContext.prototype);
InterpreterRuleContext.prototype.constructor = InterpreterRuleContext;

exports.ParserRuleContext = ParserRuleContext;

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

var Token = __webpack_require__(2).Token;
__webpack_require__(35);
__webpack_require__(36);

// Vacuum all input from a string and then treat it like a buffer.

function _loadString(stream, decodeToUnicodeCodePoints) {
	stream._index = 0;
	stream.data = [];
	if (stream.decodeToUnicodeCodePoints) {
		for (var i = 0; i < stream.strdata.length; ) {
			var codePoint = stream.strdata.codePointAt(i);
			stream.data.push(codePoint);
			i += codePoint <= 0xFFFF ? 1 : 2;
		}
	} else {
		for (var i = 0; i < stream.strdata.length; i++) {
			var codeUnit = stream.strdata.charCodeAt(i);
			stream.data.push(codeUnit);
		}
	}
	stream._size = stream.data.length;
}

// If decodeToUnicodeCodePoints is true, the input is treated
// as a series of Unicode code points.
//
// Otherwise, the input is treated as a series of 16-bit UTF-16 code
// units.
function InputStream(data, decodeToUnicodeCodePoints) {
	this.name = "<empty>";
	this.strdata = data;
	this.decodeToUnicodeCodePoints = decodeToUnicodeCodePoints || false;
	_loadString(this);
	return this;
}

Object.defineProperty(InputStream.prototype, "index", {
	get : function() {
		return this._index;
	}
});

Object.defineProperty(InputStream.prototype, "size", {
	get : function() {
		return this._size;
	}
});

// Reset the stream so that it's in the same state it was
// when the object was created *except* the data array is not
// touched.
//
InputStream.prototype.reset = function() {
	this._index = 0;
};

InputStream.prototype.consume = function() {
	if (this._index >= this._size) {
		// assert this.LA(1) == Token.EOF
		throw ("cannot consume EOF");
	}
	this._index += 1;
};

InputStream.prototype.LA = function(offset) {
	if (offset === 0) {
		return 0; // undefined
	}
	if (offset < 0) {
		offset += 1; // e.g., translate LA(-1) to use offset=0
	}
	var pos = this._index + offset - 1;
	if (pos < 0 || pos >= this._size) { // invalid
		return Token.EOF;
	}
	return this.data[pos];
};

InputStream.prototype.LT = function(offset) {
	return this.LA(offset);
};

// mark/release do nothing; we have entire buffer
InputStream.prototype.mark = function() {
	return -1;
};

InputStream.prototype.release = function(marker) {
};

// consume() ahead until p==_index; can't just set p=_index as we must
// update line and column. If we seek backwards, just set p
//
InputStream.prototype.seek = function(_index) {
	if (_index <= this._index) {
		this._index = _index; // just jump; don't update stream state (line,
								// ...)
		return;
	}
	// seek forward
	this._index = Math.min(_index, this._size);
};

InputStream.prototype.getText = function(start, stop) {
	if (stop >= this._size) {
		stop = this._size - 1;
	}
	if (start >= this._size) {
		return "";
	} else {
		if (this.decodeToUnicodeCodePoints) {
			var result = "";
			for (var i = start; i <= stop; i++) {
				result += String.fromCodePoint(this.data[i]);
			}
			return result;
		} else {
			return this.strdata.slice(start, stop + 1);
		}
	}
};

InputStream.prototype.toString = function() {
	return this.strdata;
};

exports.InputStream = InputStream;


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
/*
 * Copyright (c) 2002-2017 "Neo Technology,"
 * Network Engine for Objects in Lund AB [http://neotechnology.com]
 *
 * This file is part of Neo4j.
 *
 * Neo4j is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

exports.default = ['CYPHER', 'EXPLAIN', 'PROFILE', 'USING', 'PERIODIC', 'COMMIT', 'UNION', 'ALL', 'CREATE', 'DROP', 'INDEX', 'ON', 'CONSTRAINT', 'ASSERT', 'IS', 'UNIQUE', 'EXISTS', 'LOAD', 'CSV', 'WITH', 'HEADERS', 'FROM', 'AS', 'FIELDTERMINATOR', 'OPTIONAL', 'MATCH', 'UNWIND', 'MERGE', 'SET', 'DETACH', 'DELETE', 'REMOVE', 'FOREACH', 'IN', 'DISTINCT', 'RETURN', 'ORDER', 'BY', 'SKIP', 'LIMIT', 'ASCENDING', 'ASC', 'DESCENDING', 'DESC', 'JOIN', 'SCAN', 'STARTS', 'START', 'NODE', 'RELATIONSHIP', 'REL', 'WHERE', 'SHORTESTPATH', 'ALLSHORTESTPATHS', 'OR', 'XOR', 'AND', 'NOT', 'ENDS', 'CONTAINS', 'NULL', 'COUNT', 'FILTER', 'EXTRACT', 'ANY', 'NONE', 'SINGLE', 'TRUE', 'FALSE', 'REDUCE', 'CASE', 'ELSE', 'END', 'WHEN', 'THEN', 'CALL', 'YIELD', 'KEY', 'CATALOG', 'SHOW', 'DEFAULT', 'DBMS', 'DATABASES', 'DATABASE', 'GRAPHS', 'GRAPH', 'REPLACE', 'IF', 'STOP', 'ROLES', 'ROLE', 'USERS', 'USER', 'POPULATED', 'PASSWORD', 'CHANGE', 'REQUIRED', 'STATUS', 'ACTIVE', 'SUSPENDED', 'ALTER', 'CURRENT', 'TO', 'PRIVILEGES', 'GRANT', 'DENY', 'REVOKE', 'RELATIONSHIPS', 'NODES', 'ELEMENTS', 'ELEMENT', 'COPY', 'OF', 'TRAVERSE', 'READ', 'WRITE', 'ACCESS', 'INDEXES', 'MANAGEMENT', 'NEW', 'LABELS', 'LABEL', 'NAMES', 'NAME', 'TYPES', 'TYPE', 'PROPERTY', 'CONSTRAINTS', 'ASSIGN'];

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85)))

/***/ }),
/* 25 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_25__;

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extractStatements = exports.parse = exports.TreeUtils = exports.CypherKeywords = exports.CypherTypes = exports.CypherEditorSupport = undefined;

var _CypherEditorSupport = __webpack_require__(48);

var _TreeUtils = __webpack_require__(5);

var _parse = __webpack_require__(42);

var _extractStatements = __webpack_require__(94);

var _CypherTypes = __webpack_require__(1);

var CypherTypes = _interopRequireWildcard(_CypherTypes);

var _CypherKeywords = __webpack_require__(23);

var _CypherKeywords2 = _interopRequireDefault(_CypherKeywords);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/*
 * Copyright (c) 2002-2017 "Neo Technology,"
 * Network Engine for Objects in Lund AB [http://neotechnology.com]
 *
 * This file is part of Neo4j.
 *
 * Neo4j is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

exports.CypherEditorSupport = _CypherEditorSupport.CypherEditorSupport;
exports.CypherTypes = CypherTypes;
exports.CypherKeywords = _CypherKeywords2.default;
exports.TreeUtils = _TreeUtils.TreeUtils;
exports.parse = _parse.parse;
exports.extractStatements = _extractStatements.extractStatements;

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Generated from cypher-editor-support/src/_generated/Cypher.g4 by ANTLR 4.7
// jshint ignore: start
var antlr4=__webpack_require__(9);var CypherListener=__webpack_require__(39).CypherListener;var grammarFileName="Cypher.g4";var serializedATN=['\x03\u608B\uA72A\u8133\uB9ED\u417C\u3BE7\u7786\u5964','\x03\x9C\u0A7B\x04\x02\t\x02\x04\x03\t\x03\x04\x04','\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07\t\x07','\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\x0B\t\x0B\x04\f\t\f','\x04\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10','\x04\x11\t\x11\x04\x12\t\x12\x04\x13\t\x13\x04\x14','\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17','\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B','\t\x1B\x04\x1C\t\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E','\x04\x1F\t\x1F\x04 \t \x04!\t!\x04"\t"\x04#\t#\x04','$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04','+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x04','2\t2\x043\t3\x044\t4\x045\t5\x046\t6\x047\t7\x048\t8\x04','9\t9\x04:\t:\x04;\t;\x04<\t<\x04=\t=\x04>\t>\x04?\t?\x04','@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04F\tF\x04','G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04','N\tN\x04O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04','U\tU\x04V\tV\x04W\tW\x04X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04','\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t`\x04a\ta\x04b\tb\x04','c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04i\ti\x04','j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04','q\tq\x04r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04','x\tx\x04y\ty\x04z\tz\x04{\t{\x04|\t|\x04}\t}\x04~\t~\x04','\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81\x04\x82\t','\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04','\x86\t\x86\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t','\x89\x04\x8A\t\x8A\x04\x8B\t\x8B\x04\x8C\t\x8C\x04','\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t','\x90\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04','\x94\t\x94\x04\x95\t\x95\x04\x96\t\x96\x04\x97\t','\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t\x9A\x04','\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t','\x9E\x04\x9F\t\x9F\x04\xA0\t\xA0\x04\xA1\t\xA1\x04','\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4\x04\xA5\t','\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04','\xA9\t\xA9\x04\xAA\t\xAA\x04\xAB\t\xAB\x04\xAC\t','\xAC\x04\xAD\t\xAD\x04\xAE\t\xAE\x04\xAF\t\xAF\x04','\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04\xB3\t','\xB3\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t\xB6\x04','\xB7\t\xB7\x04\xB8\t\xB8\x04\xB9\t\xB9\x04\xBA\t','\xBA\x04\xBB\t\xBB\x04\xBC\t\xBC\x04\xBD\t\xBD\x04','\xBE\t\xBE\x04\xBF\t\xBF\x04\xC0\t\xC0\x04\xC1\t','\xC1\x04\xC2\t\xC2\x04\xC3\t\xC3\x04\xC4\t\xC4\x04','\xC5\t\xC5\x04\xC6\t\xC6\x04\xC7\t\xC7\x04\xC8\t','\xC8\x04\xC9\t\xC9\x04\xCA\t\xCA\x04\xCB\t\xCB\x04','\xCC\t\xCC\x03\x02\x03\x02\x03\x02\x07\x02\u019C','\n\x02\f\x02\x0E\x02\u019F\x0B\x02\x03\x02\x05\x02','\u01A2\n\x02\x03\x02\x03\x02\x03\x03\x05\x03\u01A7','\n\x03\x03\x03\x03\x03\x05\x03\u01AB\n\x03\x03\x03','\x05\x03\u01AE\n\x03\x03\x04\x03\x04\x03\x04\x05','\x04\u01B3\n\x04\x03\x05\x03\x05\x03\x05\x03\x05','\x07\x05\u01B9\n\x05\f\x05\x0E\x05\u01BC\x0B\x05\x03','\x06\x03\x06\x03\x06\x07\x06\u01C1\n\x06\f\x06\x0E','\x06\u01C4\x0B\x06\x03\x07\x03\x07\x03\x07\x03\x07','\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07','\x05\x07\u01D0\n\x07\x03\b\x03\b\x05\b\u01D4\n\b\x03\b','\x03\b\x05\b\u01D8\n\b\x03\b\x03\b\x03\t\x03\t\x03\n\x03','\n\x03\n\x05\n\u01E1\n\n\x03\n\x03\n\x03\n\x05\n\u01E6\n','\n\x03\n\x03\n\x05\n\u01EA\n\n\x03\n\x05\n\u01ED\n\n\x03','\n\x05\n\u01F0\n\n\x03\x0B\x03\x0B\x03\f\x05\f\u01F5\n','\f\x03\f\x03\f\x05\f\u01F9\n\f\x03\r\x03\r\x03\r\x07\r','\u01FE\n\r\f\r\x0E\r\u0201\x0B\r\x03\x0E\x03\x0E\x03\x0E','\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F','\x03\x0F\x03\x10\x03\x10\x03\x10\x07\x10\u0210\n','\x10\f\x10\x0E\x10\u0213\x0B\x10\x03\x11\x03\x11','\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13','\x03\x13\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15','\x03\x15\x03\x16\x03\x16\x03\x16\x07\x16\u0227\n','\x16\f\x16\x0E\x16\u022A\x0B\x16\x03\x17\x03\x17','\x03\x17\x03\x17\x03\x17\x05\x17\u0231\n\x17\x05','\x17\u0233\n\x17\x03\x18\x03\x18\x05\x18\u0237\n\x18','\x03\x18\x07\x18\u023A\n\x18\f\x18\x0E\x18\u023D\x0B','\x18\x03\x19\x06\x19\u0240\n\x19\r\x19\x0E\x19\u0241','\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x05\x1B\u0248\n','\x1B\x03\x1B\x03\x1B\x05\x1B\u024C\n\x1B\x03\x1B','\x03\x1B\x05\x1B\u0250\n\x1B\x03\x1B\x03\x1B\x05','\x1B\u0254\n\x1B\x07\x1B\u0256\n\x1B\f\x1B\x0E\x1B\u0259','\x0B\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x05\x1B','\u025F\n\x1B\x03\x1B\x05\x1B\u0262\n\x1B\x03\x1C\x03','\x1C\x05\x1C\u0266\n\x1C\x03\x1C\x03\x1C\x05\x1C','\u026A\n\x1C\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x05','\x1D\u0270\n\x1D\x03\x1D\x03\x1D\x05\x1D\u0274\n\x1D','\x03\x1D\x03\x1D\x05\x1D\u0278\n\x1D\x03\x1D\x03','\x1D\x05\x1D\u027C\n\x1D\x07\x1D\u027E\n\x1D\f\x1D\x0E','\x1D\u0281\x0B\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D','\x05\x1D\u0287\n\x1D\x03\x1D\x05\x1D\u028A\n\x1D\x03','\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x05','\x1E\u0292\n\x1E\x03\x1F\x03\x1F\x03\x1F\x03\x1F','\x03\x1F\x03\x1F\x03\x1F\x05\x1F\u029B\n\x1F\x03',' \x03 \x03 \x05 \u02A0\n \x06 \u02A2\n \r \x0E \u02A3\x03',' \x05 \u02A7\n \x03!\x03!\x03!\x07!\u02AC\n!\f!\x0E!\u02AF','\x0B!\x03"\x03"\x03"\x03#\x03#\x05#\u02B6\n#\x07','#\u02B8\n#\f#\x0E#\u02BB\x0B#\x03$\x03$\x03$\x05$\u02C0','\n$\x03%\x03%\x03%\x05%\u02C5\n%\x03%\x03%\x07%\u02C9','\n%\f%\x0E%\u02CC\x0B%\x03&\x03&\x03\'\x03\'\x03(\x03','(\x03)\x03)\x05)\u02D6\n)\x03)\x03)\x05)\u02DA\n)\x03',')\x03)\x03*\x03*\x05*\u02E0\n*\x03+\x03+\x05+\u02E4\n','+\x03,\x03,\x05,\u02E8\n,\x03,\x07,\u02EB\n,\f,\x0E,\u02EE','\x0B,\x03-\x03-\x05-\u02F2\n-\x03-\x03-\x03.\x03.\x05','.\u02F8\n.\x03.\x07.\u02FB\n.\f.\x0E.\u02FE\x0B.\x03/\x03','/\x03/\x03/\x03/\x03/\x03/\x05/\u0307\n/\x030\x030\x05','0\u030B\n0\x030\x070\u030E\n0\f0\x0E0\u0311\x0B0\x031\x03','1\x031\x031\x051\u0317\n1\x031\x031\x031\x051\u031C\n','1\x031\x051\u031F\n1\x032\x032\x032\x032\x032\x032\x03','2\x032\x032\x032\x032\x032\x032\x032\x052\u032F\n2\x03','3\x033\x033\x033\x033\x033\x033\x033\x033\x033\x05','3\u033B\n3\x034\x034\x034\x034\x035\x035\x035\x035\x03','6\x036\x036\x036\x037\x037\x037\x037\x038\x038\x03','8\x038\x039\x039\x039\x039\x03:\x03:\x03:\x03:\x03',';\x03;\x03;\x03;\x03<\x03<\x03<\x03<\x03=\x03=\x03','=\x03=\x03>\x03>\x03>\x03>\x05>\u0369\n>\x03>\x03>\x05','>\u036D\n>\x03>\x03>\x05>\u0371\n>\x03>\x03>\x05>\u0375','\n>\x03>\x03>\x03?\x03?\x03?\x03?\x05?\u037D\n?\x03','?\x03?\x05?\u0381\n?\x03?\x03?\x03?\x05?\u0386\n?\x03','?\x03?\x05?\u038A\n?\x03?\x03?\x03?\x03?\x03?\x03?\x03','?\x03?\x03@\x03@\x03@\x03@\x05@\u0398\n@\x03@\x03@\x05','@\u039C\n@\x03@\x03@\x03@\x05@\u03A1\n@\x03@\x03@\x05','@\u03A5\n@\x03@\x03@\x03@\x03@\x05@\u03AB\n@\x03@\x03','@\x05@\u03AF\n@\x03@\x03@\x03@\x03@\x03@\x03@\x03@\x03','@\x03A\x03A\x03A\x03A\x05A\u03BD\nA\x03A\x03A\x03A\x03','A\x03A\x05A\u03C4\nA\x03A\x03A\x03A\x03A\x05A\u03CA\n','A\x03A\x03A\x03A\x03A\x03B\x03B\x03B\x03B\x05B\u03D4','\nB\x03B\x03B\x05B\u03D8\nB\x03B\x03B\x03B\x03B\x05','B\u03DE\nB\x03B\x03B\x03B\x03B\x03C\x03C\x05C\u03E6\n','C\x03C\x03C\x03C\x03C\x03C\x03C\x03C\x03C\x03C\x05','C\u03F1\nC\x03C\x03C\x03C\x03C\x05C\u03F7\nC\x03C\x03','C\x03C\x03C\x03C\x03C\x03C\x03C\x03C\x03C\x05C\u0403','\nC\x03C\x03C\x03C\x03C\x05C\u0409\nC\x03C\x03C\x03','C\x03C\x03C\x03C\x03C\x03C\x03C\x03C\x05C\u0415\nC\x03','C\x03C\x05C\u0419\nC\x03D\x03D\x03D\x03D\x03D\x03D\x03','D\x03D\x05D\u0423\nD\x03D\x03D\x03D\x03D\x03D\x03D\x03','D\x03D\x03D\x03D\x03D\x05D\u0430\nD\x03E\x03E\x05E\u0434','\nE\x03E\x03E\x05E\u0438\nE\x03E\x03E\x07E\u043C\nE\fE\x0E','E\u043F\x0BE\x03E\x05E\u0442\nE\x03E\x05E\u0445\nE\x03F','\x03F\x05F\u0449\nF\x03F\x03F\x03F\x03F\x03F\x03F\x03','G\x03G\x05G\u0453\nG\x03G\x03G\x03G\x07G\u0458\nG\fG\x0E','G\u045B\x0BG\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x03','H\x03H\x03H\x05H\u0467\nH\x03I\x03I\x05I\u046B\nI\x03','I\x03I\x03J\x03J\x03J\x03J\x05J\u0473\nJ\x03J\x03J\x03','K\x03K\x05K\u0479\nK\x03K\x03K\x05K\u047D\nK\x03K\x03','K\x05K\u0481\nK\x03K\x07K\u0484\nK\fK\x0EK\u0487\x0BK\x03','L\x03L\x05L\u048B\nL\x03L\x03L\x05L\u048F\nL\x03L\x03','L\x03L\x03L\x05L\u0495\nL\x03L\x03L\x05L\u0499\nL\x03','L\x03L\x03L\x03L\x05L\u049F\nL\x03L\x03L\x05L\u04A3\n','L\x03L\x03L\x03L\x03L\x05L\u04A9\nL\x03L\x03L\x05L\u04AD','\nL\x03M\x03M\x05M\u04B1\nM\x03M\x03M\x05M\u04B5\nM\x03','M\x03M\x05M\u04B9\nM\x03M\x03M\x05M\u04BD\nM\x03M\x07','M\u04C0\nM\fM\x0EM\u04C3\x0BM\x03N\x03N\x03N\x03N\x05','N\u04C9\nN\x03N\x03N\x05N\u04CD\nN\x03N\x07N\u04D0\nN\fN\x0E','N\u04D3\x0BN\x03O\x03O\x03O\x03O\x05O\u04D9\nO\x03P\x03','P\x05P\u04DD\nP\x03P\x03P\x05P\u04E1\nP\x03P\x03P\x03','P\x03P\x03P\x03P\x05P\u04E9\nP\x03P\x03P\x03P\x06P\u04EE','\nP\rP\x0EP\u04EF\x03P\x05P\u04F3\nP\x03P\x03P\x03Q\x03','Q\x05Q\u04F9\nQ\x03Q\x05Q\u04FC\nQ\x03Q\x03Q\x03Q\x05','Q\u0501\nQ\x03Q\x05Q\u0504\nQ\x03R\x03R\x05R\u0508\nR\x03','R\x05R\u050B\nR\x03R\x05R\u050E\nR\x03R\x03R\x03S\x03','S\x03S\x05S\u0515\nS\x03S\x03S\x05S\u0519\nS\x03S\x03','S\x05S\u051D\nS\x03T\x03T\x05T\u0521\nT\x03T\x03T\x05','T\u0525\nT\x03T\x07T\u0528\nT\fT\x0ET\u052B\x0BT\x03T\x03','T\x05T\u052F\nT\x03T\x03T\x05T\u0533\nT\x03T\x07T\u0536','\nT\fT\x0ET\u0539\x0BT\x03T\x03T\x05T\u053D\nT\x03T\x05','T\u0540\nT\x05T\u0542\nT\x03U\x03U\x03U\x03U\x03U\x03','U\x03U\x05U\u054B\nU\x03V\x03V\x03V\x03V\x05V\u0551\n','V\x03V\x05V\u0554\nV\x03W\x03W\x05W\u0558\nW\x03W\x05','W\u055B\nW\x03X\x03X\x03X\x03Y\x03Y\x05Y\u0562\nY\x03','Y\x05Y\u0565\nY\x03Y\x05Y\u0568\nY\x03Y\x03Y\x05Y\u056C','\nY\x03Y\x07Y\u056F\nY\fY\x0EY\u0572\x0BY\x03Y\x05Y\u0575','\nY\x03Y\x03Y\x03Z\x03Z\x03Z\x03Z\x05Z\u057D\nZ\x03','Z\x03Z\x05Z\u0581\nZ\x03Z\x07Z\u0584\nZ\fZ\x0EZ\u0587\x0B','Z\x03Z\x03Z\x05Z\u058B\nZ\x03[\x03[\x05[\u058F\n[\x03','\\\x03\\\x03\\\x03\\\x03\\\x03\\\x03]\x03]\x03^\x03','^\x03_\x03_\x03_\x03_\x03_\x03_\x05_\u05A1\n_\x03_\x03','_\x05_\u05A5\n_\x03_\x07_\u05A8\n_\f_\x0E_\u05AB\x0B_\x03','`\x03`\x03`\x03`\x03a\x03a\x03a\x03a\x03b\x03b\x05','b\u05B7\nb\x03b\x03b\x05b\u05BB\nb\x05b\u05BD\nb\x03c\x05','c\u05C0\nc\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x05c\u05C9','\nc\x03c\x03c\x05c\u05CD\nc\x03c\x03c\x05c\u05D1\nc\x03','c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x05','c\u05DD\nc\x03c\x03c\x05c\u05E1\nc\x03c\x07c\u05E4\nc\fc\x0E','c\u05E7\x0Bc\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x05','c\u05F0\nc\x03d\x03d\x03d\x03d\x05d\u05F6\nd\x03d\x03','d\x05d\u05FA\nd\x03d\x07d\u05FD\nd\fd\x0Ed\u0600\x0Bd\x03','d\x05d\u0603\nd\x03e\x03e\x05e\u0607\ne\x03e\x03e\x05','e\u060B\ne\x03e\x03e\x03f\x03f\x05f\u0611\nf\x03g\x03','g\x05g\u0615\ng\x03g\x03g\x03g\x05g\u061A\ng\x03h\x03','h\x03h\x03h\x05h\u0620\nh\x03i\x03i\x03i\x03i\x03i\x03','i\x03i\x05i\u0629\ni\x03i\x03i\x03j\x03j\x03j\x03j\x03','j\x05j\u0632\nj\x03j\x03j\x03k\x03k\x03k\x03k\x05k\u063A','\nk\x03k\x03k\x03l\x03l\x05l\u0640\nl\x03l\x03l\x05','l\u0644\nl\x03l\x07l\u0647\nl\fl\x0El\u064A\x0Bl\x03m\x03','m\x03m\x03m\x03n\x03n\x05n\u0652\nn\x03n\x03n\x05n\u0656','\nn\x03n\x07n\u0659\nn\fn\x0En\u065C\x0Bn\x03o\x03o\x05','o\u0660\no\x03o\x03o\x05o\u0664\no\x03o\x03o\x03o\x05','o\u0669\no\x03p\x03p\x05p\u066D\np\x03q\x03q\x05q\u0671','\nq\x03q\x07q\u0674\nq\fq\x0Eq\u0677\x0Bq\x03q\x03q\x03','q\x03q\x05q\u067D\nq\x03r\x03r\x05r\u0681\nr\x03r\x03','r\x05r\u0685\nr\x05r\u0687\nr\x03r\x03r\x05r\u068B\nr\x05','r\u068D\nr\x03r\x03r\x05r\u0691\nr\x05r\u0693\nr\x03r\x03','r\x03s\x03s\x05s\u0699\ns\x03s\x03s\x03t\x03t\x05t\u069F','\nt\x03t\x05t\u06A2\nt\x03t\x05t\u06A5\nt\x03t\x03t\x03','u\x03u\x05u\u06AB\nu\x03u\x03u\x03u\x05u\u06B0\nu\x03','v\x03v\x05v\u06B4\nv\x03v\x03v\x03v\x05v\u06B9\nv\x03','w\x03w\x05w\u06BD\nw\x03w\x03w\x05w\u06C1\nw\x05w\u06C3','\nw\x03w\x03w\x05w\u06C7\nw\x05w\u06C9\nw\x03w\x05w\u06CC','\nw\x03w\x03w\x05w\u06D0\nw\x05w\u06D2\nw\x03w\x03w\x03','x\x03x\x05x\u06D8\nx\x03y\x03y\x05y\u06DC\ny\x03y\x03','y\x03z\x03z\x05z\u06E2\nz\x03z\x03z\x07z\u06E6\nz\fz\x0E','z\u06E9\x0Bz\x03{\x03{\x03{\x03|\x05|\u06EF\n|\x03|\x03','|\x03}\x03}\x05}\u06F5\n}\x03}\x07}\u06F8\n}\f}\x0E}\u06FB','\x0B}\x03~\x03~\x03~\x03\x7F\x03\x7F\x05\x7F\u0702','\n\x7F\x03\x7F\x03\x7F\x05\x7F\u0706\n\x7F\x05\x7F','\u0708\n\x7F\x03\x7F\x03\x7F\x05\x7F\u070C\n\x7F\x03','\x7F\x03\x7F\x05\x7F\u0710\n\x7F\x05\x7F\u0712\n\x7F','\x05\x7F\u0714\n\x7F\x03\x80\x03\x80\x03\x81\x03','\x81\x03\x82\x03\x82\x03\x83\x03\x83\x03\x83\x03','\x83\x03\x83\x07\x83\u0721\n\x83\f\x83\x0E\x83\u0724','\x0B\x83\x03\x84\x03\x84\x03\x84\x03\x84\x03\x84','\x07\x84\u072B\n\x84\f\x84\x0E\x84\u072E\x0B\x84\x03','\x85\x03\x85\x03\x85\x03\x85\x03\x85\x07\x85\u0735','\n\x85\f\x85\x0E\x85\u0738\x0B\x85\x03\x86\x03\x86','\x05\x86\u073C\n\x86\x07\x86\u073E\n\x86\f\x86\x0E\x86','\u0741\x0B\x86\x03\x86\x03\x86\x03\x87\x03\x87\x05','\x87\u0747\n\x87\x03\x87\x07\x87\u074A\n\x87\f\x87\x0E','\x87\u074D\x0B\x87\x03\x88\x03\x88\x05\x88\u0751\n','\x88\x03\x88\x03\x88\x05\x88\u0755\n\x88\x03\x88','\x03\x88\x05\x88\u0759\n\x88\x03\x88\x03\x88\x05','\x88\u075D\n\x88\x03\x88\x07\x88\u0760\n\x88\f\x88\x0E','\x88\u0763\x0B\x88\x03\x89\x03\x89\x05\x89\u0767\n','\x89\x03\x89\x03\x89\x05\x89\u076B\n\x89\x03\x89','\x03\x89\x05\x89\u076F\n\x89\x03\x89\x03\x89\x05','\x89\u0773\n\x89\x03\x89\x03\x89\x05\x89\u0777\n\x89','\x03\x89\x03\x89\x05\x89\u077B\n\x89\x03\x89\x07','\x89\u077E\n\x89\f\x89\x0E\x89\u0781\x0B\x89\x03\x8A','\x03\x8A\x05\x8A\u0785\n\x8A\x03\x8A\x03\x8A\x05','\x8A\u0789\n\x8A\x03\x8A\x07\x8A\u078C\n\x8A\f\x8A\x0E','\x8A\u078F\x0B\x8A\x03\x8B\x03\x8B\x05\x8B\u0793\n','\x8B\x07\x8B\u0795\n\x8B\f\x8B\x0E\x8B\u0798\x0B\x8B','\x03\x8B\x03\x8B\x03\x8C\x03\x8C\x05\x8C\u079E\n','\x8C\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x05','\x8C\u07A5\n\x8C\x03\x8C\x03\x8C\x05\x8C\u07A9\n\x8C','\x03\x8C\x03\x8C\x05\x8C\u07AD\n\x8C\x03\x8C\x03','\x8C\x05\x8C\u07B1\n\x8C\x03\x8C\x03\x8C\x03\x8C','\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x03\x8C','\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x05\x8C\u07C0\n','\x8C\x03\x8C\x05\x8C\u07C3\n\x8C\x03\x8C\x03\x8C','\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x03\x8C','\x03\x8C\x03\x8C\x03\x8C\x07\x8C\u07D0\n\x8C\f\x8C','\x0E\x8C\u07D3\x0B\x8C\x03\x8D\x03\x8D\x05\x8D\u07D7','\n\x8D\x03\x8D\x03\x8D\x05\x8D\u07DB\n\x8D\x07\x8D','\u07DD\n\x8D\f\x8D\x0E\x8D\u07E0\x0B\x8D\x03\x8E\x03','\x8E\x05\x8E\u07E4\n\x8E\x03\x8E\x03\x8E\x05\x8E','\u07E8\n\x8E\x03\x8E\x03\x8E\x05\x8E\u07EC\n\x8E\x03','\x8E\x03\x8E\x03\x8F\x03\x8F\x03\x90\x03\x90\x05','\x90\u07F4\n\x90\x03\x90\x03\x90\x05\x90\u07F8\n\x90','\x03\x90\x03\x90\x05\x90\u07FC\n\x90\x03\x90\x03','\x90\x03\x91\x03\x91\x03\x92\x03\x92\x05\x92\u0804','\n\x92\x03\x92\x03\x92\x05\x92\u0808\n\x92\x03\x92','\x03\x92\x05\x92\u080C\n\x92\x03\x92\x03\x92\x03','\x93\x03\x93\x03\x94\x03\x94\x05\x94\u0814\n\x94','\x03\x94\x03\x94\x05\x94\u0818\n\x94\x03\x94\x03','\x94\x05\x94\u081C\n\x94\x03\x94\x03\x94\x03\x95','\x03\x95\x03\x96\x03\x96\x05\x96\u0824\n\x96\x03','\x96\x03\x96\x05\x96\u0828\n\x96\x03\x96\x03\x96','\x05\x96\u082C\n\x96\x03\x96\x03\x96\x03\x97\x03','\x97\x03\x98\x03\x98\x05\x98\u0834\n\x98\x03\x98','\x03\x98\x05\x98\u0838\n\x98\x03\x98\x03\x98\x05','\x98\u083C\n\x98\x03\x98\x03\x98\x03\x99\x03\x99','\x03\x9A\x03\x9A\x05\x9A\u0844\n\x9A\x03\x9A\x03','\x9A\x05\x9A\u0848\n\x9A\x03\x9A\x03\x9A\x05\x9A','\u084C\n\x9A\x03\x9A\x03\x9A\x05\x9A\u0850\n\x9A\x03','\x9A\x05\x9A\u0853\n\x9A\x03\x9A\x05\x9A\u0856\n\x9A','\x03\x9A\x03\x9A\x03\x9B\x03\x9B\x03\x9C\x03\x9C','\x05\x9C\u085E\n\x9C\x03\x9C\x03\x9C\x05\x9C\u0862','\n\x9C\x03\x9C\x03\x9C\x05\x9C\u0866\n\x9C\x03\x9C','\x03\x9C\x05\x9C\u086A\n\x9C\x03\x9C\x03\x9C\x05','\x9C\u086E\n\x9C\x03\x9C\x03\x9C\x05\x9C\u0872\n\x9C','\x03\x9C\x03\x9C\x05\x9C\u0876\n\x9C\x03\x9C\x03','\x9C\x05\x9C\u087A\n\x9C\x03\x9C\x03\x9C\x05\x9C','\u087E\n\x9C\x03\x9C\x03\x9C\x03\x9D\x03\x9D\x03','\x9E\x03\x9E\x05\x9E\u0886\n\x9E\x03\x9E\x03\x9E','\x05\x9E\u088A\n\x9E\x03\x9E\x03\x9E\x05\x9E\u088E','\n\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x05\x9E','\u0894\n\x9E\x03\x9E\x03\x9E\x05\x9E\u0898\n\x9E\x03','\x9E\x03\x9E\x05\x9E\u089C\n\x9E\x03\x9E\x03\x9E','\x05\x9E\u08A0\n\x9E\x03\x9F\x03\x9F\x03\xA0\x03','\xA0\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x05','\xA1\u08AB\n\xA1\x03\xA1\x03\xA1\x05\xA1\u08AF\n\xA1','\x03\xA1\x03\xA1\x05\xA1\u08B3\n\xA1\x03\xA1\x03','\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03','\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03','\xA1\x03\xA1\x03\xA1\x05\xA1\u08C5\n\xA1\x03\xA2','\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2','\x05\xA2\u08CE\n\xA2\x03\xA3\x03\xA3\x03\xA4\x03','\xA4\x03\xA5\x03\xA5\x05\xA5\u08D6\n\xA5\x03\xA5','\x03\xA5\x05\xA5\u08DA\n\xA5\x03\xA5\x03\xA5\x05','\xA5\u08DE\n\xA5\x03\xA5\x03\xA5\x05\xA5\u08E2\n\xA5','\x07\xA5\u08E4\n\xA5\f\xA5\x0E\xA5\u08E7\x0B\xA5\x05','\xA5\u08E9\n\xA5\x03\xA5\x03\xA5\x03\xA6\x03\xA6','\x05\xA6\u08EF\n\xA6\x03\xA6\x03\xA6\x03\xA6\x05','\xA6\u08F4\n\xA6\x03\xA6\x03\xA6\x03\xA6\x05\xA6','\u08F9\n\xA6\x03\xA6\x03\xA6\x03\xA6\x05\xA6\u08FE','\n\xA6\x03\xA6\x03\xA6\x03\xA6\x05\xA6\u0903\n\xA6','\x03\xA6\x03\xA6\x03\xA6\x05\xA6\u0908\n\xA6\x03','\xA6\x03\xA6\x03\xA6\x05\xA6\u090D\n\xA6\x03\xA6','\x05\xA6\u0910\n\xA6\x03\xA7\x03\xA7\x05\xA7\u0914','\n\xA7\x03\xA7\x03\xA7\x05\xA7\u0918\n\xA7\x03\xA7','\x03\xA7\x03\xA8\x03\xA8\x05\xA8\u091E\n\xA8\x03','\xA8\x06\xA8\u0921\n\xA8\r\xA8\x0E\xA8\u0922\x03\xA9','\x03\xA9\x05\xA9\u0927\n\xA9\x03\xA9\x05\xA9\u092A','\n\xA9\x03\xAA\x03\xAA\x03\xAA\x03\xAA\x03\xAA','\x03\xAA\x03\xAB\x03\xAB\x05\xAB\u0934\n\xAB\x03','\xAB\x03\xAB\x05\xAB\u0938\n\xAB\x03\xAB\x03\xAB','\x05\xAB\u093C\n\xAB\x05\xAB\u093E\n\xAB\x03\xAB\x03','\xAB\x05\xAB\u0942\n\xAB\x03\xAB\x03\xAB\x05\xAB','\u0946\n\xAB\x03\xAB\x03\xAB\x05\xAB\u094A\n\xAB\x07','\xAB\u094C\n\xAB\f\xAB\x0E\xAB\u094F\x0B\xAB\x05\xAB','\u0951\n\xAB\x03\xAB\x03\xAB\x03\xAC\x03\xAC\x03','\xAC\x03\xAD\x03\xAD\x03\xAE\x03\xAE\x03\xAF\x03','\xAF\x05\xAF\u095E\n\xAF\x03\xAF\x03\xAF\x05\xAF','\u0962\n\xAF\x03\xAF\x03\xAF\x05\xAF\u0966\n\xAF\x03','\xAF\x05\xAF\u0969\n\xAF\x03\xAF\x05\xAF\u096C\n\xAF','\x03\xAF\x03\xAF\x03\xB0\x03\xB0\x05\xB0\u0972\n','\xB0\x03\xB0\x03\xB0\x05\xB0\u0976\n\xB0\x03\xB0','\x03\xB0\x05\xB0\u097A\n\xB0\x05\xB0\u097C\n\xB0\x03','\xB0\x03\xB0\x05\xB0\u0980\n\xB0\x03\xB0\x03\xB0','\x05\xB0\u0984\n\xB0\x03\xB0\x03\xB0\x05\xB0\u0988','\n\xB0\x05\xB0\u098A\n\xB0\x03\xB0\x03\xB0\x05\xB0','\u098E\n\xB0\x03\xB0\x03\xB0\x05\xB0\u0992\n\xB0\x03','\xB0\x03\xB0\x03\xB1\x03\xB1\x05\xB1\u0998\n\xB1','\x03\xB1\x03\xB1\x03\xB2\x03\xB2\x05\xB2\u099E\n','\xB2\x03\xB2\x06\xB2\u09A1\n\xB2\r\xB2\x0E\xB2\u09A2','\x03\xB2\x03\xB2\x05\xB2\u09A7\n\xB2\x03\xB2\x03','\xB2\x05\xB2\u09AB\n\xB2\x03\xB2\x06\xB2\u09AE\n\xB2','\r\xB2\x0E\xB2\u09AF\x05\xB2\u09B2\n\xB2\x03\xB2\x05','\xB2\u09B5\n\xB2\x03\xB2\x03\xB2\x05\xB2\u09B9\n\xB2','\x03\xB2\x05\xB2\u09BC\n\xB2\x03\xB2\x05\xB2\u09BF','\n\xB2\x03\xB2\x03\xB2\x03\xB3\x03\xB3\x05\xB3','\u09C5\n\xB3\x03\xB3\x03\xB3\x05\xB3\u09C9\n\xB3\x03','\xB3\x03\xB3\x05\xB3\u09CD\n\xB3\x03\xB3\x03\xB3','\x03\xB4\x03\xB4\x03\xB5\x03\xB5\x05\xB5\u09D5\n','\xB5\x03\xB6\x03\xB6\x05\xB6\u09D9\n\xB6\x03\xB6','\x03\xB6\x05\xB6\u09DD\n\xB6\x03\xB6\x03\xB6\x05','\xB6\u09E1\n\xB6\x03\xB6\x03\xB6\x05\xB6\u09E5\n\xB6','\x07\xB6\u09E7\n\xB6\f\xB6\x0E\xB6\u09EA\x0B\xB6\x05','\xB6\u09EC\n\xB6\x03\xB6\x03\xB6\x03\xB7\x03\xB7','\x05\xB7\u09F2\n\xB7\x03\xB7\x03\xB7\x05\xB7\u09F6','\n\xB7\x03\xB7\x05\xB7\u09F9\n\xB7\x03\xB7\x05\xB7','\u09FC\n\xB7\x03\xB7\x03\xB7\x05\xB7\u0A00\n\xB7\x03','\xB7\x07\xB7\u0A03\n\xB7\f\xB7\x0E\xB7\u0A06\x0B\xB7','\x03\xB7\x05\xB7\u0A09\n\xB7\x03\xB7\x03\xB7\x03','\xB8\x03\xB8\x03\xB8\x03\xB8\x05\xB8\u0A11\n\xB8','\x03\xB9\x03\xB9\x05\xB9\u0A15\n\xB9\x03\xB9\x03','\xB9\x05\xB9\u0A19\n\xB9\x03\xB9\x03\xB9\x03\xBA','\x03\xBA\x03\xBA\x03\xBB\x03\xBB\x03\xBC\x03\xBC','\x03\xBC\x03\xBD\x03\xBD\x05\xBD\u0A27\n\xBD\x03','\xBE\x03\xBE\x05\xBE\u0A2B\n\xBE\x03\xBE\x03\xBE','\x05\xBE\u0A2F\n\xBE\x03\xBE\x03\xBE\x03\xBF\x03','\xBF\x03\xBF\x03\xC0\x03\xC0\x05\xC0\u0A38\n\xC0','\x03\xC1\x03\xC1\x05\xC1\u0A3C\n\xC1\x03\xC1\x03','\xC1\x05\xC1\u0A40\n\xC1\x03\xC1\x07\xC1\u0A43\n\xC1','\f\xC1\x0E\xC1\u0A46\x0B\xC1\x03\xC2\x03\xC2\x05','\xC2\u0A4A\n\xC2\x03\xC2\x06\xC2\u0A4D\n\xC2\r\xC2\x0E','\xC2\u0A4E\x03\xC3\x03\xC3\x05\xC3\u0A53\n\xC3\x03','\xC3\x03\xC3\x05\xC3\u0A57\n\xC3\x03\xC3\x07\xC3','\u0A5A\n\xC3\f\xC3\x0E\xC3\u0A5D\x0B\xC3\x03\xC4\x03','\xC4\x03\xC5\x03\xC5\x03\xC6\x03\xC6\x03\xC7\x03','\xC7\x03\xC7\x07\xC7\u0A68\n\xC7\f\xC7\x0E\xC7\u0A6B','\x0B\xC7\x03\xC8\x03\xC8\x03\xC9\x03\xC9\x03\xCA','\x03\xCA\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x05\xCB','\u0A77\n\xCB\x03\xCC\x03\xCC\x03\xCC\x03\u023B\x02','\xCD\x02\x04\x06\b\n\f\x0E\x10\x12\x14\x16\x18\x1A','\x1C\x1E "$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\x80','\x82\x84\x86\x88\x8A\x8C\x8E\x90\x92\x94\x96\x98','\x9A\x9C\x9E\xA0\xA2\xA4\xA6\xA8\xAA\xAC\xAE\xB0','\xB2\xB4\xB6\xB8\xBA\xBC\xBE\xC0\xC2\xC4\xC6\xC8','\xCA\xCC\xCE\xD0\xD2\xD4\xD6\xD8\xDA\xDC\xDE\xE0','\xE2\xE4\xE6\xE8\xEA\xEC\xEE\xF0\xF2\xF4\xF6\xF8','\xFA\xFC\xFE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110','\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128','\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0138\u013A\u013C\u013E\u0140','\u0142\u0144\u0146\u0148\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158','\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170','\u0172\u0174\u0176\u0178\u017A\u017C\u017E\u0180\u0182\u0184\u0186\u0188','\u018A\u018C\u018E\u0190\u0192\u0194\u0196\x02\x0E\x04\x02\t','\t\x0F\x0F\x03\x02`c\x03\x02hi\x04\x02\x05\x05\x0F','\x0F\x03\x02{|\x05\x02uu\x95\x95\x98\x98\x03\x02','\x89\x8B\x03\x02\x93\x94\x04\x02  %(\x04\x02!!)',',\x04\x02\x05\x05-7\x03\x028\x85\x02\u0BA5\x02\u0198','\x03\x02\x02\x02\x04\u01A6\x03\x02\x02\x02\x06\u01AF','\x03\x02\x02\x02\b\u01B4\x03\x02\x02\x02\n\u01BD\x03','\x02\x02\x02\f\u01CF\x03\x02\x02\x02\x0E\u01D1\x03','\x02\x02\x02\x10\u01DB\x03\x02\x02\x02\x12\u01DD\x03','\x02\x02\x02\x14\u01F1\x03\x02\x02\x02\x16\u01F4\x03','\x02\x02\x02\x18\u01FA\x03\x02\x02\x02\x1A\u0202\x03','\x02\x02\x02\x1C\u020A\x03\x02\x02\x02\x1E\u020C\x03','\x02\x02\x02 \u0214\x03\x02\x02\x02"\u0216\x03\x02','\x02\x02$\u021B\x03\x02\x02\x02&\u021D\x03\x02\x02','\x02(\u0220\x03\x02\x02\x02*\u0223\x03\x02\x02\x02',',\u022B\x03\x02\x02\x02.\u0234\x03\x02\x02\x020\u023F','\x03\x02\x02\x022\u0243\x03\x02\x02\x024\u0261\x03','\x02\x02\x026\u0263\x03\x02\x02\x028\u0289\x03\x02','\x02\x02:\u0291\x03\x02\x02\x02<\u0293\x03\x02\x02','\x02>\u02A1\x03\x02\x02\x02@\u02A8\x03\x02\x02\x02','B\u02B0\x03\x02\x02\x02D\u02B9\x03\x02\x02\x02F\u02BF','\x03\x02\x02\x02H\u02C1\x03\x02\x02\x02J\u02CD\x03','\x02\x02\x02L\u02CF\x03\x02\x02\x02N\u02D1\x03\x02','\x02\x02P\u02D3\x03\x02\x02\x02R\u02DF\x03\x02\x02','\x02T\u02E3\x03\x02\x02\x02V\u02E5\x03\x02\x02\x02','X\u02EF\x03\x02\x02\x02Z\u02F5\x03\x02\x02\x02\\\u02FF','\x03\x02\x02\x02^\u0308\x03\x02\x02\x02`\u031E\x03','\x02\x02\x02b\u032E\x03\x02\x02\x02d\u033A\x03\x02','\x02\x02f\u033C\x03\x02\x02\x02h\u0340\x03\x02\x02','\x02j\u0344\x03\x02\x02\x02l\u0348\x03\x02\x02\x02','n\u034C\x03\x02\x02\x02p\u0350\x03\x02\x02\x02r\u0354','\x03\x02\x02\x02t\u0358\x03\x02\x02\x02v\u035C\x03','\x02\x02\x02x\u0360\x03\x02\x02\x02z\u0364\x03\x02','\x02\x02|\u0378\x03\x02\x02\x02~\u0393\x03\x02\x02','\x02\x80\u03B8\x03\x02\x02\x02\x82\u03CF\x03\x02\x02','\x02\x84\u0418\x03\x02\x02\x02\x86\u041A\x03\x02\x02','\x02\x88\u0433\x03\x02\x02\x02\x8A\u0446\x03\x02\x02','\x02\x8C\u0450\x03\x02\x02\x02\x8E\u0466\x03\x02\x02','\x02\x90\u0468\x03\x02\x02\x02\x92\u046E\x03\x02\x02','\x02\x94\u0476\x03\x02\x02\x02\x96\u04AC\x03\x02\x02','\x02\x98\u04B0\x03\x02\x02\x02\x9A\u04C4\x03\x02\x02','\x02\x9C\u04D8\x03\x02\x02\x02\x9E\u04DA\x03\x02\x02','\x02\xA0\u04F6\x03\x02\x02\x02\xA2\u0505\x03\x02\x02','\x02\xA4\u0511\x03\x02\x02\x02\xA6\u0541\x03\x02\x02','\x02\xA8\u054A\x03\x02\x02\x02\xAA\u054C\x03\x02\x02','\x02\xAC\u0555\x03\x02\x02\x02\xAE\u055C\x03\x02\x02','\x02\xB0\u055F\x03\x02\x02\x02\xB2\u0578\x03\x02\x02','\x02\xB4\u058E\x03\x02\x02\x02\xB6\u0590\x03\x02\x02','\x02\xB8\u0596\x03\x02\x02\x02\xBA\u0598\x03\x02\x02','\x02\xBC\u059A\x03\x02\x02\x02\xBE\u05AC\x03\x02\x02','\x02\xC0\u05B0\x03\x02\x02\x02\xC2\u05B4\x03\x02\x02','\x02\xC4\u05BF\x03\x02\x02\x02\xC6\u05F1\x03\x02\x02','\x02\xC8\u0604\x03\x02\x02\x02\xCA\u0610\x03\x02\x02','\x02\xCC\u0612\x03\x02\x02\x02\xCE\u061B\x03\x02\x02','\x02\xD0\u0621\x03\x02\x02\x02\xD2\u062C\x03\x02\x02','\x02\xD4\u0635\x03\x02\x02\x02\xD6\u063D\x03\x02\x02','\x02\xD8\u064B\x03\x02\x02\x02\xDA\u064F\x03\x02\x02','\x02\xDC\u0668\x03\x02\x02\x02\xDE\u066C\x03\x02\x02','\x02\xE0\u067C\x03\x02\x02\x02\xE2\u067E\x03\x02\x02','\x02\xE4\u0696\x03\x02\x02\x02\xE6\u069C\x03\x02\x02','\x02\xE8\u06AF\x03\x02\x02\x02\xEA\u06B8\x03\x02\x02','\x02\xEC\u06BA\x03\x02\x02\x02\xEE\u06D7\x03\x02\x02','\x02\xF0\u06D9\x03\x02\x02\x02\xF2\u06DF\x03\x02\x02','\x02\xF4\u06EA\x03\x02\x02\x02\xF6\u06EE\x03\x02\x02','\x02\xF8\u06F2\x03\x02\x02\x02\xFA\u06FC\x03\x02\x02','\x02\xFC\u06FF\x03\x02\x02\x02\xFE\u0715\x03\x02\x02','\x02\u0100\u0717\x03\x02\x02\x02\u0102\u0719\x03\x02\x02','\x02\u0104\u071B\x03\x02\x02\x02\u0106\u0725\x03\x02\x02','\x02\u0108\u072F\x03\x02\x02\x02\u010A\u073F\x03\x02\x02','\x02\u010C\u0744\x03\x02\x02\x02\u010E\u074E\x03\x02\x02','\x02\u0110\u0764\x03\x02\x02\x02\u0112\u0782\x03\x02\x02','\x02\u0114\u0796\x03\x02\x02\x02\u0116\u079B\x03\x02\x02','\x02\u0118\u07D4\x03\x02\x02\x02\u011A\u07E1\x03\x02\x02','\x02\u011C\u07EF\x03\x02\x02\x02\u011E\u07F1\x03\x02\x02','\x02\u0120\u07FF\x03\x02\x02\x02\u0122\u0801\x03\x02\x02','\x02\u0124\u080F\x03\x02\x02\x02\u0126\u0811\x03\x02\x02','\x02\u0128\u081F\x03\x02\x02\x02\u012A\u0821\x03\x02\x02','\x02\u012C\u082F\x03\x02\x02\x02\u012E\u0831\x03\x02\x02','\x02\u0130\u083F\x03\x02\x02\x02\u0132\u0841\x03\x02\x02','\x02\u0134\u0859\x03\x02\x02\x02\u0136\u085B\x03\x02\x02','\x02\u0138\u0881\x03\x02\x02\x02\u013A\u089F\x03\x02\x02','\x02\u013C\u08A1\x03\x02\x02\x02\u013E\u08A3\x03\x02\x02','\x02\u0140\u08C4\x03\x02\x02\x02\u0142\u08CD\x03\x02\x02','\x02\u0144\u08CF\x03\x02\x02\x02\u0146\u08D1\x03\x02\x02','\x02\u0148\u08D3\x03\x02\x02\x02\u014A\u090F\x03\x02\x02','\x02\u014C\u0911\x03\x02\x02\x02\u014E\u091B\x03\x02\x02','\x02\u0150\u0924\x03\x02\x02\x02\u0152\u092B\x03\x02\x02','\x02\u0154\u0931\x03\x02\x02\x02\u0156\u0954\x03\x02\x02','\x02\u0158\u0957\x03\x02\x02\x02\u015A\u0959\x03\x02\x02','\x02\u015C\u095B\x03\x02\x02\x02\u015E\u096F\x03\x02\x02','\x02\u0160\u0995\x03\x02\x02\x02\u0162\u09B1\x03\x02\x02','\x02\u0164\u09C2\x03\x02\x02\x02\u0166\u09D0\x03\x02\x02','\x02\u0168\u09D4\x03\x02\x02\x02\u016A\u09D6\x03\x02\x02','\x02\u016C\u09EF\x03\x02\x02\x02\u016E\u0A10\x03\x02\x02','\x02\u0170\u0A12\x03\x02\x02\x02\u0172\u0A1C\x03\x02\x02','\x02\u0174\u0A1F\x03\x02\x02\x02\u0176\u0A21\x03\x02\x02','\x02\u0178\u0A26\x03\x02\x02\x02\u017A\u0A28\x03\x02\x02','\x02\u017C\u0A32\x03\x02\x02\x02\u017E\u0A37\x03\x02\x02','\x02\u0180\u0A39\x03\x02\x02\x02\u0182\u0A47\x03\x02\x02','\x02\u0184\u0A50\x03\x02\x02\x02\u0186\u0A5E\x03\x02\x02','\x02\u0188\u0A60\x03\x02\x02\x02\u018A\u0A62\x03\x02\x02','\x02\u018C\u0A69\x03\x02\x02\x02\u018E\u0A6C\x03\x02\x02','\x02\u0190\u0A6E\x03\x02\x02\x02\u0192\u0A70\x03\x02\x02','\x02\u0194\u0A76\x03\x02\x02\x02\u0196\u0A78\x03\x02\x02','\x02\u0198\u019D\x05\x04\x03\x02\u0199\u019A\x07\x03\x02','\x02\u019A\u019C\x05\x04\x03\x02\u019B\u0199\x03\x02\x02','\x02\u019C\u019F\x03\x02\x02\x02\u019D\u019B\x03\x02\x02','\x02\u019D\u019E\x03\x02\x02\x02\u019E\u01A1\x03\x02\x02','\x02\u019F\u019D\x03\x02\x02\x02\u01A0\u01A2\x07\x03\x02','\x02\u01A1\u01A0\x03\x02\x02\x02\u01A1\u01A2\x03\x02\x02','\x02\u01A2\u01A3\x03\x02\x02\x02\u01A3\u01A4\x07\x02\x02','\x03\u01A4\x03\x03\x02\x02\x02\u01A5\u01A7\x07\x99\x02','\x02\u01A6\u01A5\x03\x02\x02\x02\u01A6\u01A7\x03\x02\x02','\x02\u01A7\u01AA\x03\x02\x02\x02\u01A8\u01AB\x05B"\x02','\u01A9\u01AB\x05\x06\x04\x02\u01AA\u01A8\x03\x02\x02\x02','\u01AA\u01A9\x03\x02\x02\x02\u01AB\u01AD\x03\x02\x02\x02','\u01AC\u01AE\x07\x99\x02\x02\u01AD\u01AC\x03\x02\x02\x02','\u01AD\u01AE\x03\x02\x02\x02\u01AE\x05\x03\x02\x02\x02','\u01AF\u01B2\x05\b\x05\x02\u01B0\u01B1\x07\x99\x02\x02','\u01B1\u01B3\x05\n\x06\x02\u01B2\u01B0\x03\x02\x02\x02','\u01B2\u01B3\x03\x02\x02\x02\u01B3\x07\x03\x02\x02\x02','\u01B4\u01B5\x07\x04\x02\x02\u01B5\u01BA\x05\u0194\xCB\x02','\u01B6\u01B7\x07\x05\x02\x02\u01B7\u01B9\x05\u0194\xCB\x02','\u01B8\u01B6\x03\x02\x02\x02\u01B9\u01BC\x03\x02\x02\x02','\u01BA\u01B8\x03\x02\x02\x02\u01BA\u01BB\x03\x02\x02\x02','\u01BB\t\x03\x02\x02\x02\u01BC\u01BA\x03\x02\x02\x02','\u01BD\u01C2\x05\f\x07\x02\u01BE\u01BF\x07\x99\x02\x02','\u01BF\u01C1\x05\f\x07\x02\u01C0\u01BE\x03\x02\x02\x02','\u01C1\u01C4\x03\x02\x02\x02\u01C2\u01C0\x03\x02\x02\x02','\u01C2\u01C3\x03\x02\x02\x02\u01C3\x0B\x03\x02\x02\x02','\u01C4\u01C2\x03\x02\x02\x02\u01C5\u01D0\x05\x10\t\x02','\u01C6\u01D0\x052\x1A\x02\u01C7\u01D0\x05\x0E\b\x02\u01C8','\u01D0\x05\u016A\xB6\x02\u01C9\u01D0\x05<\x1F\x02\u01CA','\u01D0\x05\u0144\xA3\x02\u01CB\u01D0\x05\u0168\xB5\x02\u01CC','\u01D0\x05\u0146\xA4\x02\u01CD\u01D0\x05@!\x02\u01CE\u01D0','\x05> \x02\u01CF\u01C5\x03\x02\x02\x02\u01CF\u01C6\x03','\x02\x02\x02\u01CF\u01C7\x03\x02\x02\x02\u01CF\u01C8\x03','\x02\x02\x02\u01CF\u01C9\x03\x02\x02\x02\u01CF\u01CA\x03','\x02\x02\x02\u01CF\u01CB\x03\x02\x02\x02\u01CF\u01CC\x03','\x02\x02\x02\u01CF\u01CD\x03\x02\x02\x02\u01CF\u01CE\x03','\x02\x02\x02\u01D0\r\x03\x02\x02\x02\u01D1\u01D3\x05','\u0194\xCB\x02\u01D2\u01D4\x07\x99\x02\x02\u01D3\u01D2\x03','\x02\x02\x02\u01D3\u01D4\x03\x02\x02\x02\u01D4\u01D5\x03','\x02\x02\x02\u01D5\u01D7\x07\x06\x02\x02\u01D6\u01D8\x07','\x99\x02\x02\u01D7\u01D6\x03\x02\x02\x02\u01D7\u01D8\x03','\x02\x02\x02\u01D8\u01D9\x03\x02\x02\x02\u01D9\u01DA\x05','\u0102\x82\x02\u01DA\x0F\x03\x02\x02\x02\u01DB\u01DC\x05','\x12\n\x02\u01DC\x11\x03\x02\x02\x02\u01DD\u01DE\x05','\x14\x0B\x02\u01DE\u01E0\x07\x07\x02\x02\u01DF\u01E1\x05','"\x12\x02\u01E0\u01DF\x03\x02\x02\x02\u01E0\u01E1\x03','\x02\x02\x02\u01E1\u01E2\x03\x02\x02\x02\u01E2\u01E5\x05','\x16\f\x02\u01E3\u01E4\x07\x04\x02\x02\u01E4\u01E6\x05','\x1C\x0F\x02\u01E5\u01E3\x03\x02\x02\x02\u01E5\u01E6\x03','\x02\x02\x02\u01E6\u01E9\x03\x02\x02\x02\u01E7\u01E8\x07','\b\x02\x02\u01E8\u01EA\x05\x1E\x10\x02\u01E9\u01E7\x03','\x02\x02\x02\u01E9\u01EA\x03\x02\x02\x02\u01EA\u01EC\x03','\x02\x02\x02\u01EB\u01ED\x05(\x15\x02\u01EC\u01EB\x03','\x02\x02\x02\u01EC\u01ED\x03\x02\x02\x02\u01ED\u01EF\x03','\x02\x02\x02\u01EE\u01F0\x05&\x14\x02\u01EF\u01EE\x03','\x02\x02\x02\u01EF\u01F0\x03\x02\x02\x02\u01F0\x13\x03','\x02\x02\x02\u01F1\u01F2\x05.\x18\x02\u01F2\x15\x03','\x02\x02\x02\u01F3\u01F5\x07\b\x02\x02\u01F4\u01F3\x03','\x02\x02\x02\u01F4\u01F5\x03\x02\x02\x02\u01F5\u01F8\x03','\x02\x02\x02\u01F6\u01F9\x05\x18\r\x02\u01F7\u01F9\x05','\x1A\x0E\x02\u01F8\u01F6\x03\x02\x02\x02\u01F8\u01F7\x03','\x02\x02\x02\u01F9\x17\x03\x02\x02\x02\u01FA\u01FF\x05','.\x18\x02\u01FB\u01FC\x07\t\x02\x02\u01FC\u01FE\x05.\x18','\x02\u01FD\u01FB\x03\x02\x02\x02\u01FE\u0201\x03\x02\x02','\x02\u01FF\u01FD\x03\x02\x02\x02\u01FF\u0200\x03\x02\x02','\x02\u0200\x19\x03\x02\x02\x02\u0201\u01FF\x03\x02\x02','\x02\u0202\u0203\x050\x19\x02\u0203\u0204\x07\t\x02\x02','\u0204\u0205\x050\x19\x02\u0205\u0206\x07\t\x02\x02\u0206','\u0207\x050\x19\x02\u0207\u0208\x07\t\x02\x02\u0208\u0209','\x050\x19\x02\u0209\x1B\x03\x02\x02\x02\u020A\u020B','\x050\x19\x02\u020B\x1D\x03\x02\x02\x02\u020C\u0211','\x05.\x18\x02\u020D\u020E\x07\b\x02\x02\u020E\u0210\x05','.\x18\x02\u020F\u020D\x03\x02\x02\x02\u0210\u0213\x03','\x02\x02\x02\u0211\u020F\x03\x02\x02\x02\u0211\u0212\x03','\x02\x02\x02\u0212\x1F\x03\x02\x02\x02\u0213\u0211\x03','\x02\x02\x02\u0214\u0215\x05.\x18\x02\u0215!\x03\x02','\x02\x02\u0216\u0217\x05 \x11\x02\u0217\u0218\x07\x04','\x02\x02\u0218\u0219\x05$\x13\x02\u0219\u021A\x07\n\x02','\x02\u021A#\x03\x02\x02\x02\u021B\u021C\x05.\x18\x02','\u021C%\x03\x02\x02\x02\u021D\u021E\x07\x0B\x02\x02','\u021E\u021F\x05.\x18\x02\u021F\'\x03\x02\x02\x02\u0220','\u0221\x07\f\x02\x02\u0221\u0222\x05*\x16\x02\u0222)\x03','\x02\x02\x02\u0223\u0228\x05,\x17\x02\u0224\u0225\x07','\r\x02\x02\u0225\u0227\x05,\x17\x02\u0226\u0224\x03\x02','\x02\x02\u0227\u022A\x03\x02\x02\x02\u0228\u0226\x03\x02','\x02\x02\u0228\u0229\x03\x02\x02\x02\u0229+\x03\x02','\x02\x02\u022A\u0228\x03\x02\x02\x02\u022B\u0232\x05.','\x18\x02\u022C\u0230\x07\x0E\x02\x02\u022D\u0231\x05.','\x18\x02\u022E\u0231\x050\x19\x02\u022F\u0231\x07\x87','\x02\x02\u0230\u022D\x03\x02\x02\x02\u0230\u022E\x03\x02','\x02\x02\u0230\u022F\x03\x02\x02\x02\u0231\u0233\x03\x02','\x02\x02\u0232\u022C\x03\x02\x02\x02\u0232\u0233\x03\x02','\x02\x02\u0233-\x03\x02\x02\x02\u0234\u023B\x05\u0194','\xCB\x02\u0235\u0237\t\x02\x02\x02\u0236\u0235\x03\x02','\x02\x02\u0236\u0237\x03\x02\x02\x02\u0237\u0238\x03\x02','\x02\x02\u0238\u023A\x05\u0194\xCB\x02\u0239\u0236\x03\x02','\x02\x02\u023A\u023D\x03\x02\x02\x02\u023B\u023C\x03\x02','\x02\x02\u023B\u0239\x03\x02\x02\x02\u023C/\x03\x02','\x02\x02\u023D\u023B\x03\x02\x02\x02\u023E\u0240\x05\u0188','\xC5\x02\u023F\u023E\x03\x02\x02\x02\u0240\u0241\x03\x02','\x02\x02\u0241\u023F\x03\x02\x02\x02\u0241\u0242\x03\x02','\x02\x02\u02421\x03\x02\x02\x02\u0243\u0244\x05:\x1E','\x02\u02443\x03\x02\x02\x02\u0245\u0247\x07\x10\x02','\x02\u0246\u0248\x07\x99\x02\x02\u0247\u0246\x03\x02\x02','\x02\u0247\u0248\x03\x02\x02\x02\u0248\u0249\x03\x02\x02','\x02\u0249\u024B\x056\x1C\x02\u024A\u024C\x07\x99\x02','\x02\u024B\u024A\x03\x02\x02\x02\u024B\u024C\x03\x02\x02','\x02\u024C\u0257\x03\x02\x02\x02\u024D\u024F\x07\x11\x02','\x02\u024E\u0250\x07\x99\x02\x02\u024F\u024E\x03\x02\x02','\x02\u024F\u0250\x03\x02\x02\x02\u0250\u0251\x03\x02\x02','\x02\u0251\u0253\x056\x1C\x02\u0252\u0254\x07\x99\x02','\x02\u0253\u0252\x03\x02\x02\x02\u0253\u0254\x03\x02\x02','\x02\u0254\u0256\x03\x02\x02\x02\u0255\u024D\x03\x02\x02','\x02\u0256\u0259\x03\x02\x02\x02\u0257\u0255\x03\x02\x02','\x02\u0257\u0258\x03\x02\x02\x02\u0258\u025A\x03\x02\x02','\x02\u0259\u0257\x03\x02\x02\x02\u025A\u025B\x07\x12\x02','\x02\u025B\u0262\x03\x02\x02\x02\u025C\u025E\x07\x10\x02','\x02\u025D\u025F\x07\x99\x02\x02\u025E\u025D\x03\x02\x02','\x02\u025E\u025F\x03\x02\x02\x02\u025F\u0260\x03\x02\x02','\x02\u0260\u0262\x07\x12\x02\x02\u0261\u0245\x03\x02\x02','\x02\u0261\u025C\x03\x02\x02\x02\u02625\x03\x02\x02','\x02\u0263\u0265\x05\u0144\xA3\x02\u0264\u0266\x07\x99\x02','\x02\u0265\u0264\x03\x02\x02\x02\u0265\u0266\x03\x02\x02','\x02\u0266\u0267\x03\x02\x02\x02\u0267\u0269\x07\x04\x02','\x02\u0268\u026A\x07\x99\x02\x02\u0269\u0268\x03\x02\x02','\x02\u0269\u026A\x03\x02\x02\x02\u026A\u026B\x03\x02\x02','\x02\u026B\u026C\x05:\x1E\x02\u026C7\x03\x02\x02\x02','\u026D\u026F\x07\x13\x02\x02\u026E\u0270\x07\x99\x02\x02','\u026F\u026E\x03\x02\x02\x02\u026F\u0270\x03\x02\x02\x02','\u0270\u0271\x03\x02\x02\x02\u0271\u0273\x05:\x1E\x02','\u0272\u0274\x07\x99\x02\x02\u0273\u0272\x03\x02\x02\x02','\u0273\u0274\x03\x02\x02\x02\u0274\u027F\x03\x02\x02\x02','\u0275\u0277\x07\x11\x02\x02\u0276\u0278\x07\x99\x02\x02','\u0277\u0276\x03\x02\x02\x02\u0277\u0278\x03\x02\x02\x02','\u0278\u0279\x03\x02\x02\x02\u0279\u027B\x05:\x1E\x02','\u027A\u027C\x07\x99\x02\x02\u027B\u027A\x03\x02\x02\x02','\u027B\u027C\x03\x02\x02\x02\u027C\u027E\x03\x02\x02\x02','\u027D\u0275\x03\x02\x02\x02\u027E\u0281\x03\x02\x02\x02','\u027F\u027D\x03\x02\x02\x02\u027F\u0280\x03\x02\x02\x02','\u0280\u0282\x03\x02\x02\x02\u0281\u027F\x03\x02\x02\x02','\u0282\u0283\x07\x14\x02\x02\u0283\u028A\x03\x02\x02\x02','\u0284\u0286\x07\x13\x02\x02\u0285\u0287\x07\x99\x02\x02','\u0286\u0285\x03\x02\x02\x02\u0286\u0287\x03\x02\x02\x02','\u0287\u0288\x03\x02\x02\x02\u0288\u028A\x07\x14\x02\x02','\u0289\u026D\x03\x02\x02\x02\u0289\u0284\x03\x02\x02\x02','\u028A9\x03\x02\x02\x02\u028B\u0292\x05\u0144\xA3\x02','\u028C\u0292\x05\u0168\xB5\x02\u028D\u0292\x054\x1B\x02','\u028E\u0292\x058\x1D\x02\u028F\u0292\x05\u0146\xA4\x02','\u0290\u0292\x07t\x02\x02\u0291\u028B\x03\x02\x02\x02','\u0291\u028C\x03\x02\x02\x02\u0291\u028D\x03\x02\x02\x02','\u0291\u028E\x03\x02\x02\x02\u0291\u028F\x03\x02\x02\x02','\u0291\u0290\x03\x02\x02\x02\u0292;\x03\x02\x02\x02','\u0293\u0294\x05\u0166\xB4\x02\u0294\u0295\x07\x04\x02\x02','\u0295\u029A\x07\x99\x02\x02\u0296\u029B\x07\x86\x02\x02','\u0297\u029B\x05\u0168\xB5\x02\u0298\u029B\x05\u0146\xA4\x02','\u0299\u029B\x05\u0194\xCB\x02\u029A\u0296\x03\x02\x02\x02','\u029A\u0297\x03\x02\x02\x02\u029A\u0298\x03\x02\x02\x02','\u029A\u0299\x03\x02\x02\x02\u029B=\x03\x02\x02\x02','\u029C\u029F\x07\b\x02\x02\u029D\u02A0\x05\u0194\xCB\x02','\u029E\u02A0\x05\u0168\xB5\x02\u029F\u029D\x03\x02\x02\x02','\u029F\u029E\x03\x02\x02\x02\u02A0\u02A2\x03\x02\x02\x02','\u02A1\u029C\x03\x02\x02\x02\u02A2\u02A3\x03\x02\x02\x02','\u02A3\u02A1\x03\x02\x02\x02\u02A3\u02A4\x03\x02\x02\x02','\u02A4\u02A6\x03\x02\x02\x02\u02A5\u02A7\x07\b\x02\x02','\u02A6\u02A5\x03\x02\x02\x02\u02A6\u02A7\x03\x02\x02\x02','\u02A7?\x03\x02\x02\x02\u02A8\u02AD\x05\u0194\xCB\x02','\u02A9\u02AA\x07\x05\x02\x02\u02AA\u02AC\x05\u0194\xCB\x02','\u02AB\u02A9\x03\x02\x02\x02\u02AC\u02AF\x03\x02\x02\x02','\u02AD\u02AB\x03\x02\x02\x02\u02AD\u02AE\x03\x02\x02\x02','\u02AEA\x03\x02\x02\x02\u02AF\u02AD\x03\x02\x02\x02','\u02B0\u02B1\x05D#\x02\u02B1\u02B2\x05R*\x02\u02B2C\x03\x02','\x02\x02\u02B3\u02B5\x05F$\x02\u02B4\u02B6\x07\x99\x02','\x02\u02B5\u02B4\x03\x02\x02\x02\u02B5\u02B6\x03\x02\x02','\x02\u02B6\u02B8\x03\x02\x02\x02\u02B7\u02B3\x03\x02\x02','\x02\u02B8\u02BB\x03\x02\x02\x02\u02B9\u02B7\x03\x02\x02','\x02\u02B9\u02BA\x03\x02\x02\x02\u02BAE\x03\x02\x02','\x02\u02BB\u02B9\x03\x02\x02\x02\u02BC\u02C0\x05H%\x02','\u02BD\u02C0\x05L\'\x02\u02BE\u02C0\x05N(\x02\u02BF\u02BC\x03','\x02\x02\x02\u02BF\u02BD\x03\x02\x02\x02\u02BF\u02BE\x03','\x02\x02\x02\u02C0G\x03\x02\x02\x02\u02C1\u02C4\x07','8\x02\x02\u02C2\u02C3\x07\x99\x02\x02\u02C3\u02C5\x05','J&\x02\u02C4\u02C2\x03\x02\x02\x02\u02C4\u02C5\x03\x02','\x02\x02\u02C5\u02CA\x03\x02\x02\x02\u02C6\u02C7\x07\x99','\x02\x02\u02C7\u02C9\x05P)\x02\u02C8\u02C6\x03\x02\x02','\x02\u02C9\u02CC\x03\x02\x02\x02\u02CA\u02C8\x03\x02\x02','\x02\u02CA\u02CB\x03\x02\x02\x02\u02CBI\x03\x02\x02','\x02\u02CC\u02CA\x03\x02\x02\x02\u02CD\u02CE\x07\x94\x02','\x02\u02CEK\x03\x02\x02\x02\u02CF\u02D0\x079\x02\x02','\u02D0M\x03\x02\x02\x02\u02D1\u02D2\x07:\x02\x02\u02D2','O\x03\x02\x02\x02\u02D3\u02D5\x05\u0194\xCB\x02\u02D4','\u02D6\x07\x99\x02\x02\u02D5\u02D4\x03\x02\x02\x02\u02D5','\u02D6\x03\x02\x02\x02\u02D6\u02D7\x03\x02\x02\x02\u02D7','\u02D9\x07\x0E\x02\x02\u02D8\u02DA\x07\x99\x02\x02\u02D9','\u02D8\x03\x02\x02\x02\u02D9\u02DA\x03\x02\x02\x02\u02DA','\u02DB\x03\x02\x02\x02\u02DB\u02DC\x05\u0194\xCB\x02\u02DC','Q\x03\x02\x02\x02\u02DD\u02E0\x05d3\x02\u02DE\u02E0\x05','T+\x02\u02DF\u02DD\x03\x02\x02\x02\u02DF\u02DE\x03\x02','\x02\x02\u02E0S\x03\x02\x02\x02\u02E1\u02E4\x05V,\x02','\u02E2\u02E4\x05X-\x02\u02E3\u02E1\x03\x02\x02\x02\u02E3','\u02E2\x03\x02\x02\x02\u02E4U\x03\x02\x02\x02\u02E5','\u02EC\x05Z.\x02\u02E6\u02E8\x07\x99\x02\x02\u02E7\u02E6','\x03\x02\x02\x02\u02E7\u02E8\x03\x02\x02\x02\u02E8\u02E9','\x03\x02\x02\x02\u02E9\u02EB\x05`1\x02\u02EA\u02E7\x03','\x02\x02\x02\u02EB\u02EE\x03\x02\x02\x02\u02EC\u02EA\x03','\x02\x02\x02\u02EC\u02ED\x03\x02\x02\x02\u02EDW\x03','\x02\x02\x02\u02EE\u02EC\x03\x02\x02\x02\u02EF\u02F1\x05','\\/\x02\u02F0\u02F2\x07\x99\x02\x02\u02F1\u02F0\x03\x02','\x02\x02\u02F1\u02F2\x03\x02\x02\x02\u02F2\u02F3\x03\x02','\x02\x02\u02F3\u02F4\x05^0\x02\u02F4Y\x03\x02\x02\x02','\u02F5\u02FC\x05b2\x02\u02F6\u02F8\x07\x99\x02\x02\u02F7','\u02F6\x03\x02\x02\x02\u02F7\u02F8\x03\x02\x02\x02\u02F8','\u02F9\x03\x02\x02\x02\u02F9\u02FB\x05b2\x02\u02FA\u02F7','\x03\x02\x02\x02\u02FB\u02FE\x03\x02\x02\x02\u02FC\u02FA','\x03\x02\x02\x02\u02FC\u02FD\x03\x02\x02\x02\u02FD[','\x03\x02\x02\x02\u02FE\u02FC\x03\x02\x02\x02\u02FF\u0300','\x07;\x02\x02\u0300\u0301\x07\x99\x02\x02\u0301\u0302','\x07<\x02\x02\u0302\u0303\x07\x99\x02\x02\u0303\u0306','\x07=\x02\x02\u0304\u0305\x07\x99\x02\x02\u0305\u0307','\x05\u0188\xC5\x02\u0306\u0304\x03\x02\x02\x02\u0306\u0307','\x03\x02\x02\x02\u0307]\x03\x02\x02\x02\u0308\u030F','\x05\x86D\x02\u0309\u030B\x07\x99\x02\x02\u030A\u0309','\x03\x02\x02\x02\u030A\u030B\x03\x02\x02\x02\u030B\u030C','\x03\x02\x02\x02\u030C\u030E\x05b2\x02\u030D\u030A\x03','\x02\x02\x02\u030E\u0311\x03\x02\x02\x02\u030F\u030D\x03','\x02\x02\x02\u030F\u0310\x03\x02\x02\x02\u0310_\x03','\x02\x02\x02\u0311\u030F\x03\x02\x02\x02\u0312\u0313\x07','>\x02\x02\u0313\u0314\x07\x99\x02\x02\u0314\u0316\x07','?\x02\x02\u0315\u0317\x07\x99\x02\x02\u0316\u0315\x03','\x02\x02\x02\u0316\u0317\x03\x02\x02\x02\u0317\u0318\x03','\x02\x02\x02\u0318\u031F\x05Z.\x02\u0319\u031B\x07>\x02','\x02\u031A\u031C\x07\x99\x02\x02\u031B\u031A\x03\x02\x02','\x02\u031B\u031C\x03\x02\x02\x02\u031C\u031D\x03\x02\x02','\x02\u031D\u031F\x05Z.\x02\u031E\u0312\x03\x02\x02\x02','\u031E\u0319\x03\x02\x02\x02\u031Fa\x03\x02\x02\x02','\u0320\u032F\x05\x86D\x02\u0321\u032F\x05\xC6d\x02\u0322','\u032F\x05\x88E\x02\u0323\u032F\x05\x8AF\x02\u0324\u032F','\x05\x8CG\x02\u0325\u032F\x05\x90I\x02\u0326\u032F\x05','\x92J\x02\u0327\u032F\x05\x94K\x02\u0328\u032F\x05\x98','M\x02\u0329\u032F\x05\x9AN\x02\u032A\u032F\x05\x9EP\x02','\u032B\u032F\x05\xA0Q\x02\u032C\u032F\x05\xA2R\x02\u032D','\u032F\x05\xAAV\x02\u032E\u0320\x03\x02\x02\x02\u032E','\u0321\x03\x02\x02\x02\u032E\u0322\x03\x02\x02\x02\u032E','\u0323\x03\x02\x02\x02\u032E\u0324\x03\x02\x02\x02\u032E','\u0325\x03\x02\x02\x02\u032E\u0326\x03\x02\x02\x02\u032E','\u0327\x03\x02\x02\x02\u032E\u0328\x03\x02\x02\x02\u032E','\u0329\x03\x02\x02\x02\u032E\u032A\x03\x02\x02\x02\u032E','\u032B\x03\x02\x02\x02\u032E\u032C\x03\x02\x02\x02\u032E','\u032D\x03\x02\x02\x02\u032Fc\x03\x02\x02\x02\u0330','\u033B\x05n8\x02\u0331\u033B\x05x=\x02\u0332\u033B\x05f4\x02','\u0333\u033B\x05p9\x02\u0334\u033B\x05h5\x02\u0335\u033B\x05','r:\x02\u0336\u033B\x05j6\x02\u0337\u033B\x05t;\x02\u0338\u033B','\x05l7\x02\u0339\u033B\x05v<\x02\u033A\u0330\x03\x02\x02','\x02\u033A\u0331\x03\x02\x02\x02\u033A\u0332\x03\x02\x02','\x02\u033A\u0333\x03\x02\x02\x02\u033A\u0334\x03\x02\x02','\x02\u033A\u0335\x03\x02\x02\x02\u033A\u0336\x03\x02\x02','\x02\u033A\u0337\x03\x02\x02\x02\u033A\u0338\x03\x02\x02','\x02\u033A\u0339\x03\x02\x02\x02\u033Be\x03\x02\x02','\x02\u033C\u033D\x07@\x02\x02\u033D\u033E\x07\x99\x02','\x02\u033E\u033F\x05|?\x02\u033Fg\x03\x02\x02\x02\u0340','\u0341\x07@\x02\x02\u0341\u0342\x07\x99\x02\x02\u0342','\u0343\x05~@\x02\u0343i\x03\x02\x02\x02\u0344\u0345\x07','@\x02\x02\u0345\u0346\x07\x99\x02\x02\u0346\u0347\x05','\x80A\x02\u0347k\x03\x02\x02\x02\u0348\u0349\x07@\x02','\x02\u0349\u034A\x07\x99\x02\x02\u034A\u034B\x05\x82B','\x02\u034Bm\x03\x02\x02\x02\u034C\u034D\x07@\x02\x02','\u034D\u034E\x07\x99\x02\x02\u034E\u034F\x05z>\x02\u034F','o\x03\x02\x02\x02\u0350\u0351\x07A\x02\x02\u0351\u0352','\x07\x99\x02\x02\u0352\u0353\x05|?\x02\u0353q\x03\x02','\x02\x02\u0354\u0355\x07A\x02\x02\u0355\u0356\x07\x99','\x02\x02\u0356\u0357\x05~@\x02\u0357s\x03\x02\x02\x02','\u0358\u0359\x07A\x02\x02\u0359\u035A\x07\x99\x02\x02','\u035A\u035B\x05\x80A\x02\u035Bu\x03\x02\x02\x02\u035C','\u035D\x07A\x02\x02\u035D\u035E\x07\x99\x02\x02\u035E','\u035F\x05\x82B\x02\u035Fw\x03\x02\x02\x02\u0360\u0361','\x07A\x02\x02\u0361\u0362\x07\x99\x02\x02\u0362\u0363','\x05z>\x02\u0363y\x03\x02\x02\x02\u0364\u0365\x07B\x02','\x02\u0365\u0366\x07\x99\x02\x02\u0366\u0368\x07C\x02','\x02\u0367\u0369\x07\x99\x02\x02\u0368\u0367\x03\x02\x02','\x02\u0368\u0369\x03\x02\x02\x02\u0369\u036A\x03\x02\x02','\x02\u036A\u036C\x05\xFA~\x02\u036B\u036D\x07\x99\x02','\x02\u036C\u036B\x03\x02\x02\x02\u036C\u036D\x03\x02\x02','\x02\u036D\u036E\x03\x02\x02\x02\u036E\u0370\x07\x15\x02','\x02\u036F\u0371\x07\x99\x02\x02\u0370\u036F\x03\x02\x02','\x02\u0370\u0371\x03\x02\x02\x02\u0371\u0372\x03\x02\x02','\x02\u0372\u0374\x05\u0184\xC3\x02\u0373\u0375\x07\x99\x02','\x02\u0374\u0373\x03\x02\x02\x02\u0374\u0375\x03\x02\x02','\x02\u0375\u0376\x03\x02\x02\x02\u0376\u0377\x07\x16\x02','\x02\u0377{\x03\x02\x02\x02\u0378\u0379\x07D\x02\x02','\u0379\u037A\x07\x99\x02\x02\u037A\u037C\x07C\x02\x02','\u037B\u037D\x07\x99\x02\x02\u037C\u037B\x03\x02\x02\x02','\u037C\u037D\x03\x02\x02\x02\u037D\u037E\x03\x02\x02\x02','\u037E\u0380\x07\x15\x02\x02\u037F\u0381\x07\x99\x02\x02','\u0380\u037F\x03\x02\x02\x02\u0380\u0381\x03\x02\x02\x02','\u0381\u0382\x03\x02\x02\x02\u0382\u0383\x05\u0166\xB4\x02','\u0383\u0385\x05\xFA~\x02\u0384\u0386\x07\x99\x02\x02','\u0385\u0384\x03\x02\x02\x02\u0385\u0386\x03\x02\x02\x02','\u0386\u0387\x03\x02\x02\x02\u0387\u0389\x07\x16\x02\x02','\u0388\u038A\x07\x99\x02\x02\u0389\u0388\x03\x02\x02\x02','\u0389\u038A\x03\x02\x02\x02\u038A\u038B\x03\x02\x02\x02','\u038B\u038C\x07E\x02\x02\u038C\u038D\x07\x99\x02\x02','\u038D\u038E\x05\u0182\xC2\x02\u038E\u038F\x07\x99\x02\x02','\u038F\u0390\x07F\x02\x02\u0390\u0391\x07\x99\x02\x02','\u0391\u0392\x07G\x02\x02\u0392}\x03\x02\x02\x02\u0393','\u0394\x07D\x02\x02\u0394\u0395\x07\x99\x02\x02\u0395','\u0397\x07C\x02\x02\u0396\u0398\x07\x99\x02\x02\u0397','\u0396\x03\x02\x02\x02\u0397\u0398\x03\x02\x02\x02\u0398','\u0399\x03\x02\x02\x02\u0399\u039B\x07\x15\x02\x02\u039A','\u039C\x07\x99\x02\x02\u039B\u039A\x03\x02\x02\x02\u039B','\u039C\x03\x02\x02\x02\u039C\u039D\x03\x02\x02\x02\u039D','\u039E\x05\u0166\xB4\x02\u039E\u03A0\x05\xFA~\x02\u039F','\u03A1\x07\x99\x02\x02\u03A0\u039F\x03\x02\x02\x02\u03A0','\u03A1\x03\x02\x02\x02\u03A1\u03A2\x03\x02\x02\x02\u03A2','\u03A4\x07\x16\x02\x02\u03A3\u03A5\x07\x99\x02\x02\u03A4','\u03A3\x03\x02\x02\x02\u03A4\u03A5\x03\x02\x02\x02\u03A5','\u03A6\x03\x02\x02\x02\u03A6\u03A7\x07E\x02\x02\u03A7','\u03A8\x07\x99\x02\x02\u03A8\u03AA\x07\x15\x02\x02\u03A9','\u03AB\x07\x99\x02\x02\u03AA\u03A9\x03\x02\x02\x02\u03AA','\u03AB\x03\x02\x02\x02\u03AB\u03AC\x03\x02\x02\x02\u03AC','\u03AE\x05\u0180\xC1\x02\u03AD\u03AF\x07\x99\x02\x02\u03AE','\u03AD\x03\x02\x02\x02\u03AE\u03AF\x03\x02\x02\x02\u03AF','\u03B0\x03\x02\x02\x02\u03B0\u03B1\x07\x16\x02\x02\u03B1','\u03B2\x07\x99\x02\x02\u03B2\u03B3\x07F\x02\x02\u03B3','\u03B4\x07\x99\x02\x02\u03B4\u03B5\x07g\x02\x02\u03B5','\u03B6\x07\x99\x02\x02\u03B6\u03B7\x07\x85\x02\x02\u03B7','\x7F\x03\x02\x02\x02\u03B8\u03B9\x07D\x02\x02\u03B9','\u03BA\x07\x99\x02\x02\u03BA\u03BC\x07C\x02\x02\u03BB','\u03BD\x07\x99\x02\x02\u03BC\u03BB\x03\x02\x02\x02\u03BC','\u03BD\x03\x02\x02\x02\u03BD\u03BE\x03\x02\x02\x02\u03BE','\u03BF\x07\x15\x02\x02\u03BF\u03C0\x05\u0166\xB4\x02\u03C0','\u03C1\x05\xFA~\x02\u03C1\u03C3\x07\x16\x02\x02\u03C2','\u03C4\x07\x99\x02\x02\u03C3\u03C2\x03\x02\x02\x02\u03C3','\u03C4\x03\x02\x02\x02\u03C4\u03C5\x03\x02\x02\x02\u03C5','\u03C6\x07E\x02\x02\u03C6\u03C7\x07\x99\x02\x02\u03C7','\u03C9\x07H\x02\x02\u03C8\u03CA\x07\x99\x02\x02\u03C9','\u03C8\x03\x02\x02\x02\u03C9\u03CA\x03\x02\x02\x02\u03CA','\u03CB\x03\x02\x02\x02\u03CB\u03CC\x07\x15\x02\x02\u03CC','\u03CD\x05\u0182\xC2\x02\u03CD\u03CE\x07\x16\x02\x02\u03CE','\x81\x03\x02\x02\x02\u03CF\u03D0\x07D\x02\x02\u03D0','\u03D1\x07\x99\x02\x02\u03D1\u03D3\x07C\x02\x02\u03D2','\u03D4\x07\x99\x02\x02\u03D3\u03D2\x03\x02\x02\x02\u03D3','\u03D4\x03\x02\x02\x02\u03D4\u03D5\x03\x02\x02\x02\u03D5','\u03D7\x05\x84C\x02\u03D6\u03D8\x07\x99\x02\x02\u03D7','\u03D6\x03\x02\x02\x02\u03D7\u03D8\x03\x02\x02\x02\u03D8','\u03D9\x03\x02\x02\x02\u03D9\u03DA\x07E\x02\x02\u03DA','\u03DB\x07\x99\x02\x02\u03DB\u03DD\x07H\x02\x02\u03DC','\u03DE\x07\x99\x02\x02\u03DD\u03DC\x03\x02\x02\x02\u03DD','\u03DE\x03\x02\x02\x02\u03DE\u03DF\x03\x02\x02\x02\u03DF','\u03E0\x07\x15\x02\x02\u03E0\u03E1\x05\u0182\xC2\x02\u03E1','\u03E2\x07\x16\x02\x02\u03E2\x83\x03\x02\x02\x02\u03E3','\u03E5\x07\x15\x02\x02\u03E4\u03E6\x07\x99\x02\x02\u03E5','\u03E4\x03\x02\x02\x02\u03E5\u03E6\x03\x02\x02\x02\u03E6','\u03E7\x03\x02\x02\x02\u03E7\u03E8\x07\x16\x02\x02\u03E8','\u03E9\x05\u0192\xCA\x02\u03E9\u03EA\x07\x13\x02\x02\u03EA','\u03EB\x05\u0166\xB4\x02\u03EB\u03EC\x05\xF0y\x02\u03EC','\u03ED\x07\x14\x02\x02\u03ED\u03EE\x05\u0192\xCA\x02\u03EE','\u03F0\x07\x15\x02\x02\u03EF\u03F1\x07\x99\x02\x02\u03F0','\u03EF\x03\x02\x02\x02\u03F0\u03F1\x03\x02\x02\x02\u03F1','\u03F2\x03\x02\x02\x02\u03F2\u03F3\x07\x16\x02\x02\u03F3','\u0419\x03\x02\x02\x02\u03F4\u03F6\x07\x15\x02\x02\u03F5','\u03F7\x07\x99\x02\x02\u03F6\u03F5\x03\x02\x02\x02\u03F6','\u03F7\x03\x02\x02\x02\u03F7\u03F8\x03\x02\x02\x02\u03F8','\u03F9\x07\x16\x02\x02\u03F9\u03FA\x05\u0192\xCA\x02\u03FA','\u03FB\x07\x13\x02\x02\u03FB\u03FC\x05\u0166\xB4\x02\u03FC','\u03FD\x05\xF0y\x02\u03FD\u03FE\x07\x14\x02\x02\u03FE','\u03FF\x05\u0192\xCA\x02\u03FF\u0400\x05\u0190\xC9\x02\u0400','\u0402\x07\x15\x02\x02\u0401\u0403\x07\x99\x02\x02\u0402','\u0401\x03\x02\x02\x02\u0402\u0403\x03\x02\x02\x02\u0403','\u0404\x03\x02\x02\x02\u0404\u0405\x07\x16\x02\x02\u0405','\u0419\x03\x02\x02\x02\u0406\u0408\x07\x15\x02\x02\u0407','\u0409\x07\x99\x02\x02\u0408\u0407\x03\x02\x02\x02\u0408','\u0409\x03\x02\x02\x02\u0409\u040A\x03\x02\x02\x02\u040A','\u040B\x07\x16\x02\x02\u040B\u040C\x05\u018E\xC8\x02\u040C','\u040D\x05\u0192\xCA\x02\u040D\u040E\x07\x13\x02\x02\u040E','\u040F\x05\u0166\xB4\x02\u040F\u0410\x05\xF0y\x02\u0410','\u0411\x07\x14\x02\x02\u0411\u0412\x05\u0192\xCA\x02\u0412','\u0414\x07\x15\x02\x02\u0413\u0415\x07\x99\x02\x02\u0414','\u0413\x03\x02\x02\x02\u0414\u0415\x03\x02\x02\x02\u0415','\u0416\x03\x02\x02\x02\u0416\u0417\x07\x16\x02\x02\u0417','\u0419\x03\x02\x02\x02\u0418\u03E3\x03\x02\x02\x02\u0418','\u03F4\x03\x02\x02\x02\u0418\u0406\x03\x02\x02\x02\u0419','\x85\x03\x02\x02\x02\u041A\u041B\x07I\x02\x02\u041B','\u041C\x07\x99\x02\x02\u041C\u041D\x07J\x02\x02\u041D','\u0422\x07\x99\x02\x02\u041E\u041F\x07K\x02\x02\u041F','\u0420\x07\x99\x02\x02\u0420\u0421\x07L\x02\x02\u0421','\u0423\x07\x99\x02\x02\u0422\u041E\x03\x02\x02\x02\u0422','\u0423\x03\x02\x02\x02\u0423\u0424\x03\x02\x02\x02\u0424','\u0425\x07M\x02\x02\u0425\u0426\x07\x99\x02\x02\u0426','\u0427\x05\u0102\x82\x02\u0427\u0428\x07\x99\x02\x02\u0428','\u0429\x07N\x02\x02\u0429\u042A\x07\x99\x02\x02\u042A','\u042B\x05\u0166\xB4\x02\u042B\u042F\x07\x99\x02\x02\u042C','\u042D\x07O\x02\x02\u042D\u042E\x07\x99\x02\x02\u042E','\u0430\x07\x86\x02\x02\u042F\u042C\x03\x02\x02\x02\u042F','\u0430\x03\x02\x02\x02\u0430\x87\x03\x02\x02\x02\u0431','\u0432\x07P\x02\x02\u0432\u0434\x07\x99\x02\x02\u0433','\u0431\x03\x02\x02\x02\u0433\u0434\x03\x02\x02\x02\u0434','\u0435\x03\x02\x02\x02\u0435\u0437\x07Q\x02\x02\u0436','\u0438\x07\x99\x02\x02\u0437\u0436\x03\x02\x02\x02\u0437','\u0438\x03\x02\x02\x02\u0438\u0439\x03\x02\x02\x02\u0439','\u043D\x05\xDAn\x02\u043A\u043C\x05\xC4c\x02\u043B\u043A','\x03\x02\x02\x02\u043C\u043F\x03\x02\x02\x02\u043D\u043B','\x03\x02\x02\x02\u043D\u043E\x03\x02\x02\x02\u043E\u0444','\x03\x02\x02\x02\u043F\u043D\x03\x02\x02\x02\u0440\u0442','\x07\x99\x02\x02\u0441\u0440\x03\x02\x02\x02\u0441\u0442','\x03\x02\x02\x02\u0442\u0443\x03\x02\x02\x02\u0443\u0445','\x05\xD8m\x02\u0444\u0441\x03\x02\x02\x02\u0444\u0445','\x03\x02\x02\x02\u0445\x89\x03\x02\x02\x02\u0446\u0448','\x07R\x02\x02\u0447\u0449\x07\x99\x02\x02\u0448\u0447','\x03\x02\x02\x02\u0448\u0449\x03\x02\x02\x02\u0449\u044A','\x03\x02\x02\x02\u044A\u044B\x05\u0102\x82\x02\u044B\u044C','\x07\x99\x02\x02\u044C\u044D\x07N\x02\x02\u044D\u044E','\x07\x99\x02\x02\u044E\u044F\x05\u0166\xB4\x02\u044F\x8B','\x03\x02\x02\x02\u0450\u0452\x07S\x02\x02\u0451\u0453','\x07\x99\x02\x02\u0452\u0451\x03\x02\x02\x02\u0452\u0453','\x03\x02\x02\x02\u0453\u0454\x03\x02\x02\x02\u0454\u0459','\x05\xDCo\x02\u0455\u0456\x07\x99\x02\x02\u0456\u0458','\x05\x8EH\x02\u0457\u0455\x03\x02\x02\x02\u0458\u045B','\x03\x02\x02\x02\u0459\u0457\x03\x02\x02\x02\u0459\u045A','\x03\x02\x02\x02\u045A\x8D\x03\x02\x02\x02\u045B\u0459','\x03\x02\x02\x02\u045C\u045D\x07C\x02\x02\u045D\u045E','\x07\x99\x02\x02\u045E\u045F\x07Q\x02\x02\u045F\u0460','\x07\x99\x02\x02\u0460\u0467\x05\x94K\x02\u0461\u0462','\x07C\x02\x02\u0462\u0463\x07\x99\x02\x02\u0463\u0464','\x07@\x02\x02\u0464\u0465\x07\x99\x02\x02\u0465\u0467','\x05\x94K\x02\u0466\u045C\x03\x02\x02\x02\u0466\u0461','\x03\x02\x02\x02\u0467\x8F\x03\x02\x02\x02\u0468\u046A','\x07@\x02\x02\u0469\u046B\x07\x99\x02\x02\u046A\u0469','\x03\x02\x02\x02\u046A\u046B\x03\x02\x02\x02\u046B\u046C','\x03\x02\x02\x02\u046C\u046D\x05\xDAn\x02\u046D\x91','\x03\x02\x02\x02\u046E\u046F\x07@\x02\x02\u046F\u0470','\x07\x99\x02\x02\u0470\u0472\x07G\x02\x02\u0471\u0473','\x07\x99\x02\x02\u0472\u0471\x03\x02\x02\x02\u0472\u0473','\x03\x02\x02\x02\u0473\u0474\x03\x02\x02\x02\u0474\u0475','\x05\xDAn\x02\u0475\x93\x03\x02\x02\x02\u0476\u0478','\x07T\x02\x02\u0477\u0479\x07\x99\x02\x02\u0478\u0477','\x03\x02\x02\x02\u0478\u0479\x03\x02\x02\x02\u0479\u047A','\x03\x02\x02\x02\u047A\u0485\x05\x96L\x02\u047B\u047D','\x07\x99\x02\x02\u047C\u047B\x03\x02\x02\x02\u047C\u047D','\x03\x02\x02\x02\u047D\u047E\x03\x02\x02\x02\u047E\u0480','\x07\x11\x02\x02\u047F\u0481\x07\x99\x02\x02\u0480\u047F','\x03\x02\x02\x02\u0480\u0481\x03\x02\x02\x02\u0481\u0482','\x03\x02\x02\x02\u0482\u0484\x05\x96L\x02\u0483\u047C','\x03\x02\x02\x02\u0484\u0487\x03\x02\x02\x02\u0485\u0483','\x03\x02\x02\x02\u0485\u0486\x03\x02\x02\x02\u0486\x95','\x03\x02\x02\x02\u0487\u0485\x03\x02\x02\x02\u0488\u048A','\x05\u0182\xC2\x02\u0489\u048B\x07\x99\x02\x02\u048A\u0489','\x03\x02\x02\x02\u048A\u048B\x03\x02\x02\x02\u048B\u048C','\x03\x02\x02\x02\u048C\u048E\x07\x0E\x02\x02\u048D\u048F','\x07\x99\x02\x02\u048E\u048D\x03\x02\x02\x02\u048E\u048F','\x03\x02\x02\x02\u048F\u0490\x03\x02\x02\x02\u0490\u0491','\x05\u0102\x82\x02\u0491\u04AD\x03\x02\x02\x02\u0492\u0494','\x05\u0166\xB4\x02\u0493\u0495\x07\x99\x02\x02\u0494\u0493','\x03\x02\x02\x02\u0494\u0495\x03\x02\x02\x02\u0495\u0496','\x03\x02\x02\x02\u0496\u0498\x07\x0E\x02\x02\u0497\u0499','\x07\x99\x02\x02\u0498\u0497\x03\x02\x02\x02\u0498\u0499','\x03\x02\x02\x02\u0499\u049A\x03\x02\x02\x02\u049A\u049B','\x05\u0102\x82\x02\u049B\u04AD\x03\x02\x02\x02\u049C\u049E','\x05\u0166\xB4\x02\u049D\u049F\x07\x99\x02\x02\u049E\u049D','\x03\x02\x02\x02\u049E\u049F\x03\x02\x02\x02\u049F\u04A0','\x03\x02\x02\x02\u04A0\u04A2\x07\x17\x02\x02\u04A1\u04A3','\x07\x99\x02\x02\u04A2\u04A1\x03\x02\x02\x02\u04A2\u04A3','\x03\x02\x02\x02\u04A3\u04A4\x03\x02\x02\x02\u04A4\u04A5','\x05\u0102\x82\x02\u04A5\u04AD\x03\x02\x02\x02\u04A6\u04A8','\x05\u0166\xB4\x02\u04A7\u04A9\x07\x99\x02\x02\u04A8\u04A7','\x03\x02\x02\x02\u04A8\u04A9\x03\x02\x02\x02\u04A9\u04AA','\x03\x02\x02\x02\u04AA\u04AB\x05\xF8}\x02\u04AB\u04AD','\x03\x02\x02\x02\u04AC\u0488\x03\x02\x02\x02\u04AC\u0492','\x03\x02\x02\x02\u04AC\u049C\x03\x02\x02\x02\u04AC\u04A6','\x03\x02\x02\x02\u04AD\x97\x03\x02\x02\x02\u04AE\u04AF','\x07U\x02\x02\u04AF\u04B1\x07\x99\x02\x02\u04B0\u04AE','\x03\x02\x02\x02\u04B0\u04B1\x03\x02\x02\x02\u04B1\u04B2','\x03\x02\x02\x02\u04B2\u04B4\x07V\x02\x02\u04B3\u04B5','\x07\x99\x02\x02\u04B4\u04B3\x03\x02\x02\x02\u04B4\u04B5','\x03\x02\x02\x02\u04B5\u04B6\x03\x02\x02\x02\u04B6\u04C1','\x05\u0102\x82\x02\u04B7\u04B9\x07\x99\x02\x02\u04B8\u04B7','\x03\x02\x02\x02\u04B8\u04B9\x03\x02\x02\x02\u04B9\u04BA','\x03\x02\x02\x02\u04BA\u04BC\x07\x11\x02\x02\u04BB\u04BD','\x07\x99\x02\x02\u04BC\u04BB\x03\x02\x02\x02\u04BC\u04BD','\x03\x02\x02\x02\u04BD\u04BE\x03\x02\x02\x02\u04BE\u04C0','\x05\u0102\x82\x02\u04BF\u04B8\x03\x02\x02\x02\u04C0\u04C3','\x03\x02\x02\x02\u04C1\u04BF\x03\x02\x02\x02\u04C1\u04C2','\x03\x02\x02\x02\u04C2\x99\x03\x02\x02\x02\u04C3\u04C1','\x03\x02\x02\x02\u04C4\u04C5\x07W\x02\x02\u04C5\u04C6','\x07\x99\x02\x02\u04C6\u04D1\x05\x9CO\x02\u04C7\u04C9','\x07\x99\x02\x02\u04C8\u04C7\x03\x02\x02\x02\u04C8\u04C9','\x03\x02\x02\x02\u04C9\u04CA\x03\x02\x02\x02\u04CA\u04CC','\x07\x11\x02\x02\u04CB\u04CD\x07\x99\x02\x02\u04CC\u04CB','\x03\x02\x02\x02\u04CC\u04CD\x03\x02\x02\x02\u04CD\u04CE','\x03\x02\x02\x02\u04CE\u04D0\x05\x9CO\x02\u04CF\u04C8','\x03\x02\x02\x02\u04D0\u04D3\x03\x02\x02\x02\u04D1\u04CF','\x03\x02\x02\x02\u04D1\u04D2\x03\x02\x02\x02\u04D2\x9B','\x03\x02\x02\x02\u04D3\u04D1\x03\x02\x02\x02\u04D4\u04D5','\x05\u0166\xB4\x02\u04D5\u04D6\x05\xF8}\x02\u04D6\u04D9','\x03\x02\x02\x02\u04D7\u04D9\x05\u0182\xC2\x02\u04D8\u04D4','\x03\x02\x02\x02\u04D8\u04D7\x03\x02\x02\x02\u04D9\x9D','\x03\x02\x02\x02\u04DA\u04DC\x07X\x02\x02\u04DB\u04DD','\x07\x99\x02\x02\u04DC\u04DB\x03\x02\x02\x02\u04DC\u04DD','\x03\x02\x02\x02\u04DD\u04DE\x03\x02\x02\x02\u04DE\u04E0','\x07\x15\x02\x02\u04DF\u04E1\x07\x99\x02\x02\u04E0\u04DF','\x03\x02\x02\x02\u04E0\u04E1\x03\x02\x02\x02\u04E1\u04E2','\x03\x02\x02\x02\u04E2\u04E3\x05\u0166\xB4\x02\u04E3\u04E4','\x07\x99\x02\x02\u04E4\u04E5\x07Y\x02\x02\u04E5\u04E6','\x07\x99\x02\x02\u04E6\u04E8\x05\u0102\x82\x02\u04E7\u04E9','\x07\x99\x02\x02\u04E8\u04E7\x03\x02\x02\x02\u04E8\u04E9','\x03\x02\x02\x02\u04E9\u04EA\x03\x02\x02\x02\u04EA\u04ED','\x07\x18\x02\x02\u04EB\u04EC\x07\x99\x02\x02\u04EC\u04EE','\x05b2\x02\u04ED\u04EB\x03\x02\x02\x02\u04EE\u04EF\x03','\x02\x02\x02\u04EF\u04ED\x03\x02\x02\x02\u04EF\u04F0\x03','\x02\x02\x02\u04F0\u04F2\x03\x02\x02\x02\u04F1\u04F3\x07','\x99\x02\x02\u04F2\u04F1\x03\x02\x02\x02\u04F2\u04F3\x03','\x02\x02\x02\u04F3\u04F4\x03\x02\x02\x02\u04F4\u04F5\x07','\x16\x02\x02\u04F5\x9F\x03\x02\x02\x02\u04F6\u04FB\x07','K\x02\x02\u04F7\u04F9\x07\x99\x02\x02\u04F8\u04F7\x03','\x02\x02\x02\u04F8\u04F9\x03\x02\x02\x02\u04F9\u04FA\x03','\x02\x02\x02\u04FA\u04FC\x07Z\x02\x02\u04FB\u04F8\x03','\x02\x02\x02\u04FB\u04FC\x03\x02\x02\x02\u04FC\u04FD\x03','\x02\x02\x02\u04FD\u04FE\x07\x99\x02\x02\u04FE\u0503\x05','\xA4S\x02\u04FF\u0501\x07\x99\x02\x02\u0500\u04FF\x03','\x02\x02\x02\u0500\u0501\x03\x02\x02\x02\u0501\u0502\x03','\x02\x02\x02\u0502\u0504\x05\xD8m\x02\u0503\u0500\x03','\x02\x02\x02\u0503\u0504\x03\x02\x02\x02\u0504\xA1\x03','\x02\x02\x02\u0505\u050A\x07[\x02\x02\u0506\u0508\x07','\x99\x02\x02\u0507\u0506\x03\x02\x02\x02\u0507\u0508\x03','\x02\x02\x02\u0508\u0509\x03\x02\x02\x02\u0509\u050B\x07','Z\x02\x02\u050A\u0507\x03\x02\x02\x02\u050A\u050B\x03','\x02\x02\x02\u050B\u050D\x03\x02\x02\x02\u050C\u050E\x07','\x99\x02\x02\u050D\u050C\x03\x02\x02\x02\u050D\u050E\x03','\x02\x02\x02\u050E\u050F\x03\x02\x02\x02\u050F\u0510\x05','\xA4S\x02\u0510\xA3\x03\x02\x02\x02\u0511\u0514\x05','\xA6T\x02\u0512\u0513\x07\x99\x02\x02\u0513\u0515\x05','\xBC_\x02\u0514\u0512\x03\x02\x02\x02\u0514\u0515\x03','\x02\x02\x02\u0515\u0518\x03\x02\x02\x02\u0516\u0517\x07','\x99\x02\x02\u0517\u0519\x05\xBE`\x02\u0518\u0516\x03','\x02\x02\x02\u0518\u0519\x03\x02\x02\x02\u0519\u051C\x03','\x02\x02\x02\u051A\u051B\x07\x99\x02\x02\u051B\u051D\x05','\xC0a\x02\u051C\u051A\x03\x02\x02\x02\u051C\u051D\x03','\x02\x02\x02\u051D\xA5\x03\x02\x02\x02\u051E\u0529\x07','\x19\x02\x02\u051F\u0521\x07\x99\x02\x02\u0520\u051F\x03','\x02\x02\x02\u0520\u0521\x03\x02\x02\x02\u0521\u0522\x03','\x02\x02\x02\u0522\u0524\x07\x11\x02\x02\u0523\u0525\x07','\x99\x02\x02\u0524\u0523\x03\x02\x02\x02\u0524\u0525\x03','\x02\x02\x02\u0525\u0526\x03\x02\x02\x02\u0526\u0528\x05','\xA8U\x02\u0527\u0520\x03\x02\x02\x02\u0528\u052B\x03','\x02\x02\x02\u0529\u0527\x03\x02\x02\x02\u0529\u052A\x03','\x02\x02\x02\u052A\u0542\x03\x02\x02\x02\u052B\u0529\x03','\x02\x02\x02\u052C\u0537\x05\xA8U\x02\u052D\u052F\x07','\x99\x02\x02\u052E\u052D\x03\x02\x02\x02\u052E\u052F\x03','\x02\x02\x02\u052F\u0530\x03\x02\x02\x02\u0530\u0532\x07','\x11\x02\x02\u0531\u0533\x07\x99\x02\x02\u0532\u0531\x03','\x02\x02\x02\u0532\u0533\x03\x02\x02\x02\u0533\u0534\x03','\x02\x02\x02\u0534\u0536\x05\xA8U\x02\u0535\u052E\x03','\x02\x02\x02\u0536\u0539\x03\x02\x02\x02\u0537\u0535\x03','\x02\x02\x02\u0537\u0538\x03\x02\x02\x02\u0538\u0542\x03','\x02\x02\x02\u0539\u0537\x03\x02\x02\x02\u053A\u053C\x05','\xACW\x02\u053B\u053D\x07\x99\x02\x02\u053C\u053B\x03','\x02\x02\x02\u053C\u053D\x03\x02\x02\x02\u053D\u053F\x03','\x02\x02\x02\u053E\u0540\x05\xB2Z\x02\u053F\u053E\x03','\x02\x02\x02\u053F\u0540\x03\x02\x02\x02\u0540\u0542\x03','\x02\x02\x02\u0541\u051E\x03\x02\x02\x02\u0541\u052C\x03','\x02\x02\x02\u0541\u053A\x03\x02\x02\x02\u0542\xA7\x03','\x02\x02\x02\u0543\u0544\x05\u0102\x82\x02\u0544\u0545\x07','\x99\x02\x02\u0545\u0546\x07N\x02\x02\u0546\u0547\x07','\x99\x02\x02\u0547\u0548\x05\u0166\xB4\x02\u0548\u054B\x03','\x02\x02\x02\u0549\u054B\x05\u0102\x82\x02\u054A\u0543\x03','\x02\x02\x02\u054A\u0549\x03\x02\x02\x02\u054B\xA9\x03','\x02\x02\x02\u054C\u054D\x07\x83\x02\x02\u054D\u054E\x07','\x99\x02\x02\u054E\u0550\x05\xACW\x02\u054F\u0551\x07','\x99\x02\x02\u0550\u054F\x03\x02\x02\x02\u0550\u0551\x03','\x02\x02\x02\u0551\u0553\x03\x02\x02\x02\u0552\u0554\x05','\xB2Z\x02\u0553\u0552\x03\x02\x02\x02\u0553\u0554\x03','\x02\x02\x02\u0554\xAB\x03\x02\x02\x02\u0555\u0557\x05','\xAEX\x02\u0556\u0558\x07\x99\x02\x02\u0557\u0556\x03','\x02\x02\x02\u0557\u0558\x03\x02\x02\x02\u0558\u055A\x03','\x02\x02\x02\u0559\u055B\x05\xB0Y\x02\u055A\u0559\x03','\x02\x02\x02\u055A\u055B\x03\x02\x02\x02\u055B\xAD\x03','\x02\x02\x02\u055C\u055D\x05\u018C\xC7\x02\u055D\u055E\x05','\u015A\xAE\x02\u055E\xAF\x03\x02\x02\x02\u055F\u0561\x07','\x15\x02\x02\u0560\u0562\x07\x99\x02\x02\u0561\u0560\x03','\x02\x02\x02\u0561\u0562\x03\x02\x02\x02\u0562\u0564\x03','\x02\x02\x02\u0563\u0565\x05\u0102\x82\x02\u0564\u0563\x03','\x02\x02\x02\u0564\u0565\x03\x02\x02\x02\u0565\u0570\x03','\x02\x02\x02\u0566\u0568\x07\x99\x02\x02\u0567\u0566\x03','\x02\x02\x02\u0567\u0568\x03\x02\x02\x02\u0568\u0569\x03','\x02\x02\x02\u0569\u056B\x07\x11\x02\x02\u056A\u056C\x07','\x99\x02\x02\u056B\u056A\x03\x02\x02\x02\u056B\u056C\x03','\x02\x02\x02\u056C\u056D\x03\x02\x02\x02\u056D\u056F\x05','\u0102\x82\x02\u056E\u0567\x03\x02\x02\x02\u056F\u0572\x03','\x02\x02\x02\u0570\u056E\x03\x02\x02\x02\u0570\u0571\x03','\x02\x02\x02\u0571\u0574\x03\x02\x02\x02\u0572\u0570\x03','\x02\x02\x02\u0573\u0575\x07\x99\x02\x02\u0574\u0573\x03','\x02\x02\x02\u0574\u0575\x03\x02\x02\x02\u0575\u0576\x03','\x02\x02\x02\u0576\u0577\x07\x16\x02\x02\u0577\xB1\x03','\x02\x02\x02\u0578\u0579\x07\x84\x02\x02\u0579\u057A\x07','\x99\x02\x02\u057A\u0585\x05\xB4[\x02\u057B\u057D\x07','\x99\x02\x02\u057C\u057B\x03\x02\x02\x02\u057C\u057D\x03','\x02\x02\x02\u057D\u057E\x03\x02\x02\x02\u057E\u0580\x07','\x11\x02\x02\u057F\u0581\x07\x99\x02\x02\u0580\u057F\x03','\x02\x02\x02\u0580\u0581\x03\x02\x02\x02\u0581\u0582\x03','\x02\x02\x02\u0582\u0584\x05\xB4[\x02\u0583\u057C\x03','\x02\x02\x02\u0584\u0587\x03\x02\x02\x02\u0585\u0583\x03','\x02\x02\x02\u0585\u0586\x03\x02\x02\x02\u0586\u058A\x03','\x02\x02\x02\u0587\u0585\x03\x02\x02\x02\u0588\u0589\x07','\x99\x02\x02\u0589\u058B\x05\xD8m\x02\u058A\u0588\x03','\x02\x02\x02\u058A\u058B\x03\x02\x02\x02\u058B\xB3\x03','\x02\x02\x02\u058C\u058F\x05\xB6\\\x02\u058D\u058F\x05','\xB8]\x02\u058E\u058C\x03\x02\x02\x02\u058E\u058D\x03','\x02\x02\x02\u058F\xB5\x03\x02\x02\x02\u0590\u0591\x05','\xBA^\x02\u0591\u0592\x07\x99\x02\x02\u0592\u0593\x07','N\x02\x02\u0593\u0594\x07\x99\x02\x02\u0594\u0595\x05','\u0166\xB4\x02\u0595\xB7\x03\x02\x02\x02\u0596\u0597\x05','\xBA^\x02\u0597\xB9\x03\x02\x02\x02\u0598\u0599\x05','\u0194\xCB\x02\u0599\xBB\x03\x02\x02\x02\u059A\u059B\x07','\\\x02\x02\u059B\u059C\x07\x99\x02\x02\u059C\u059D\x07',']\x02\x02\u059D\u059E\x07\x99\x02\x02\u059E\u05A9\x05','\xC2b\x02\u059F\u05A1\x07\x99\x02\x02\u05A0\u059F\x03','\x02\x02\x02\u05A0\u05A1\x03\x02\x02\x02\u05A1\u05A2\x03','\x02\x02\x02\u05A2\u05A4\x07\x11\x02\x02\u05A3\u05A5\x07','\x99\x02\x02\u05A4\u05A3\x03\x02\x02\x02\u05A4\u05A5\x03','\x02\x02\x02\u05A5\u05A6\x03\x02\x02\x02\u05A6\u05A8\x05','\xC2b\x02\u05A7\u05A0\x03\x02\x02\x02\u05A8\u05AB\x03','\x02\x02\x02\u05A9\u05A7\x03\x02\x02\x02\u05A9\u05AA\x03','\x02\x02\x02\u05AA\xBD\x03\x02\x02\x02\u05AB\u05A9\x03','\x02\x02\x02\u05AC\u05AD\x07^\x02\x02\u05AD\u05AE\x07','\x99\x02\x02\u05AE\u05AF\x05\u0102\x82\x02\u05AF\xBF\x03','\x02\x02\x02\u05B0\u05B1\x07_\x02\x02\u05B1\u05B2\x07','\x99\x02\x02\u05B2\u05B3\x05\u0102\x82\x02\u05B3\xC1\x03','\x02\x02\x02\u05B4\u05BC\x05\u0102\x82\x02\u05B5\u05B7\x07','\x99\x02\x02\u05B6\u05B5\x03\x02\x02\x02\u05B6\u05B7\x03','\x02\x02\x02\u05B7\u05B8\x03\x02\x02\x02\u05B8\u05BA\t','\x03\x02\x02\u05B9\u05BB\x07\x99\x02\x02\u05BA\u05B9\x03','\x02\x02\x02\u05BA\u05BB\x03\x02\x02\x02\u05BB\u05BD\x03','\x02\x02\x02\u05BC\u05B6\x03\x02\x02\x02\u05BC\u05BD\x03','\x02\x02\x02\u05BD\xC3\x03\x02\x02\x02\u05BE\u05C0\x07','\x99\x02\x02\u05BF\u05BE\x03\x02\x02\x02\u05BF\u05C0\x03','\x02\x02\x02\u05C0\u05EF\x03\x02\x02\x02\u05C1\u05C2\x07',';\x02\x02\u05C2\u05C3\x07\x99\x02\x02\u05C3\u05C4\x07','B\x02\x02\u05C4\u05C5\x07\x99\x02\x02\u05C5\u05C6\x05','\u0166\xB4\x02\u05C6\u05C8\x05\xFA~\x02\u05C7\u05C9\x07','\x99\x02\x02\u05C8\u05C7\x03\x02\x02\x02\u05C8\u05C9\x03','\x02\x02\x02\u05C9\u05CA\x03\x02\x02\x02\u05CA\u05CC\x07','\x15\x02\x02\u05CB\u05CD\x07\x99\x02\x02\u05CC\u05CB\x03','\x02\x02\x02\u05CC\u05CD\x03\x02\x02\x02\u05CD\u05CE\x03','\x02\x02\x02\u05CE\u05D0\x05\u0184\xC3\x02\u05CF\u05D1\x07','\x99\x02\x02\u05D0\u05CF\x03\x02\x02\x02\u05D0\u05D1\x03','\x02\x02\x02\u05D1\u05D2\x03\x02\x02\x02\u05D2\u05D3\x07','\x16\x02\x02\u05D3\u05F0\x03\x02\x02\x02\u05D4\u05D5\x07',';\x02\x02\u05D5\u05D6\x07\x99\x02\x02\u05D6\u05D7\x07','d\x02\x02\u05D7\u05D8\x07\x99\x02\x02\u05D8\u05D9\x07','C\x02\x02\u05D9\u05DA\x07\x99\x02\x02\u05DA\u05E5\x05','\u0166\xB4\x02\u05DB\u05DD\x07\x99\x02\x02\u05DC\u05DB\x03','\x02\x02\x02\u05DC\u05DD\x03\x02\x02\x02\u05DD\u05DE\x03','\x02\x02\x02\u05DE\u05E0\x07\x11\x02\x02\u05DF\u05E1\x07','\x99\x02\x02\u05E0\u05DF\x03\x02\x02\x02\u05E0\u05E1\x03','\x02\x02\x02\u05E1\u05E2\x03\x02\x02\x02\u05E2\u05E4\x05','\u0166\xB4\x02\u05E3\u05DC\x03\x02\x02\x02\u05E4\u05E7\x03','\x02\x02\x02\u05E5\u05E3\x03\x02\x02\x02\u05E5\u05E6\x03','\x02\x02\x02\u05E6\u05F0\x03\x02\x02\x02\u05E7\u05E5\x03','\x02\x02\x02\u05E8\u05E9\x07;\x02\x02\u05E9\u05EA\x07','\x99\x02\x02\u05EA\u05EB\x07e\x02\x02\u05EB\u05EC\x07','\x99\x02\x02\u05EC\u05ED\x05\u0166\xB4\x02\u05ED\u05EE\x05','\xFA~\x02\u05EE\u05F0\x03\x02\x02\x02\u05EF\u05C1\x03','\x02\x02\x02\u05EF\u05D4\x03\x02\x02\x02\u05EF\u05E8\x03','\x02\x02\x02\u05F0\xC5\x03\x02\x02\x02\u05F1\u05F2\x07','f\x02\x02\u05F2\u05F3\x07\x99\x02\x02\u05F3\u05FE\x05','\xC8e\x02\u05F4\u05F6\x07\x99\x02\x02\u05F5\u05F4\x03','\x02\x02\x02\u05F5\u05F6\x03\x02\x02\x02\u05F6\u05F7\x03','\x02\x02\x02\u05F7\u05F9\x07\x11\x02\x02\u05F8\u05FA\x07','\x99\x02\x02\u05F9\u05F8\x03\x02\x02\x02\u05F9\u05FA\x03','\x02\x02\x02\u05FA\u05FB\x03\x02\x02\x02\u05FB\u05FD\x05','\xC8e\x02\u05FC\u05F5\x03\x02\x02\x02\u05FD\u0600\x03','\x02\x02\x02\u05FE\u05FC\x03\x02\x02\x02\u05FE\u05FF\x03','\x02\x02\x02\u05FF\u0602\x03\x02\x02\x02\u0600\u05FE\x03','\x02\x02\x02\u0601\u0603\x05\xD8m\x02\u0602\u0601\x03','\x02\x02\x02\u0602\u0603\x03\x02\x02\x02\u0603\xC7\x03','\x02\x02\x02\u0604\u0606\x05\u0166\xB4\x02\u0605\u0607\x07','\x99\x02\x02\u0606\u0605\x03\x02\x02\x02\u0606\u0607\x03','\x02\x02\x02\u0607\u0608\x03\x02\x02\x02\u0608\u060A\x07','\x0E\x02\x02\u0609\u060B\x07\x99\x02\x02\u060A\u0609\x03','\x02\x02\x02\u060A\u060B\x03\x02\x02\x02\u060B\u060C\x03','\x02\x02\x02\u060C\u060D\x05\xCAf\x02\u060D\xC9\x03','\x02\x02\x02\u060E\u0611\x05\xCCg\x02\u060F\u0611\x05','\xCEh\x02\u0610\u060E\x03\x02\x02\x02\u0610\u060F\x03','\x02\x02\x02\u0611\xCB\x03\x02\x02\x02\u0612\u0614\x07','g\x02\x02\u0613\u0615\x07\x99\x02\x02\u0614\u0613\x03','\x02\x02\x02\u0614\u0615\x03\x02\x02\x02\u0615\u0619\x03','\x02\x02\x02\u0616\u061A\x05\xD0i\x02\u0617\u061A\x05','\xD2j\x02\u0618\u061A\x05\xD4k\x02\u0619\u0616\x03\x02','\x02\x02\u0619\u0617\x03\x02\x02\x02\u0619\u0618\x03\x02','\x02\x02\u061A\xCD\x03\x02\x02\x02\u061B\u061F\t\x04','\x02\x02\u061C\u0620\x05\xD0i\x02\u061D\u0620\x05\xD2','j\x02\u061E\u0620\x05\xD4k\x02\u061F\u061C\x03\x02\x02','\x02\u061F\u061D\x03\x02\x02\x02\u061F\u061E\x03\x02\x02','\x02\u0620\xCF\x03\x02\x02\x02\u0621\u0622\x07\x04\x02','\x02\u0622\u0623\x05\u0194\xCB\x02\u0623\u0624\x07\x15\x02','\x02\u0624\u0625\x05\u0194\xCB\x02\u0625\u0628\x07\x0E\x02','\x02\u0626\u0629\x07\x86\x02\x02\u0627\u0629\x05\u0178\xBD','\x02\u0628\u0626\x03\x02\x02\x02\u0628\u0627\x03\x02\x02','\x02\u0629\u062A\x03\x02\x02\x02\u062A\u062B\x07\x16\x02','\x02\u062B\xD1\x03\x02\x02\x02\u062C\u062D\x07\x04\x02','\x02\u062D\u062E\x05\u0194\xCB\x02\u062E\u0631\x07\x15\x02','\x02\u062F\u0632\x07\x86\x02\x02\u0630\u0632\x05\u0178\xBD','\x02\u0631\u062F\x03\x02\x02\x02\u0631\u0630\x03\x02\x02','\x02\u0632\u0633\x03\x02\x02\x02\u0633\u0634\x07\x16\x02','\x02\u0634\xD3\x03\x02\x02\x02\u0635\u0639\x07\x15\x02','\x02\u0636\u063A\x05\xD6l\x02\u0637\u063A\x05\u0178\xBD','\x02\u0638\u063A\x07\x19\x02\x02\u0639\u0636\x03\x02\x02','\x02\u0639\u0637\x03\x02\x02\x02\u0639\u0638\x03\x02\x02','\x02\u063A\u063B\x03\x02\x02\x02\u063B\u063C\x07\x16\x02','\x02\u063C\xD5\x03\x02\x02\x02\u063D\u0648\x05\u0188\xC5','\x02\u063E\u0640\x07\x99\x02\x02\u063F\u063E\x03\x02\x02','\x02\u063F\u0640\x03\x02\x02\x02\u0640\u0641\x03\x02\x02','\x02\u0641\u0643\x07\x11\x02\x02\u0642\u0644\x07\x99\x02','\x02\u0643\u0642\x03\x02\x02\x02\u0643\u0644\x03\x02\x02','\x02\u0644\u0645\x03\x02\x02\x02\u0645\u0647\x05\u0188\xC5','\x02\u0646\u063F\x03\x02\x02\x02\u0647\u064A\x03\x02\x02','\x02\u0648\u0646\x03\x02\x02\x02\u0648\u0649\x03\x02\x02','\x02\u0649\xD7\x03\x02\x02\x02\u064A\u0648\x03\x02\x02','\x02\u064B\u064C\x07j\x02\x02\u064C\u064D\x07\x99\x02','\x02\u064D\u064E\x05\u0102\x82\x02\u064E\xD9\x03\x02\x02','\x02\u064F\u065A\x05\xDCo\x02\u0650\u0652\x07\x99\x02','\x02\u0651\u0650\x03\x02\x02\x02\u0651\u0652\x03\x02\x02','\x02\u0652\u0653\x03\x02\x02\x02\u0653\u0655\x07\x11\x02','\x02\u0654\u0656\x07\x99\x02\x02\u0655\u0654\x03\x02\x02','\x02\u0655\u0656\x03\x02\x02\x02\u0656\u0657\x03\x02\x02','\x02\u0657\u0659\x05\xDCo\x02\u0658\u0651\x03\x02\x02','\x02\u0659\u065C\x03\x02\x02\x02\u065A\u0658\x03\x02\x02','\x02\u065A\u065B\x03\x02\x02\x02\u065B\xDB\x03\x02\x02','\x02\u065C\u065A\x03\x02\x02\x02\u065D\u065F\x05\u0166\xB4','\x02\u065E\u0660\x07\x99\x02\x02\u065F\u065E\x03\x02\x02','\x02\u065F\u0660\x03\x02\x02\x02\u0660\u0661\x03\x02\x02','\x02\u0661\u0663\x07\x0E\x02\x02\u0662\u0664\x07\x99\x02','\x02\u0663\u0662\x03\x02\x02\x02\u0663\u0664\x03\x02\x02','\x02\u0664\u0665\x03\x02\x02\x02\u0665\u0666\x05\xDEp','\x02\u0666\u0669\x03\x02\x02\x02\u0667\u0669\x05\xDEp','\x02\u0668\u065D\x03\x02\x02\x02\u0668\u0667\x03\x02\x02','\x02\u0669\xDD\x03\x02\x02\x02\u066A\u066D\x05\u013A\x9E','\x02\u066B\u066D\x05\xE0q\x02\u066C\u066A\x03\x02\x02','\x02\u066C\u066B\x03\x02\x02\x02\u066D\xDF\x03\x02\x02','\x02\u066E\u0675\x05\xE2r\x02\u066F\u0671\x07\x99\x02','\x02\u0670\u066F\x03\x02\x02\x02\u0670\u0671\x03\x02\x02','\x02\u0671\u0672\x03\x02\x02\x02\u0672\u0674\x05\xE4s','\x02\u0673\u0670\x03\x02\x02\x02\u0674\u0677\x03\x02\x02','\x02\u0675\u0673\x03\x02\x02\x02\u0675\u0676\x03\x02\x02','\x02\u0676\u067D\x03\x02\x02\x02\u0677\u0675\x03\x02\x02','\x02\u0678\u0679\x07\x15\x02\x02\u0679\u067A\x05\xE0q','\x02\u067A\u067B\x07\x16\x02\x02\u067B\u067D\x03\x02\x02','\x02\u067C\u066E\x03\x02\x02\x02\u067C\u0678\x03\x02\x02','\x02\u067D\xE1\x03\x02\x02\x02\u067E\u0680\x07\x15\x02','\x02\u067F\u0681\x07\x99\x02\x02\u0680\u067F\x03\x02\x02','\x02\u0680\u0681\x03\x02\x02\x02\u0681\u0686\x03\x02\x02','\x02\u0682\u0684\x05\u0166\xB4\x02\u0683\u0685\x07\x99\x02','\x02\u0684\u0683\x03\x02\x02\x02\u0684\u0685\x03\x02\x02','\x02\u0685\u0687\x03\x02\x02\x02\u0686\u0682\x03\x02\x02','\x02\u0686\u0687\x03\x02\x02\x02\u0687\u068C\x03\x02\x02','\x02\u0688\u068A\x05\xF8}\x02\u0689\u068B\x07\x99\x02','\x02\u068A\u0689\x03\x02\x02\x02\u068A\u068B\x03\x02\x02','\x02\u068B\u068D\x03\x02\x02\x02\u068C\u0688\x03\x02\x02','\x02\u068C\u068D\x03\x02\x02\x02\u068D\u0692\x03\x02\x02','\x02\u068E\u0690\x05\xEEx\x02\u068F\u0691\x07\x99\x02','\x02\u0690\u068F\x03\x02\x02\x02\u0690\u0691\x03\x02\x02','\x02\u0691\u0693\x03\x02\x02\x02\u0692\u068E\x03\x02\x02','\x02\u0692\u0693\x03\x02\x02\x02\u0693\u0694\x03\x02\x02','\x02\u0694\u0695\x07\x16\x02\x02\u0695\xE3\x03\x02\x02','\x02\u0696\u0698\x05\xE6t\x02\u0697\u0699\x07\x99\x02','\x02\u0698\u0697\x03\x02\x02\x02\u0698\u0699\x03\x02\x02','\x02\u0699\u069A\x03\x02\x02\x02\u069A\u069B\x05\xE2r','\x02\u069B\xE5\x03\x02\x02\x02\u069C\u069E\x05\xE8u','\x02\u069D\u069F\x07\x99\x02\x02\u069E\u069D\x03\x02\x02','\x02\u069E\u069F\x03\x02\x02\x02\u069F\u06A1\x03\x02\x02','\x02\u06A0\u06A2\x05\xECw\x02\u06A1\u06A0\x03\x02\x02','\x02\u06A1\u06A2\x03\x02\x02\x02\u06A2\u06A4\x03\x02\x02','\x02\u06A3\u06A5\x07\x99\x02\x02\u06A4\u06A3\x03\x02\x02','\x02\u06A4\u06A5\x03\x02\x02\x02\u06A5\u06A6\x03\x02\x02','\x02\u06A6\u06A7\x05\xEAv\x02\u06A7\xE7\x03\x02\x02','\x02\u06A8\u06AA\x05\u018E\xC8\x02\u06A9\u06AB\x07\x99\x02','\x02\u06AA\u06A9\x03\x02\x02\x02\u06AA\u06AB\x03\x02\x02','\x02\u06AB\u06AC\x03\x02\x02\x02\u06AC\u06AD\x05\u0192\xCA','\x02\u06AD\u06B0\x03\x02\x02\x02\u06AE\u06B0\x05\u0192\xCA','\x02\u06AF\u06A8\x03\x02\x02\x02\u06AF\u06AE\x03\x02\x02','\x02\u06B0\xE9\x03\x02\x02\x02\u06B1\u06B3\x05\u0192\xCA','\x02\u06B2\u06B4\x07\x99\x02\x02\u06B3\u06B2\x03\x02\x02','\x02\u06B3\u06B4\x03\x02\x02\x02\u06B4\u06B5\x03\x02\x02','\x02\u06B5\u06B6\x05\u0190\xC9\x02\u06B6\u06B9\x03\x02\x02','\x02\u06B7\u06B9\x05\u0192\xCA\x02\u06B8\u06B1\x03\x02\x02','\x02\u06B8\u06B7\x03\x02\x02\x02\u06B9\xEB\x03\x02\x02','\x02\u06BA\u06BC\x07\x13\x02\x02\u06BB\u06BD\x07\x99\x02','\x02\u06BC\u06BB\x03\x02\x02\x02\u06BC\u06BD\x03\x02\x02','\x02\u06BD\u06C2\x03\x02\x02\x02\u06BE\u06C0\x05\u0166\xB4','\x02\u06BF\u06C1\x07\x99\x02\x02\u06C0\u06BF\x03\x02\x02','\x02\u06C0\u06C1\x03\x02\x02\x02\u06C1\u06C3\x03\x02\x02','\x02\u06C2\u06BE\x03\x02\x02\x02\u06C2\u06C3\x03\x02\x02','\x02\u06C3\u06C8\x03\x02\x02\x02\u06C4\u06C6\x05\xF2z','\x02\u06C5\u06C7\x07\x99\x02\x02\u06C6\u06C5\x03\x02\x02','\x02\u06C6\u06C7\x03\x02\x02\x02\u06C7\u06C9\x03\x02\x02','\x02\u06C8\u06C4\x03\x02\x02\x02\u06C8\u06C9\x03\x02\x02','\x02\u06C9\u06CB\x03\x02\x02\x02\u06CA\u06CC\x05\xFC\x7F','\x02\u06CB\u06CA\x03\x02\x02\x02\u06CB\u06CC\x03\x02\x02','\x02\u06CC\u06D1\x03\x02\x02\x02\u06CD\u06CF\x05\xEEx','\x02\u06CE\u06D0\x07\x99\x02\x02\u06CF\u06CE\x03\x02\x02','\x02\u06CF\u06D0\x03\x02\x02\x02\u06D0\u06D2\x03\x02\x02','\x02\u06D1\u06CD\x03\x02\x02\x02\u06D1\u06D2\x03\x02\x02','\x02\u06D2\u06D3\x03\x02\x02\x02\u06D3\u06D4\x07\x14\x02','\x02\u06D4\xED\x03\x02\x02\x02\u06D5\u06D8\x05\u016A\xB6','\x02\u06D6\u06D8\x05\u0178\xBD\x02\u06D7\u06D5\x03\x02\x02','\x02\u06D7\u06D6\x03\x02\x02\x02\u06D8\xEF\x03\x02\x02','\x02\u06D9\u06DB\x07\x04\x02\x02\u06DA\u06DC\x07\x99\x02','\x02\u06DB\u06DA\x03\x02\x02\x02\u06DB\u06DC\x03\x02\x02','\x02\u06DC\u06DD\x03\x02\x02\x02\u06DD\u06DE\x05\u0100\x81','\x02\u06DE\xF1\x03\x02\x02\x02\u06DF\u06E7\x05\xF4{','\x02\u06E0\u06E2\x07\x99\x02\x02\u06E1\u06E0\x03\x02\x02','\x02\u06E1\u06E2\x03\x02\x02\x02\u06E2\u06E3\x03\x02\x02','\x02\u06E3\u06E4\x07\x18\x02\x02\u06E4\u06E6\x05\xF6|','\x02\u06E5\u06E1\x03\x02\x02\x02\u06E6\u06E9\x03\x02\x02','\x02\u06E7\u06E5\x03\x02\x02\x02\u06E7\u06E8\x03\x02\x02','\x02\u06E8\xF3\x03\x02\x02\x02\u06E9\u06E7\x03\x02\x02','\x02\u06EA\u06EB\x07\x04\x02\x02\u06EB\u06EC\x05\u0100\x81','\x02\u06EC\xF5\x03\x02\x02\x02\u06ED\u06EF\x07\x04\x02','\x02\u06EE\u06ED\x03\x02\x02\x02\u06EE\u06EF\x03\x02\x02','\x02\u06EF\u06F0\x03\x02\x02\x02\u06F0\u06F1\x05\u0100\x81','\x02\u06F1\xF7\x03\x02\x02\x02\u06F2\u06F9\x05\xFA~','\x02\u06F3\u06F5\x07\x99\x02\x02\u06F4\u06F3\x03\x02\x02','\x02\u06F4\u06F5\x03\x02\x02\x02\u06F5\u06F6\x03\x02\x02','\x02\u06F6\u06F8\x05\xFA~\x02\u06F7\u06F4\x03\x02\x02','\x02\u06F8\u06FB\x03\x02\x02\x02\u06F9\u06F7\x03\x02\x02','\x02\u06F9\u06FA\x03\x02\x02\x02\u06FA\xF9\x03\x02\x02','\x02\u06FB\u06F9\x03\x02\x02\x02\u06FC\u06FD\x07\x04\x02','\x02\u06FD\u06FE\x05\xFE\x80\x02\u06FE\xFB\x03\x02\x02','\x02\u06FF\u0701\x07\x19\x02\x02\u0700\u0702\x07\x99\x02','\x02\u0701\u0700\x03\x02\x02\x02\u0701\u0702\x03\x02\x02','\x02\u0702\u0707\x03\x02\x02\x02\u0703\u0705\x05\u0188\xC5','\x02\u0704\u0706\x07\x99\x02\x02\u0705\u0704\x03\x02\x02','\x02\u0705\u0706\x03\x02\x02\x02\u0706\u0708\x03\x02\x02','\x02\u0707\u0703\x03\x02\x02\x02\u0707\u0708\x03\x02\x02','\x02\u0708\u0713\x03\x02\x02\x02\u0709\u070B\x07\x1A\x02','\x02\u070A\u070C\x07\x99\x02\x02\u070B\u070A\x03\x02\x02','\x02\u070B\u070C\x03\x02\x02\x02\u070C\u0711\x03\x02\x02','\x02\u070D\u070F\x05\u0188\xC5\x02\u070E\u0710\x07\x99\x02','\x02\u070F\u070E\x03\x02\x02\x02\u070F\u0710\x03\x02\x02','\x02\u0710\u0712\x03\x02\x02\x02\u0711\u070D\x03\x02\x02','\x02\u0711\u0712\x03\x02\x02\x02\u0712\u0714\x03\x02\x02','\x02\u0713\u0709\x03\x02\x02\x02\u0713\u0714\x03\x02\x02','\x02\u0714\xFD\x03\x02\x02\x02\u0715\u0716\x05\u0194\xCB','\x02\u0716\xFF\x03\x02\x02\x02\u0717\u0718\x05\u0194\xCB','\x02\u0718\u0101\x03\x02\x02\x02\u0719\u071A\x05\u0104\x83','\x02\u071A\u0103\x03\x02\x02\x02\u071B\u0722\x05\u0106\x84','\x02\u071C\u071D\x07\x99\x02\x02\u071D\u071E\x07m\x02','\x02\u071E\u071F\x07\x99\x02\x02\u071F\u0721\x05\u0106\x84','\x02\u0720\u071C\x03\x02\x02\x02\u0721\u0724\x03\x02\x02','\x02\u0722\u0720\x03\x02\x02\x02\u0722\u0723\x03\x02\x02','\x02\u0723\u0105\x03\x02\x02\x02\u0724\u0722\x03\x02\x02','\x02\u0725\u072C\x05\u0108\x85\x02\u0726\u0727\x07\x99\x02','\x02\u0727\u0728\x07n\x02\x02\u0728\u0729\x07\x99\x02','\x02\u0729\u072B\x05\u0108\x85\x02\u072A\u0726\x03\x02\x02','\x02\u072B\u072E\x03\x02\x02\x02\u072C\u072A\x03\x02\x02','\x02\u072C\u072D\x03\x02\x02\x02\u072D\u0107\x03\x02\x02','\x02\u072E\u072C\x03\x02\x02\x02\u072F\u0736\x05\u010A\x86','\x02\u0730\u0731\x07\x99\x02\x02\u0731\u0732\x07o\x02','\x02\u0732\u0733\x07\x99\x02\x02\u0733\u0735\x05\u010A\x86','\x02\u0734\u0730\x03\x02\x02\x02\u0735\u0738\x03\x02\x02','\x02\u0736\u0734\x03\x02\x02\x02\u0736\u0737\x03\x02\x02','\x02\u0737\u0109\x03\x02\x02\x02\u0738\u0736\x03\x02\x02','\x02\u0739\u073B\x07p\x02\x02\u073A\u073C\x07\x99\x02','\x02\u073B\u073A\x03\x02\x02\x02\u073B\u073C\x03\x02\x02','\x02\u073C\u073E\x03\x02\x02\x02\u073D\u0739\x03\x02\x02','\x02\u073E\u0741\x03\x02\x02\x02\u073F\u073D\x03\x02\x02','\x02\u073F\u0740\x03\x02\x02\x02\u0740\u0742\x03\x02\x02','\x02\u0741\u073F\x03\x02\x02\x02\u0742\u0743\x05\u010C\x87','\x02\u0743\u010B\x03\x02\x02\x02\u0744\u074B\x05\u010E\x88','\x02\u0745\u0747\x07\x99\x02\x02\u0746\u0745\x03\x02\x02','\x02\u0746\u0747\x03\x02\x02\x02\u0747\u0748\x03\x02\x02','\x02\u0748\u074A\x05\u014A\xA6\x02\u0749\u0746\x03\x02\x02','\x02\u074A\u074D\x03\x02\x02\x02\u074B\u0749\x03\x02\x02','\x02\u074B\u074C\x03\x02\x02\x02\u074C\u010D\x03\x02\x02','\x02\u074D\u074B\x03\x02\x02\x02\u074E\u0761\x05\u0110\x89','\x02\u074F\u0751\x07\x99\x02\x02\u0750\u074F\x03\x02\x02','\x02\u0750\u0751\x03\x02\x02\x02\u0751\u0752\x03\x02\x02','\x02\u0752\u0754\x07\x0F\x02\x02\u0753\u0755\x07\x99\x02','\x02\u0754\u0753\x03\x02\x02\x02\u0754\u0755\x03\x02\x02','\x02\u0755\u0756\x03\x02\x02\x02\u0756\u0760\x05\u0110\x89','\x02\u0757\u0759\x07\x99\x02\x02\u0758\u0757\x03\x02\x02','\x02\u0758\u0759\x03\x02\x02\x02\u0759\u075A\x03\x02\x02','\x02\u075A\u075C\x07\x05\x02\x02\u075B\u075D\x07\x99\x02','\x02\u075C\u075B\x03\x02\x02\x02\u075C\u075D\x03\x02\x02','\x02\u075D\u075E\x03\x02\x02\x02\u075E\u0760\x05\u0110\x89','\x02\u075F\u0750\x03\x02\x02\x02\u075F\u0758\x03\x02\x02','\x02\u0760\u0763\x03\x02\x02\x02\u0761\u075F\x03\x02\x02','\x02\u0761\u0762\x03\x02\x02\x02\u0762\u010F\x03\x02\x02','\x02\u0763\u0761\x03\x02\x02\x02\u0764\u077F\x05\u0112\x8A','\x02\u0765\u0767\x07\x99\x02\x02\u0766\u0765\x03\x02\x02','\x02\u0766\u0767\x03\x02\x02\x02\u0767\u0768\x03\x02\x02','\x02\u0768\u076A\x07\x19\x02\x02\u0769\u076B\x07\x99\x02','\x02\u076A\u0769\x03\x02\x02\x02\u076A\u076B\x03\x02\x02','\x02\u076B\u076C\x03\x02\x02\x02\u076C\u077E\x05\u0112\x8A','\x02\u076D\u076F\x07\x99\x02\x02\u076E\u076D\x03\x02\x02','\x02\u076E\u076F\x03\x02\x02\x02\u076F\u0770\x03\x02\x02','\x02\u0770\u0772\x07\b\x02\x02\u0771\u0773\x07\x99\x02','\x02\u0772\u0771\x03\x02\x02\x02\u0772\u0773\x03\x02\x02','\x02\u0773\u0774\x03\x02\x02\x02\u0774\u077E\x05\u0112\x8A','\x02\u0775\u0777\x07\x99\x02\x02\u0776\u0775\x03\x02\x02','\x02\u0776\u0777\x03\x02\x02\x02\u0777\u0778\x03\x02\x02','\x02\u0778\u077A\x07\x1B\x02\x02\u0779\u077B\x07\x99\x02','\x02\u077A\u0779\x03\x02\x02\x02\u077A\u077B\x03\x02\x02','\x02\u077B\u077C\x03\x02\x02\x02\u077C\u077E\x05\u0112\x8A','\x02\u077D\u0766\x03\x02\x02\x02\u077D\u076E\x03\x02\x02','\x02\u077D\u0776\x03\x02\x02\x02\u077E\u0781\x03\x02\x02','\x02\u077F\u077D\x03\x02\x02\x02\u077F\u0780\x03\x02\x02','\x02\u0780\u0111\x03\x02\x02\x02\u0781\u077F\x03\x02\x02','\x02\u0782\u078D\x05\u0114\x8B\x02\u0783\u0785\x07\x99\x02','\x02\u0784\u0783\x03\x02\x02\x02\u0784\u0785\x03\x02\x02','\x02\u0785\u0786\x03\x02\x02\x02\u0786\u0788\x07\x1C\x02','\x02\u0787\u0789\x07\x99\x02\x02\u0788\u0787\x03\x02\x02','\x02\u0788\u0789\x03\x02\x02\x02\u0789\u078A\x03\x02\x02','\x02\u078A\u078C\x05\u0114\x8B\x02\u078B\u0784\x03\x02\x02','\x02\u078C\u078F\x03\x02\x02\x02\u078D\u078B\x03\x02\x02','\x02\u078D\u078E\x03\x02\x02\x02\u078E\u0113\x03\x02\x02','\x02\u078F\u078D\x03\x02\x02\x02\u0790\u0792\t\x05\x02','\x02\u0791\u0793\x07\x99\x02\x02\u0792\u0791\x03\x02\x02','\x02\u0792\u0793\x03\x02\x02\x02\u0793\u0795\x03\x02\x02','\x02\u0794\u0790\x03\x02\x02\x02\u0795\u0798\x03\x02\x02','\x02\u0796\u0794\x03\x02\x02\x02\u0796\u0797\x03\x02\x02','\x02\u0797\u0799\x03\x02\x02\x02\u0798\u0796\x03\x02\x02','\x02\u0799\u079A\x05\u0116\x8C\x02\u079A\u0115\x03\x02\x02','\x02\u079B\u07D1\x05\u0118\x8D\x02\u079C\u079E\x07\x99\x02','\x02\u079D\u079C\x03\x02\x02\x02\u079D\u079E\x03\x02\x02','\x02\u079E\u079F\x03\x02\x02\x02\u079F\u07A0\x07\x13\x02','\x02\u07A0\u07A1\x05\u0102\x82\x02\u07A1\u07A2\x07\x14\x02','\x02\u07A2\u07D0\x03\x02\x02\x02\u07A3\u07A5\x07\x99\x02','\x02\u07A4\u07A3\x03\x02\x02\x02\u07A4\u07A5\x03\x02\x02','\x02\u07A5\u07A6\x03\x02\x02\x02\u07A6\u07A8\x07\x13\x02','\x02\u07A7\u07A9\x05\u0102\x82\x02\u07A8\u07A7\x03\x02\x02','\x02\u07A8\u07A9\x03\x02\x02\x02\u07A9\u07AA\x03\x02\x02','\x02\u07AA\u07AC\x07\x1A\x02\x02\u07AB\u07AD\x05\u0102\x82','\x02\u07AC\u07AB\x03\x02\x02\x02\u07AC\u07AD\x03\x02\x02','\x02\u07AD\u07AE\x03\x02\x02\x02\u07AE\u07D0\x07\x14\x02','\x02\u07AF\u07B1\x07\x99\x02\x02\u07B0\u07AF\x03\x02\x02','\x02\u07B0\u07B1\x03\x02\x02\x02\u07B1\u07B2\x03\x02\x02','\x02\u07B2\u07C0\x07\x1D\x02\x02\u07B3\u07B4\x07\x99\x02','\x02\u07B4\u07C0\x07Y\x02\x02\u07B5\u07B6\x07\x99\x02','\x02\u07B6\u07B7\x07q\x02\x02\u07B7\u07B8\x07\x99\x02','\x02\u07B8\u07C0\x07K\x02\x02\u07B9\u07BA\x07\x99\x02','\x02\u07BA\u07BB\x07r\x02\x02\u07BB\u07BC\x07\x99\x02','\x02\u07BC\u07C0\x07K\x02\x02\u07BD\u07BE\x07\x99\x02','\x02\u07BE\u07C0\x07s\x02\x02\u07BF\u07B0\x03\x02\x02','\x02\u07BF\u07B3\x03\x02\x02\x02\u07BF\u07B5\x03\x02\x02','\x02\u07BF\u07B9\x03\x02\x02\x02\u07BF\u07BD\x03\x02\x02','\x02\u07C0\u07C2\x03\x02\x02\x02\u07C1\u07C3\x07\x99\x02','\x02\u07C2\u07C1\x03\x02\x02\x02\u07C2\u07C3\x03\x02\x02','\x02\u07C3\u07C4\x03\x02\x02\x02\u07C4\u07D0\x05\u0118\x8D','\x02\u07C5\u07C6\x07\x99\x02\x02\u07C6\u07C7\x07F\x02','\x02\u07C7\u07C8\x07\x99\x02\x02\u07C8\u07D0\x07t\x02','\x02\u07C9\u07CA\x07\x99\x02\x02\u07CA\u07CB\x07F\x02','\x02\u07CB\u07CC\x07\x99\x02\x02\u07CC\u07CD\x07p\x02','\x02\u07CD\u07CE\x07\x99\x02\x02\u07CE\u07D0\x07t\x02','\x02\u07CF\u079D\x03\x02\x02\x02\u07CF\u07A4\x03\x02\x02','\x02\u07CF\u07BF\x03\x02\x02\x02\u07CF\u07C5\x03\x02\x02','\x02\u07CF\u07C9\x03\x02\x02\x02\u07D0\u07D3\x03\x02\x02','\x02\u07D1\u07CF\x03\x02\x02\x02\u07D1\u07D2\x03\x02\x02','\x02\u07D2\u0117\x03\x02\x02\x02\u07D3\u07D1\x03\x02\x02','\x02\u07D4\u07DE\x05\u0140\xA1\x02\u07D5\u07D7\x07\x99\x02','\x02\u07D6\u07D5\x03\x02\x02\x02\u07D6\u07D7\x03\x02\x02','\x02\u07D7\u07DA\x03\x02\x02\x02\u07D8\u07DB\x05\u0160\xB1','\x02\u07D9\u07DB\x05\xF8}\x02\u07DA\u07D8\x03\x02\x02','\x02\u07DA\u07D9\x03\x02\x02\x02\u07DB\u07DD\x03\x02\x02','\x02\u07DC\u07D6\x03\x02\x02\x02\u07DD\u07E0\x03\x02\x02','\x02\u07DE\u07DC\x03\x02\x02\x02\u07DE\u07DF\x03\x02\x02','\x02\u07DF\u0119\x03\x02\x02\x02\u07E0\u07DE\x03\x02\x02','\x02\u07E1\u07E3\x05\u011C\x8F\x02\u07E2\u07E4\x07\x99\x02','\x02\u07E3\u07E2\x03\x02\x02\x02\u07E3\u07E4\x03\x02\x02','\x02\u07E4\u07E5\x03\x02\x02\x02\u07E5\u07E7\x07\x15\x02','\x02\u07E6\u07E8\x07\x99\x02\x02\u07E7\u07E6\x03\x02\x02','\x02\u07E7\u07E8\x03\x02\x02\x02\u07E8\u07E9\x03\x02\x02','\x02\u07E9\u07EB\x05\u0150\xA9\x02\u07EA\u07EC\x07\x99\x02','\x02\u07EB\u07EA\x03\x02\x02\x02\u07EB\u07EC\x03\x02\x02','\x02\u07EC\u07ED\x03\x02\x02\x02\u07ED\u07EE\x07\x16\x02','\x02\u07EE\u011B\x03\x02\x02\x02\u07EF\u07F0\x07v\x02','\x02\u07F0\u011D\x03\x02\x02\x02\u07F1\u07F3\x05\u0120\x91','\x02\u07F2\u07F4\x07\x99\x02\x02\u07F3\u07F2\x03\x02\x02','\x02\u07F3\u07F4\x03\x02\x02\x02\u07F4\u07F5\x03\x02\x02','\x02\u07F5\u07F7\x07\x15\x02\x02\u07F6\u07F8\x07\x99\x02','\x02\u07F7\u07F6\x03\x02\x02\x02\u07F7\u07F8\x03\x02\x02','\x02\u07F8\u07F9\x03\x02\x02\x02\u07F9\u07FB\x05\u0102\x82','\x02\u07FA\u07FC\x07\x99\x02\x02\u07FB\u07FA\x03\x02\x02','\x02\u07FB\u07FC\x03\x02\x02\x02\u07FC\u07FD\x03\x02\x02','\x02\u07FD\u07FE\x07\x16\x02\x02\u07FE\u011F\x03\x02\x02','\x02\u07FF\u0800\x07H\x02\x02\u0800\u0121\x03\x02\x02','\x02\u0801\u0803\x05\u0124\x93\x02\u0802\u0804\x07\x99\x02','\x02\u0803\u0802\x03\x02\x02\x02\u0803\u0804\x03\x02\x02','\x02\u0804\u0805\x03\x02\x02\x02\u0805\u0807\x07\x15\x02','\x02\u0806\u0808\x07\x99\x02\x02\u0807\u0806\x03\x02\x02','\x02\u0807\u0808\x03\x02\x02\x02\u0808\u0809\x03\x02\x02','\x02\u0809\u080B\x05\u0150\xA9\x02\u080A\u080C\x07\x99\x02','\x02\u080B\u080A\x03\x02\x02\x02\u080B\u080C\x03\x02\x02','\x02\u080C\u080D\x03\x02\x02\x02\u080D\u080E\x07\x16\x02','\x02\u080E\u0123\x03\x02\x02\x02\u080F\u0810\x07?\x02','\x02\u0810\u0125\x03\x02\x02\x02\u0811\u0813\x05\u0128\x95','\x02\u0812\u0814\x07\x99\x02\x02\u0813\u0812\x03\x02\x02','\x02\u0813\u0814\x03\x02\x02\x02\u0814\u0815\x03\x02\x02','\x02\u0815\u0817\x07\x15\x02\x02\u0816\u0818\x07\x99\x02','\x02\u0817\u0816\x03\x02\x02\x02\u0817\u0818\x03\x02\x02','\x02\u0818\u0819\x03\x02\x02\x02\u0819\u081B\x05\u0150\xA9','\x02\u081A\u081C\x07\x99\x02\x02\u081B\u081A\x03\x02\x02','\x02\u081B\u081C\x03\x02\x02\x02\u081C\u081D\x03\x02\x02','\x02\u081D\u081E\x07\x16\x02\x02\u081E\u0127\x03\x02\x02','\x02\u081F\u0820\x07x\x02\x02\u0820\u0129\x03\x02\x02','\x02\u0821\u0823\x05\u012C\x97\x02\u0822\u0824\x07\x99\x02','\x02\u0823\u0822\x03\x02\x02\x02\u0823\u0824\x03\x02\x02','\x02\u0824\u0825\x03\x02\x02\x02\u0825\u0827\x07\x15\x02','\x02\u0826\u0828\x07\x99\x02\x02\u0827\u0826\x03\x02\x02','\x02\u0827\u0828\x03\x02\x02\x02\u0828\u0829\x03\x02\x02','\x02\u0829\u082B\x05\u0150\xA9\x02\u082A\u082C\x07\x99\x02','\x02\u082B\u082A\x03\x02\x02\x02\u082B\u082C\x03\x02\x02','\x02\u082C\u082D\x03\x02\x02\x02\u082D\u082E\x07\x16\x02','\x02\u082E\u012B\x03\x02\x02\x02\u082F\u0830\x07y\x02','\x02\u0830\u012D\x03\x02\x02\x02\u0831\u0833\x05\u0130\x99','\x02\u0832\u0834\x07\x99\x02\x02\u0833\u0832\x03\x02\x02','\x02\u0833\u0834\x03\x02\x02\x02\u0834\u0835\x03\x02\x02','\x02\u0835\u0837\x07\x15\x02\x02\u0836\u0838\x07\x99\x02','\x02\u0837\u0836\x03\x02\x02\x02\u0837\u0838\x03\x02\x02','\x02\u0838\u0839\x03\x02\x02\x02\u0839\u083B\x05\u0150\xA9','\x02\u083A\u083C\x07\x99\x02\x02\u083B\u083A\x03\x02\x02','\x02\u083B\u083C\x03\x02\x02\x02\u083C\u083D\x03\x02\x02','\x02\u083D\u083E\x07\x16\x02\x02\u083E\u012F\x03\x02\x02','\x02\u083F\u0840\x07z\x02\x02\u0840\u0131\x03\x02\x02','\x02\u0841\u0843\x05\u0134\x9B\x02\u0842\u0844\x07\x99\x02','\x02\u0843\u0842\x03\x02\x02\x02\u0843\u0844\x03\x02\x02','\x02\u0844\u0845\x03\x02\x02\x02\u0845\u0847\x07\x15\x02','\x02\u0846\u0848\x07\x99\x02\x02\u0847\u0846\x03\x02\x02','\x02\u0847\u0848\x03\x02\x02\x02\u0848\u0849\x03\x02\x02','\x02\u0849\u0852\x05\u0150\xA9\x02\u084A\u084C\x07\x99\x02','\x02\u084B\u084A\x03\x02\x02\x02\u084B\u084C\x03\x02\x02','\x02\u084C\u084D\x03\x02\x02\x02\u084D\u084F\x07\x18\x02','\x02\u084E\u0850\x07\x99\x02\x02\u084F\u084E\x03\x02\x02','\x02\u084F\u0850\x03\x02\x02\x02\u0850\u0851\x03\x02\x02','\x02\u0851\u0853\x05\u0102\x82\x02\u0852\u084B\x03\x02\x02','\x02\u0852\u0853\x03\x02\x02\x02\u0853\u0855\x03\x02\x02','\x02\u0854\u0856\x07\x99\x02\x02\u0855\u0854\x03\x02\x02','\x02\u0855\u0856\x03\x02\x02\x02\u0856\u0857\x03\x02\x02','\x02\u0857\u0858\x07\x16\x02\x02\u0858\u0133\x03\x02\x02','\x02\u0859\u085A\x07w\x02\x02\u085A\u0135\x03\x02\x02','\x02\u085B\u085D\x05\u0138\x9D\x02\u085C\u085E\x07\x99\x02','\x02\u085D\u085C\x03\x02\x02\x02\u085D\u085E\x03\x02\x02','\x02\u085E\u085F\x03\x02\x02\x02\u085F\u0861\x07\x15\x02','\x02\u0860\u0862\x07\x99\x02\x02\u0861\u0860\x03\x02\x02','\x02\u0861\u0862\x03\x02\x02\x02\u0862\u0863\x03\x02\x02','\x02\u0863\u0865\x05\u0166\xB4\x02\u0864\u0866\x07\x99\x02','\x02\u0865\u0864\x03\x02\x02\x02\u0865\u0866\x03\x02\x02','\x02\u0866\u0867\x03\x02\x02\x02\u0867\u0869\x07\x0E\x02','\x02\u0868\u086A\x07\x99\x02\x02\u0869\u0868\x03\x02\x02','\x02\u0869\u086A\x03\x02\x02\x02\u086A\u086B\x03\x02\x02','\x02\u086B\u086D\x05\u0102\x82\x02\u086C\u086E\x07\x99\x02','\x02\u086D\u086C\x03\x02\x02\x02\u086D\u086E\x03\x02\x02','\x02\u086E\u086F\x03\x02\x02\x02\u086F\u0871\x07\x11\x02','\x02\u0870\u0872\x07\x99\x02\x02\u0871\u0870\x03\x02\x02','\x02\u0871\u0872\x03\x02\x02\x02\u0872\u0873\x03\x02\x02','\x02\u0873\u0875\x05\u0152\xAA\x02\u0874\u0876\x07\x99\x02','\x02\u0875\u0874\x03\x02\x02\x02\u0875\u0876\x03\x02\x02','\x02\u0876\u0877\x03\x02\x02\x02\u0877\u0879\x07\x18\x02','\x02\u0878\u087A\x07\x99\x02\x02\u0879\u0878\x03\x02\x02','\x02\u0879\u087A\x03\x02\x02\x02\u087A\u087B\x03\x02\x02','\x02\u087B\u087D\x05\u0102\x82\x02\u087C\u087E\x07\x99\x02','\x02\u087D\u087C\x03\x02\x02\x02\u087D\u087E\x03\x02\x02','\x02\u087E\u087F\x03\x02\x02\x02\u087F\u0880\x07\x16\x02','\x02\u0880\u0137\x03\x02\x02\x02\u0881\u0882\x07}\x02','\x02\u0882\u0139\x03\x02\x02\x02\u0883\u0885\x05\u013C\x9F','\x02\u0884\u0886\x07\x99\x02\x02\u0885\u0884\x03\x02\x02','\x02\u0885\u0886\x03\x02\x02\x02\u0886\u0887\x03\x02\x02','\x02\u0887\u0889\x07\x15\x02\x02\u0888\u088A\x07\x99\x02','\x02\u0889\u0888\x03\x02\x02\x02\u0889\u088A\x03\x02\x02','\x02\u088A\u088B\x03\x02\x02\x02\u088B\u088D\x05\xE0q','\x02\u088C\u088E\x07\x99\x02\x02\u088D\u088C\x03\x02\x02','\x02\u088D\u088E\x03\x02\x02\x02\u088E\u088F\x03\x02\x02','\x02\u088F\u0890\x07\x16\x02\x02\u0890\u08A0\x03\x02\x02','\x02\u0891\u0893\x05\u013E\xA0\x02\u0892\u0894\x07\x99\x02','\x02\u0893\u0892\x03\x02\x02\x02\u0893\u0894\x03\x02\x02','\x02\u0894\u0895\x03\x02\x02\x02\u0895\u0897\x07\x15\x02','\x02\u0896\u0898\x07\x99\x02\x02\u0897\u0896\x03\x02\x02','\x02\u0897\u0898\x03\x02\x02\x02\u0898\u0899\x03\x02\x02','\x02\u0899\u089B\x05\xE0q\x02\u089A\u089C\x07\x99\x02','\x02\u089B\u089A\x03\x02\x02\x02\u089B\u089C\x03\x02\x02','\x02\u089C\u089D\x03\x02\x02\x02\u089D\u089E\x07\x16\x02','\x02\u089E\u08A0\x03\x02\x02\x02\u089F\u0883\x03\x02\x02','\x02\u089F\u0891\x03\x02\x02\x02\u08A0\u013B\x03\x02\x02','\x02\u08A1\u08A2\x07k\x02\x02\u08A2\u013D\x03\x02\x02','\x02\u08A3\u08A4\x07l\x02\x02\u08A4\u013F\x03\x02\x02','\x02\u08A5\u08C5\x05\u0142\xA2\x02\u08A6\u08C5\x05\u0178\xBD','\x02\u08A7\u08C5\x05\u0162\xB2\x02\u08A8\u08AA\x07u\x02','\x02\u08A9\u08AB\x07\x99\x02\x02\u08AA\u08A9\x03\x02\x02','\x02\u08AA\u08AB\x03\x02\x02\x02\u08AB\u08AC\x03\x02\x02','\x02\u08AC\u08AE\x07\x15\x02\x02\u08AD\u08AF\x07\x99\x02','\x02\u08AE\u08AD\x03\x02\x02\x02\u08AE\u08AF\x03\x02\x02','\x02\u08AF\u08B0\x03\x02\x02\x02\u08B0\u08B2\x07\x19\x02','\x02\u08B1\u08B3\x07\x99\x02\x02\u08B2\u08B1\x03\x02\x02','\x02\u08B2\u08B3\x03\x02\x02\x02\u08B3\u08B4\x03\x02\x02','\x02\u08B4\u08C5\x07\x16\x02\x02\u08B5\u08C5\x05\u015C\xAF','\x02\u08B6\u08C5\x05\u015E\xB0\x02\u08B7\u08C5\x05\u011A\x8E','\x02\u08B8\u08C5\x05\u0132\x9A\x02\u08B9\u08C5\x05\u0136\x9C','\x02\u08BA\u08C5\x05\u0122\x92\x02\u08BB\u08C5\x05\u0126\x94','\x02\u08BC\u08C5\x05\u012A\x96\x02\u08BD\u08C5\x05\u012E\x98','\x02\u08BE\u08C5\x05\u011E\x90\x02\u08BF\u08C5\x05\u013A\x9E','\x02\u08C0\u08C5\x05\u014E\xA8\x02\u08C1\u08C5\x05\u014C\xA7','\x02\u08C2\u08C5\x05\u0154\xAB\x02\u08C3\u08C5\x05\u0166\xB4','\x02\u08C4\u08A5\x03\x02\x02\x02\u08C4\u08A6\x03\x02\x02','\x02\u08C4\u08A7\x03\x02\x02\x02\u08C4\u08A8\x03\x02\x02','\x02\u08C4\u08B5\x03\x02\x02\x02\u08C4\u08B6\x03\x02\x02','\x02\u08C4\u08B7\x03\x02\x02\x02\u08C4\u08B8\x03\x02\x02','\x02\u08C4\u08B9\x03\x02\x02\x02\u08C4\u08BA\x03\x02\x02','\x02\u08C4\u08BB\x03\x02\x02\x02\u08C4\u08BC\x03\x02\x02','\x02\u08C4\u08BD\x03\x02\x02\x02\u08C4\u08BE\x03\x02\x02','\x02\u08C4\u08BF\x03\x02\x02\x02\u08C4\u08C0\x03\x02\x02','\x02\u08C4\u08C1\x03\x02\x02\x02\u08C4\u08C2\x03\x02\x02','\x02\u08C4\u08C3\x03\x02\x02\x02\u08C5\u0141\x03\x02\x02','\x02\u08C6\u08CE\x05\u0168\xB5\x02\u08C7\u08CE\x05\u0144\xA3','\x02\u08C8\u08CE\x05\u0146\xA4\x02\u08C9\u08CE\x07t\x02','\x02\u08CA\u08CE\x05\u016A\xB6\x02\u08CB\u08CE\x05\u0148\xA5','\x02\u08CC\u08CE\x05\u016C\xB7\x02\u08CD\u08C6\x03\x02\x02','\x02\u08CD\u08C7\x03\x02\x02\x02\u08CD\u08C8\x03\x02\x02','\x02\u08CD\u08C9\x03\x02\x02\x02\u08CD\u08CA\x03\x02\x02','\x02\u08CD\u08CB\x03\x02\x02\x02\u08CD\u08CC\x03\x02\x02','\x02\u08CE\u0143\x03\x02\x02\x02\u08CF\u08D0\x07\x86\x02','\x02\u08D0\u0145\x03\x02\x02\x02\u08D1\u08D2\t\x06\x02','\x02\u08D2\u0147\x03\x02\x02\x02\u08D3\u08D5\x07\x13\x02','\x02\u08D4\u08D6\x07\x99\x02\x02\u08D5\u08D4\x03\x02\x02','\x02\u08D5\u08D6\x03\x02\x02\x02\u08D6\u08E8\x03\x02\x02','\x02\u08D7\u08D9\x05\u0102\x82\x02\u08D8\u08DA\x07\x99\x02','\x02\u08D9\u08D8\x03\x02\x02\x02\u08D9\u08DA\x03\x02\x02','\x02\u08DA\u08E5\x03\x02\x02\x02\u08DB\u08DD\x07\x11\x02','\x02\u08DC\u08DE\x07\x99\x02\x02\u08DD\u08DC\x03\x02\x02','\x02\u08DD\u08DE\x03\x02\x02\x02\u08DE\u08DF\x03\x02\x02','\x02\u08DF\u08E1\x05\u0102\x82\x02\u08E0\u08E2\x07\x99\x02','\x02\u08E1\u08E0\x03\x02\x02\x02\u08E1\u08E2\x03\x02\x02','\x02\u08E2\u08E4\x03\x02\x02\x02\u08E3\u08DB\x03\x02\x02','\x02\u08E4\u08E7\x03\x02\x02\x02\u08E5\u08E3\x03\x02\x02','\x02\u08E5\u08E6\x03\x02\x02\x02\u08E6\u08E9\x03\x02\x02','\x02\u08E7\u08E5\x03\x02\x02\x02\u08E8\u08D7\x03\x02\x02','\x02\u08E8\u08E9\x03\x02\x02\x02\u08E9\u08EA\x03\x02\x02','\x02\u08EA\u08EB\x07\x14\x02\x02\u08EB\u0149\x03\x02\x02','\x02\u08EC\u08EE\x07\x0E\x02\x02\u08ED\u08EF\x07\x99\x02','\x02\u08EE\u08ED\x03\x02\x02\x02\u08EE\u08EF\x03\x02\x02','\x02\u08EF\u08F0\x03\x02\x02\x02\u08F0\u0910\x05\u010E\x88','\x02\u08F1\u08F3\x07\x1E\x02\x02\u08F2\u08F4\x07\x99\x02','\x02\u08F3\u08F2\x03\x02\x02\x02\u08F3\u08F4\x03\x02\x02','\x02\u08F4\u08F5\x03\x02\x02\x02\u08F5\u0910\x05\u010E\x88','\x02\u08F6\u08F8\x07\x1F\x02\x02\u08F7\u08F9\x07\x99\x02','\x02\u08F8\u08F7\x03\x02\x02\x02\u08F8\u08F9\x03\x02\x02','\x02\u08F9\u08FA\x03\x02\x02\x02\u08FA\u0910\x05\u010E\x88','\x02\u08FB\u08FD\x07 \x02\x02\u08FC\u08FE\x07\x99\x02','\x02\u08FD\u08FC\x03\x02\x02\x02\u08FD\u08FE\x03\x02\x02','\x02\u08FE\u08FF\x03\x02\x02\x02\u08FF\u0910\x05\u010E\x88','\x02\u0900\u0902\x07!\x02\x02\u0901\u0903\x07\x99\x02','\x02\u0902\u0901\x03\x02\x02\x02\u0902\u0903\x03\x02\x02','\x02\u0903\u0904\x03\x02\x02\x02\u0904\u0910\x05\u010E\x88','\x02\u0905\u0907\x07"\x02\x02\u0906\u0908\x07\x99\x02','\x02\u0907\u0906\x03\x02\x02\x02\u0907\u0908\x03\x02\x02','\x02\u0908\u0909\x03\x02\x02\x02\u0909\u0910\x05\u010E\x88','\x02\u090A\u090C\x07#\x02\x02\u090B\u090D\x07\x99\x02','\x02\u090C\u090B\x03\x02\x02\x02\u090C\u090D\x03\x02\x02','\x02\u090D\u090E\x03\x02\x02\x02\u090E\u0910\x05\u010E\x88','\x02\u090F\u08EC\x03\x02\x02\x02\u090F\u08F1\x03\x02\x02','\x02\u090F\u08F6\x03\x02\x02\x02\u090F\u08FB\x03\x02\x02','\x02\u090F\u0900\x03\x02\x02\x02\u090F\u0905\x03\x02\x02','\x02\u090F\u090A\x03\x02\x02\x02\u0910\u014B\x03\x02\x02','\x02\u0911\u0913\x07\x15\x02\x02\u0912\u0914\x07\x99\x02','\x02\u0913\u0912\x03\x02\x02\x02\u0913\u0914\x03\x02\x02','\x02\u0914\u0915\x03\x02\x02\x02\u0915\u0917\x05\u0102\x82','\x02\u0916\u0918\x07\x99\x02\x02\u0917\u0916\x03\x02\x02','\x02\u0917\u0918\x03\x02\x02\x02\u0918\u0919\x03\x02\x02','\x02\u0919\u091A\x07\x16\x02\x02\u091A\u014D\x03\x02\x02','\x02\u091B\u0920\x05\xE2r\x02\u091C\u091E\x07\x99\x02','\x02\u091D\u091C\x03\x02\x02\x02\u091D\u091E\x03\x02\x02','\x02\u091E\u091F\x03\x02\x02\x02\u091F\u0921\x05\xE4s','\x02\u0920\u091D\x03\x02\x02\x02\u0921\u0922\x03\x02\x02','\x02\u0922\u0920\x03\x02\x02\x02\u0922\u0923\x03\x02\x02','\x02\u0923\u014F\x03\x02\x02\x02\u0924\u0929\x05\u0152\xAA','\x02\u0925\u0927\x07\x99\x02\x02\u0926\u0925\x03\x02\x02','\x02\u0926\u0927\x03\x02\x02\x02\u0927\u0928\x03\x02\x02','\x02\u0928\u092A\x05\xD8m\x02\u0929\u0926\x03\x02\x02','\x02\u0929\u092A\x03\x02\x02\x02\u092A\u0151\x03\x02\x02','\x02\u092B\u092C\x05\u0166\xB4\x02\u092C\u092D\x07\x99\x02','\x02\u092D\u092E\x07Y\x02\x02\u092E\u092F\x07\x99\x02','\x02\u092F\u0930\x05\u0102\x82\x02\u0930\u0153\x03\x02\x02','\x02\u0931\u0933\x05\u0156\xAC\x02\u0932\u0934\x07\x99\x02','\x02\u0933\u0932\x03\x02\x02\x02\u0933\u0934\x03\x02\x02','\x02\u0934\u0935\x03\x02\x02\x02\u0935\u0937\x07\x15\x02','\x02\u0936\u0938\x07\x99\x02\x02\u0937\u0936\x03\x02\x02','\x02\u0937\u0938\x03\x02\x02\x02\u0938\u093D\x03\x02\x02','\x02\u0939\u093B\x07Z\x02\x02\u093A\u093C\x07\x99\x02','\x02\u093B\u093A\x03\x02\x02\x02\u093B\u093C\x03\x02\x02','\x02\u093C\u093E\x03\x02\x02\x02\u093D\u0939\x03\x02\x02','\x02\u093D\u093E\x03\x02\x02\x02\u093E\u0950\x03\x02\x02','\x02\u093F\u0941\x05\u0102\x82\x02\u0940\u0942\x07\x99\x02','\x02\u0941\u0940\x03\x02\x02\x02\u0941\u0942\x03\x02\x02','\x02\u0942\u094D\x03\x02\x02\x02\u0943\u0945\x07\x11\x02','\x02\u0944\u0946\x07\x99\x02\x02\u0945\u0944\x03\x02\x02','\x02\u0945\u0946\x03\x02\x02\x02\u0946\u0947\x03\x02\x02','\x02\u0947\u0949\x05\u0102\x82\x02\u0948\u094A\x07\x99\x02','\x02\u0949\u0948\x03\x02\x02\x02\u0949\u094A\x03\x02\x02','\x02\u094A\u094C\x03\x02\x02\x02\u094B\u0943\x03\x02\x02','\x02\u094C\u094F\x03\x02\x02\x02\u094D\u094B\x03\x02\x02','\x02\u094D\u094E\x03\x02\x02\x02\u094E\u0951\x03\x02\x02','\x02\u094F\u094D\x03\x02\x02\x02\u0950\u093F\x03\x02\x02','\x02\u0950\u0951\x03\x02\x02\x02\u0951\u0952\x03\x02\x02','\x02\u0952\u0953\x07\x16\x02\x02\u0953\u0155\x03\x02\x02','\x02\u0954\u0955\x05\u018C\xC7\x02\u0955\u0956\x05\u0158\xAD','\x02\u0956\u0157\x03\x02\x02\x02\u0957\u0958\t\x07\x02','\x02\u0958\u0159\x03\x02\x02\x02\u0959\u095A\x05\u0194\xCB','\x02\u095A\u015B\x03\x02\x02\x02\u095B\u095D\x07\x13\x02','\x02\u095C\u095E\x07\x99\x02\x02\u095D\u095C\x03\x02\x02','\x02\u095D\u095E\x03\x02\x02\x02\u095E\u095F\x03\x02\x02','\x02\u095F\u0968\x05\u0150\xA9\x02\u0960\u0962\x07\x99\x02','\x02\u0961\u0960\x03\x02\x02\x02\u0961\u0962\x03\x02\x02','\x02\u0962\u0963\x03\x02\x02\x02\u0963\u0965\x07\x18\x02','\x02\u0964\u0966\x07\x99\x02\x02\u0965\u0964\x03\x02\x02','\x02\u0965\u0966\x03\x02\x02\x02\u0966\u0967\x03\x02\x02','\x02\u0967\u0969\x05\u0102\x82\x02\u0968\u0961\x03\x02\x02','\x02\u0968\u0969\x03\x02\x02\x02\u0969\u096B\x03\x02\x02','\x02\u096A\u096C\x07\x99\x02\x02\u096B\u096A\x03\x02\x02','\x02\u096B\u096C\x03\x02\x02\x02\u096C\u096D\x03\x02\x02','\x02\u096D\u096E\x07\x14\x02\x02\u096E\u015D\x03\x02\x02','\x02\u096F\u0971\x07\x13\x02\x02\u0970\u0972\x07\x99\x02','\x02\u0971\u0970\x03\x02\x02\x02\u0971\u0972\x03\x02\x02','\x02\u0972\u097B\x03\x02\x02\x02\u0973\u0975\x05\u0166\xB4','\x02\u0974\u0976\x07\x99\x02\x02\u0975\u0974\x03\x02\x02','\x02\u0975\u0976\x03\x02\x02\x02\u0976\u0977\x03\x02\x02','\x02\u0977\u0979\x07\x0E\x02\x02\u0978\u097A\x07\x99\x02','\x02\u0979\u0978\x03\x02\x02\x02\u0979\u097A\x03\x02\x02','\x02\u097A\u097C\x03\x02\x02\x02\u097B\u0973\x03\x02\x02','\x02\u097B\u097C\x03\x02\x02\x02\u097C\u097D\x03\x02\x02','\x02\u097D\u097F\x05\u014E\xA8\x02\u097E\u0980\x07\x99\x02','\x02\u097F\u097E\x03\x02\x02\x02\u097F\u0980\x03\x02\x02','\x02\u0980\u0989\x03\x02\x02\x02\u0981\u0983\x07j\x02','\x02\u0982\u0984\x07\x99\x02\x02\u0983\u0982\x03\x02\x02','\x02\u0983\u0984\x03\x02\x02\x02\u0984\u0985\x03\x02\x02','\x02\u0985\u0987\x05\u0102\x82\x02\u0986\u0988\x07\x99\x02','\x02\u0987\u0986\x03\x02\x02\x02\u0987\u0988\x03\x02\x02','\x02\u0988\u098A\x03\x02\x02\x02\u0989\u0981\x03\x02\x02','\x02\u0989\u098A\x03\x02\x02\x02\u098A\u098B\x03\x02\x02','\x02\u098B\u098D\x07\x18\x02\x02\u098C\u098E\x07\x99\x02','\x02\u098D\u098C\x03\x02\x02\x02\u098D\u098E\x03\x02\x02','\x02\u098E\u098F\x03\x02\x02\x02\u098F\u0991\x05\u0102\x82','\x02\u0990\u0992\x07\x99\x02\x02\u0991\u0990\x03\x02\x02','\x02\u0991\u0992\x03\x02\x02\x02\u0992\u0993\x03\x02\x02','\x02\u0993\u0994\x07\x14\x02\x02\u0994\u015F\x03\x02\x02','\x02\u0995\u0997\x07\t\x02\x02\u0996\u0998\x07\x99\x02','\x02\u0997\u0996\x03\x02\x02\x02\u0997\u0998\x03\x02\x02','\x02\u0998\u0999\x03\x02\x02\x02\u0999\u099A\x05\u0186\xC4','\x02\u099A\u0161\x03\x02\x02\x02\u099B\u09A0\x07~\x02','\x02\u099C\u099E\x07\x99\x02\x02\u099D\u099C\x03\x02\x02','\x02\u099D\u099E\x03\x02\x02\x02\u099E\u099F\x03\x02\x02','\x02\u099F\u09A1\x05\u0164\xB3\x02\u09A0\u099D\x03\x02\x02','\x02\u09A1\u09A2\x03\x02\x02\x02\u09A2\u09A0\x03\x02\x02','\x02\u09A2\u09A3\x03\x02\x02\x02\u09A3\u09B2\x03\x02\x02','\x02\u09A4\u09A6\x07~\x02\x02\u09A5\u09A7\x07\x99\x02','\x02\u09A6\u09A5\x03\x02\x02\x02\u09A6\u09A7\x03\x02\x02','\x02\u09A7\u09A8\x03\x02\x02\x02\u09A8\u09AD\x05\u0102\x82','\x02\u09A9\u09AB\x07\x99\x02\x02\u09AA\u09A9\x03\x02\x02','\x02\u09AA\u09AB\x03\x02\x02\x02\u09AB\u09AC\x03\x02\x02','\x02\u09AC\u09AE\x05\u0164\xB3\x02\u09AD\u09AA\x03\x02\x02','\x02\u09AE\u09AF\x03\x02\x02\x02\u09AF\u09AD\x03\x02\x02','\x02\u09AF\u09B0\x03\x02\x02\x02\u09B0\u09B2\x03\x02\x02','\x02\u09B1\u099B\x03\x02\x02\x02\u09B1\u09A4\x03\x02\x02','\x02\u09B2\u09BB\x03\x02\x02\x02\u09B3\u09B5\x07\x99\x02','\x02\u09B4\u09B3\x03\x02\x02\x02\u09B4\u09B5\x03\x02\x02','\x02\u09B5\u09B6\x03\x02\x02\x02\u09B6\u09B8\x07\x7F\x02','\x02\u09B7\u09B9\x07\x99\x02\x02\u09B8\u09B7\x03\x02\x02','\x02\u09B8\u09B9\x03\x02\x02\x02\u09B9\u09BA\x03\x02\x02','\x02\u09BA\u09BC\x05\u0102\x82\x02\u09BB\u09B4\x03\x02\x02','\x02\u09BB\u09BC\x03\x02\x02\x02\u09BC\u09BE\x03\x02\x02','\x02\u09BD\u09BF\x07\x99\x02\x02\u09BE\u09BD\x03\x02\x02','\x02\u09BE\u09BF\x03\x02\x02\x02\u09BF\u09C0\x03\x02\x02','\x02\u09C0\u09C1\x07\x80\x02\x02\u09C1\u0163\x03\x02\x02','\x02\u09C2\u09C4\x07\x81\x02\x02\u09C3\u09C5\x07\x99\x02','\x02\u09C4\u09C3\x03\x02\x02\x02\u09C4\u09C5\x03\x02\x02','\x02\u09C5\u09C6\x03\x02\x02\x02\u09C6\u09C8\x05\u0102\x82','\x02\u09C7\u09C9\x07\x99\x02\x02\u09C8\u09C7\x03\x02\x02','\x02\u09C8\u09C9\x03\x02\x02\x02\u09C9\u09CA\x03\x02\x02','\x02\u09CA\u09CC\x07\x82\x02\x02\u09CB\u09CD\x07\x99\x02','\x02\u09CC\u09CB\x03\x02\x02\x02\u09CC\u09CD\x03\x02\x02','\x02\u09CD\u09CE\x03\x02\x02\x02\u09CE\u09CF\x05\u0102\x82','\x02\u09CF\u0165\x03\x02\x02\x02\u09D0\u09D1\x05\u0194\xCB','\x02\u09D1\u0167\x03\x02\x02\x02\u09D2\u09D5\x05\u018A\xC6','\x02\u09D3\u09D5\x05\u0188\xC5\x02\u09D4\u09D2\x03\x02\x02','\x02\u09D4\u09D3\x03\x02\x02\x02\u09D5\u0169\x03\x02\x02','\x02\u09D6\u09D8\x07\x10\x02\x02\u09D7\u09D9\x07\x99\x02','\x02\u09D8\u09D7\x03\x02\x02\x02\u09D8\u09D9\x03\x02\x02','\x02\u09D9\u09EB\x03\x02\x02\x02\u09DA\u09DC\x05\u0170\xB9','\x02\u09DB\u09DD\x07\x99\x02\x02\u09DC\u09DB\x03\x02\x02','\x02\u09DC\u09DD\x03\x02\x02\x02\u09DD\u09E8\x03\x02\x02','\x02\u09DE\u09E0\x07\x11\x02\x02\u09DF\u09E1\x07\x99\x02','\x02\u09E0\u09DF\x03\x02\x02\x02\u09E0\u09E1\x03\x02\x02','\x02\u09E1\u09E2\x03\x02\x02\x02\u09E2\u09E4\x05\u0170\xB9','\x02\u09E3\u09E5\x07\x99\x02\x02\u09E4\u09E3\x03\x02\x02','\x02\u09E4\u09E5\x03\x02\x02\x02\u09E5\u09E7\x03\x02\x02','\x02\u09E6\u09DE\x03\x02\x02\x02\u09E7\u09EA\x03\x02\x02','\x02\u09E8\u09E6\x03\x02\x02\x02\u09E8\u09E9\x03\x02\x02','\x02\u09E9\u09EC\x03\x02\x02\x02\u09EA\u09E8\x03\x02\x02','\x02\u09EB\u09DA\x03\x02\x02\x02\u09EB\u09EC\x03\x02\x02','\x02\u09EC\u09ED\x03\x02\x02\x02\u09ED\u09EE\x07\x12\x02','\x02\u09EE\u016B\x03\x02\x02\x02\u09EF\u09F1\x05\u0166\xB4','\x02\u09F0\u09F2\x07\x99\x02\x02\u09F1\u09F0\x03\x02\x02','\x02\u09F1\u09F2\x03\x02\x02\x02\u09F2\u09F3\x03\x02\x02','\x02\u09F3\u09F5\x07\x10\x02\x02\u09F4\u09F6\x07\x99\x02','\x02\u09F5\u09F4\x03\x02\x02\x02\u09F5\u09F6\x03\x02\x02','\x02\u09F6\u09F8\x03\x02\x02\x02\u09F7\u09F9\x05\u016E\xB8','\x02\u09F8\u09F7\x03\x02\x02\x02\u09F8\u09F9\x03\x02\x02','\x02\u09F9\u0A04\x03\x02\x02\x02\u09FA\u09FC\x07\x99\x02','\x02\u09FB\u09FA\x03\x02\x02\x02\u09FB\u09FC\x03\x02\x02','\x02\u09FC\u09FD\x03\x02\x02\x02\u09FD\u09FF\x07\x11\x02','\x02\u09FE\u0A00\x07\x99\x02\x02\u09FF\u09FE\x03\x02\x02','\x02\u09FF\u0A00\x03\x02\x02\x02\u0A00\u0A01\x03\x02\x02','\x02\u0A01\u0A03\x05\u016E\xB8\x02\u0A02\u09FB\x03\x02\x02','\x02\u0A03\u0A06\x03\x02\x02\x02\u0A04\u0A02\x03\x02\x02','\x02\u0A04\u0A05\x03\x02\x02\x02\u0A05\u0A08\x03\x02\x02','\x02\u0A06\u0A04\x03\x02\x02\x02\u0A07\u0A09\x07\x99\x02','\x02\u0A08\u0A07\x03\x02\x02\x02\u0A08\u0A09\x03\x02\x02','\x02\u0A09\u0A0A\x03\x02\x02\x02\u0A0A\u0A0B\x07\x12\x02','\x02\u0A0B\u016D\x03\x02\x02\x02\u0A0C\u0A11\x05\u0170\xB9','\x02\u0A0D\u0A11\x05\u0172\xBA\x02\u0A0E\u0A11\x05\u0174\xBB','\x02\u0A0F\u0A11\x05\u0176\xBC\x02\u0A10\u0A0C\x03\x02\x02','\x02\u0A10\u0A0D\x03\x02\x02\x02\u0A10\u0A0E\x03\x02\x02','\x02\u0A10\u0A0F\x03\x02\x02\x02\u0A11\u016F\x03\x02\x02','\x02\u0A12\u0A14\x05\u0186\xC4\x02\u0A13\u0A15\x07\x99\x02','\x02\u0A14\u0A13\x03\x02\x02\x02\u0A14\u0A15\x03\x02\x02','\x02\u0A15\u0A16\x03\x02\x02\x02\u0A16\u0A18\x07\x04\x02','\x02\u0A17\u0A19\x07\x99\x02\x02\u0A18\u0A17\x03\x02\x02','\x02\u0A18\u0A19\x03\x02\x02\x02\u0A19\u0A1A\x03\x02\x02','\x02\u0A1A\u0A1B\x05\u0102\x82\x02\u0A1B\u0171\x03\x02\x02','\x02\u0A1C\u0A1D\x07\t\x02\x02\u0A1D\u0A1E\x05\u0166\xB4','\x02\u0A1E\u0173\x03\x02\x02\x02\u0A1F\u0A20\x05\u0166\xB4','\x02\u0A20\u0175\x03\x02\x02\x02\u0A21\u0A22\x07\t\x02','\x02\u0A22\u0A23\x07\x19\x02\x02\u0A23\u0177\x03\x02\x02','\x02\u0A24\u0A27\x05\u017A\xBE\x02\u0A25\u0A27\x05\u017C\xBF','\x02\u0A26\u0A24\x03\x02\x02\x02\u0A26\u0A25\x03\x02\x02','\x02\u0A27\u0179\x03\x02\x02\x02\u0A28\u0A2A\x07\x10\x02','\x02\u0A29\u0A2B\x07\x99\x02\x02\u0A2A\u0A29\x03\x02\x02','\x02\u0A2A\u0A2B\x03\x02\x02\x02\u0A2B\u0A2C\x03\x02\x02','\x02\u0A2C\u0A2E\x05\u017E\xC0\x02\u0A2D\u0A2F\x07\x99\x02','\x02\u0A2E\u0A2D\x03\x02\x02\x02\u0A2E\u0A2F\x03\x02\x02','\x02\u0A2F\u0A30\x03\x02\x02\x02\u0A30\u0A31\x07\x12\x02','\x02\u0A31\u017B\x03\x02\x02\x02\u0A32\u0A33\x07$\x02','\x02\u0A33\u0A34\x05\u017E\xC0\x02\u0A34\u017D\x03\x02\x02','\x02\u0A35\u0A38\x05\u0194\xCB\x02\u0A36\u0A38\x07\x8A\x02','\x02\u0A37\u0A35\x03\x02\x02\x02\u0A37\u0A36\x03\x02\x02','\x02\u0A38\u017F\x03\x02\x02\x02\u0A39\u0A44\x05\u0182\xC2','\x02\u0A3A\u0A3C\x07\x99\x02\x02\u0A3B\u0A3A\x03\x02\x02','\x02\u0A3B\u0A3C\x03\x02\x02\x02\u0A3C\u0A3D\x03\x02\x02','\x02\u0A3D\u0A3F\x07\x11\x02\x02\u0A3E\u0A40\x07\x99\x02','\x02\u0A3F\u0A3E\x03\x02\x02\x02\u0A3F\u0A40\x03\x02\x02','\x02\u0A40\u0A41\x03\x02\x02\x02\u0A41\u0A43\x05\u0182\xC2','\x02\u0A42\u0A3B\x03\x02\x02\x02\u0A43\u0A46\x03\x02\x02','\x02\u0A44\u0A42\x03\x02\x02\x02\u0A44\u0A45\x03\x02\x02','\x02\u0A45\u0181\x03\x02\x02\x02\u0A46\u0A44\x03\x02\x02','\x02\u0A47\u0A4C\x05\u0140\xA1\x02\u0A48\u0A4A\x07\x99\x02','\x02\u0A49\u0A48\x03\x02\x02\x02\u0A49\u0A4A\x03\x02\x02','\x02\u0A4A\u0A4B\x03\x02\x02\x02\u0A4B\u0A4D\x05\u0160\xB1','\x02\u0A4C\u0A49\x03\x02\x02\x02\u0A4D\u0A4E\x03\x02\x02','\x02\u0A4E\u0A4C\x03\x02\x02\x02\u0A4E\u0A4F\x03\x02\x02','\x02\u0A4F\u0183\x03\x02\x02\x02\u0A50\u0A5B\x05\u0186\xC4','\x02\u0A51\u0A53\x07\x99\x02\x02\u0A52\u0A51\x03\x02\x02','\x02\u0A52\u0A53\x03\x02\x02\x02\u0A53\u0A54\x03\x02\x02','\x02\u0A54\u0A56\x07\x11\x02\x02\u0A55\u0A57\x07\x99\x02','\x02\u0A56\u0A55\x03\x02\x02\x02\u0A56\u0A57\x03\x02\x02','\x02\u0A57\u0A58\x03\x02\x02\x02\u0A58\u0A5A\x05\u0186\xC4','\x02\u0A59\u0A52\x03\x02\x02\x02\u0A5A\u0A5D\x03\x02\x02','\x02\u0A5B\u0A59\x03\x02\x02\x02\u0A5B\u0A5C\x03\x02\x02','\x02\u0A5C\u0185\x03\x02\x02\x02\u0A5D\u0A5B\x03\x02\x02','\x02\u0A5E\u0A5F\x05\u0194\xCB\x02\u0A5F\u0187\x03\x02\x02','\x02\u0A60\u0A61\t\b\x02\x02\u0A61\u0189\x03\x02\x02\x02','\u0A62\u0A63\t\t\x02\x02\u0A63\u018B\x03\x02\x02\x02\u0A64','\u0A65\x05\u0194\xCB\x02\u0A65\u0A66\x07\t\x02\x02\u0A66','\u0A68\x03\x02\x02\x02\u0A67\u0A64\x03\x02\x02\x02\u0A68','\u0A6B\x03\x02\x02\x02\u0A69\u0A67\x03\x02\x02\x02\u0A69','\u0A6A\x03\x02\x02\x02\u0A6A\u018D\x03\x02\x02\x02\u0A6B','\u0A69\x03\x02\x02\x02\u0A6C\u0A6D\t\n\x02\x02\u0A6D\u018F','\x03\x02\x02\x02\u0A6E\u0A6F\t\x0B\x02\x02\u0A6F\u0191','\x03\x02\x02\x02\u0A70\u0A71\t\f\x02\x02\u0A71\u0193\x03','\x02\x02\x02\u0A72\u0A77\x05\u0196\xCC\x02\u0A73\u0A77\x07','\x95\x02\x02\u0A74\u0A77\x07\x98\x02\x02\u0A75\u0A77\x07','\x8C\x02\x02\u0A76\u0A72\x03\x02\x02\x02\u0A76\u0A73\x03','\x02\x02\x02\u0A76\u0A74\x03\x02\x02\x02\u0A76\u0A75\x03','\x02\x02\x02\u0A77\u0195\x03\x02\x02\x02\u0A78\u0A79\t','\r\x02\x02\u0A79\u0197\x03\x02\x02\x02\u01A6\u019D\u01A1','\u01A6\u01AA\u01AD\u01B2\u01BA\u01C2\u01CF\u01D3\u01D7\u01E0\u01E5\u01E9','\u01EC\u01EF\u01F4\u01F8\u01FF\u0211\u0228\u0230\u0232\u0236\u023B\u0241','\u0247\u024B\u024F\u0253\u0257\u025E\u0261\u0265\u0269\u026F\u0273\u0277','\u027B\u027F\u0286\u0289\u0291\u029A\u029F\u02A3\u02A6\u02AD\u02B5\u02B9','\u02BF\u02C4\u02CA\u02D5\u02D9\u02DF\u02E3\u02E7\u02EC\u02F1\u02F7\u02FC','\u0306\u030A\u030F\u0316\u031B\u031E\u032E\u033A\u0368\u036C\u0370\u0374','\u037C\u0380\u0385\u0389\u0397\u039B\u03A0\u03A4\u03AA\u03AE\u03BC\u03C3','\u03C9\u03D3\u03D7\u03DD\u03E5\u03F0\u03F6\u0402\u0408\u0414\u0418\u0422','\u042F\u0433\u0437\u043D\u0441\u0444\u0448\u0452\u0459\u0466\u046A\u0472','\u0478\u047C\u0480\u0485\u048A\u048E\u0494\u0498\u049E\u04A2\u04A8\u04AC','\u04B0\u04B4\u04B8\u04BC\u04C1\u04C8\u04CC\u04D1\u04D8\u04DC\u04E0\u04E8','\u04EF\u04F2\u04F8\u04FB\u0500\u0503\u0507\u050A\u050D\u0514\u0518\u051C','\u0520\u0524\u0529\u052E\u0532\u0537\u053C\u053F\u0541\u054A\u0550\u0553','\u0557\u055A\u0561\u0564\u0567\u056B\u0570\u0574\u057C\u0580\u0585\u058A','\u058E\u05A0\u05A4\u05A9\u05B6\u05BA\u05BC\u05BF\u05C8\u05CC\u05D0\u05DC','\u05E0\u05E5\u05EF\u05F5\u05F9\u05FE\u0602\u0606\u060A\u0610\u0614\u0619','\u061F\u0628\u0631\u0639\u063F\u0643\u0648\u0651\u0655\u065A\u065F\u0663','\u0668\u066C\u0670\u0675\u067C\u0680\u0684\u0686\u068A\u068C\u0690\u0692','\u0698\u069E\u06A1\u06A4\u06AA\u06AF\u06B3\u06B8\u06BC\u06C0\u06C2\u06C6','\u06C8\u06CB\u06CF\u06D1\u06D7\u06DB\u06E1\u06E7\u06EE\u06F4\u06F9\u0701','\u0705\u0707\u070B\u070F\u0711\u0713\u0722\u072C\u0736\u073B\u073F\u0746','\u074B\u0750\u0754\u0758\u075C\u075F\u0761\u0766\u076A\u076E\u0772\u0776','\u077A\u077D\u077F\u0784\u0788\u078D\u0792\u0796\u079D\u07A4\u07A8\u07AC','\u07B0\u07BF\u07C2\u07CF\u07D1\u07D6\u07DA\u07DE\u07E3\u07E7\u07EB\u07F3','\u07F7\u07FB\u0803\u0807\u080B\u0813\u0817\u081B\u0823\u0827\u082B\u0833','\u0837\u083B\u0843\u0847\u084B\u084F\u0852\u0855\u085D\u0861\u0865\u0869','\u086D\u0871\u0875\u0879\u087D\u0885\u0889\u088D\u0893\u0897\u089B\u089F','\u08AA\u08AE\u08B2\u08C4\u08CD\u08D5\u08D9\u08DD\u08E1\u08E5\u08E8\u08EE','\u08F3\u08F8\u08FD\u0902\u0907\u090C\u090F\u0913\u0917\u091D\u0922\u0926','\u0929\u0933\u0937\u093B\u093D\u0941\u0945\u0949\u094D\u0950\u095D\u0961','\u0965\u0968\u096B\u0971\u0975\u0979\u097B\u097F\u0983\u0987\u0989\u098D','\u0991\u0997\u099D\u09A2\u09A6\u09AA\u09AF\u09B1\u09B4\u09B8\u09BB\u09BE','\u09C4\u09C8\u09CC\u09D4\u09D8\u09DC\u09E0\u09E4\u09E8\u09EB\u09F1\u09F5','\u09F8\u09FB\u09FF\u0A04\u0A08\u0A10\u0A14\u0A18\u0A26\u0A2A\u0A2E\u0A37','\u0A3B\u0A3F\u0A44\u0A49\u0A4E\u0A52\u0A56\u0A5B\u0A69\u0A76'].join("");var atn=new antlr4.atn.ATNDeserializer().deserialize(serializedATN);var decisionsToDFA=atn.decisionToState.map(function(ds,index){return new antlr4.dfa.DFA(ds,index);});var sharedContextCache=new antlr4.PredictionContextCache();var literalNames=[null,"';'","':'","'-'","'=>'","'://'","'/'","'.'","'@'","'#'","'?'","'&'","'='","'+'","'{'","','","'}'","'['","']'","'('","')'","'+='","'|'","'*'","'..'","'%'","'^'","'=~'","'<>'","'!='","'<'","'>'","'<='","'>='","'$'",'\'\u27E8\'','\'\u3008\'','\'\uFE64\'','\'\uFF1C\'','\'\u27E9\'','\'\u3009\'','\'\uFE65\'','\'\uFF1E\'','\'\xAD\'','\'\u2010\'','\'\u2011\'','\'\u2012\'','\'\u2013\'','\'\u2014\'','\'\u2015\'','\'\u2212\'','\'\uFE58\'','\'\uFE63\'','\'\uFF0D\'',null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"'0'"];var symbolicNames=[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"CYPHER","EXPLAIN","PROFILE","USING","PERIODIC","COMMIT","UNION","ALL","CREATE","DROP","INDEX","ON","CONSTRAINT","ASSERT","IS","UNIQUE","EXISTS","LOAD","CSV","WITH","HEADERS","FROM","AS","FIELDTERMINATOR","OPTIONAL","MATCH","UNWIND","MERGE","SET","DETACH","DELETE","REMOVE","FOREACH","IN","DISTINCT","RETURN","ORDER","BY","L_SKIP","LIMIT","ASCENDING","ASC","DESCENDING","DESC","JOIN","SCAN","START","NODE","RELATIONSHIP","REL","WHERE","SHORTESTPATH","ALLSHORTESTPATHS","OR","XOR","AND","NOT","STARTS","ENDS","CONTAINS","NULL","COUNT","FILTER","EXTRACT","ANY","NONE","SINGLE","TRUE","FALSE","REDUCE","CASE","ELSE","END","WHEN","THEN","CALL","YIELD","KEY","StringLiteral","UrlHex","EscapedChar","HexInteger","DecimalInteger","OctalInteger","HexLetter","HexDigit","Digit","NonZeroDigit","NonZeroOctDigit","OctDigit","ZeroDigit","ExponentDecimalReal","RegularDecimalReal","UnescapedSymbolicName","IdentifierStart","IdentifierPart","EscapedSymbolicName","SP","WHITESPACE","Comment","ERROR_TOKEN"];var ruleNames=["cypher","cypherPart","cypherConsoleCommand","cypherConsoleCommandName","cypherConsoleCommandParameters","cypherConsoleCommandParameter","arrowExpression","url","uri","scheme","host","hostname","hostnumber","port","path","user","login","password","frag","urlQuery","search","searchparameter","string","urlDigits","json","obj","pair","array","value","keyValueLiteral","commandPath","subCommand","cypherQuery","queryOptions","anyCypherOption","cypherOption","versionNumber","explain","profile","configurationOption","statement","query","regularQuery","bulkImportQuery","singleQuery","periodicCommitHint","loadCSVQuery","union","clause","command","createUniqueConstraint","createNodeKeyConstraint","createNodePropertyExistenceConstraint","createRelationshipPropertyExistenceConstraint","createIndex","dropUniqueConstraint","dropNodeKeyConstraint","dropNodePropertyExistenceConstraint","dropRelationshipPropertyExistenceConstraint","dropIndex","index","uniqueConstraint","nodeKeyConstraint","nodePropertyExistenceConstraint","relationshipPropertyExistenceConstraint","relationshipPatternSyntax","loadCSVClause","matchClause","unwindClause","mergeClause","mergeAction","createClause","createUniqueClause","setClause","setItem","deleteClause","removeClause","removeItem","foreachClause","withClause","returnClause","returnBody","returnItems","returnItem","call","procedureInvocation","procedureInvocationBody","procedureArguments","procedureResults","procedureResult","aliasedProcedureResult","simpleProcedureResult","procedureOutput","order","skip","limit","sortItem","hint","startClause","startPoint","lookup","nodeLookup","relationshipLookup","identifiedIndexLookup","indexQuery","idLookup","literalIds","where","pattern","patternPart","anonymousPatternPart","patternElement","nodePattern","patternElementChain","relationshipPattern","relationshipPatternStart","relationshipPatternEnd","relationshipDetail","properties","relType","relationshipTypes","relationshipType","relationshipTypeOptionalColon","nodeLabels","nodeLabel","rangeLiteral","labelName","relTypeName","expression","orExpression","xorExpression","andExpression","notExpression","comparisonExpression","addOrSubtractExpression","multiplyDivideModuloExpression","powerOfExpression","unaryAddOrSubtractExpression","stringListNullOperatorExpression","propertyOrLabelsExpression","filterFunction","filterFunctionName","existsFunction","existsFunctionName","allFunction","allFunctionName","anyFunction","anyFunctionName","noneFunction","noneFunctionName","singleFunction","singleFunctionName","extractFunction","extractFunctionName","reduceFunction","reduceFunctionName","shortestPathPatternFunction","shortestPathFunctionName","allShortestPathFunctionName","atom","literal","stringLiteral","booleanLiteral","listLiteral","partialComparisonExpression","parenthesizedExpression","relationshipsPattern","filterExpression","idInColl","functionInvocation","functionInvocationBody","functionName","procedureName","listComprehension","patternComprehension","propertyLookup","caseExpression","caseAlternatives","variable","numberLiteral","mapLiteral","mapProjection","mapProjectionVariants","literalEntry","propertySelector","variableSelector","allPropertiesSelector","parameter","legacyParameter","newParameter","parameterName","propertyExpressions","propertyExpression","propertyKeys","propertyKeyName","integerLiteral","doubleLiteral","namespace","leftArrowHead","rightArrowHead","dash","symbolicName","keyword"];function CypherParser(input){antlr4.Parser.call(this,input);this._interp=new antlr4.atn.ParserATNSimulator(this,atn,decisionsToDFA,sharedContextCache);this.ruleNames=ruleNames;this.literalNames=literalNames;this.symbolicNames=symbolicNames;return this;}CypherParser.prototype=Object.create(antlr4.Parser.prototype);CypherParser.prototype.constructor=CypherParser;Object.defineProperty(CypherParser.prototype,"atn",{get:function get(){return atn;}});CypherParser.EOF=antlr4.Token.EOF;CypherParser.T__0=1;CypherParser.T__1=2;CypherParser.T__2=3;CypherParser.T__3=4;CypherParser.T__4=5;CypherParser.T__5=6;CypherParser.T__6=7;CypherParser.T__7=8;CypherParser.T__8=9;CypherParser.T__9=10;CypherParser.T__10=11;CypherParser.T__11=12;CypherParser.T__12=13;CypherParser.T__13=14;CypherParser.T__14=15;CypherParser.T__15=16;CypherParser.T__16=17;CypherParser.T__17=18;CypherParser.T__18=19;CypherParser.T__19=20;CypherParser.T__20=21;CypherParser.T__21=22;CypherParser.T__22=23;CypherParser.T__23=24;CypherParser.T__24=25;CypherParser.T__25=26;CypherParser.T__26=27;CypherParser.T__27=28;CypherParser.T__28=29;CypherParser.T__29=30;CypherParser.T__30=31;CypherParser.T__31=32;CypherParser.T__32=33;CypherParser.T__33=34;CypherParser.T__34=35;CypherParser.T__35=36;CypherParser.T__36=37;CypherParser.T__37=38;CypherParser.T__38=39;CypherParser.T__39=40;CypherParser.T__40=41;CypherParser.T__41=42;CypherParser.T__42=43;CypherParser.T__43=44;CypherParser.T__44=45;CypherParser.T__45=46;CypherParser.T__46=47;CypherParser.T__47=48;CypherParser.T__48=49;CypherParser.T__49=50;CypherParser.T__50=51;CypherParser.T__51=52;CypherParser.T__52=53;CypherParser.CYPHER=54;CypherParser.EXPLAIN=55;CypherParser.PROFILE=56;CypherParser.USING=57;CypherParser.PERIODIC=58;CypherParser.COMMIT=59;CypherParser.UNION=60;CypherParser.ALL=61;CypherParser.CREATE=62;CypherParser.DROP=63;CypherParser.INDEX=64;CypherParser.ON=65;CypherParser.CONSTRAINT=66;CypherParser.ASSERT=67;CypherParser.IS=68;CypherParser.UNIQUE=69;CypherParser.EXISTS=70;CypherParser.LOAD=71;CypherParser.CSV=72;CypherParser.WITH=73;CypherParser.HEADERS=74;CypherParser.FROM=75;CypherParser.AS=76;CypherParser.FIELDTERMINATOR=77;CypherParser.OPTIONAL=78;CypherParser.MATCH=79;CypherParser.UNWIND=80;CypherParser.MERGE=81;CypherParser.SET=82;CypherParser.DETACH=83;CypherParser.DELETE=84;CypherParser.REMOVE=85;CypherParser.FOREACH=86;CypherParser.IN=87;CypherParser.DISTINCT=88;CypherParser.RETURN=89;CypherParser.ORDER=90;CypherParser.BY=91;CypherParser.L_SKIP=92;CypherParser.LIMIT=93;CypherParser.ASCENDING=94;CypherParser.ASC=95;CypherParser.DESCENDING=96;CypherParser.DESC=97;CypherParser.JOIN=98;CypherParser.SCAN=99;CypherParser.START=100;CypherParser.NODE=101;CypherParser.RELATIONSHIP=102;CypherParser.REL=103;CypherParser.WHERE=104;CypherParser.SHORTESTPATH=105;CypherParser.ALLSHORTESTPATHS=106;CypherParser.OR=107;CypherParser.XOR=108;CypherParser.AND=109;CypherParser.NOT=110;CypherParser.STARTS=111;CypherParser.ENDS=112;CypherParser.CONTAINS=113;CypherParser.NULL=114;CypherParser.COUNT=115;CypherParser.FILTER=116;CypherParser.EXTRACT=117;CypherParser.ANY=118;CypherParser.NONE=119;CypherParser.SINGLE=120;CypherParser.TRUE=121;CypherParser.FALSE=122;CypherParser.REDUCE=123;CypherParser.CASE=124;CypherParser.ELSE=125;CypherParser.END=126;CypherParser.WHEN=127;CypherParser.THEN=128;CypherParser.CALL=129;CypherParser.YIELD=130;CypherParser.KEY=131;CypherParser.StringLiteral=132;CypherParser.UrlHex=133;CypherParser.EscapedChar=134;CypherParser.HexInteger=135;CypherParser.DecimalInteger=136;CypherParser.OctalInteger=137;CypherParser.HexLetter=138;CypherParser.HexDigit=139;CypherParser.Digit=140;CypherParser.NonZeroDigit=141;CypherParser.NonZeroOctDigit=142;CypherParser.OctDigit=143;CypherParser.ZeroDigit=144;CypherParser.ExponentDecimalReal=145;CypherParser.RegularDecimalReal=146;CypherParser.UnescapedSymbolicName=147;CypherParser.IdentifierStart=148;CypherParser.IdentifierPart=149;CypherParser.EscapedSymbolicName=150;CypherParser.SP=151;CypherParser.WHITESPACE=152;CypherParser.Comment=153;CypherParser.ERROR_TOKEN=154;CypherParser.RULE_cypher=0;CypherParser.RULE_cypherPart=1;CypherParser.RULE_cypherConsoleCommand=2;CypherParser.RULE_cypherConsoleCommandName=3;CypherParser.RULE_cypherConsoleCommandParameters=4;CypherParser.RULE_cypherConsoleCommandParameter=5;CypherParser.RULE_arrowExpression=6;CypherParser.RULE_url=7;CypherParser.RULE_uri=8;CypherParser.RULE_scheme=9;CypherParser.RULE_host=10;CypherParser.RULE_hostname=11;CypherParser.RULE_hostnumber=12;CypherParser.RULE_port=13;CypherParser.RULE_path=14;CypherParser.RULE_user=15;CypherParser.RULE_login=16;CypherParser.RULE_password=17;CypherParser.RULE_frag=18;CypherParser.RULE_urlQuery=19;CypherParser.RULE_search=20;CypherParser.RULE_searchparameter=21;CypherParser.RULE_string=22;CypherParser.RULE_urlDigits=23;CypherParser.RULE_json=24;CypherParser.RULE_obj=25;CypherParser.RULE_pair=26;CypherParser.RULE_array=27;CypherParser.RULE_value=28;CypherParser.RULE_keyValueLiteral=29;CypherParser.RULE_commandPath=30;CypherParser.RULE_subCommand=31;CypherParser.RULE_cypherQuery=32;CypherParser.RULE_queryOptions=33;CypherParser.RULE_anyCypherOption=34;CypherParser.RULE_cypherOption=35;CypherParser.RULE_versionNumber=36;CypherParser.RULE_explain=37;CypherParser.RULE_profile=38;CypherParser.RULE_configurationOption=39;CypherParser.RULE_statement=40;CypherParser.RULE_query=41;CypherParser.RULE_regularQuery=42;CypherParser.RULE_bulkImportQuery=43;CypherParser.RULE_singleQuery=44;CypherParser.RULE_periodicCommitHint=45;CypherParser.RULE_loadCSVQuery=46;CypherParser.RULE_union=47;CypherParser.RULE_clause=48;CypherParser.RULE_command=49;CypherParser.RULE_createUniqueConstraint=50;CypherParser.RULE_createNodeKeyConstraint=51;CypherParser.RULE_createNodePropertyExistenceConstraint=52;CypherParser.RULE_createRelationshipPropertyExistenceConstraint=53;CypherParser.RULE_createIndex=54;CypherParser.RULE_dropUniqueConstraint=55;CypherParser.RULE_dropNodeKeyConstraint=56;CypherParser.RULE_dropNodePropertyExistenceConstraint=57;CypherParser.RULE_dropRelationshipPropertyExistenceConstraint=58;CypherParser.RULE_dropIndex=59;CypherParser.RULE_index=60;CypherParser.RULE_uniqueConstraint=61;CypherParser.RULE_nodeKeyConstraint=62;CypherParser.RULE_nodePropertyExistenceConstraint=63;CypherParser.RULE_relationshipPropertyExistenceConstraint=64;CypherParser.RULE_relationshipPatternSyntax=65;CypherParser.RULE_loadCSVClause=66;CypherParser.RULE_matchClause=67;CypherParser.RULE_unwindClause=68;CypherParser.RULE_mergeClause=69;CypherParser.RULE_mergeAction=70;CypherParser.RULE_createClause=71;CypherParser.RULE_createUniqueClause=72;CypherParser.RULE_setClause=73;CypherParser.RULE_setItem=74;CypherParser.RULE_deleteClause=75;CypherParser.RULE_removeClause=76;CypherParser.RULE_removeItem=77;CypherParser.RULE_foreachClause=78;CypherParser.RULE_withClause=79;CypherParser.RULE_returnClause=80;CypherParser.RULE_returnBody=81;CypherParser.RULE_returnItems=82;CypherParser.RULE_returnItem=83;CypherParser.RULE_call=84;CypherParser.RULE_procedureInvocation=85;CypherParser.RULE_procedureInvocationBody=86;CypherParser.RULE_procedureArguments=87;CypherParser.RULE_procedureResults=88;CypherParser.RULE_procedureResult=89;CypherParser.RULE_aliasedProcedureResult=90;CypherParser.RULE_simpleProcedureResult=91;CypherParser.RULE_procedureOutput=92;CypherParser.RULE_order=93;CypherParser.RULE_skip=94;CypherParser.RULE_limit=95;CypherParser.RULE_sortItem=96;CypherParser.RULE_hint=97;CypherParser.RULE_startClause=98;CypherParser.RULE_startPoint=99;CypherParser.RULE_lookup=100;CypherParser.RULE_nodeLookup=101;CypherParser.RULE_relationshipLookup=102;CypherParser.RULE_identifiedIndexLookup=103;CypherParser.RULE_indexQuery=104;CypherParser.RULE_idLookup=105;CypherParser.RULE_literalIds=106;CypherParser.RULE_where=107;CypherParser.RULE_pattern=108;CypherParser.RULE_patternPart=109;CypherParser.RULE_anonymousPatternPart=110;CypherParser.RULE_patternElement=111;CypherParser.RULE_nodePattern=112;CypherParser.RULE_patternElementChain=113;CypherParser.RULE_relationshipPattern=114;CypherParser.RULE_relationshipPatternStart=115;CypherParser.RULE_relationshipPatternEnd=116;CypherParser.RULE_relationshipDetail=117;CypherParser.RULE_properties=118;CypherParser.RULE_relType=119;CypherParser.RULE_relationshipTypes=120;CypherParser.RULE_relationshipType=121;CypherParser.RULE_relationshipTypeOptionalColon=122;CypherParser.RULE_nodeLabels=123;CypherParser.RULE_nodeLabel=124;CypherParser.RULE_rangeLiteral=125;CypherParser.RULE_labelName=126;CypherParser.RULE_relTypeName=127;CypherParser.RULE_expression=128;CypherParser.RULE_orExpression=129;CypherParser.RULE_xorExpression=130;CypherParser.RULE_andExpression=131;CypherParser.RULE_notExpression=132;CypherParser.RULE_comparisonExpression=133;CypherParser.RULE_addOrSubtractExpression=134;CypherParser.RULE_multiplyDivideModuloExpression=135;CypherParser.RULE_powerOfExpression=136;CypherParser.RULE_unaryAddOrSubtractExpression=137;CypherParser.RULE_stringListNullOperatorExpression=138;CypherParser.RULE_propertyOrLabelsExpression=139;CypherParser.RULE_filterFunction=140;CypherParser.RULE_filterFunctionName=141;CypherParser.RULE_existsFunction=142;CypherParser.RULE_existsFunctionName=143;CypherParser.RULE_allFunction=144;CypherParser.RULE_allFunctionName=145;CypherParser.RULE_anyFunction=146;CypherParser.RULE_anyFunctionName=147;CypherParser.RULE_noneFunction=148;CypherParser.RULE_noneFunctionName=149;CypherParser.RULE_singleFunction=150;CypherParser.RULE_singleFunctionName=151;CypherParser.RULE_extractFunction=152;CypherParser.RULE_extractFunctionName=153;CypherParser.RULE_reduceFunction=154;CypherParser.RULE_reduceFunctionName=155;CypherParser.RULE_shortestPathPatternFunction=156;CypherParser.RULE_shortestPathFunctionName=157;CypherParser.RULE_allShortestPathFunctionName=158;CypherParser.RULE_atom=159;CypherParser.RULE_literal=160;CypherParser.RULE_stringLiteral=161;CypherParser.RULE_booleanLiteral=162;CypherParser.RULE_listLiteral=163;CypherParser.RULE_partialComparisonExpression=164;CypherParser.RULE_parenthesizedExpression=165;CypherParser.RULE_relationshipsPattern=166;CypherParser.RULE_filterExpression=167;CypherParser.RULE_idInColl=168;CypherParser.RULE_functionInvocation=169;CypherParser.RULE_functionInvocationBody=170;CypherParser.RULE_functionName=171;CypherParser.RULE_procedureName=172;CypherParser.RULE_listComprehension=173;CypherParser.RULE_patternComprehension=174;CypherParser.RULE_propertyLookup=175;CypherParser.RULE_caseExpression=176;CypherParser.RULE_caseAlternatives=177;CypherParser.RULE_variable=178;CypherParser.RULE_numberLiteral=179;CypherParser.RULE_mapLiteral=180;CypherParser.RULE_mapProjection=181;CypherParser.RULE_mapProjectionVariants=182;CypherParser.RULE_literalEntry=183;CypherParser.RULE_propertySelector=184;CypherParser.RULE_variableSelector=185;CypherParser.RULE_allPropertiesSelector=186;CypherParser.RULE_parameter=187;CypherParser.RULE_legacyParameter=188;CypherParser.RULE_newParameter=189;CypherParser.RULE_parameterName=190;CypherParser.RULE_propertyExpressions=191;CypherParser.RULE_propertyExpression=192;CypherParser.RULE_propertyKeys=193;CypherParser.RULE_propertyKeyName=194;CypherParser.RULE_integerLiteral=195;CypherParser.RULE_doubleLiteral=196;CypherParser.RULE_namespace=197;CypherParser.RULE_leftArrowHead=198;CypherParser.RULE_rightArrowHead=199;CypherParser.RULE_dash=200;CypherParser.RULE_symbolicName=201;CypherParser.RULE_keyword=202;function CypherContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_cypher;return this;}CypherContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CypherContext.prototype.constructor=CypherContext;CypherContext.prototype.cypherPart=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(CypherPartContext);}else{return this.getTypedRuleContext(CypherPartContext,i);}};CypherContext.prototype.EOF=function(){return this.getToken(CypherParser.EOF,0);};CypherContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCypher(this);}};CypherContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCypher(this);}};CypherParser.CypherContext=CypherContext;CypherParser.prototype.cypher=function(){var localctx=new CypherContext(this,this._ctx,this.state);this.enterRule(localctx,0,CypherParser.RULE_cypher);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=406;this.cypherPart();this.state=411;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,0,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=407;this.match(CypherParser.T__0);this.state=408;this.cypherPart();}this.state=413;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,0,this._ctx);}this.state=415;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.T__0){this.state=414;this.match(CypherParser.T__0);}this.state=417;this.match(CypherParser.EOF);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CypherPartContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_cypherPart;return this;}CypherPartContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CypherPartContext.prototype.constructor=CypherPartContext;CypherPartContext.prototype.cypherQuery=function(){return this.getTypedRuleContext(CypherQueryContext,0);};CypherPartContext.prototype.cypherConsoleCommand=function(){return this.getTypedRuleContext(CypherConsoleCommandContext,0);};CypherPartContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};CypherPartContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCypherPart(this);}};CypherPartContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCypherPart(this);}};CypherParser.CypherPartContext=CypherPartContext;CypherParser.prototype.cypherPart=function(){var localctx=new CypherPartContext(this,this._ctx,this.state);this.enterRule(localctx,2,CypherParser.RULE_cypherPart);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=420;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=419;this.match(CypherParser.SP);}this.state=424;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.CYPHER:case CypherParser.EXPLAIN:case CypherParser.PROFILE:case CypherParser.USING:case CypherParser.CREATE:case CypherParser.DROP:case CypherParser.LOAD:case CypherParser.WITH:case CypherParser.OPTIONAL:case CypherParser.MATCH:case CypherParser.UNWIND:case CypherParser.MERGE:case CypherParser.SET:case CypherParser.DETACH:case CypherParser.DELETE:case CypherParser.REMOVE:case CypherParser.FOREACH:case CypherParser.RETURN:case CypherParser.START:case CypherParser.CALL:this.state=422;this.cypherQuery();break;case CypherParser.T__1:this.state=423;this.cypherConsoleCommand();break;default:throw new antlr4.error.NoViableAltException(this);}this.state=427;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=426;this.match(CypherParser.SP);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CypherConsoleCommandContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_cypherConsoleCommand;return this;}CypherConsoleCommandContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CypherConsoleCommandContext.prototype.constructor=CypherConsoleCommandContext;CypherConsoleCommandContext.prototype.cypherConsoleCommandName=function(){return this.getTypedRuleContext(CypherConsoleCommandNameContext,0);};CypherConsoleCommandContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};CypherConsoleCommandContext.prototype.cypherConsoleCommandParameters=function(){return this.getTypedRuleContext(CypherConsoleCommandParametersContext,0);};CypherConsoleCommandContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCypherConsoleCommand(this);}};CypherConsoleCommandContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCypherConsoleCommand(this);}};CypherParser.CypherConsoleCommandContext=CypherConsoleCommandContext;CypherParser.prototype.cypherConsoleCommand=function(){var localctx=new CypherConsoleCommandContext(this,this._ctx,this.state);this.enterRule(localctx,4,CypherParser.RULE_cypherConsoleCommand);try{this.enterOuterAlt(localctx,1);this.state=429;this.cypherConsoleCommandName();this.state=432;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,5,this._ctx);if(la_===1){this.state=430;this.match(CypherParser.SP);this.state=431;this.cypherConsoleCommandParameters();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CypherConsoleCommandNameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_cypherConsoleCommandName;return this;}CypherConsoleCommandNameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CypherConsoleCommandNameContext.prototype.constructor=CypherConsoleCommandNameContext;CypherConsoleCommandNameContext.prototype.symbolicName=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(SymbolicNameContext);}else{return this.getTypedRuleContext(SymbolicNameContext,i);}};CypherConsoleCommandNameContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCypherConsoleCommandName(this);}};CypherConsoleCommandNameContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCypherConsoleCommandName(this);}};CypherParser.CypherConsoleCommandNameContext=CypherConsoleCommandNameContext;CypherParser.prototype.cypherConsoleCommandName=function(){var localctx=new CypherConsoleCommandNameContext(this,this._ctx,this.state);this.enterRule(localctx,6,CypherParser.RULE_cypherConsoleCommandName);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=434;this.match(CypherParser.T__1);this.state=435;this.symbolicName();this.state=440;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CypherParser.T__2){this.state=436;this.match(CypherParser.T__2);this.state=437;this.symbolicName();this.state=442;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CypherConsoleCommandParametersContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_cypherConsoleCommandParameters;return this;}CypherConsoleCommandParametersContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CypherConsoleCommandParametersContext.prototype.constructor=CypherConsoleCommandParametersContext;CypherConsoleCommandParametersContext.prototype.cypherConsoleCommandParameter=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(CypherConsoleCommandParameterContext);}else{return this.getTypedRuleContext(CypherConsoleCommandParameterContext,i);}};CypherConsoleCommandParametersContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};CypherConsoleCommandParametersContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCypherConsoleCommandParameters(this);}};CypherConsoleCommandParametersContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCypherConsoleCommandParameters(this);}};CypherParser.CypherConsoleCommandParametersContext=CypherConsoleCommandParametersContext;CypherParser.prototype.cypherConsoleCommandParameters=function(){var localctx=new CypherConsoleCommandParametersContext(this,this._ctx,this.state);this.enterRule(localctx,8,CypherParser.RULE_cypherConsoleCommandParameters);try{this.enterOuterAlt(localctx,1);this.state=443;this.cypherConsoleCommandParameter();this.state=448;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,7,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=444;this.match(CypherParser.SP);this.state=445;this.cypherConsoleCommandParameter();}this.state=450;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,7,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CypherConsoleCommandParameterContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_cypherConsoleCommandParameter;return this;}CypherConsoleCommandParameterContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CypherConsoleCommandParameterContext.prototype.constructor=CypherConsoleCommandParameterContext;CypherConsoleCommandParameterContext.prototype.url=function(){return this.getTypedRuleContext(UrlContext,0);};CypherConsoleCommandParameterContext.prototype.json=function(){return this.getTypedRuleContext(JsonContext,0);};CypherConsoleCommandParameterContext.prototype.arrowExpression=function(){return this.getTypedRuleContext(ArrowExpressionContext,0);};CypherConsoleCommandParameterContext.prototype.mapLiteral=function(){return this.getTypedRuleContext(MapLiteralContext,0);};CypherConsoleCommandParameterContext.prototype.keyValueLiteral=function(){return this.getTypedRuleContext(KeyValueLiteralContext,0);};CypherConsoleCommandParameterContext.prototype.stringLiteral=function(){return this.getTypedRuleContext(StringLiteralContext,0);};CypherConsoleCommandParameterContext.prototype.numberLiteral=function(){return this.getTypedRuleContext(NumberLiteralContext,0);};CypherConsoleCommandParameterContext.prototype.booleanLiteral=function(){return this.getTypedRuleContext(BooleanLiteralContext,0);};CypherConsoleCommandParameterContext.prototype.subCommand=function(){return this.getTypedRuleContext(SubCommandContext,0);};CypherConsoleCommandParameterContext.prototype.commandPath=function(){return this.getTypedRuleContext(CommandPathContext,0);};CypherConsoleCommandParameterContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCypherConsoleCommandParameter(this);}};CypherConsoleCommandParameterContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCypherConsoleCommandParameter(this);}};CypherParser.CypherConsoleCommandParameterContext=CypherConsoleCommandParameterContext;CypherParser.prototype.cypherConsoleCommandParameter=function(){var localctx=new CypherConsoleCommandParameterContext(this,this._ctx,this.state);this.enterRule(localctx,10,CypherParser.RULE_cypherConsoleCommandParameter);try{this.state=461;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,8,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=451;this.url();break;case 2:this.enterOuterAlt(localctx,2);this.state=452;this.json();break;case 3:this.enterOuterAlt(localctx,3);this.state=453;this.arrowExpression();break;case 4:this.enterOuterAlt(localctx,4);this.state=454;this.mapLiteral();break;case 5:this.enterOuterAlt(localctx,5);this.state=455;this.keyValueLiteral();break;case 6:this.enterOuterAlt(localctx,6);this.state=456;this.stringLiteral();break;case 7:this.enterOuterAlt(localctx,7);this.state=457;this.numberLiteral();break;case 8:this.enterOuterAlt(localctx,8);this.state=458;this.booleanLiteral();break;case 9:this.enterOuterAlt(localctx,9);this.state=459;this.subCommand();break;case 10:this.enterOuterAlt(localctx,10);this.state=460;this.commandPath();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ArrowExpressionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_arrowExpression;return this;}ArrowExpressionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ArrowExpressionContext.prototype.constructor=ArrowExpressionContext;ArrowExpressionContext.prototype.symbolicName=function(){return this.getTypedRuleContext(SymbolicNameContext,0);};ArrowExpressionContext.prototype.expression=function(){return this.getTypedRuleContext(ExpressionContext,0);};ArrowExpressionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};ArrowExpressionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterArrowExpression(this);}};ArrowExpressionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitArrowExpression(this);}};CypherParser.ArrowExpressionContext=ArrowExpressionContext;CypherParser.prototype.arrowExpression=function(){var localctx=new ArrowExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,12,CypherParser.RULE_arrowExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=463;this.symbolicName();this.state=465;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=464;this.match(CypherParser.SP);}this.state=467;this.match(CypherParser.T__3);this.state=469;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=468;this.match(CypherParser.SP);}this.state=471;this.expression();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function UrlContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_url;return this;}UrlContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);UrlContext.prototype.constructor=UrlContext;UrlContext.prototype.uri=function(){return this.getTypedRuleContext(UriContext,0);};UrlContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterUrl(this);}};UrlContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitUrl(this);}};CypherParser.UrlContext=UrlContext;CypherParser.prototype.url=function(){var localctx=new UrlContext(this,this._ctx,this.state);this.enterRule(localctx,14,CypherParser.RULE_url);try{this.enterOuterAlt(localctx,1);this.state=473;this.uri();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function UriContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_uri;return this;}UriContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);UriContext.prototype.constructor=UriContext;UriContext.prototype.scheme=function(){return this.getTypedRuleContext(SchemeContext,0);};UriContext.prototype.host=function(){return this.getTypedRuleContext(HostContext,0);};UriContext.prototype.login=function(){return this.getTypedRuleContext(LoginContext,0);};UriContext.prototype.port=function(){return this.getTypedRuleContext(PortContext,0);};UriContext.prototype.path=function(){return this.getTypedRuleContext(PathContext,0);};UriContext.prototype.urlQuery=function(){return this.getTypedRuleContext(UrlQueryContext,0);};UriContext.prototype.frag=function(){return this.getTypedRuleContext(FragContext,0);};UriContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterUri(this);}};UriContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitUri(this);}};CypherParser.UriContext=UriContext;CypherParser.prototype.uri=function(){var localctx=new UriContext(this,this._ctx,this.state);this.enterRule(localctx,16,CypherParser.RULE_uri);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=475;this.scheme();this.state=476;this.match(CypherParser.T__4);this.state=478;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,11,this._ctx);if(la_===1){this.state=477;this.login();}this.state=480;this.host();this.state=483;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.T__1){this.state=481;this.match(CypherParser.T__1);this.state=482;this.port();}this.state=487;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.T__5){this.state=485;this.match(CypherParser.T__5);this.state=486;this.path();}this.state=490;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.T__9){this.state=489;this.urlQuery();}this.state=493;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.T__8){this.state=492;this.frag();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function SchemeContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_scheme;return this;}SchemeContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);SchemeContext.prototype.constructor=SchemeContext;SchemeContext.prototype.string=function(){return this.getTypedRuleContext(StringContext,0);};SchemeContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterScheme(this);}};SchemeContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitScheme(this);}};CypherParser.SchemeContext=SchemeContext;CypherParser.prototype.scheme=function(){var localctx=new SchemeContext(this,this._ctx,this.state);this.enterRule(localctx,18,CypherParser.RULE_scheme);try{this.enterOuterAlt(localctx,1);this.state=495;this.string();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function HostContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_host;return this;}HostContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);HostContext.prototype.constructor=HostContext;HostContext.prototype.hostname=function(){return this.getTypedRuleContext(HostnameContext,0);};HostContext.prototype.hostnumber=function(){return this.getTypedRuleContext(HostnumberContext,0);};HostContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterHost(this);}};HostContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitHost(this);}};CypherParser.HostContext=HostContext;CypherParser.prototype.host=function(){var localctx=new HostContext(this,this._ctx,this.state);this.enterRule(localctx,20,CypherParser.RULE_host);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=498;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.T__5){this.state=497;this.match(CypherParser.T__5);}this.state=502;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.CYPHER:case CypherParser.EXPLAIN:case CypherParser.PROFILE:case CypherParser.USING:case CypherParser.PERIODIC:case CypherParser.COMMIT:case CypherParser.UNION:case CypherParser.ALL:case CypherParser.CREATE:case CypherParser.DROP:case CypherParser.INDEX:case CypherParser.ON:case CypherParser.CONSTRAINT:case CypherParser.ASSERT:case CypherParser.IS:case CypherParser.UNIQUE:case CypherParser.EXISTS:case CypherParser.LOAD:case CypherParser.CSV:case CypherParser.WITH:case CypherParser.HEADERS:case CypherParser.FROM:case CypherParser.AS:case CypherParser.FIELDTERMINATOR:case CypherParser.OPTIONAL:case CypherParser.MATCH:case CypherParser.UNWIND:case CypherParser.MERGE:case CypherParser.SET:case CypherParser.DETACH:case CypherParser.DELETE:case CypherParser.REMOVE:case CypherParser.FOREACH:case CypherParser.IN:case CypherParser.DISTINCT:case CypherParser.RETURN:case CypherParser.ORDER:case CypherParser.BY:case CypherParser.L_SKIP:case CypherParser.LIMIT:case CypherParser.ASCENDING:case CypherParser.ASC:case CypherParser.DESCENDING:case CypherParser.DESC:case CypherParser.JOIN:case CypherParser.SCAN:case CypherParser.START:case CypherParser.NODE:case CypherParser.RELATIONSHIP:case CypherParser.REL:case CypherParser.WHERE:case CypherParser.SHORTESTPATH:case CypherParser.ALLSHORTESTPATHS:case CypherParser.OR:case CypherParser.XOR:case CypherParser.AND:case CypherParser.NOT:case CypherParser.STARTS:case CypherParser.ENDS:case CypherParser.CONTAINS:case CypherParser.NULL:case CypherParser.COUNT:case CypherParser.FILTER:case CypherParser.EXTRACT:case CypherParser.ANY:case CypherParser.NONE:case CypherParser.SINGLE:case CypherParser.TRUE:case CypherParser.FALSE:case CypherParser.REDUCE:case CypherParser.CASE:case CypherParser.ELSE:case CypherParser.END:case CypherParser.WHEN:case CypherParser.THEN:case CypherParser.CALL:case CypherParser.YIELD:case CypherParser.KEY:case CypherParser.HexLetter:case CypherParser.UnescapedSymbolicName:case CypherParser.EscapedSymbolicName:this.state=500;this.hostname();break;case CypherParser.HexInteger:case CypherParser.DecimalInteger:case CypherParser.OctalInteger:this.state=501;this.hostnumber();break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function HostnameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_hostname;return this;}HostnameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);HostnameContext.prototype.constructor=HostnameContext;HostnameContext.prototype.string=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(StringContext);}else{return this.getTypedRuleContext(StringContext,i);}};HostnameContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterHostname(this);}};HostnameContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitHostname(this);}};CypherParser.HostnameContext=HostnameContext;CypherParser.prototype.hostname=function(){var localctx=new HostnameContext(this,this._ctx,this.state);this.enterRule(localctx,22,CypherParser.RULE_hostname);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=504;this.string();this.state=509;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CypherParser.T__6){this.state=505;this.match(CypherParser.T__6);this.state=506;this.string();this.state=511;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function HostnumberContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_hostnumber;return this;}HostnumberContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);HostnumberContext.prototype.constructor=HostnumberContext;HostnumberContext.prototype.urlDigits=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(UrlDigitsContext);}else{return this.getTypedRuleContext(UrlDigitsContext,i);}};HostnumberContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterHostnumber(this);}};HostnumberContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitHostnumber(this);}};CypherParser.HostnumberContext=HostnumberContext;CypherParser.prototype.hostnumber=function(){var localctx=new HostnumberContext(this,this._ctx,this.state);this.enterRule(localctx,24,CypherParser.RULE_hostnumber);try{this.enterOuterAlt(localctx,1);this.state=512;this.urlDigits();this.state=513;this.match(CypherParser.T__6);this.state=514;this.urlDigits();this.state=515;this.match(CypherParser.T__6);this.state=516;this.urlDigits();this.state=517;this.match(CypherParser.T__6);this.state=518;this.urlDigits();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PortContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_port;return this;}PortContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PortContext.prototype.constructor=PortContext;PortContext.prototype.urlDigits=function(){return this.getTypedRuleContext(UrlDigitsContext,0);};PortContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterPort(this);}};PortContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitPort(this);}};CypherParser.PortContext=PortContext;CypherParser.prototype.port=function(){var localctx=new PortContext(this,this._ctx,this.state);this.enterRule(localctx,26,CypherParser.RULE_port);try{this.enterOuterAlt(localctx,1);this.state=520;this.urlDigits();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PathContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_path;return this;}PathContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PathContext.prototype.constructor=PathContext;PathContext.prototype.string=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(StringContext);}else{return this.getTypedRuleContext(StringContext,i);}};PathContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterPath(this);}};PathContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitPath(this);}};CypherParser.PathContext=PathContext;CypherParser.prototype.path=function(){var localctx=new PathContext(this,this._ctx,this.state);this.enterRule(localctx,28,CypherParser.RULE_path);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=522;this.string();this.state=527;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CypherParser.T__5){this.state=523;this.match(CypherParser.T__5);this.state=524;this.string();this.state=529;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function UserContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_user;return this;}UserContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);UserContext.prototype.constructor=UserContext;UserContext.prototype.string=function(){return this.getTypedRuleContext(StringContext,0);};UserContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterUser(this);}};UserContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitUser(this);}};CypherParser.UserContext=UserContext;CypherParser.prototype.user=function(){var localctx=new UserContext(this,this._ctx,this.state);this.enterRule(localctx,30,CypherParser.RULE_user);try{this.enterOuterAlt(localctx,1);this.state=530;this.string();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function LoginContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_login;return this;}LoginContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);LoginContext.prototype.constructor=LoginContext;LoginContext.prototype.user=function(){return this.getTypedRuleContext(UserContext,0);};LoginContext.prototype.password=function(){return this.getTypedRuleContext(PasswordContext,0);};LoginContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterLogin(this);}};LoginContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitLogin(this);}};CypherParser.LoginContext=LoginContext;CypherParser.prototype.login=function(){var localctx=new LoginContext(this,this._ctx,this.state);this.enterRule(localctx,32,CypherParser.RULE_login);try{this.enterOuterAlt(localctx,1);this.state=532;this.user();this.state=533;this.match(CypherParser.T__1);this.state=534;this.password();this.state=535;this.match(CypherParser.T__7);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PasswordContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_password;return this;}PasswordContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PasswordContext.prototype.constructor=PasswordContext;PasswordContext.prototype.string=function(){return this.getTypedRuleContext(StringContext,0);};PasswordContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterPassword(this);}};PasswordContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitPassword(this);}};CypherParser.PasswordContext=PasswordContext;CypherParser.prototype.password=function(){var localctx=new PasswordContext(this,this._ctx,this.state);this.enterRule(localctx,34,CypherParser.RULE_password);try{this.enterOuterAlt(localctx,1);this.state=537;this.string();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function FragContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_frag;return this;}FragContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);FragContext.prototype.constructor=FragContext;FragContext.prototype.string=function(){return this.getTypedRuleContext(StringContext,0);};FragContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterFrag(this);}};FragContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitFrag(this);}};CypherParser.FragContext=FragContext;CypherParser.prototype.frag=function(){var localctx=new FragContext(this,this._ctx,this.state);this.enterRule(localctx,36,CypherParser.RULE_frag);try{this.enterOuterAlt(localctx,1);this.state=539;this.match(CypherParser.T__8);this.state=540;this.string();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function UrlQueryContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_urlQuery;return this;}UrlQueryContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);UrlQueryContext.prototype.constructor=UrlQueryContext;UrlQueryContext.prototype.search=function(){return this.getTypedRuleContext(SearchContext,0);};UrlQueryContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterUrlQuery(this);}};UrlQueryContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitUrlQuery(this);}};CypherParser.UrlQueryContext=UrlQueryContext;CypherParser.prototype.urlQuery=function(){var localctx=new UrlQueryContext(this,this._ctx,this.state);this.enterRule(localctx,38,CypherParser.RULE_urlQuery);try{this.enterOuterAlt(localctx,1);this.state=542;this.match(CypherParser.T__9);this.state=543;this.search();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function SearchContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_search;return this;}SearchContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);SearchContext.prototype.constructor=SearchContext;SearchContext.prototype.searchparameter=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(SearchparameterContext);}else{return this.getTypedRuleContext(SearchparameterContext,i);}};SearchContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterSearch(this);}};SearchContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitSearch(this);}};CypherParser.SearchContext=SearchContext;CypherParser.prototype.search=function(){var localctx=new SearchContext(this,this._ctx,this.state);this.enterRule(localctx,40,CypherParser.RULE_search);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=545;this.searchparameter();this.state=550;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CypherParser.T__10){this.state=546;this.match(CypherParser.T__10);this.state=547;this.searchparameter();this.state=552;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function SearchparameterContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_searchparameter;return this;}SearchparameterContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);SearchparameterContext.prototype.constructor=SearchparameterContext;SearchparameterContext.prototype.string=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(StringContext);}else{return this.getTypedRuleContext(StringContext,i);}};SearchparameterContext.prototype.urlDigits=function(){return this.getTypedRuleContext(UrlDigitsContext,0);};SearchparameterContext.prototype.UrlHex=function(){return this.getToken(CypherParser.UrlHex,0);};SearchparameterContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterSearchparameter(this);}};SearchparameterContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitSearchparameter(this);}};CypherParser.SearchparameterContext=SearchparameterContext;CypherParser.prototype.searchparameter=function(){var localctx=new SearchparameterContext(this,this._ctx,this.state);this.enterRule(localctx,42,CypherParser.RULE_searchparameter);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=553;this.string();this.state=560;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.T__11){this.state=554;this.match(CypherParser.T__11);this.state=558;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.CYPHER:case CypherParser.EXPLAIN:case CypherParser.PROFILE:case CypherParser.USING:case CypherParser.PERIODIC:case CypherParser.COMMIT:case CypherParser.UNION:case CypherParser.ALL:case CypherParser.CREATE:case CypherParser.DROP:case CypherParser.INDEX:case CypherParser.ON:case CypherParser.CONSTRAINT:case CypherParser.ASSERT:case CypherParser.IS:case CypherParser.UNIQUE:case CypherParser.EXISTS:case CypherParser.LOAD:case CypherParser.CSV:case CypherParser.WITH:case CypherParser.HEADERS:case CypherParser.FROM:case CypherParser.AS:case CypherParser.FIELDTERMINATOR:case CypherParser.OPTIONAL:case CypherParser.MATCH:case CypherParser.UNWIND:case CypherParser.MERGE:case CypherParser.SET:case CypherParser.DETACH:case CypherParser.DELETE:case CypherParser.REMOVE:case CypherParser.FOREACH:case CypherParser.IN:case CypherParser.DISTINCT:case CypherParser.RETURN:case CypherParser.ORDER:case CypherParser.BY:case CypherParser.L_SKIP:case CypherParser.LIMIT:case CypherParser.ASCENDING:case CypherParser.ASC:case CypherParser.DESCENDING:case CypherParser.DESC:case CypherParser.JOIN:case CypherParser.SCAN:case CypherParser.START:case CypherParser.NODE:case CypherParser.RELATIONSHIP:case CypherParser.REL:case CypherParser.WHERE:case CypherParser.SHORTESTPATH:case CypherParser.ALLSHORTESTPATHS:case CypherParser.OR:case CypherParser.XOR:case CypherParser.AND:case CypherParser.NOT:case CypherParser.STARTS:case CypherParser.ENDS:case CypherParser.CONTAINS:case CypherParser.NULL:case CypherParser.COUNT:case CypherParser.FILTER:case CypherParser.EXTRACT:case CypherParser.ANY:case CypherParser.NONE:case CypherParser.SINGLE:case CypherParser.TRUE:case CypherParser.FALSE:case CypherParser.REDUCE:case CypherParser.CASE:case CypherParser.ELSE:case CypherParser.END:case CypherParser.WHEN:case CypherParser.THEN:case CypherParser.CALL:case CypherParser.YIELD:case CypherParser.KEY:case CypherParser.HexLetter:case CypherParser.UnescapedSymbolicName:case CypherParser.EscapedSymbolicName:this.state=555;this.string();break;case CypherParser.HexInteger:case CypherParser.DecimalInteger:case CypherParser.OctalInteger:this.state=556;this.urlDigits();break;case CypherParser.UrlHex:this.state=557;this.match(CypherParser.UrlHex);break;default:throw new antlr4.error.NoViableAltException(this);}}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function StringContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_string;return this;}StringContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);StringContext.prototype.constructor=StringContext;StringContext.prototype.symbolicName=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(SymbolicNameContext);}else{return this.getTypedRuleContext(SymbolicNameContext,i);}};StringContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterString(this);}};StringContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitString(this);}};CypherParser.StringContext=StringContext;CypherParser.prototype.string=function(){var localctx=new StringContext(this,this._ctx,this.state);this.enterRule(localctx,44,CypherParser.RULE_string);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=562;this.symbolicName();this.state=569;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,24,this._ctx);while(_alt!=1&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1+1){this.state=564;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.T__6||_la===CypherParser.T__12){this.state=563;_la=this._input.LA(1);if(!(_la===CypherParser.T__6||_la===CypherParser.T__12)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}this.state=566;this.symbolicName();}this.state=571;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,24,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function UrlDigitsContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_urlDigits;return this;}UrlDigitsContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);UrlDigitsContext.prototype.constructor=UrlDigitsContext;UrlDigitsContext.prototype.integerLiteral=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(IntegerLiteralContext);}else{return this.getTypedRuleContext(IntegerLiteralContext,i);}};UrlDigitsContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterUrlDigits(this);}};UrlDigitsContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitUrlDigits(this);}};CypherParser.UrlDigitsContext=UrlDigitsContext;CypherParser.prototype.urlDigits=function(){var localctx=new UrlDigitsContext(this,this._ctx,this.state);this.enterRule(localctx,46,CypherParser.RULE_urlDigits);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=573;this._errHandler.sync(this);_la=this._input.LA(1);do{this.state=572;this.integerLiteral();this.state=575;this._errHandler.sync(this);_la=this._input.LA(1);}while((_la-135&~0x1f)==0&&(1<<_la-135&(1<<CypherParser.HexInteger-135|1<<CypherParser.DecimalInteger-135|1<<CypherParser.OctalInteger-135))!==0);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function JsonContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_json;return this;}JsonContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);JsonContext.prototype.constructor=JsonContext;JsonContext.prototype.value=function(){return this.getTypedRuleContext(ValueContext,0);};JsonContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterJson(this);}};JsonContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitJson(this);}};CypherParser.JsonContext=JsonContext;CypherParser.prototype.json=function(){var localctx=new JsonContext(this,this._ctx,this.state);this.enterRule(localctx,48,CypherParser.RULE_json);try{this.enterOuterAlt(localctx,1);this.state=577;this.value();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ObjContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_obj;return this;}ObjContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ObjContext.prototype.constructor=ObjContext;ObjContext.prototype.pair=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(PairContext);}else{return this.getTypedRuleContext(PairContext,i);}};ObjContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};ObjContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterObj(this);}};ObjContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitObj(this);}};CypherParser.ObjContext=ObjContext;CypherParser.prototype.obj=function(){var localctx=new ObjContext(this,this._ctx,this.state);this.enterRule(localctx,50,CypherParser.RULE_obj);var _la=0;// Token type
try{this.state=607;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,32,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=579;this.match(CypherParser.T__13);this.state=581;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=580;this.match(CypherParser.SP);}this.state=583;this.pair();this.state=585;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=584;this.match(CypherParser.SP);}this.state=597;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CypherParser.T__14){this.state=587;this.match(CypherParser.T__14);this.state=589;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=588;this.match(CypherParser.SP);}this.state=591;this.pair();this.state=593;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=592;this.match(CypherParser.SP);}this.state=599;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=600;this.match(CypherParser.T__15);break;case 2:this.enterOuterAlt(localctx,2);this.state=602;this.match(CypherParser.T__13);this.state=604;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=603;this.match(CypherParser.SP);}this.state=606;this.match(CypherParser.T__15);break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PairContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_pair;return this;}PairContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PairContext.prototype.constructor=PairContext;PairContext.prototype.stringLiteral=function(){return this.getTypedRuleContext(StringLiteralContext,0);};PairContext.prototype.value=function(){return this.getTypedRuleContext(ValueContext,0);};PairContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};PairContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterPair(this);}};PairContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitPair(this);}};CypherParser.PairContext=PairContext;CypherParser.prototype.pair=function(){var localctx=new PairContext(this,this._ctx,this.state);this.enterRule(localctx,52,CypherParser.RULE_pair);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=609;this.stringLiteral();this.state=611;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=610;this.match(CypherParser.SP);}this.state=613;this.match(CypherParser.T__1);this.state=615;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=614;this.match(CypherParser.SP);}this.state=617;this.value();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ArrayContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_array;return this;}ArrayContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ArrayContext.prototype.constructor=ArrayContext;ArrayContext.prototype.value=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ValueContext);}else{return this.getTypedRuleContext(ValueContext,i);}};ArrayContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};ArrayContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterArray(this);}};ArrayContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitArray(this);}};CypherParser.ArrayContext=ArrayContext;CypherParser.prototype.array=function(){var localctx=new ArrayContext(this,this._ctx,this.state);this.enterRule(localctx,54,CypherParser.RULE_array);var _la=0;// Token type
try{this.state=647;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,41,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=619;this.match(CypherParser.T__16);this.state=621;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=620;this.match(CypherParser.SP);}this.state=623;this.value();this.state=625;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=624;this.match(CypherParser.SP);}this.state=637;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CypherParser.T__14){this.state=627;this.match(CypherParser.T__14);this.state=629;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=628;this.match(CypherParser.SP);}this.state=631;this.value();this.state=633;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=632;this.match(CypherParser.SP);}this.state=639;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=640;this.match(CypherParser.T__17);break;case 2:this.enterOuterAlt(localctx,2);this.state=642;this.match(CypherParser.T__16);this.state=644;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=643;this.match(CypherParser.SP);}this.state=646;this.match(CypherParser.T__17);break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ValueContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_value;return this;}ValueContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ValueContext.prototype.constructor=ValueContext;ValueContext.prototype.stringLiteral=function(){return this.getTypedRuleContext(StringLiteralContext,0);};ValueContext.prototype.numberLiteral=function(){return this.getTypedRuleContext(NumberLiteralContext,0);};ValueContext.prototype.obj=function(){return this.getTypedRuleContext(ObjContext,0);};ValueContext.prototype.array=function(){return this.getTypedRuleContext(ArrayContext,0);};ValueContext.prototype.booleanLiteral=function(){return this.getTypedRuleContext(BooleanLiteralContext,0);};ValueContext.prototype.NULL=function(){return this.getToken(CypherParser.NULL,0);};ValueContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterValue(this);}};ValueContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitValue(this);}};CypherParser.ValueContext=ValueContext;CypherParser.prototype.value=function(){var localctx=new ValueContext(this,this._ctx,this.state);this.enterRule(localctx,56,CypherParser.RULE_value);try{this.state=655;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.StringLiteral:this.enterOuterAlt(localctx,1);this.state=649;this.stringLiteral();break;case CypherParser.HexInteger:case CypherParser.DecimalInteger:case CypherParser.OctalInteger:case CypherParser.ExponentDecimalReal:case CypherParser.RegularDecimalReal:this.enterOuterAlt(localctx,2);this.state=650;this.numberLiteral();break;case CypherParser.T__13:this.enterOuterAlt(localctx,3);this.state=651;this.obj();break;case CypherParser.T__16:this.enterOuterAlt(localctx,4);this.state=652;this.array();break;case CypherParser.TRUE:case CypherParser.FALSE:this.enterOuterAlt(localctx,5);this.state=653;this.booleanLiteral();break;case CypherParser.NULL:this.enterOuterAlt(localctx,6);this.state=654;this.match(CypherParser.NULL);break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function KeyValueLiteralContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_keyValueLiteral;return this;}KeyValueLiteralContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);KeyValueLiteralContext.prototype.constructor=KeyValueLiteralContext;KeyValueLiteralContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};KeyValueLiteralContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};KeyValueLiteralContext.prototype.StringLiteral=function(){return this.getToken(CypherParser.StringLiteral,0);};KeyValueLiteralContext.prototype.numberLiteral=function(){return this.getTypedRuleContext(NumberLiteralContext,0);};KeyValueLiteralContext.prototype.booleanLiteral=function(){return this.getTypedRuleContext(BooleanLiteralContext,0);};KeyValueLiteralContext.prototype.symbolicName=function(){return this.getTypedRuleContext(SymbolicNameContext,0);};KeyValueLiteralContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterKeyValueLiteral(this);}};KeyValueLiteralContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitKeyValueLiteral(this);}};CypherParser.KeyValueLiteralContext=KeyValueLiteralContext;CypherParser.prototype.keyValueLiteral=function(){var localctx=new KeyValueLiteralContext(this,this._ctx,this.state);this.enterRule(localctx,58,CypherParser.RULE_keyValueLiteral);try{this.enterOuterAlt(localctx,1);this.state=657;this.variable();this.state=658;this.match(CypherParser.T__1);this.state=659;this.match(CypherParser.SP);this.state=664;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,43,this._ctx);switch(la_){case 1:this.state=660;this.match(CypherParser.StringLiteral);break;case 2:this.state=661;this.numberLiteral();break;case 3:this.state=662;this.booleanLiteral();break;case 4:this.state=663;this.symbolicName();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CommandPathContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_commandPath;return this;}CommandPathContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CommandPathContext.prototype.constructor=CommandPathContext;CommandPathContext.prototype.symbolicName=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(SymbolicNameContext);}else{return this.getTypedRuleContext(SymbolicNameContext,i);}};CommandPathContext.prototype.numberLiteral=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(NumberLiteralContext);}else{return this.getTypedRuleContext(NumberLiteralContext,i);}};CommandPathContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCommandPath(this);}};CommandPathContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCommandPath(this);}};CypherParser.CommandPathContext=CommandPathContext;CypherParser.prototype.commandPath=function(){var localctx=new CommandPathContext(this,this._ctx,this.state);this.enterRule(localctx,60,CypherParser.RULE_commandPath);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=671;this._errHandler.sync(this);var _alt=1;do{switch(_alt){case 1:this.state=666;this.match(CypherParser.T__5);this.state=669;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.CYPHER:case CypherParser.EXPLAIN:case CypherParser.PROFILE:case CypherParser.USING:case CypherParser.PERIODIC:case CypherParser.COMMIT:case CypherParser.UNION:case CypherParser.ALL:case CypherParser.CREATE:case CypherParser.DROP:case CypherParser.INDEX:case CypherParser.ON:case CypherParser.CONSTRAINT:case CypherParser.ASSERT:case CypherParser.IS:case CypherParser.UNIQUE:case CypherParser.EXISTS:case CypherParser.LOAD:case CypherParser.CSV:case CypherParser.WITH:case CypherParser.HEADERS:case CypherParser.FROM:case CypherParser.AS:case CypherParser.FIELDTERMINATOR:case CypherParser.OPTIONAL:case CypherParser.MATCH:case CypherParser.UNWIND:case CypherParser.MERGE:case CypherParser.SET:case CypherParser.DETACH:case CypherParser.DELETE:case CypherParser.REMOVE:case CypherParser.FOREACH:case CypherParser.IN:case CypherParser.DISTINCT:case CypherParser.RETURN:case CypherParser.ORDER:case CypherParser.BY:case CypherParser.L_SKIP:case CypherParser.LIMIT:case CypherParser.ASCENDING:case CypherParser.ASC:case CypherParser.DESCENDING:case CypherParser.DESC:case CypherParser.JOIN:case CypherParser.SCAN:case CypherParser.START:case CypherParser.NODE:case CypherParser.RELATIONSHIP:case CypherParser.REL:case CypherParser.WHERE:case CypherParser.SHORTESTPATH:case CypherParser.ALLSHORTESTPATHS:case CypherParser.OR:case CypherParser.XOR:case CypherParser.AND:case CypherParser.NOT:case CypherParser.STARTS:case CypherParser.ENDS:case CypherParser.CONTAINS:case CypherParser.NULL:case CypherParser.COUNT:case CypherParser.FILTER:case CypherParser.EXTRACT:case CypherParser.ANY:case CypherParser.NONE:case CypherParser.SINGLE:case CypherParser.TRUE:case CypherParser.FALSE:case CypherParser.REDUCE:case CypherParser.CASE:case CypherParser.ELSE:case CypherParser.END:case CypherParser.WHEN:case CypherParser.THEN:case CypherParser.CALL:case CypherParser.YIELD:case CypherParser.KEY:case CypherParser.HexLetter:case CypherParser.UnescapedSymbolicName:case CypherParser.EscapedSymbolicName:this.state=667;this.symbolicName();break;case CypherParser.HexInteger:case CypherParser.DecimalInteger:case CypherParser.OctalInteger:case CypherParser.ExponentDecimalReal:case CypherParser.RegularDecimalReal:this.state=668;this.numberLiteral();break;default:throw new antlr4.error.NoViableAltException(this);}break;default:throw new antlr4.error.NoViableAltException(this);}this.state=673;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,45,this._ctx);}while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER);this.state=676;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.T__5){this.state=675;this.match(CypherParser.T__5);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function SubCommandContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_subCommand;return this;}SubCommandContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);SubCommandContext.prototype.constructor=SubCommandContext;SubCommandContext.prototype.symbolicName=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(SymbolicNameContext);}else{return this.getTypedRuleContext(SymbolicNameContext,i);}};SubCommandContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterSubCommand(this);}};SubCommandContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitSubCommand(this);}};CypherParser.SubCommandContext=SubCommandContext;CypherParser.prototype.subCommand=function(){var localctx=new SubCommandContext(this,this._ctx,this.state);this.enterRule(localctx,62,CypherParser.RULE_subCommand);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=678;this.symbolicName();this.state=683;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CypherParser.T__2){this.state=679;this.match(CypherParser.T__2);this.state=680;this.symbolicName();this.state=685;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CypherQueryContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_cypherQuery;return this;}CypherQueryContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CypherQueryContext.prototype.constructor=CypherQueryContext;CypherQueryContext.prototype.queryOptions=function(){return this.getTypedRuleContext(QueryOptionsContext,0);};CypherQueryContext.prototype.statement=function(){return this.getTypedRuleContext(StatementContext,0);};CypherQueryContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCypherQuery(this);}};CypherQueryContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCypherQuery(this);}};CypherParser.CypherQueryContext=CypherQueryContext;CypherParser.prototype.cypherQuery=function(){var localctx=new CypherQueryContext(this,this._ctx,this.state);this.enterRule(localctx,64,CypherParser.RULE_cypherQuery);try{this.enterOuterAlt(localctx,1);this.state=686;this.queryOptions();this.state=687;this.statement();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function QueryOptionsContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_queryOptions;return this;}QueryOptionsContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);QueryOptionsContext.prototype.constructor=QueryOptionsContext;QueryOptionsContext.prototype.anyCypherOption=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(AnyCypherOptionContext);}else{return this.getTypedRuleContext(AnyCypherOptionContext,i);}};QueryOptionsContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};QueryOptionsContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterQueryOptions(this);}};QueryOptionsContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitQueryOptions(this);}};CypherParser.QueryOptionsContext=QueryOptionsContext;CypherParser.prototype.queryOptions=function(){var localctx=new QueryOptionsContext(this,this._ctx,this.state);this.enterRule(localctx,66,CypherParser.RULE_queryOptions);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=695;this._errHandler.sync(this);_la=this._input.LA(1);while((_la-54&~0x1f)==0&&(1<<_la-54&(1<<CypherParser.CYPHER-54|1<<CypherParser.EXPLAIN-54|1<<CypherParser.PROFILE-54))!==0){this.state=689;this.anyCypherOption();this.state=691;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=690;this.match(CypherParser.SP);}this.state=697;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function AnyCypherOptionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_anyCypherOption;return this;}AnyCypherOptionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);AnyCypherOptionContext.prototype.constructor=AnyCypherOptionContext;AnyCypherOptionContext.prototype.cypherOption=function(){return this.getTypedRuleContext(CypherOptionContext,0);};AnyCypherOptionContext.prototype.explain=function(){return this.getTypedRuleContext(ExplainContext,0);};AnyCypherOptionContext.prototype.profile=function(){return this.getTypedRuleContext(ProfileContext,0);};AnyCypherOptionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterAnyCypherOption(this);}};AnyCypherOptionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitAnyCypherOption(this);}};CypherParser.AnyCypherOptionContext=AnyCypherOptionContext;CypherParser.prototype.anyCypherOption=function(){var localctx=new AnyCypherOptionContext(this,this._ctx,this.state);this.enterRule(localctx,68,CypherParser.RULE_anyCypherOption);try{this.state=701;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.CYPHER:this.enterOuterAlt(localctx,1);this.state=698;this.cypherOption();break;case CypherParser.EXPLAIN:this.enterOuterAlt(localctx,2);this.state=699;this.explain();break;case CypherParser.PROFILE:this.enterOuterAlt(localctx,3);this.state=700;this.profile();break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CypherOptionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_cypherOption;return this;}CypherOptionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CypherOptionContext.prototype.constructor=CypherOptionContext;CypherOptionContext.prototype.CYPHER=function(){return this.getToken(CypherParser.CYPHER,0);};CypherOptionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};CypherOptionContext.prototype.versionNumber=function(){return this.getTypedRuleContext(VersionNumberContext,0);};CypherOptionContext.prototype.configurationOption=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ConfigurationOptionContext);}else{return this.getTypedRuleContext(ConfigurationOptionContext,i);}};CypherOptionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCypherOption(this);}};CypherOptionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCypherOption(this);}};CypherParser.CypherOptionContext=CypherOptionContext;CypherParser.prototype.cypherOption=function(){var localctx=new CypherOptionContext(this,this._ctx,this.state);this.enterRule(localctx,70,CypherParser.RULE_cypherOption);try{this.enterOuterAlt(localctx,1);this.state=703;this.match(CypherParser.CYPHER);this.state=706;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,51,this._ctx);if(la_===1){this.state=704;this.match(CypherParser.SP);this.state=705;this.versionNumber();}this.state=712;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,52,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=708;this.match(CypherParser.SP);this.state=709;this.configurationOption();}this.state=714;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,52,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function VersionNumberContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_versionNumber;return this;}VersionNumberContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);VersionNumberContext.prototype.constructor=VersionNumberContext;VersionNumberContext.prototype.RegularDecimalReal=function(){return this.getToken(CypherParser.RegularDecimalReal,0);};VersionNumberContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterVersionNumber(this);}};VersionNumberContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitVersionNumber(this);}};CypherParser.VersionNumberContext=VersionNumberContext;CypherParser.prototype.versionNumber=function(){var localctx=new VersionNumberContext(this,this._ctx,this.state);this.enterRule(localctx,72,CypherParser.RULE_versionNumber);try{this.enterOuterAlt(localctx,1);this.state=715;this.match(CypherParser.RegularDecimalReal);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ExplainContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_explain;return this;}ExplainContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ExplainContext.prototype.constructor=ExplainContext;ExplainContext.prototype.EXPLAIN=function(){return this.getToken(CypherParser.EXPLAIN,0);};ExplainContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterExplain(this);}};ExplainContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitExplain(this);}};CypherParser.ExplainContext=ExplainContext;CypherParser.prototype.explain=function(){var localctx=new ExplainContext(this,this._ctx,this.state);this.enterRule(localctx,74,CypherParser.RULE_explain);try{this.enterOuterAlt(localctx,1);this.state=717;this.match(CypherParser.EXPLAIN);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ProfileContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_profile;return this;}ProfileContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ProfileContext.prototype.constructor=ProfileContext;ProfileContext.prototype.PROFILE=function(){return this.getToken(CypherParser.PROFILE,0);};ProfileContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterProfile(this);}};ProfileContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitProfile(this);}};CypherParser.ProfileContext=ProfileContext;CypherParser.prototype.profile=function(){var localctx=new ProfileContext(this,this._ctx,this.state);this.enterRule(localctx,76,CypherParser.RULE_profile);try{this.enterOuterAlt(localctx,1);this.state=719;this.match(CypherParser.PROFILE);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ConfigurationOptionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_configurationOption;return this;}ConfigurationOptionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ConfigurationOptionContext.prototype.constructor=ConfigurationOptionContext;ConfigurationOptionContext.prototype.symbolicName=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(SymbolicNameContext);}else{return this.getTypedRuleContext(SymbolicNameContext,i);}};ConfigurationOptionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};ConfigurationOptionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterConfigurationOption(this);}};ConfigurationOptionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitConfigurationOption(this);}};CypherParser.ConfigurationOptionContext=ConfigurationOptionContext;CypherParser.prototype.configurationOption=function(){var localctx=new ConfigurationOptionContext(this,this._ctx,this.state);this.enterRule(localctx,78,CypherParser.RULE_configurationOption);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=721;this.symbolicName();this.state=723;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=722;this.match(CypherParser.SP);}this.state=725;this.match(CypherParser.T__11);this.state=727;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=726;this.match(CypherParser.SP);}this.state=729;this.symbolicName();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function StatementContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_statement;return this;}StatementContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);StatementContext.prototype.constructor=StatementContext;StatementContext.prototype.command=function(){return this.getTypedRuleContext(CommandContext,0);};StatementContext.prototype.query=function(){return this.getTypedRuleContext(QueryContext,0);};StatementContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterStatement(this);}};StatementContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitStatement(this);}};CypherParser.StatementContext=StatementContext;CypherParser.prototype.statement=function(){var localctx=new StatementContext(this,this._ctx,this.state);this.enterRule(localctx,80,CypherParser.RULE_statement);try{this.state=733;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,55,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=731;this.command();break;case 2:this.enterOuterAlt(localctx,2);this.state=732;this.query();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function QueryContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_query;return this;}QueryContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);QueryContext.prototype.constructor=QueryContext;QueryContext.prototype.regularQuery=function(){return this.getTypedRuleContext(RegularQueryContext,0);};QueryContext.prototype.bulkImportQuery=function(){return this.getTypedRuleContext(BulkImportQueryContext,0);};QueryContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterQuery(this);}};QueryContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitQuery(this);}};CypherParser.QueryContext=QueryContext;CypherParser.prototype.query=function(){var localctx=new QueryContext(this,this._ctx,this.state);this.enterRule(localctx,82,CypherParser.RULE_query);try{this.state=737;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.CREATE:case CypherParser.LOAD:case CypherParser.WITH:case CypherParser.OPTIONAL:case CypherParser.MATCH:case CypherParser.UNWIND:case CypherParser.MERGE:case CypherParser.SET:case CypherParser.DETACH:case CypherParser.DELETE:case CypherParser.REMOVE:case CypherParser.FOREACH:case CypherParser.RETURN:case CypherParser.START:case CypherParser.CALL:this.enterOuterAlt(localctx,1);this.state=735;this.regularQuery();break;case CypherParser.USING:this.enterOuterAlt(localctx,2);this.state=736;this.bulkImportQuery();break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RegularQueryContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_regularQuery;return this;}RegularQueryContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RegularQueryContext.prototype.constructor=RegularQueryContext;RegularQueryContext.prototype.singleQuery=function(){return this.getTypedRuleContext(SingleQueryContext,0);};RegularQueryContext.prototype.union=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(UnionContext);}else{return this.getTypedRuleContext(UnionContext,i);}};RegularQueryContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};RegularQueryContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterRegularQuery(this);}};RegularQueryContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitRegularQuery(this);}};CypherParser.RegularQueryContext=RegularQueryContext;CypherParser.prototype.regularQuery=function(){var localctx=new RegularQueryContext(this,this._ctx,this.state);this.enterRule(localctx,84,CypherParser.RULE_regularQuery);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=739;this.singleQuery();this.state=746;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,58,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=741;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=740;this.match(CypherParser.SP);}this.state=743;this.union();}this.state=748;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,58,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function BulkImportQueryContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_bulkImportQuery;return this;}BulkImportQueryContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);BulkImportQueryContext.prototype.constructor=BulkImportQueryContext;BulkImportQueryContext.prototype.periodicCommitHint=function(){return this.getTypedRuleContext(PeriodicCommitHintContext,0);};BulkImportQueryContext.prototype.loadCSVQuery=function(){return this.getTypedRuleContext(LoadCSVQueryContext,0);};BulkImportQueryContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};BulkImportQueryContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterBulkImportQuery(this);}};BulkImportQueryContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitBulkImportQuery(this);}};CypherParser.BulkImportQueryContext=BulkImportQueryContext;CypherParser.prototype.bulkImportQuery=function(){var localctx=new BulkImportQueryContext(this,this._ctx,this.state);this.enterRule(localctx,86,CypherParser.RULE_bulkImportQuery);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=749;this.periodicCommitHint();this.state=751;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=750;this.match(CypherParser.SP);}this.state=753;this.loadCSVQuery();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function SingleQueryContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_singleQuery;return this;}SingleQueryContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);SingleQueryContext.prototype.constructor=SingleQueryContext;SingleQueryContext.prototype.clause=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ClauseContext);}else{return this.getTypedRuleContext(ClauseContext,i);}};SingleQueryContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};SingleQueryContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterSingleQuery(this);}};SingleQueryContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitSingleQuery(this);}};CypherParser.SingleQueryContext=SingleQueryContext;CypherParser.prototype.singleQuery=function(){var localctx=new SingleQueryContext(this,this._ctx,this.state);this.enterRule(localctx,88,CypherParser.RULE_singleQuery);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=755;this.clause();this.state=762;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,61,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=757;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=756;this.match(CypherParser.SP);}this.state=759;this.clause();}this.state=764;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,61,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PeriodicCommitHintContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_periodicCommitHint;return this;}PeriodicCommitHintContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PeriodicCommitHintContext.prototype.constructor=PeriodicCommitHintContext;PeriodicCommitHintContext.prototype.USING=function(){return this.getToken(CypherParser.USING,0);};PeriodicCommitHintContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};PeriodicCommitHintContext.prototype.PERIODIC=function(){return this.getToken(CypherParser.PERIODIC,0);};PeriodicCommitHintContext.prototype.COMMIT=function(){return this.getToken(CypherParser.COMMIT,0);};PeriodicCommitHintContext.prototype.integerLiteral=function(){return this.getTypedRuleContext(IntegerLiteralContext,0);};PeriodicCommitHintContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterPeriodicCommitHint(this);}};PeriodicCommitHintContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitPeriodicCommitHint(this);}};CypherParser.PeriodicCommitHintContext=PeriodicCommitHintContext;CypherParser.prototype.periodicCommitHint=function(){var localctx=new PeriodicCommitHintContext(this,this._ctx,this.state);this.enterRule(localctx,90,CypherParser.RULE_periodicCommitHint);try{this.enterOuterAlt(localctx,1);this.state=765;this.match(CypherParser.USING);this.state=766;this.match(CypherParser.SP);this.state=767;this.match(CypherParser.PERIODIC);this.state=768;this.match(CypherParser.SP);this.state=769;this.match(CypherParser.COMMIT);this.state=772;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,62,this._ctx);if(la_===1){this.state=770;this.match(CypherParser.SP);this.state=771;this.integerLiteral();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function LoadCSVQueryContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_loadCSVQuery;return this;}LoadCSVQueryContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);LoadCSVQueryContext.prototype.constructor=LoadCSVQueryContext;LoadCSVQueryContext.prototype.loadCSVClause=function(){return this.getTypedRuleContext(LoadCSVClauseContext,0);};LoadCSVQueryContext.prototype.clause=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ClauseContext);}else{return this.getTypedRuleContext(ClauseContext,i);}};LoadCSVQueryContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};LoadCSVQueryContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterLoadCSVQuery(this);}};LoadCSVQueryContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitLoadCSVQuery(this);}};CypherParser.LoadCSVQueryContext=LoadCSVQueryContext;CypherParser.prototype.loadCSVQuery=function(){var localctx=new LoadCSVQueryContext(this,this._ctx,this.state);this.enterRule(localctx,92,CypherParser.RULE_loadCSVQuery);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=774;this.loadCSVClause();this.state=781;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,64,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=776;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=775;this.match(CypherParser.SP);}this.state=778;this.clause();}this.state=783;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,64,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function UnionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_union;return this;}UnionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);UnionContext.prototype.constructor=UnionContext;UnionContext.prototype.UNION=function(){return this.getToken(CypherParser.UNION,0);};UnionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};UnionContext.prototype.ALL=function(){return this.getToken(CypherParser.ALL,0);};UnionContext.prototype.singleQuery=function(){return this.getTypedRuleContext(SingleQueryContext,0);};UnionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterUnion(this);}};UnionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitUnion(this);}};CypherParser.UnionContext=UnionContext;CypherParser.prototype.union=function(){var localctx=new UnionContext(this,this._ctx,this.state);this.enterRule(localctx,94,CypherParser.RULE_union);var _la=0;// Token type
try{this.state=796;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,67,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=784;this.match(CypherParser.UNION);this.state=785;this.match(CypherParser.SP);this.state=786;this.match(CypherParser.ALL);this.state=788;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=787;this.match(CypherParser.SP);}this.state=790;this.singleQuery();break;case 2:this.enterOuterAlt(localctx,2);this.state=791;this.match(CypherParser.UNION);this.state=793;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=792;this.match(CypherParser.SP);}this.state=795;this.singleQuery();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_clause;return this;}ClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ClauseContext.prototype.constructor=ClauseContext;ClauseContext.prototype.loadCSVClause=function(){return this.getTypedRuleContext(LoadCSVClauseContext,0);};ClauseContext.prototype.startClause=function(){return this.getTypedRuleContext(StartClauseContext,0);};ClauseContext.prototype.matchClause=function(){return this.getTypedRuleContext(MatchClauseContext,0);};ClauseContext.prototype.unwindClause=function(){return this.getTypedRuleContext(UnwindClauseContext,0);};ClauseContext.prototype.mergeClause=function(){return this.getTypedRuleContext(MergeClauseContext,0);};ClauseContext.prototype.createClause=function(){return this.getTypedRuleContext(CreateClauseContext,0);};ClauseContext.prototype.createUniqueClause=function(){return this.getTypedRuleContext(CreateUniqueClauseContext,0);};ClauseContext.prototype.setClause=function(){return this.getTypedRuleContext(SetClauseContext,0);};ClauseContext.prototype.deleteClause=function(){return this.getTypedRuleContext(DeleteClauseContext,0);};ClauseContext.prototype.removeClause=function(){return this.getTypedRuleContext(RemoveClauseContext,0);};ClauseContext.prototype.foreachClause=function(){return this.getTypedRuleContext(ForeachClauseContext,0);};ClauseContext.prototype.withClause=function(){return this.getTypedRuleContext(WithClauseContext,0);};ClauseContext.prototype.returnClause=function(){return this.getTypedRuleContext(ReturnClauseContext,0);};ClauseContext.prototype.call=function(){return this.getTypedRuleContext(CallContext,0);};ClauseContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterClause(this);}};ClauseContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitClause(this);}};CypherParser.ClauseContext=ClauseContext;CypherParser.prototype.clause=function(){var localctx=new ClauseContext(this,this._ctx,this.state);this.enterRule(localctx,96,CypherParser.RULE_clause);try{this.state=812;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,68,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=798;this.loadCSVClause();break;case 2:this.enterOuterAlt(localctx,2);this.state=799;this.startClause();break;case 3:this.enterOuterAlt(localctx,3);this.state=800;this.matchClause();break;case 4:this.enterOuterAlt(localctx,4);this.state=801;this.unwindClause();break;case 5:this.enterOuterAlt(localctx,5);this.state=802;this.mergeClause();break;case 6:this.enterOuterAlt(localctx,6);this.state=803;this.createClause();break;case 7:this.enterOuterAlt(localctx,7);this.state=804;this.createUniqueClause();break;case 8:this.enterOuterAlt(localctx,8);this.state=805;this.setClause();break;case 9:this.enterOuterAlt(localctx,9);this.state=806;this.deleteClause();break;case 10:this.enterOuterAlt(localctx,10);this.state=807;this.removeClause();break;case 11:this.enterOuterAlt(localctx,11);this.state=808;this.foreachClause();break;case 12:this.enterOuterAlt(localctx,12);this.state=809;this.withClause();break;case 13:this.enterOuterAlt(localctx,13);this.state=810;this.returnClause();break;case 14:this.enterOuterAlt(localctx,14);this.state=811;this.call();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CommandContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_command;return this;}CommandContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CommandContext.prototype.constructor=CommandContext;CommandContext.prototype.createIndex=function(){return this.getTypedRuleContext(CreateIndexContext,0);};CommandContext.prototype.dropIndex=function(){return this.getTypedRuleContext(DropIndexContext,0);};CommandContext.prototype.createUniqueConstraint=function(){return this.getTypedRuleContext(CreateUniqueConstraintContext,0);};CommandContext.prototype.dropUniqueConstraint=function(){return this.getTypedRuleContext(DropUniqueConstraintContext,0);};CommandContext.prototype.createNodeKeyConstraint=function(){return this.getTypedRuleContext(CreateNodeKeyConstraintContext,0);};CommandContext.prototype.dropNodeKeyConstraint=function(){return this.getTypedRuleContext(DropNodeKeyConstraintContext,0);};CommandContext.prototype.createNodePropertyExistenceConstraint=function(){return this.getTypedRuleContext(CreateNodePropertyExistenceConstraintContext,0);};CommandContext.prototype.dropNodePropertyExistenceConstraint=function(){return this.getTypedRuleContext(DropNodePropertyExistenceConstraintContext,0);};CommandContext.prototype.createRelationshipPropertyExistenceConstraint=function(){return this.getTypedRuleContext(CreateRelationshipPropertyExistenceConstraintContext,0);};CommandContext.prototype.dropRelationshipPropertyExistenceConstraint=function(){return this.getTypedRuleContext(DropRelationshipPropertyExistenceConstraintContext,0);};CommandContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCommand(this);}};CommandContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCommand(this);}};CypherParser.CommandContext=CommandContext;CypherParser.prototype.command=function(){var localctx=new CommandContext(this,this._ctx,this.state);this.enterRule(localctx,98,CypherParser.RULE_command);try{this.state=824;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,69,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=814;this.createIndex();break;case 2:this.enterOuterAlt(localctx,2);this.state=815;this.dropIndex();break;case 3:this.enterOuterAlt(localctx,3);this.state=816;this.createUniqueConstraint();break;case 4:this.enterOuterAlt(localctx,4);this.state=817;this.dropUniqueConstraint();break;case 5:this.enterOuterAlt(localctx,5);this.state=818;this.createNodeKeyConstraint();break;case 6:this.enterOuterAlt(localctx,6);this.state=819;this.dropNodeKeyConstraint();break;case 7:this.enterOuterAlt(localctx,7);this.state=820;this.createNodePropertyExistenceConstraint();break;case 8:this.enterOuterAlt(localctx,8);this.state=821;this.dropNodePropertyExistenceConstraint();break;case 9:this.enterOuterAlt(localctx,9);this.state=822;this.createRelationshipPropertyExistenceConstraint();break;case 10:this.enterOuterAlt(localctx,10);this.state=823;this.dropRelationshipPropertyExistenceConstraint();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CreateUniqueConstraintContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_createUniqueConstraint;return this;}CreateUniqueConstraintContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CreateUniqueConstraintContext.prototype.constructor=CreateUniqueConstraintContext;CreateUniqueConstraintContext.prototype.CREATE=function(){return this.getToken(CypherParser.CREATE,0);};CreateUniqueConstraintContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};CreateUniqueConstraintContext.prototype.uniqueConstraint=function(){return this.getTypedRuleContext(UniqueConstraintContext,0);};CreateUniqueConstraintContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCreateUniqueConstraint(this);}};CreateUniqueConstraintContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCreateUniqueConstraint(this);}};CypherParser.CreateUniqueConstraintContext=CreateUniqueConstraintContext;CypherParser.prototype.createUniqueConstraint=function(){var localctx=new CreateUniqueConstraintContext(this,this._ctx,this.state);this.enterRule(localctx,100,CypherParser.RULE_createUniqueConstraint);try{this.enterOuterAlt(localctx,1);this.state=826;this.match(CypherParser.CREATE);this.state=827;this.match(CypherParser.SP);this.state=828;this.uniqueConstraint();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CreateNodeKeyConstraintContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_createNodeKeyConstraint;return this;}CreateNodeKeyConstraintContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CreateNodeKeyConstraintContext.prototype.constructor=CreateNodeKeyConstraintContext;CreateNodeKeyConstraintContext.prototype.CREATE=function(){return this.getToken(CypherParser.CREATE,0);};CreateNodeKeyConstraintContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};CreateNodeKeyConstraintContext.prototype.nodeKeyConstraint=function(){return this.getTypedRuleContext(NodeKeyConstraintContext,0);};CreateNodeKeyConstraintContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCreateNodeKeyConstraint(this);}};CreateNodeKeyConstraintContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCreateNodeKeyConstraint(this);}};CypherParser.CreateNodeKeyConstraintContext=CreateNodeKeyConstraintContext;CypherParser.prototype.createNodeKeyConstraint=function(){var localctx=new CreateNodeKeyConstraintContext(this,this._ctx,this.state);this.enterRule(localctx,102,CypherParser.RULE_createNodeKeyConstraint);try{this.enterOuterAlt(localctx,1);this.state=830;this.match(CypherParser.CREATE);this.state=831;this.match(CypherParser.SP);this.state=832;this.nodeKeyConstraint();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CreateNodePropertyExistenceConstraintContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_createNodePropertyExistenceConstraint;return this;}CreateNodePropertyExistenceConstraintContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CreateNodePropertyExistenceConstraintContext.prototype.constructor=CreateNodePropertyExistenceConstraintContext;CreateNodePropertyExistenceConstraintContext.prototype.CREATE=function(){return this.getToken(CypherParser.CREATE,0);};CreateNodePropertyExistenceConstraintContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};CreateNodePropertyExistenceConstraintContext.prototype.nodePropertyExistenceConstraint=function(){return this.getTypedRuleContext(NodePropertyExistenceConstraintContext,0);};CreateNodePropertyExistenceConstraintContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCreateNodePropertyExistenceConstraint(this);}};CreateNodePropertyExistenceConstraintContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCreateNodePropertyExistenceConstraint(this);}};CypherParser.CreateNodePropertyExistenceConstraintContext=CreateNodePropertyExistenceConstraintContext;CypherParser.prototype.createNodePropertyExistenceConstraint=function(){var localctx=new CreateNodePropertyExistenceConstraintContext(this,this._ctx,this.state);this.enterRule(localctx,104,CypherParser.RULE_createNodePropertyExistenceConstraint);try{this.enterOuterAlt(localctx,1);this.state=834;this.match(CypherParser.CREATE);this.state=835;this.match(CypherParser.SP);this.state=836;this.nodePropertyExistenceConstraint();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CreateRelationshipPropertyExistenceConstraintContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_createRelationshipPropertyExistenceConstraint;return this;}CreateRelationshipPropertyExistenceConstraintContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CreateRelationshipPropertyExistenceConstraintContext.prototype.constructor=CreateRelationshipPropertyExistenceConstraintContext;CreateRelationshipPropertyExistenceConstraintContext.prototype.CREATE=function(){return this.getToken(CypherParser.CREATE,0);};CreateRelationshipPropertyExistenceConstraintContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};CreateRelationshipPropertyExistenceConstraintContext.prototype.relationshipPropertyExistenceConstraint=function(){return this.getTypedRuleContext(RelationshipPropertyExistenceConstraintContext,0);};CreateRelationshipPropertyExistenceConstraintContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCreateRelationshipPropertyExistenceConstraint(this);}};CreateRelationshipPropertyExistenceConstraintContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCreateRelationshipPropertyExistenceConstraint(this);}};CypherParser.CreateRelationshipPropertyExistenceConstraintContext=CreateRelationshipPropertyExistenceConstraintContext;CypherParser.prototype.createRelationshipPropertyExistenceConstraint=function(){var localctx=new CreateRelationshipPropertyExistenceConstraintContext(this,this._ctx,this.state);this.enterRule(localctx,106,CypherParser.RULE_createRelationshipPropertyExistenceConstraint);try{this.enterOuterAlt(localctx,1);this.state=838;this.match(CypherParser.CREATE);this.state=839;this.match(CypherParser.SP);this.state=840;this.relationshipPropertyExistenceConstraint();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CreateIndexContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_createIndex;return this;}CreateIndexContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CreateIndexContext.prototype.constructor=CreateIndexContext;CreateIndexContext.prototype.CREATE=function(){return this.getToken(CypherParser.CREATE,0);};CreateIndexContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};CreateIndexContext.prototype.index=function(){return this.getTypedRuleContext(IndexContext,0);};CreateIndexContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCreateIndex(this);}};CreateIndexContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCreateIndex(this);}};CypherParser.CreateIndexContext=CreateIndexContext;CypherParser.prototype.createIndex=function(){var localctx=new CreateIndexContext(this,this._ctx,this.state);this.enterRule(localctx,108,CypherParser.RULE_createIndex);try{this.enterOuterAlt(localctx,1);this.state=842;this.match(CypherParser.CREATE);this.state=843;this.match(CypherParser.SP);this.state=844;this.index();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function DropUniqueConstraintContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_dropUniqueConstraint;return this;}DropUniqueConstraintContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);DropUniqueConstraintContext.prototype.constructor=DropUniqueConstraintContext;DropUniqueConstraintContext.prototype.DROP=function(){return this.getToken(CypherParser.DROP,0);};DropUniqueConstraintContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};DropUniqueConstraintContext.prototype.uniqueConstraint=function(){return this.getTypedRuleContext(UniqueConstraintContext,0);};DropUniqueConstraintContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterDropUniqueConstraint(this);}};DropUniqueConstraintContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitDropUniqueConstraint(this);}};CypherParser.DropUniqueConstraintContext=DropUniqueConstraintContext;CypherParser.prototype.dropUniqueConstraint=function(){var localctx=new DropUniqueConstraintContext(this,this._ctx,this.state);this.enterRule(localctx,110,CypherParser.RULE_dropUniqueConstraint);try{this.enterOuterAlt(localctx,1);this.state=846;this.match(CypherParser.DROP);this.state=847;this.match(CypherParser.SP);this.state=848;this.uniqueConstraint();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function DropNodeKeyConstraintContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_dropNodeKeyConstraint;return this;}DropNodeKeyConstraintContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);DropNodeKeyConstraintContext.prototype.constructor=DropNodeKeyConstraintContext;DropNodeKeyConstraintContext.prototype.DROP=function(){return this.getToken(CypherParser.DROP,0);};DropNodeKeyConstraintContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};DropNodeKeyConstraintContext.prototype.nodeKeyConstraint=function(){return this.getTypedRuleContext(NodeKeyConstraintContext,0);};DropNodeKeyConstraintContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterDropNodeKeyConstraint(this);}};DropNodeKeyConstraintContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitDropNodeKeyConstraint(this);}};CypherParser.DropNodeKeyConstraintContext=DropNodeKeyConstraintContext;CypherParser.prototype.dropNodeKeyConstraint=function(){var localctx=new DropNodeKeyConstraintContext(this,this._ctx,this.state);this.enterRule(localctx,112,CypherParser.RULE_dropNodeKeyConstraint);try{this.enterOuterAlt(localctx,1);this.state=850;this.match(CypherParser.DROP);this.state=851;this.match(CypherParser.SP);this.state=852;this.nodeKeyConstraint();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function DropNodePropertyExistenceConstraintContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_dropNodePropertyExistenceConstraint;return this;}DropNodePropertyExistenceConstraintContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);DropNodePropertyExistenceConstraintContext.prototype.constructor=DropNodePropertyExistenceConstraintContext;DropNodePropertyExistenceConstraintContext.prototype.DROP=function(){return this.getToken(CypherParser.DROP,0);};DropNodePropertyExistenceConstraintContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};DropNodePropertyExistenceConstraintContext.prototype.nodePropertyExistenceConstraint=function(){return this.getTypedRuleContext(NodePropertyExistenceConstraintContext,0);};DropNodePropertyExistenceConstraintContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterDropNodePropertyExistenceConstraint(this);}};DropNodePropertyExistenceConstraintContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitDropNodePropertyExistenceConstraint(this);}};CypherParser.DropNodePropertyExistenceConstraintContext=DropNodePropertyExistenceConstraintContext;CypherParser.prototype.dropNodePropertyExistenceConstraint=function(){var localctx=new DropNodePropertyExistenceConstraintContext(this,this._ctx,this.state);this.enterRule(localctx,114,CypherParser.RULE_dropNodePropertyExistenceConstraint);try{this.enterOuterAlt(localctx,1);this.state=854;this.match(CypherParser.DROP);this.state=855;this.match(CypherParser.SP);this.state=856;this.nodePropertyExistenceConstraint();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function DropRelationshipPropertyExistenceConstraintContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_dropRelationshipPropertyExistenceConstraint;return this;}DropRelationshipPropertyExistenceConstraintContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);DropRelationshipPropertyExistenceConstraintContext.prototype.constructor=DropRelationshipPropertyExistenceConstraintContext;DropRelationshipPropertyExistenceConstraintContext.prototype.DROP=function(){return this.getToken(CypherParser.DROP,0);};DropRelationshipPropertyExistenceConstraintContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};DropRelationshipPropertyExistenceConstraintContext.prototype.relationshipPropertyExistenceConstraint=function(){return this.getTypedRuleContext(RelationshipPropertyExistenceConstraintContext,0);};DropRelationshipPropertyExistenceConstraintContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterDropRelationshipPropertyExistenceConstraint(this);}};DropRelationshipPropertyExistenceConstraintContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitDropRelationshipPropertyExistenceConstraint(this);}};CypherParser.DropRelationshipPropertyExistenceConstraintContext=DropRelationshipPropertyExistenceConstraintContext;CypherParser.prototype.dropRelationshipPropertyExistenceConstraint=function(){var localctx=new DropRelationshipPropertyExistenceConstraintContext(this,this._ctx,this.state);this.enterRule(localctx,116,CypherParser.RULE_dropRelationshipPropertyExistenceConstraint);try{this.enterOuterAlt(localctx,1);this.state=858;this.match(CypherParser.DROP);this.state=859;this.match(CypherParser.SP);this.state=860;this.relationshipPropertyExistenceConstraint();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function DropIndexContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_dropIndex;return this;}DropIndexContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);DropIndexContext.prototype.constructor=DropIndexContext;DropIndexContext.prototype.DROP=function(){return this.getToken(CypherParser.DROP,0);};DropIndexContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};DropIndexContext.prototype.index=function(){return this.getTypedRuleContext(IndexContext,0);};DropIndexContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterDropIndex(this);}};DropIndexContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitDropIndex(this);}};CypherParser.DropIndexContext=DropIndexContext;CypherParser.prototype.dropIndex=function(){var localctx=new DropIndexContext(this,this._ctx,this.state);this.enterRule(localctx,118,CypherParser.RULE_dropIndex);try{this.enterOuterAlt(localctx,1);this.state=862;this.match(CypherParser.DROP);this.state=863;this.match(CypherParser.SP);this.state=864;this.index();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function IndexContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_index;return this;}IndexContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);IndexContext.prototype.constructor=IndexContext;IndexContext.prototype.INDEX=function(){return this.getToken(CypherParser.INDEX,0);};IndexContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};IndexContext.prototype.ON=function(){return this.getToken(CypherParser.ON,0);};IndexContext.prototype.nodeLabel=function(){return this.getTypedRuleContext(NodeLabelContext,0);};IndexContext.prototype.propertyKeys=function(){return this.getTypedRuleContext(PropertyKeysContext,0);};IndexContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterIndex(this);}};IndexContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitIndex(this);}};CypherParser.IndexContext=IndexContext;CypherParser.prototype.index=function(){var localctx=new IndexContext(this,this._ctx,this.state);this.enterRule(localctx,120,CypherParser.RULE_index);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=866;this.match(CypherParser.INDEX);this.state=867;this.match(CypherParser.SP);this.state=868;this.match(CypherParser.ON);this.state=870;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=869;this.match(CypherParser.SP);}this.state=872;this.nodeLabel();this.state=874;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=873;this.match(CypherParser.SP);}this.state=876;this.match(CypherParser.T__18);this.state=878;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=877;this.match(CypherParser.SP);}this.state=880;this.propertyKeys();this.state=882;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=881;this.match(CypherParser.SP);}this.state=884;this.match(CypherParser.T__19);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function UniqueConstraintContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_uniqueConstraint;return this;}UniqueConstraintContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);UniqueConstraintContext.prototype.constructor=UniqueConstraintContext;UniqueConstraintContext.prototype.CONSTRAINT=function(){return this.getToken(CypherParser.CONSTRAINT,0);};UniqueConstraintContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};UniqueConstraintContext.prototype.ON=function(){return this.getToken(CypherParser.ON,0);};UniqueConstraintContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};UniqueConstraintContext.prototype.nodeLabel=function(){return this.getTypedRuleContext(NodeLabelContext,0);};UniqueConstraintContext.prototype.ASSERT=function(){return this.getToken(CypherParser.ASSERT,0);};UniqueConstraintContext.prototype.propertyExpression=function(){return this.getTypedRuleContext(PropertyExpressionContext,0);};UniqueConstraintContext.prototype.IS=function(){return this.getToken(CypherParser.IS,0);};UniqueConstraintContext.prototype.UNIQUE=function(){return this.getToken(CypherParser.UNIQUE,0);};UniqueConstraintContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterUniqueConstraint(this);}};UniqueConstraintContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitUniqueConstraint(this);}};CypherParser.UniqueConstraintContext=UniqueConstraintContext;CypherParser.prototype.uniqueConstraint=function(){var localctx=new UniqueConstraintContext(this,this._ctx,this.state);this.enterRule(localctx,122,CypherParser.RULE_uniqueConstraint);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=886;this.match(CypherParser.CONSTRAINT);this.state=887;this.match(CypherParser.SP);this.state=888;this.match(CypherParser.ON);this.state=890;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=889;this.match(CypherParser.SP);}this.state=892;this.match(CypherParser.T__18);this.state=894;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=893;this.match(CypherParser.SP);}this.state=896;this.variable();this.state=897;this.nodeLabel();this.state=899;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=898;this.match(CypherParser.SP);}this.state=901;this.match(CypherParser.T__19);this.state=903;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=902;this.match(CypherParser.SP);}this.state=905;this.match(CypherParser.ASSERT);this.state=906;this.match(CypherParser.SP);this.state=907;this.propertyExpression();this.state=908;this.match(CypherParser.SP);this.state=909;this.match(CypherParser.IS);this.state=910;this.match(CypherParser.SP);this.state=911;this.match(CypherParser.UNIQUE);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function NodeKeyConstraintContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_nodeKeyConstraint;return this;}NodeKeyConstraintContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);NodeKeyConstraintContext.prototype.constructor=NodeKeyConstraintContext;NodeKeyConstraintContext.prototype.CONSTRAINT=function(){return this.getToken(CypherParser.CONSTRAINT,0);};NodeKeyConstraintContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};NodeKeyConstraintContext.prototype.ON=function(){return this.getToken(CypherParser.ON,0);};NodeKeyConstraintContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};NodeKeyConstraintContext.prototype.nodeLabel=function(){return this.getTypedRuleContext(NodeLabelContext,0);};NodeKeyConstraintContext.prototype.ASSERT=function(){return this.getToken(CypherParser.ASSERT,0);};NodeKeyConstraintContext.prototype.propertyExpressions=function(){return this.getTypedRuleContext(PropertyExpressionsContext,0);};NodeKeyConstraintContext.prototype.IS=function(){return this.getToken(CypherParser.IS,0);};NodeKeyConstraintContext.prototype.NODE=function(){return this.getToken(CypherParser.NODE,0);};NodeKeyConstraintContext.prototype.KEY=function(){return this.getToken(CypherParser.KEY,0);};NodeKeyConstraintContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterNodeKeyConstraint(this);}};NodeKeyConstraintContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitNodeKeyConstraint(this);}};CypherParser.NodeKeyConstraintContext=NodeKeyConstraintContext;CypherParser.prototype.nodeKeyConstraint=function(){var localctx=new NodeKeyConstraintContext(this,this._ctx,this.state);this.enterRule(localctx,124,CypherParser.RULE_nodeKeyConstraint);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=913;this.match(CypherParser.CONSTRAINT);this.state=914;this.match(CypherParser.SP);this.state=915;this.match(CypherParser.ON);this.state=917;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=916;this.match(CypherParser.SP);}this.state=919;this.match(CypherParser.T__18);this.state=921;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=920;this.match(CypherParser.SP);}this.state=923;this.variable();this.state=924;this.nodeLabel();this.state=926;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=925;this.match(CypherParser.SP);}this.state=928;this.match(CypherParser.T__19);this.state=930;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=929;this.match(CypherParser.SP);}this.state=932;this.match(CypherParser.ASSERT);this.state=933;this.match(CypherParser.SP);this.state=934;this.match(CypherParser.T__18);this.state=936;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=935;this.match(CypherParser.SP);}this.state=938;this.propertyExpressions();this.state=940;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=939;this.match(CypherParser.SP);}this.state=942;this.match(CypherParser.T__19);this.state=943;this.match(CypherParser.SP);this.state=944;this.match(CypherParser.IS);this.state=945;this.match(CypherParser.SP);this.state=946;this.match(CypherParser.NODE);this.state=947;this.match(CypherParser.SP);this.state=948;this.match(CypherParser.KEY);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function NodePropertyExistenceConstraintContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_nodePropertyExistenceConstraint;return this;}NodePropertyExistenceConstraintContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);NodePropertyExistenceConstraintContext.prototype.constructor=NodePropertyExistenceConstraintContext;NodePropertyExistenceConstraintContext.prototype.CONSTRAINT=function(){return this.getToken(CypherParser.CONSTRAINT,0);};NodePropertyExistenceConstraintContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};NodePropertyExistenceConstraintContext.prototype.ON=function(){return this.getToken(CypherParser.ON,0);};NodePropertyExistenceConstraintContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};NodePropertyExistenceConstraintContext.prototype.nodeLabel=function(){return this.getTypedRuleContext(NodeLabelContext,0);};NodePropertyExistenceConstraintContext.prototype.ASSERT=function(){return this.getToken(CypherParser.ASSERT,0);};NodePropertyExistenceConstraintContext.prototype.EXISTS=function(){return this.getToken(CypherParser.EXISTS,0);};NodePropertyExistenceConstraintContext.prototype.propertyExpression=function(){return this.getTypedRuleContext(PropertyExpressionContext,0);};NodePropertyExistenceConstraintContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterNodePropertyExistenceConstraint(this);}};NodePropertyExistenceConstraintContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitNodePropertyExistenceConstraint(this);}};CypherParser.NodePropertyExistenceConstraintContext=NodePropertyExistenceConstraintContext;CypherParser.prototype.nodePropertyExistenceConstraint=function(){var localctx=new NodePropertyExistenceConstraintContext(this,this._ctx,this.state);this.enterRule(localctx,126,CypherParser.RULE_nodePropertyExistenceConstraint);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=950;this.match(CypherParser.CONSTRAINT);this.state=951;this.match(CypherParser.SP);this.state=952;this.match(CypherParser.ON);this.state=954;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=953;this.match(CypherParser.SP);}this.state=956;this.match(CypherParser.T__18);this.state=957;this.variable();this.state=958;this.nodeLabel();this.state=959;this.match(CypherParser.T__19);this.state=961;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=960;this.match(CypherParser.SP);}this.state=963;this.match(CypherParser.ASSERT);this.state=964;this.match(CypherParser.SP);this.state=965;this.match(CypherParser.EXISTS);this.state=967;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=966;this.match(CypherParser.SP);}this.state=969;this.match(CypherParser.T__18);this.state=970;this.propertyExpression();this.state=971;this.match(CypherParser.T__19);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RelationshipPropertyExistenceConstraintContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_relationshipPropertyExistenceConstraint;return this;}RelationshipPropertyExistenceConstraintContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RelationshipPropertyExistenceConstraintContext.prototype.constructor=RelationshipPropertyExistenceConstraintContext;RelationshipPropertyExistenceConstraintContext.prototype.CONSTRAINT=function(){return this.getToken(CypherParser.CONSTRAINT,0);};RelationshipPropertyExistenceConstraintContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};RelationshipPropertyExistenceConstraintContext.prototype.ON=function(){return this.getToken(CypherParser.ON,0);};RelationshipPropertyExistenceConstraintContext.prototype.relationshipPatternSyntax=function(){return this.getTypedRuleContext(RelationshipPatternSyntaxContext,0);};RelationshipPropertyExistenceConstraintContext.prototype.ASSERT=function(){return this.getToken(CypherParser.ASSERT,0);};RelationshipPropertyExistenceConstraintContext.prototype.EXISTS=function(){return this.getToken(CypherParser.EXISTS,0);};RelationshipPropertyExistenceConstraintContext.prototype.propertyExpression=function(){return this.getTypedRuleContext(PropertyExpressionContext,0);};RelationshipPropertyExistenceConstraintContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterRelationshipPropertyExistenceConstraint(this);}};RelationshipPropertyExistenceConstraintContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitRelationshipPropertyExistenceConstraint(this);}};CypherParser.RelationshipPropertyExistenceConstraintContext=RelationshipPropertyExistenceConstraintContext;CypherParser.prototype.relationshipPropertyExistenceConstraint=function(){var localctx=new RelationshipPropertyExistenceConstraintContext(this,this._ctx,this.state);this.enterRule(localctx,128,CypherParser.RULE_relationshipPropertyExistenceConstraint);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=973;this.match(CypherParser.CONSTRAINT);this.state=974;this.match(CypherParser.SP);this.state=975;this.match(CypherParser.ON);this.state=977;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=976;this.match(CypherParser.SP);}this.state=979;this.relationshipPatternSyntax();this.state=981;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=980;this.match(CypherParser.SP);}this.state=983;this.match(CypherParser.ASSERT);this.state=984;this.match(CypherParser.SP);this.state=985;this.match(CypherParser.EXISTS);this.state=987;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=986;this.match(CypherParser.SP);}this.state=989;this.match(CypherParser.T__18);this.state=990;this.propertyExpression();this.state=991;this.match(CypherParser.T__19);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RelationshipPatternSyntaxContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_relationshipPatternSyntax;return this;}RelationshipPatternSyntaxContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RelationshipPatternSyntaxContext.prototype.constructor=RelationshipPatternSyntaxContext;RelationshipPatternSyntaxContext.prototype.dash=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(DashContext);}else{return this.getTypedRuleContext(DashContext,i);}};RelationshipPatternSyntaxContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};RelationshipPatternSyntaxContext.prototype.relType=function(){return this.getTypedRuleContext(RelTypeContext,0);};RelationshipPatternSyntaxContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};RelationshipPatternSyntaxContext.prototype.rightArrowHead=function(){return this.getTypedRuleContext(RightArrowHeadContext,0);};RelationshipPatternSyntaxContext.prototype.leftArrowHead=function(){return this.getTypedRuleContext(LeftArrowHeadContext,0);};RelationshipPatternSyntaxContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterRelationshipPatternSyntax(this);}};RelationshipPatternSyntaxContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitRelationshipPatternSyntax(this);}};CypherParser.RelationshipPatternSyntaxContext=RelationshipPatternSyntaxContext;CypherParser.prototype.relationshipPatternSyntax=function(){var localctx=new RelationshipPatternSyntaxContext(this,this._ctx,this.state);this.enterRule(localctx,130,CypherParser.RULE_relationshipPatternSyntax);var _la=0;// Token type
try{this.state=1046;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,96,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=993;this.match(CypherParser.T__18);this.state=995;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=994;this.match(CypherParser.SP);}this.state=997;this.match(CypherParser.T__19);this.state=998;this.dash();this.state=999;this.match(CypherParser.T__16);this.state=1000;this.variable();this.state=1001;this.relType();this.state=1002;this.match(CypherParser.T__17);this.state=1003;this.dash();this.state=1004;this.match(CypherParser.T__18);this.state=1006;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1005;this.match(CypherParser.SP);}this.state=1008;this.match(CypherParser.T__19);break;case 2:this.enterOuterAlt(localctx,2);this.state=1010;this.match(CypherParser.T__18);this.state=1012;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1011;this.match(CypherParser.SP);}this.state=1014;this.match(CypherParser.T__19);this.state=1015;this.dash();this.state=1016;this.match(CypherParser.T__16);this.state=1017;this.variable();this.state=1018;this.relType();this.state=1019;this.match(CypherParser.T__17);this.state=1020;this.dash();this.state=1021;this.rightArrowHead();this.state=1022;this.match(CypherParser.T__18);this.state=1024;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1023;this.match(CypherParser.SP);}this.state=1026;this.match(CypherParser.T__19);break;case 3:this.enterOuterAlt(localctx,3);this.state=1028;this.match(CypherParser.T__18);this.state=1030;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1029;this.match(CypherParser.SP);}this.state=1032;this.match(CypherParser.T__19);this.state=1033;this.leftArrowHead();this.state=1034;this.dash();this.state=1035;this.match(CypherParser.T__16);this.state=1036;this.variable();this.state=1037;this.relType();this.state=1038;this.match(CypherParser.T__17);this.state=1039;this.dash();this.state=1040;this.match(CypherParser.T__18);this.state=1042;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1041;this.match(CypherParser.SP);}this.state=1044;this.match(CypherParser.T__19);break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function LoadCSVClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_loadCSVClause;return this;}LoadCSVClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);LoadCSVClauseContext.prototype.constructor=LoadCSVClauseContext;LoadCSVClauseContext.prototype.LOAD=function(){return this.getToken(CypherParser.LOAD,0);};LoadCSVClauseContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};LoadCSVClauseContext.prototype.CSV=function(){return this.getToken(CypherParser.CSV,0);};LoadCSVClauseContext.prototype.FROM=function(){return this.getToken(CypherParser.FROM,0);};LoadCSVClauseContext.prototype.expression=function(){return this.getTypedRuleContext(ExpressionContext,0);};LoadCSVClauseContext.prototype.AS=function(){return this.getToken(CypherParser.AS,0);};LoadCSVClauseContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};LoadCSVClauseContext.prototype.WITH=function(){return this.getToken(CypherParser.WITH,0);};LoadCSVClauseContext.prototype.HEADERS=function(){return this.getToken(CypherParser.HEADERS,0);};LoadCSVClauseContext.prototype.FIELDTERMINATOR=function(){return this.getToken(CypherParser.FIELDTERMINATOR,0);};LoadCSVClauseContext.prototype.StringLiteral=function(){return this.getToken(CypherParser.StringLiteral,0);};LoadCSVClauseContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterLoadCSVClause(this);}};LoadCSVClauseContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitLoadCSVClause(this);}};CypherParser.LoadCSVClauseContext=LoadCSVClauseContext;CypherParser.prototype.loadCSVClause=function(){var localctx=new LoadCSVClauseContext(this,this._ctx,this.state);this.enterRule(localctx,132,CypherParser.RULE_loadCSVClause);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1048;this.match(CypherParser.LOAD);this.state=1049;this.match(CypherParser.SP);this.state=1050;this.match(CypherParser.CSV);this.state=1051;this.match(CypherParser.SP);this.state=1056;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.WITH){this.state=1052;this.match(CypherParser.WITH);this.state=1053;this.match(CypherParser.SP);this.state=1054;this.match(CypherParser.HEADERS);this.state=1055;this.match(CypherParser.SP);}this.state=1058;this.match(CypherParser.FROM);this.state=1059;this.match(CypherParser.SP);this.state=1060;this.expression();this.state=1061;this.match(CypherParser.SP);this.state=1062;this.match(CypherParser.AS);this.state=1063;this.match(CypherParser.SP);this.state=1064;this.variable();this.state=1065;this.match(CypherParser.SP);this.state=1069;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.FIELDTERMINATOR){this.state=1066;this.match(CypherParser.FIELDTERMINATOR);this.state=1067;this.match(CypherParser.SP);this.state=1068;this.match(CypherParser.StringLiteral);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function MatchClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_matchClause;return this;}MatchClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);MatchClauseContext.prototype.constructor=MatchClauseContext;MatchClauseContext.prototype.MATCH=function(){return this.getToken(CypherParser.MATCH,0);};MatchClauseContext.prototype.pattern=function(){return this.getTypedRuleContext(PatternContext,0);};MatchClauseContext.prototype.OPTIONAL=function(){return this.getToken(CypherParser.OPTIONAL,0);};MatchClauseContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};MatchClauseContext.prototype.hint=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(HintContext);}else{return this.getTypedRuleContext(HintContext,i);}};MatchClauseContext.prototype.where=function(){return this.getTypedRuleContext(WhereContext,0);};MatchClauseContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterMatchClause(this);}};MatchClauseContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitMatchClause(this);}};CypherParser.MatchClauseContext=MatchClauseContext;CypherParser.prototype.matchClause=function(){var localctx=new MatchClauseContext(this,this._ctx,this.state);this.enterRule(localctx,134,CypherParser.RULE_matchClause);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1073;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.OPTIONAL){this.state=1071;this.match(CypherParser.OPTIONAL);this.state=1072;this.match(CypherParser.SP);}this.state=1075;this.match(CypherParser.MATCH);this.state=1077;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1076;this.match(CypherParser.SP);}this.state=1079;this.pattern();this.state=1083;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,101,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1080;this.hint();}this.state=1085;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,101,this._ctx);}this.state=1090;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,103,this._ctx);if(la_===1){this.state=1087;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1086;this.match(CypherParser.SP);}this.state=1089;this.where();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function UnwindClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_unwindClause;return this;}UnwindClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);UnwindClauseContext.prototype.constructor=UnwindClauseContext;UnwindClauseContext.prototype.UNWIND=function(){return this.getToken(CypherParser.UNWIND,0);};UnwindClauseContext.prototype.expression=function(){return this.getTypedRuleContext(ExpressionContext,0);};UnwindClauseContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};UnwindClauseContext.prototype.AS=function(){return this.getToken(CypherParser.AS,0);};UnwindClauseContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};UnwindClauseContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterUnwindClause(this);}};UnwindClauseContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitUnwindClause(this);}};CypherParser.UnwindClauseContext=UnwindClauseContext;CypherParser.prototype.unwindClause=function(){var localctx=new UnwindClauseContext(this,this._ctx,this.state);this.enterRule(localctx,136,CypherParser.RULE_unwindClause);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1092;this.match(CypherParser.UNWIND);this.state=1094;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1093;this.match(CypherParser.SP);}this.state=1096;this.expression();this.state=1097;this.match(CypherParser.SP);this.state=1098;this.match(CypherParser.AS);this.state=1099;this.match(CypherParser.SP);this.state=1100;this.variable();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function MergeClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_mergeClause;return this;}MergeClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);MergeClauseContext.prototype.constructor=MergeClauseContext;MergeClauseContext.prototype.MERGE=function(){return this.getToken(CypherParser.MERGE,0);};MergeClauseContext.prototype.patternPart=function(){return this.getTypedRuleContext(PatternPartContext,0);};MergeClauseContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};MergeClauseContext.prototype.mergeAction=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(MergeActionContext);}else{return this.getTypedRuleContext(MergeActionContext,i);}};MergeClauseContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterMergeClause(this);}};MergeClauseContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitMergeClause(this);}};CypherParser.MergeClauseContext=MergeClauseContext;CypherParser.prototype.mergeClause=function(){var localctx=new MergeClauseContext(this,this._ctx,this.state);this.enterRule(localctx,138,CypherParser.RULE_mergeClause);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1102;this.match(CypherParser.MERGE);this.state=1104;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1103;this.match(CypherParser.SP);}this.state=1106;this.patternPart();this.state=1111;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,106,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1107;this.match(CypherParser.SP);this.state=1108;this.mergeAction();}this.state=1113;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,106,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function MergeActionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_mergeAction;return this;}MergeActionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);MergeActionContext.prototype.constructor=MergeActionContext;MergeActionContext.prototype.ON=function(){return this.getToken(CypherParser.ON,0);};MergeActionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};MergeActionContext.prototype.MATCH=function(){return this.getToken(CypherParser.MATCH,0);};MergeActionContext.prototype.setClause=function(){return this.getTypedRuleContext(SetClauseContext,0);};MergeActionContext.prototype.CREATE=function(){return this.getToken(CypherParser.CREATE,0);};MergeActionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterMergeAction(this);}};MergeActionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitMergeAction(this);}};CypherParser.MergeActionContext=MergeActionContext;CypherParser.prototype.mergeAction=function(){var localctx=new MergeActionContext(this,this._ctx,this.state);this.enterRule(localctx,140,CypherParser.RULE_mergeAction);try{this.state=1124;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,107,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1114;this.match(CypherParser.ON);this.state=1115;this.match(CypherParser.SP);this.state=1116;this.match(CypherParser.MATCH);this.state=1117;this.match(CypherParser.SP);this.state=1118;this.setClause();break;case 2:this.enterOuterAlt(localctx,2);this.state=1119;this.match(CypherParser.ON);this.state=1120;this.match(CypherParser.SP);this.state=1121;this.match(CypherParser.CREATE);this.state=1122;this.match(CypherParser.SP);this.state=1123;this.setClause();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CreateClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_createClause;return this;}CreateClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CreateClauseContext.prototype.constructor=CreateClauseContext;CreateClauseContext.prototype.CREATE=function(){return this.getToken(CypherParser.CREATE,0);};CreateClauseContext.prototype.pattern=function(){return this.getTypedRuleContext(PatternContext,0);};CreateClauseContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};CreateClauseContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCreateClause(this);}};CreateClauseContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCreateClause(this);}};CypherParser.CreateClauseContext=CreateClauseContext;CypherParser.prototype.createClause=function(){var localctx=new CreateClauseContext(this,this._ctx,this.state);this.enterRule(localctx,142,CypherParser.RULE_createClause);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1126;this.match(CypherParser.CREATE);this.state=1128;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1127;this.match(CypherParser.SP);}this.state=1130;this.pattern();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CreateUniqueClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_createUniqueClause;return this;}CreateUniqueClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CreateUniqueClauseContext.prototype.constructor=CreateUniqueClauseContext;CreateUniqueClauseContext.prototype.CREATE=function(){return this.getToken(CypherParser.CREATE,0);};CreateUniqueClauseContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};CreateUniqueClauseContext.prototype.UNIQUE=function(){return this.getToken(CypherParser.UNIQUE,0);};CreateUniqueClauseContext.prototype.pattern=function(){return this.getTypedRuleContext(PatternContext,0);};CreateUniqueClauseContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCreateUniqueClause(this);}};CreateUniqueClauseContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCreateUniqueClause(this);}};CypherParser.CreateUniqueClauseContext=CreateUniqueClauseContext;CypherParser.prototype.createUniqueClause=function(){var localctx=new CreateUniqueClauseContext(this,this._ctx,this.state);this.enterRule(localctx,144,CypherParser.RULE_createUniqueClause);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1132;this.match(CypherParser.CREATE);this.state=1133;this.match(CypherParser.SP);this.state=1134;this.match(CypherParser.UNIQUE);this.state=1136;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1135;this.match(CypherParser.SP);}this.state=1138;this.pattern();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function SetClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_setClause;return this;}SetClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);SetClauseContext.prototype.constructor=SetClauseContext;SetClauseContext.prototype.SET=function(){return this.getToken(CypherParser.SET,0);};SetClauseContext.prototype.setItem=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(SetItemContext);}else{return this.getTypedRuleContext(SetItemContext,i);}};SetClauseContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};SetClauseContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterSetClause(this);}};SetClauseContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitSetClause(this);}};CypherParser.SetClauseContext=SetClauseContext;CypherParser.prototype.setClause=function(){var localctx=new SetClauseContext(this,this._ctx,this.state);this.enterRule(localctx,146,CypherParser.RULE_setClause);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1140;this.match(CypherParser.SET);this.state=1142;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1141;this.match(CypherParser.SP);}this.state=1144;this.setItem();this.state=1155;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,113,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1146;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1145;this.match(CypherParser.SP);}this.state=1148;this.match(CypherParser.T__14);this.state=1150;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1149;this.match(CypherParser.SP);}this.state=1152;this.setItem();}this.state=1157;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,113,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function SetItemContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_setItem;return this;}SetItemContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);SetItemContext.prototype.constructor=SetItemContext;SetItemContext.prototype.propertyExpression=function(){return this.getTypedRuleContext(PropertyExpressionContext,0);};SetItemContext.prototype.expression=function(){return this.getTypedRuleContext(ExpressionContext,0);};SetItemContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};SetItemContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};SetItemContext.prototype.nodeLabels=function(){return this.getTypedRuleContext(NodeLabelsContext,0);};SetItemContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterSetItem(this);}};SetItemContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitSetItem(this);}};CypherParser.SetItemContext=SetItemContext;CypherParser.prototype.setItem=function(){var localctx=new SetItemContext(this,this._ctx,this.state);this.enterRule(localctx,148,CypherParser.RULE_setItem);var _la=0;// Token type
try{this.state=1194;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,121,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1158;this.propertyExpression();this.state=1160;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1159;this.match(CypherParser.SP);}this.state=1162;this.match(CypherParser.T__11);this.state=1164;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1163;this.match(CypherParser.SP);}this.state=1166;this.expression();break;case 2:this.enterOuterAlt(localctx,2);this.state=1168;this.variable();this.state=1170;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1169;this.match(CypherParser.SP);}this.state=1172;this.match(CypherParser.T__11);this.state=1174;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1173;this.match(CypherParser.SP);}this.state=1176;this.expression();break;case 3:this.enterOuterAlt(localctx,3);this.state=1178;this.variable();this.state=1180;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1179;this.match(CypherParser.SP);}this.state=1182;this.match(CypherParser.T__20);this.state=1184;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1183;this.match(CypherParser.SP);}this.state=1186;this.expression();break;case 4:this.enterOuterAlt(localctx,4);this.state=1188;this.variable();this.state=1190;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1189;this.match(CypherParser.SP);}this.state=1192;this.nodeLabels();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function DeleteClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_deleteClause;return this;}DeleteClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);DeleteClauseContext.prototype.constructor=DeleteClauseContext;DeleteClauseContext.prototype.DELETE=function(){return this.getToken(CypherParser.DELETE,0);};DeleteClauseContext.prototype.expression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExpressionContext);}else{return this.getTypedRuleContext(ExpressionContext,i);}};DeleteClauseContext.prototype.DETACH=function(){return this.getToken(CypherParser.DETACH,0);};DeleteClauseContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};DeleteClauseContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterDeleteClause(this);}};DeleteClauseContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitDeleteClause(this);}};CypherParser.DeleteClauseContext=DeleteClauseContext;CypherParser.prototype.deleteClause=function(){var localctx=new DeleteClauseContext(this,this._ctx,this.state);this.enterRule(localctx,150,CypherParser.RULE_deleteClause);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1198;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.DETACH){this.state=1196;this.match(CypherParser.DETACH);this.state=1197;this.match(CypherParser.SP);}this.state=1200;this.match(CypherParser.DELETE);this.state=1202;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1201;this.match(CypherParser.SP);}this.state=1204;this.expression();this.state=1215;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,126,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1206;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1205;this.match(CypherParser.SP);}this.state=1208;this.match(CypherParser.T__14);this.state=1210;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1209;this.match(CypherParser.SP);}this.state=1212;this.expression();}this.state=1217;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,126,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RemoveClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_removeClause;return this;}RemoveClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RemoveClauseContext.prototype.constructor=RemoveClauseContext;RemoveClauseContext.prototype.REMOVE=function(){return this.getToken(CypherParser.REMOVE,0);};RemoveClauseContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};RemoveClauseContext.prototype.removeItem=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(RemoveItemContext);}else{return this.getTypedRuleContext(RemoveItemContext,i);}};RemoveClauseContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterRemoveClause(this);}};RemoveClauseContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitRemoveClause(this);}};CypherParser.RemoveClauseContext=RemoveClauseContext;CypherParser.prototype.removeClause=function(){var localctx=new RemoveClauseContext(this,this._ctx,this.state);this.enterRule(localctx,152,CypherParser.RULE_removeClause);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1218;this.match(CypherParser.REMOVE);this.state=1219;this.match(CypherParser.SP);this.state=1220;this.removeItem();this.state=1231;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,129,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1222;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1221;this.match(CypherParser.SP);}this.state=1224;this.match(CypherParser.T__14);this.state=1226;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1225;this.match(CypherParser.SP);}this.state=1228;this.removeItem();}this.state=1233;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,129,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RemoveItemContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_removeItem;return this;}RemoveItemContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RemoveItemContext.prototype.constructor=RemoveItemContext;RemoveItemContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};RemoveItemContext.prototype.nodeLabels=function(){return this.getTypedRuleContext(NodeLabelsContext,0);};RemoveItemContext.prototype.propertyExpression=function(){return this.getTypedRuleContext(PropertyExpressionContext,0);};RemoveItemContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterRemoveItem(this);}};RemoveItemContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitRemoveItem(this);}};CypherParser.RemoveItemContext=RemoveItemContext;CypherParser.prototype.removeItem=function(){var localctx=new RemoveItemContext(this,this._ctx,this.state);this.enterRule(localctx,154,CypherParser.RULE_removeItem);try{this.state=1238;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,130,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1234;this.variable();this.state=1235;this.nodeLabels();break;case 2:this.enterOuterAlt(localctx,2);this.state=1237;this.propertyExpression();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ForeachClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_foreachClause;return this;}ForeachClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ForeachClauseContext.prototype.constructor=ForeachClauseContext;ForeachClauseContext.prototype.FOREACH=function(){return this.getToken(CypherParser.FOREACH,0);};ForeachClauseContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};ForeachClauseContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};ForeachClauseContext.prototype.IN=function(){return this.getToken(CypherParser.IN,0);};ForeachClauseContext.prototype.expression=function(){return this.getTypedRuleContext(ExpressionContext,0);};ForeachClauseContext.prototype.clause=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ClauseContext);}else{return this.getTypedRuleContext(ClauseContext,i);}};ForeachClauseContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterForeachClause(this);}};ForeachClauseContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitForeachClause(this);}};CypherParser.ForeachClauseContext=ForeachClauseContext;CypherParser.prototype.foreachClause=function(){var localctx=new ForeachClauseContext(this,this._ctx,this.state);this.enterRule(localctx,156,CypherParser.RULE_foreachClause);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1240;this.match(CypherParser.FOREACH);this.state=1242;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1241;this.match(CypherParser.SP);}this.state=1244;this.match(CypherParser.T__18);this.state=1246;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1245;this.match(CypherParser.SP);}this.state=1248;this.variable();this.state=1249;this.match(CypherParser.SP);this.state=1250;this.match(CypherParser.IN);this.state=1251;this.match(CypherParser.SP);this.state=1252;this.expression();this.state=1254;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1253;this.match(CypherParser.SP);}this.state=1256;this.match(CypherParser.T__21);this.state=1259;this._errHandler.sync(this);var _alt=1;do{switch(_alt){case 1:this.state=1257;this.match(CypherParser.SP);this.state=1258;this.clause();break;default:throw new antlr4.error.NoViableAltException(this);}this.state=1261;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,134,this._ctx);}while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER);this.state=1264;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1263;this.match(CypherParser.SP);}this.state=1266;this.match(CypherParser.T__19);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function WithClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_withClause;return this;}WithClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);WithClauseContext.prototype.constructor=WithClauseContext;WithClauseContext.prototype.WITH=function(){return this.getToken(CypherParser.WITH,0);};WithClauseContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};WithClauseContext.prototype.returnBody=function(){return this.getTypedRuleContext(ReturnBodyContext,0);};WithClauseContext.prototype.DISTINCT=function(){return this.getToken(CypherParser.DISTINCT,0);};WithClauseContext.prototype.where=function(){return this.getTypedRuleContext(WhereContext,0);};WithClauseContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterWithClause(this);}};WithClauseContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitWithClause(this);}};CypherParser.WithClauseContext=WithClauseContext;CypherParser.prototype.withClause=function(){var localctx=new WithClauseContext(this,this._ctx,this.state);this.enterRule(localctx,158,CypherParser.RULE_withClause);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1268;this.match(CypherParser.WITH);this.state=1273;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,137,this._ctx);if(la_===1){this.state=1270;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1269;this.match(CypherParser.SP);}this.state=1272;this.match(CypherParser.DISTINCT);}this.state=1275;this.match(CypherParser.SP);this.state=1276;this.returnBody();this.state=1281;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,139,this._ctx);if(la_===1){this.state=1278;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1277;this.match(CypherParser.SP);}this.state=1280;this.where();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ReturnClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_returnClause;return this;}ReturnClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ReturnClauseContext.prototype.constructor=ReturnClauseContext;ReturnClauseContext.prototype.RETURN=function(){return this.getToken(CypherParser.RETURN,0);};ReturnClauseContext.prototype.returnBody=function(){return this.getTypedRuleContext(ReturnBodyContext,0);};ReturnClauseContext.prototype.DISTINCT=function(){return this.getToken(CypherParser.DISTINCT,0);};ReturnClauseContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};ReturnClauseContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterReturnClause(this);}};ReturnClauseContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitReturnClause(this);}};CypherParser.ReturnClauseContext=ReturnClauseContext;CypherParser.prototype.returnClause=function(){var localctx=new ReturnClauseContext(this,this._ctx,this.state);this.enterRule(localctx,160,CypherParser.RULE_returnClause);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1283;this.match(CypherParser.RETURN);this.state=1288;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,141,this._ctx);if(la_===1){this.state=1285;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1284;this.match(CypherParser.SP);}this.state=1287;this.match(CypherParser.DISTINCT);}this.state=1291;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1290;this.match(CypherParser.SP);}this.state=1293;this.returnBody();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ReturnBodyContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_returnBody;return this;}ReturnBodyContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ReturnBodyContext.prototype.constructor=ReturnBodyContext;ReturnBodyContext.prototype.returnItems=function(){return this.getTypedRuleContext(ReturnItemsContext,0);};ReturnBodyContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};ReturnBodyContext.prototype.order=function(){return this.getTypedRuleContext(OrderContext,0);};ReturnBodyContext.prototype.skip=function(){return this.getTypedRuleContext(SkipContext,0);};ReturnBodyContext.prototype.limit=function(){return this.getTypedRuleContext(LimitContext,0);};ReturnBodyContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterReturnBody(this);}};ReturnBodyContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitReturnBody(this);}};CypherParser.ReturnBodyContext=ReturnBodyContext;CypherParser.prototype.returnBody=function(){var localctx=new ReturnBodyContext(this,this._ctx,this.state);this.enterRule(localctx,162,CypherParser.RULE_returnBody);try{this.enterOuterAlt(localctx,1);this.state=1295;this.returnItems();this.state=1298;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,143,this._ctx);if(la_===1){this.state=1296;this.match(CypherParser.SP);this.state=1297;this.order();}this.state=1302;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,144,this._ctx);if(la_===1){this.state=1300;this.match(CypherParser.SP);this.state=1301;this.skip();}this.state=1306;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,145,this._ctx);if(la_===1){this.state=1304;this.match(CypherParser.SP);this.state=1305;this.limit();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ReturnItemsContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_returnItems;return this;}ReturnItemsContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ReturnItemsContext.prototype.constructor=ReturnItemsContext;ReturnItemsContext.prototype.returnItem=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ReturnItemContext);}else{return this.getTypedRuleContext(ReturnItemContext,i);}};ReturnItemsContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};ReturnItemsContext.prototype.procedureInvocation=function(){return this.getTypedRuleContext(ProcedureInvocationContext,0);};ReturnItemsContext.prototype.procedureResults=function(){return this.getTypedRuleContext(ProcedureResultsContext,0);};ReturnItemsContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterReturnItems(this);}};ReturnItemsContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitReturnItems(this);}};CypherParser.ReturnItemsContext=ReturnItemsContext;CypherParser.prototype.returnItems=function(){var localctx=new ReturnItemsContext(this,this._ctx,this.state);this.enterRule(localctx,164,CypherParser.RULE_returnItems);var _la=0;// Token type
try{this.state=1343;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,154,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1308;this.match(CypherParser.T__22);this.state=1319;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,148,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1310;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1309;this.match(CypherParser.SP);}this.state=1312;this.match(CypherParser.T__14);this.state=1314;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1313;this.match(CypherParser.SP);}this.state=1316;this.returnItem();}this.state=1321;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,148,this._ctx);}break;case 2:this.enterOuterAlt(localctx,2);this.state=1322;this.returnItem();this.state=1333;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,151,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1324;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1323;this.match(CypherParser.SP);}this.state=1326;this.match(CypherParser.T__14);this.state=1328;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1327;this.match(CypherParser.SP);}this.state=1330;this.returnItem();}this.state=1335;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,151,this._ctx);}break;case 3:this.enterOuterAlt(localctx,3);this.state=1336;this.procedureInvocation();this.state=1338;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,152,this._ctx);if(la_===1){this.state=1337;this.match(CypherParser.SP);}this.state=1341;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.YIELD){this.state=1340;this.procedureResults();}break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ReturnItemContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_returnItem;return this;}ReturnItemContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ReturnItemContext.prototype.constructor=ReturnItemContext;ReturnItemContext.prototype.expression=function(){return this.getTypedRuleContext(ExpressionContext,0);};ReturnItemContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};ReturnItemContext.prototype.AS=function(){return this.getToken(CypherParser.AS,0);};ReturnItemContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};ReturnItemContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterReturnItem(this);}};ReturnItemContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitReturnItem(this);}};CypherParser.ReturnItemContext=ReturnItemContext;CypherParser.prototype.returnItem=function(){var localctx=new ReturnItemContext(this,this._ctx,this.state);this.enterRule(localctx,166,CypherParser.RULE_returnItem);try{this.state=1352;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,155,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1345;this.expression();this.state=1346;this.match(CypherParser.SP);this.state=1347;this.match(CypherParser.AS);this.state=1348;this.match(CypherParser.SP);this.state=1349;this.variable();break;case 2:this.enterOuterAlt(localctx,2);this.state=1351;this.expression();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CallContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_call;return this;}CallContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CallContext.prototype.constructor=CallContext;CallContext.prototype.CALL=function(){return this.getToken(CypherParser.CALL,0);};CallContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};CallContext.prototype.procedureInvocation=function(){return this.getTypedRuleContext(ProcedureInvocationContext,0);};CallContext.prototype.procedureResults=function(){return this.getTypedRuleContext(ProcedureResultsContext,0);};CallContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCall(this);}};CallContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCall(this);}};CypherParser.CallContext=CallContext;CypherParser.prototype.call=function(){var localctx=new CallContext(this,this._ctx,this.state);this.enterRule(localctx,168,CypherParser.RULE_call);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1354;this.match(CypherParser.CALL);this.state=1355;this.match(CypherParser.SP);this.state=1356;this.procedureInvocation();this.state=1358;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,156,this._ctx);if(la_===1){this.state=1357;this.match(CypherParser.SP);}this.state=1361;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.YIELD){this.state=1360;this.procedureResults();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ProcedureInvocationContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_procedureInvocation;return this;}ProcedureInvocationContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ProcedureInvocationContext.prototype.constructor=ProcedureInvocationContext;ProcedureInvocationContext.prototype.procedureInvocationBody=function(){return this.getTypedRuleContext(ProcedureInvocationBodyContext,0);};ProcedureInvocationContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};ProcedureInvocationContext.prototype.procedureArguments=function(){return this.getTypedRuleContext(ProcedureArgumentsContext,0);};ProcedureInvocationContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterProcedureInvocation(this);}};ProcedureInvocationContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitProcedureInvocation(this);}};CypherParser.ProcedureInvocationContext=ProcedureInvocationContext;CypherParser.prototype.procedureInvocation=function(){var localctx=new ProcedureInvocationContext(this,this._ctx,this.state);this.enterRule(localctx,170,CypherParser.RULE_procedureInvocation);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1363;this.procedureInvocationBody();this.state=1365;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,158,this._ctx);if(la_===1){this.state=1364;this.match(CypherParser.SP);}this.state=1368;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.T__18){this.state=1367;this.procedureArguments();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ProcedureInvocationBodyContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_procedureInvocationBody;return this;}ProcedureInvocationBodyContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ProcedureInvocationBodyContext.prototype.constructor=ProcedureInvocationBodyContext;ProcedureInvocationBodyContext.prototype.namespace=function(){return this.getTypedRuleContext(NamespaceContext,0);};ProcedureInvocationBodyContext.prototype.procedureName=function(){return this.getTypedRuleContext(ProcedureNameContext,0);};ProcedureInvocationBodyContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterProcedureInvocationBody(this);}};ProcedureInvocationBodyContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitProcedureInvocationBody(this);}};CypherParser.ProcedureInvocationBodyContext=ProcedureInvocationBodyContext;CypherParser.prototype.procedureInvocationBody=function(){var localctx=new ProcedureInvocationBodyContext(this,this._ctx,this.state);this.enterRule(localctx,172,CypherParser.RULE_procedureInvocationBody);try{this.enterOuterAlt(localctx,1);this.state=1370;this.namespace();this.state=1371;this.procedureName();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ProcedureArgumentsContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_procedureArguments;return this;}ProcedureArgumentsContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ProcedureArgumentsContext.prototype.constructor=ProcedureArgumentsContext;ProcedureArgumentsContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};ProcedureArgumentsContext.prototype.expression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExpressionContext);}else{return this.getTypedRuleContext(ExpressionContext,i);}};ProcedureArgumentsContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterProcedureArguments(this);}};ProcedureArgumentsContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitProcedureArguments(this);}};CypherParser.ProcedureArgumentsContext=ProcedureArgumentsContext;CypherParser.prototype.procedureArguments=function(){var localctx=new ProcedureArgumentsContext(this,this._ctx,this.state);this.enterRule(localctx,174,CypherParser.RULE_procedureArguments);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1373;this.match(CypherParser.T__18);this.state=1375;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,160,this._ctx);if(la_===1){this.state=1374;this.match(CypherParser.SP);}this.state=1378;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<CypherParser.T__2|1<<CypherParser.T__12|1<<CypherParser.T__13|1<<CypherParser.T__16|1<<CypherParser.T__18))!==0||(_la-34&~0x1f)==0&&(1<<_la-34&(1<<CypherParser.T__33-34|1<<CypherParser.CYPHER-34|1<<CypherParser.EXPLAIN-34|1<<CypherParser.PROFILE-34|1<<CypherParser.USING-34|1<<CypherParser.PERIODIC-34|1<<CypherParser.COMMIT-34|1<<CypherParser.UNION-34|1<<CypherParser.ALL-34|1<<CypherParser.CREATE-34|1<<CypherParser.DROP-34|1<<CypherParser.INDEX-34|1<<CypherParser.ON-34))!==0||(_la-66&~0x1f)==0&&(1<<_la-66&(1<<CypherParser.CONSTRAINT-66|1<<CypherParser.ASSERT-66|1<<CypherParser.IS-66|1<<CypherParser.UNIQUE-66|1<<CypherParser.EXISTS-66|1<<CypherParser.LOAD-66|1<<CypherParser.CSV-66|1<<CypherParser.WITH-66|1<<CypherParser.HEADERS-66|1<<CypherParser.FROM-66|1<<CypherParser.AS-66|1<<CypherParser.FIELDTERMINATOR-66|1<<CypherParser.OPTIONAL-66|1<<CypherParser.MATCH-66|1<<CypherParser.UNWIND-66|1<<CypherParser.MERGE-66|1<<CypherParser.SET-66|1<<CypherParser.DETACH-66|1<<CypherParser.DELETE-66|1<<CypherParser.REMOVE-66|1<<CypherParser.FOREACH-66|1<<CypherParser.IN-66|1<<CypherParser.DISTINCT-66|1<<CypherParser.RETURN-66|1<<CypherParser.ORDER-66|1<<CypherParser.BY-66|1<<CypherParser.L_SKIP-66|1<<CypherParser.LIMIT-66|1<<CypherParser.ASCENDING-66|1<<CypherParser.ASC-66|1<<CypherParser.DESCENDING-66|1<<CypherParser.DESC-66))!==0||(_la-98&~0x1f)==0&&(1<<_la-98&(1<<CypherParser.JOIN-98|1<<CypherParser.SCAN-98|1<<CypherParser.START-98|1<<CypherParser.NODE-98|1<<CypherParser.RELATIONSHIP-98|1<<CypherParser.REL-98|1<<CypherParser.WHERE-98|1<<CypherParser.SHORTESTPATH-98|1<<CypherParser.ALLSHORTESTPATHS-98|1<<CypherParser.OR-98|1<<CypherParser.XOR-98|1<<CypherParser.AND-98|1<<CypherParser.NOT-98|1<<CypherParser.STARTS-98|1<<CypherParser.ENDS-98|1<<CypherParser.CONTAINS-98|1<<CypherParser.NULL-98|1<<CypherParser.COUNT-98|1<<CypherParser.FILTER-98|1<<CypherParser.EXTRACT-98|1<<CypherParser.ANY-98|1<<CypherParser.NONE-98|1<<CypherParser.SINGLE-98|1<<CypherParser.TRUE-98|1<<CypherParser.FALSE-98|1<<CypherParser.REDUCE-98|1<<CypherParser.CASE-98|1<<CypherParser.ELSE-98|1<<CypherParser.END-98|1<<CypherParser.WHEN-98|1<<CypherParser.THEN-98|1<<CypherParser.CALL-98))!==0||(_la-130&~0x1f)==0&&(1<<_la-130&(1<<CypherParser.YIELD-130|1<<CypherParser.KEY-130|1<<CypherParser.StringLiteral-130|1<<CypherParser.HexInteger-130|1<<CypherParser.DecimalInteger-130|1<<CypherParser.OctalInteger-130|1<<CypherParser.HexLetter-130|1<<CypherParser.ExponentDecimalReal-130|1<<CypherParser.RegularDecimalReal-130|1<<CypherParser.UnescapedSymbolicName-130|1<<CypherParser.EscapedSymbolicName-130))!==0){this.state=1377;this.expression();}this.state=1390;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,164,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1381;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1380;this.match(CypherParser.SP);}this.state=1383;this.match(CypherParser.T__14);this.state=1385;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1384;this.match(CypherParser.SP);}this.state=1387;this.expression();}this.state=1392;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,164,this._ctx);}this.state=1394;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1393;this.match(CypherParser.SP);}this.state=1396;this.match(CypherParser.T__19);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ProcedureResultsContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_procedureResults;return this;}ProcedureResultsContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ProcedureResultsContext.prototype.constructor=ProcedureResultsContext;ProcedureResultsContext.prototype.YIELD=function(){return this.getToken(CypherParser.YIELD,0);};ProcedureResultsContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};ProcedureResultsContext.prototype.procedureResult=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ProcedureResultContext);}else{return this.getTypedRuleContext(ProcedureResultContext,i);}};ProcedureResultsContext.prototype.where=function(){return this.getTypedRuleContext(WhereContext,0);};ProcedureResultsContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterProcedureResults(this);}};ProcedureResultsContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitProcedureResults(this);}};CypherParser.ProcedureResultsContext=ProcedureResultsContext;CypherParser.prototype.procedureResults=function(){var localctx=new ProcedureResultsContext(this,this._ctx,this.state);this.enterRule(localctx,176,CypherParser.RULE_procedureResults);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1398;this.match(CypherParser.YIELD);this.state=1399;this.match(CypherParser.SP);this.state=1400;this.procedureResult();this.state=1411;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,168,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1402;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1401;this.match(CypherParser.SP);}this.state=1404;this.match(CypherParser.T__14);this.state=1406;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1405;this.match(CypherParser.SP);}this.state=1408;this.procedureResult();}this.state=1413;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,168,this._ctx);}this.state=1416;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,169,this._ctx);if(la_===1){this.state=1414;this.match(CypherParser.SP);this.state=1415;this.where();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ProcedureResultContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_procedureResult;return this;}ProcedureResultContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ProcedureResultContext.prototype.constructor=ProcedureResultContext;ProcedureResultContext.prototype.aliasedProcedureResult=function(){return this.getTypedRuleContext(AliasedProcedureResultContext,0);};ProcedureResultContext.prototype.simpleProcedureResult=function(){return this.getTypedRuleContext(SimpleProcedureResultContext,0);};ProcedureResultContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterProcedureResult(this);}};ProcedureResultContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitProcedureResult(this);}};CypherParser.ProcedureResultContext=ProcedureResultContext;CypherParser.prototype.procedureResult=function(){var localctx=new ProcedureResultContext(this,this._ctx,this.state);this.enterRule(localctx,178,CypherParser.RULE_procedureResult);try{this.state=1420;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,170,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1418;this.aliasedProcedureResult();break;case 2:this.enterOuterAlt(localctx,2);this.state=1419;this.simpleProcedureResult();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function AliasedProcedureResultContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_aliasedProcedureResult;return this;}AliasedProcedureResultContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);AliasedProcedureResultContext.prototype.constructor=AliasedProcedureResultContext;AliasedProcedureResultContext.prototype.procedureOutput=function(){return this.getTypedRuleContext(ProcedureOutputContext,0);};AliasedProcedureResultContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};AliasedProcedureResultContext.prototype.AS=function(){return this.getToken(CypherParser.AS,0);};AliasedProcedureResultContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};AliasedProcedureResultContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterAliasedProcedureResult(this);}};AliasedProcedureResultContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitAliasedProcedureResult(this);}};CypherParser.AliasedProcedureResultContext=AliasedProcedureResultContext;CypherParser.prototype.aliasedProcedureResult=function(){var localctx=new AliasedProcedureResultContext(this,this._ctx,this.state);this.enterRule(localctx,180,CypherParser.RULE_aliasedProcedureResult);try{this.enterOuterAlt(localctx,1);this.state=1422;this.procedureOutput();this.state=1423;this.match(CypherParser.SP);this.state=1424;this.match(CypherParser.AS);this.state=1425;this.match(CypherParser.SP);this.state=1426;this.variable();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function SimpleProcedureResultContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_simpleProcedureResult;return this;}SimpleProcedureResultContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);SimpleProcedureResultContext.prototype.constructor=SimpleProcedureResultContext;SimpleProcedureResultContext.prototype.procedureOutput=function(){return this.getTypedRuleContext(ProcedureOutputContext,0);};SimpleProcedureResultContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterSimpleProcedureResult(this);}};SimpleProcedureResultContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitSimpleProcedureResult(this);}};CypherParser.SimpleProcedureResultContext=SimpleProcedureResultContext;CypherParser.prototype.simpleProcedureResult=function(){var localctx=new SimpleProcedureResultContext(this,this._ctx,this.state);this.enterRule(localctx,182,CypherParser.RULE_simpleProcedureResult);try{this.enterOuterAlt(localctx,1);this.state=1428;this.procedureOutput();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ProcedureOutputContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_procedureOutput;return this;}ProcedureOutputContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ProcedureOutputContext.prototype.constructor=ProcedureOutputContext;ProcedureOutputContext.prototype.symbolicName=function(){return this.getTypedRuleContext(SymbolicNameContext,0);};ProcedureOutputContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterProcedureOutput(this);}};ProcedureOutputContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitProcedureOutput(this);}};CypherParser.ProcedureOutputContext=ProcedureOutputContext;CypherParser.prototype.procedureOutput=function(){var localctx=new ProcedureOutputContext(this,this._ctx,this.state);this.enterRule(localctx,184,CypherParser.RULE_procedureOutput);try{this.enterOuterAlt(localctx,1);this.state=1430;this.symbolicName();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function OrderContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_order;return this;}OrderContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);OrderContext.prototype.constructor=OrderContext;OrderContext.prototype.ORDER=function(){return this.getToken(CypherParser.ORDER,0);};OrderContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};OrderContext.prototype.BY=function(){return this.getToken(CypherParser.BY,0);};OrderContext.prototype.sortItem=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(SortItemContext);}else{return this.getTypedRuleContext(SortItemContext,i);}};OrderContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterOrder(this);}};OrderContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitOrder(this);}};CypherParser.OrderContext=OrderContext;CypherParser.prototype.order=function(){var localctx=new OrderContext(this,this._ctx,this.state);this.enterRule(localctx,186,CypherParser.RULE_order);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1432;this.match(CypherParser.ORDER);this.state=1433;this.match(CypherParser.SP);this.state=1434;this.match(CypherParser.BY);this.state=1435;this.match(CypherParser.SP);this.state=1436;this.sortItem();this.state=1447;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,173,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1438;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1437;this.match(CypherParser.SP);}this.state=1440;this.match(CypherParser.T__14);this.state=1442;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1441;this.match(CypherParser.SP);}this.state=1444;this.sortItem();}this.state=1449;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,173,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function SkipContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_skip;return this;}SkipContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);SkipContext.prototype.constructor=SkipContext;SkipContext.prototype.L_SKIP=function(){return this.getToken(CypherParser.L_SKIP,0);};SkipContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};SkipContext.prototype.expression=function(){return this.getTypedRuleContext(ExpressionContext,0);};SkipContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterSkip(this);}};SkipContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitSkip(this);}};CypherParser.SkipContext=SkipContext;CypherParser.prototype.skip=function(){var localctx=new SkipContext(this,this._ctx,this.state);this.enterRule(localctx,188,CypherParser.RULE_skip);try{this.enterOuterAlt(localctx,1);this.state=1450;this.match(CypherParser.L_SKIP);this.state=1451;this.match(CypherParser.SP);this.state=1452;this.expression();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function LimitContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_limit;return this;}LimitContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);LimitContext.prototype.constructor=LimitContext;LimitContext.prototype.LIMIT=function(){return this.getToken(CypherParser.LIMIT,0);};LimitContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};LimitContext.prototype.expression=function(){return this.getTypedRuleContext(ExpressionContext,0);};LimitContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterLimit(this);}};LimitContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitLimit(this);}};CypherParser.LimitContext=LimitContext;CypherParser.prototype.limit=function(){var localctx=new LimitContext(this,this._ctx,this.state);this.enterRule(localctx,190,CypherParser.RULE_limit);try{this.enterOuterAlt(localctx,1);this.state=1454;this.match(CypherParser.LIMIT);this.state=1455;this.match(CypherParser.SP);this.state=1456;this.expression();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function SortItemContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_sortItem;return this;}SortItemContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);SortItemContext.prototype.constructor=SortItemContext;SortItemContext.prototype.expression=function(){return this.getTypedRuleContext(ExpressionContext,0);};SortItemContext.prototype.ASCENDING=function(){return this.getToken(CypherParser.ASCENDING,0);};SortItemContext.prototype.ASC=function(){return this.getToken(CypherParser.ASC,0);};SortItemContext.prototype.DESCENDING=function(){return this.getToken(CypherParser.DESCENDING,0);};SortItemContext.prototype.DESC=function(){return this.getToken(CypherParser.DESC,0);};SortItemContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};SortItemContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterSortItem(this);}};SortItemContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitSortItem(this);}};CypherParser.SortItemContext=SortItemContext;CypherParser.prototype.sortItem=function(){var localctx=new SortItemContext(this,this._ctx,this.state);this.enterRule(localctx,192,CypherParser.RULE_sortItem);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1458;this.expression();this.state=1466;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,176,this._ctx);if(la_===1){this.state=1460;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1459;this.match(CypherParser.SP);}this.state=1462;_la=this._input.LA(1);if(!((_la-94&~0x1f)==0&&(1<<_la-94&(1<<CypherParser.ASCENDING-94|1<<CypherParser.ASC-94|1<<CypherParser.DESCENDING-94|1<<CypherParser.DESC-94))!==0)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}this.state=1464;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,175,this._ctx);if(la_===1){this.state=1463;this.match(CypherParser.SP);}}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function HintContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_hint;return this;}HintContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);HintContext.prototype.constructor=HintContext;HintContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};HintContext.prototype.USING=function(){return this.getToken(CypherParser.USING,0);};HintContext.prototype.INDEX=function(){return this.getToken(CypherParser.INDEX,0);};HintContext.prototype.variable=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(VariableContext);}else{return this.getTypedRuleContext(VariableContext,i);}};HintContext.prototype.nodeLabel=function(){return this.getTypedRuleContext(NodeLabelContext,0);};HintContext.prototype.propertyKeys=function(){return this.getTypedRuleContext(PropertyKeysContext,0);};HintContext.prototype.JOIN=function(){return this.getToken(CypherParser.JOIN,0);};HintContext.prototype.ON=function(){return this.getToken(CypherParser.ON,0);};HintContext.prototype.SCAN=function(){return this.getToken(CypherParser.SCAN,0);};HintContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterHint(this);}};HintContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitHint(this);}};CypherParser.HintContext=HintContext;CypherParser.prototype.hint=function(){var localctx=new HintContext(this,this._ctx,this.state);this.enterRule(localctx,194,CypherParser.RULE_hint);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1469;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1468;this.match(CypherParser.SP);}this.state=1517;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,184,this._ctx);switch(la_){case 1:this.state=1471;this.match(CypherParser.USING);this.state=1472;this.match(CypherParser.SP);this.state=1473;this.match(CypherParser.INDEX);this.state=1474;this.match(CypherParser.SP);this.state=1475;this.variable();this.state=1476;this.nodeLabel();this.state=1478;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1477;this.match(CypherParser.SP);}this.state=1480;this.match(CypherParser.T__18);this.state=1482;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1481;this.match(CypherParser.SP);}this.state=1484;this.propertyKeys();this.state=1486;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1485;this.match(CypherParser.SP);}this.state=1488;this.match(CypherParser.T__19);break;case 2:this.state=1490;this.match(CypherParser.USING);this.state=1491;this.match(CypherParser.SP);this.state=1492;this.match(CypherParser.JOIN);this.state=1493;this.match(CypherParser.SP);this.state=1494;this.match(CypherParser.ON);this.state=1495;this.match(CypherParser.SP);this.state=1496;this.variable();this.state=1507;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,183,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1498;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1497;this.match(CypherParser.SP);}this.state=1500;this.match(CypherParser.T__14);this.state=1502;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1501;this.match(CypherParser.SP);}this.state=1504;this.variable();}this.state=1509;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,183,this._ctx);}break;case 3:this.state=1510;this.match(CypherParser.USING);this.state=1511;this.match(CypherParser.SP);this.state=1512;this.match(CypherParser.SCAN);this.state=1513;this.match(CypherParser.SP);this.state=1514;this.variable();this.state=1515;this.nodeLabel();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function StartClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_startClause;return this;}StartClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);StartClauseContext.prototype.constructor=StartClauseContext;StartClauseContext.prototype.START=function(){return this.getToken(CypherParser.START,0);};StartClauseContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};StartClauseContext.prototype.startPoint=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(StartPointContext);}else{return this.getTypedRuleContext(StartPointContext,i);}};StartClauseContext.prototype.where=function(){return this.getTypedRuleContext(WhereContext,0);};StartClauseContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterStartClause(this);}};StartClauseContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitStartClause(this);}};CypherParser.StartClauseContext=StartClauseContext;CypherParser.prototype.startClause=function(){var localctx=new StartClauseContext(this,this._ctx,this.state);this.enterRule(localctx,196,CypherParser.RULE_startClause);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1519;this.match(CypherParser.START);this.state=1520;this.match(CypherParser.SP);this.state=1521;this.startPoint();this.state=1532;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,187,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1523;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1522;this.match(CypherParser.SP);}this.state=1525;this.match(CypherParser.T__14);this.state=1527;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1526;this.match(CypherParser.SP);}this.state=1529;this.startPoint();}this.state=1534;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,187,this._ctx);}this.state=1536;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.WHERE){this.state=1535;this.where();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function StartPointContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_startPoint;return this;}StartPointContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);StartPointContext.prototype.constructor=StartPointContext;StartPointContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};StartPointContext.prototype.lookup=function(){return this.getTypedRuleContext(LookupContext,0);};StartPointContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};StartPointContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterStartPoint(this);}};StartPointContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitStartPoint(this);}};CypherParser.StartPointContext=StartPointContext;CypherParser.prototype.startPoint=function(){var localctx=new StartPointContext(this,this._ctx,this.state);this.enterRule(localctx,198,CypherParser.RULE_startPoint);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1538;this.variable();this.state=1540;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1539;this.match(CypherParser.SP);}this.state=1542;this.match(CypherParser.T__11);this.state=1544;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1543;this.match(CypherParser.SP);}this.state=1546;this.lookup();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function LookupContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_lookup;return this;}LookupContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);LookupContext.prototype.constructor=LookupContext;LookupContext.prototype.nodeLookup=function(){return this.getTypedRuleContext(NodeLookupContext,0);};LookupContext.prototype.relationshipLookup=function(){return this.getTypedRuleContext(RelationshipLookupContext,0);};LookupContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterLookup(this);}};LookupContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitLookup(this);}};CypherParser.LookupContext=LookupContext;CypherParser.prototype.lookup=function(){var localctx=new LookupContext(this,this._ctx,this.state);this.enterRule(localctx,200,CypherParser.RULE_lookup);try{this.state=1550;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.NODE:this.enterOuterAlt(localctx,1);this.state=1548;this.nodeLookup();break;case CypherParser.RELATIONSHIP:case CypherParser.REL:this.enterOuterAlt(localctx,2);this.state=1549;this.relationshipLookup();break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function NodeLookupContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_nodeLookup;return this;}NodeLookupContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);NodeLookupContext.prototype.constructor=NodeLookupContext;NodeLookupContext.prototype.NODE=function(){return this.getToken(CypherParser.NODE,0);};NodeLookupContext.prototype.identifiedIndexLookup=function(){return this.getTypedRuleContext(IdentifiedIndexLookupContext,0);};NodeLookupContext.prototype.indexQuery=function(){return this.getTypedRuleContext(IndexQueryContext,0);};NodeLookupContext.prototype.idLookup=function(){return this.getTypedRuleContext(IdLookupContext,0);};NodeLookupContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};NodeLookupContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterNodeLookup(this);}};NodeLookupContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitNodeLookup(this);}};CypherParser.NodeLookupContext=NodeLookupContext;CypherParser.prototype.nodeLookup=function(){var localctx=new NodeLookupContext(this,this._ctx,this.state);this.enterRule(localctx,202,CypherParser.RULE_nodeLookup);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1552;this.match(CypherParser.NODE);this.state=1554;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1553;this.match(CypherParser.SP);}this.state=1559;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,193,this._ctx);switch(la_){case 1:this.state=1556;this.identifiedIndexLookup();break;case 2:this.state=1557;this.indexQuery();break;case 3:this.state=1558;this.idLookup();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RelationshipLookupContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_relationshipLookup;return this;}RelationshipLookupContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RelationshipLookupContext.prototype.constructor=RelationshipLookupContext;RelationshipLookupContext.prototype.RELATIONSHIP=function(){return this.getToken(CypherParser.RELATIONSHIP,0);};RelationshipLookupContext.prototype.REL=function(){return this.getToken(CypherParser.REL,0);};RelationshipLookupContext.prototype.identifiedIndexLookup=function(){return this.getTypedRuleContext(IdentifiedIndexLookupContext,0);};RelationshipLookupContext.prototype.indexQuery=function(){return this.getTypedRuleContext(IndexQueryContext,0);};RelationshipLookupContext.prototype.idLookup=function(){return this.getTypedRuleContext(IdLookupContext,0);};RelationshipLookupContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterRelationshipLookup(this);}};RelationshipLookupContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitRelationshipLookup(this);}};CypherParser.RelationshipLookupContext=RelationshipLookupContext;CypherParser.prototype.relationshipLookup=function(){var localctx=new RelationshipLookupContext(this,this._ctx,this.state);this.enterRule(localctx,204,CypherParser.RULE_relationshipLookup);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1561;_la=this._input.LA(1);if(!(_la===CypherParser.RELATIONSHIP||_la===CypherParser.REL)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}this.state=1565;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,194,this._ctx);switch(la_){case 1:this.state=1562;this.identifiedIndexLookup();break;case 2:this.state=1563;this.indexQuery();break;case 3:this.state=1564;this.idLookup();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function IdentifiedIndexLookupContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_identifiedIndexLookup;return this;}IdentifiedIndexLookupContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);IdentifiedIndexLookupContext.prototype.constructor=IdentifiedIndexLookupContext;IdentifiedIndexLookupContext.prototype.symbolicName=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(SymbolicNameContext);}else{return this.getTypedRuleContext(SymbolicNameContext,i);}};IdentifiedIndexLookupContext.prototype.StringLiteral=function(){return this.getToken(CypherParser.StringLiteral,0);};IdentifiedIndexLookupContext.prototype.parameter=function(){return this.getTypedRuleContext(ParameterContext,0);};IdentifiedIndexLookupContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterIdentifiedIndexLookup(this);}};IdentifiedIndexLookupContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitIdentifiedIndexLookup(this);}};CypherParser.IdentifiedIndexLookupContext=IdentifiedIndexLookupContext;CypherParser.prototype.identifiedIndexLookup=function(){var localctx=new IdentifiedIndexLookupContext(this,this._ctx,this.state);this.enterRule(localctx,206,CypherParser.RULE_identifiedIndexLookup);try{this.enterOuterAlt(localctx,1);this.state=1567;this.match(CypherParser.T__1);this.state=1568;this.symbolicName();this.state=1569;this.match(CypherParser.T__18);this.state=1570;this.symbolicName();this.state=1571;this.match(CypherParser.T__11);this.state=1574;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.StringLiteral:this.state=1572;this.match(CypherParser.StringLiteral);break;case CypherParser.T__13:case CypherParser.T__33:this.state=1573;this.parameter();break;default:throw new antlr4.error.NoViableAltException(this);}this.state=1576;this.match(CypherParser.T__19);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function IndexQueryContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_indexQuery;return this;}IndexQueryContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);IndexQueryContext.prototype.constructor=IndexQueryContext;IndexQueryContext.prototype.symbolicName=function(){return this.getTypedRuleContext(SymbolicNameContext,0);};IndexQueryContext.prototype.StringLiteral=function(){return this.getToken(CypherParser.StringLiteral,0);};IndexQueryContext.prototype.parameter=function(){return this.getTypedRuleContext(ParameterContext,0);};IndexQueryContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterIndexQuery(this);}};IndexQueryContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitIndexQuery(this);}};CypherParser.IndexQueryContext=IndexQueryContext;CypherParser.prototype.indexQuery=function(){var localctx=new IndexQueryContext(this,this._ctx,this.state);this.enterRule(localctx,208,CypherParser.RULE_indexQuery);try{this.enterOuterAlt(localctx,1);this.state=1578;this.match(CypherParser.T__1);this.state=1579;this.symbolicName();this.state=1580;this.match(CypherParser.T__18);this.state=1583;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.StringLiteral:this.state=1581;this.match(CypherParser.StringLiteral);break;case CypherParser.T__13:case CypherParser.T__33:this.state=1582;this.parameter();break;default:throw new antlr4.error.NoViableAltException(this);}this.state=1585;this.match(CypherParser.T__19);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function IdLookupContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_idLookup;return this;}IdLookupContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);IdLookupContext.prototype.constructor=IdLookupContext;IdLookupContext.prototype.literalIds=function(){return this.getTypedRuleContext(LiteralIdsContext,0);};IdLookupContext.prototype.parameter=function(){return this.getTypedRuleContext(ParameterContext,0);};IdLookupContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterIdLookup(this);}};IdLookupContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitIdLookup(this);}};CypherParser.IdLookupContext=IdLookupContext;CypherParser.prototype.idLookup=function(){var localctx=new IdLookupContext(this,this._ctx,this.state);this.enterRule(localctx,210,CypherParser.RULE_idLookup);try{this.enterOuterAlt(localctx,1);this.state=1587;this.match(CypherParser.T__18);this.state=1591;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.HexInteger:case CypherParser.DecimalInteger:case CypherParser.OctalInteger:this.state=1588;this.literalIds();break;case CypherParser.T__13:case CypherParser.T__33:this.state=1589;this.parameter();break;case CypherParser.T__22:this.state=1590;this.match(CypherParser.T__22);break;default:throw new antlr4.error.NoViableAltException(this);}this.state=1593;this.match(CypherParser.T__19);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function LiteralIdsContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_literalIds;return this;}LiteralIdsContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);LiteralIdsContext.prototype.constructor=LiteralIdsContext;LiteralIdsContext.prototype.integerLiteral=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(IntegerLiteralContext);}else{return this.getTypedRuleContext(IntegerLiteralContext,i);}};LiteralIdsContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};LiteralIdsContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterLiteralIds(this);}};LiteralIdsContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitLiteralIds(this);}};CypherParser.LiteralIdsContext=LiteralIdsContext;CypherParser.prototype.literalIds=function(){var localctx=new LiteralIdsContext(this,this._ctx,this.state);this.enterRule(localctx,212,CypherParser.RULE_literalIds);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1595;this.integerLiteral();this.state=1606;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CypherParser.T__14||_la===CypherParser.SP){this.state=1597;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1596;this.match(CypherParser.SP);}this.state=1599;this.match(CypherParser.T__14);this.state=1601;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1600;this.match(CypherParser.SP);}this.state=1603;this.integerLiteral();this.state=1608;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function WhereContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_where;return this;}WhereContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);WhereContext.prototype.constructor=WhereContext;WhereContext.prototype.WHERE=function(){return this.getToken(CypherParser.WHERE,0);};WhereContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};WhereContext.prototype.expression=function(){return this.getTypedRuleContext(ExpressionContext,0);};WhereContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterWhere(this);}};WhereContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitWhere(this);}};CypherParser.WhereContext=WhereContext;CypherParser.prototype.where=function(){var localctx=new WhereContext(this,this._ctx,this.state);this.enterRule(localctx,214,CypherParser.RULE_where);try{this.enterOuterAlt(localctx,1);this.state=1609;this.match(CypherParser.WHERE);this.state=1610;this.match(CypherParser.SP);this.state=1611;this.expression();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PatternContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_pattern;return this;}PatternContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PatternContext.prototype.constructor=PatternContext;PatternContext.prototype.patternPart=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(PatternPartContext);}else{return this.getTypedRuleContext(PatternPartContext,i);}};PatternContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};PatternContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterPattern(this);}};PatternContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitPattern(this);}};CypherParser.PatternContext=PatternContext;CypherParser.prototype.pattern=function(){var localctx=new PatternContext(this,this._ctx,this.state);this.enterRule(localctx,216,CypherParser.RULE_pattern);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1613;this.patternPart();this.state=1624;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,203,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1615;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1614;this.match(CypherParser.SP);}this.state=1617;this.match(CypherParser.T__14);this.state=1619;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1618;this.match(CypherParser.SP);}this.state=1621;this.patternPart();}this.state=1626;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,203,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PatternPartContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_patternPart;return this;}PatternPartContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PatternPartContext.prototype.constructor=PatternPartContext;PatternPartContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};PatternPartContext.prototype.anonymousPatternPart=function(){return this.getTypedRuleContext(AnonymousPatternPartContext,0);};PatternPartContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};PatternPartContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterPatternPart(this);}};PatternPartContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitPatternPart(this);}};CypherParser.PatternPartContext=PatternPartContext;CypherParser.prototype.patternPart=function(){var localctx=new PatternPartContext(this,this._ctx,this.state);this.enterRule(localctx,218,CypherParser.RULE_patternPart);var _la=0;// Token type
try{this.state=1638;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,206,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1627;this.variable();this.state=1629;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1628;this.match(CypherParser.SP);}this.state=1631;this.match(CypherParser.T__11);this.state=1633;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1632;this.match(CypherParser.SP);}this.state=1635;this.anonymousPatternPart();break;case 2:this.enterOuterAlt(localctx,2);this.state=1637;this.anonymousPatternPart();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function AnonymousPatternPartContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_anonymousPatternPart;return this;}AnonymousPatternPartContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);AnonymousPatternPartContext.prototype.constructor=AnonymousPatternPartContext;AnonymousPatternPartContext.prototype.shortestPathPatternFunction=function(){return this.getTypedRuleContext(ShortestPathPatternFunctionContext,0);};AnonymousPatternPartContext.prototype.patternElement=function(){return this.getTypedRuleContext(PatternElementContext,0);};AnonymousPatternPartContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterAnonymousPatternPart(this);}};AnonymousPatternPartContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitAnonymousPatternPart(this);}};CypherParser.AnonymousPatternPartContext=AnonymousPatternPartContext;CypherParser.prototype.anonymousPatternPart=function(){var localctx=new AnonymousPatternPartContext(this,this._ctx,this.state);this.enterRule(localctx,220,CypherParser.RULE_anonymousPatternPart);try{this.state=1642;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.SHORTESTPATH:case CypherParser.ALLSHORTESTPATHS:this.enterOuterAlt(localctx,1);this.state=1640;this.shortestPathPatternFunction();break;case CypherParser.T__18:this.enterOuterAlt(localctx,2);this.state=1641;this.patternElement();break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PatternElementContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_patternElement;return this;}PatternElementContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PatternElementContext.prototype.constructor=PatternElementContext;PatternElementContext.prototype.nodePattern=function(){return this.getTypedRuleContext(NodePatternContext,0);};PatternElementContext.prototype.patternElementChain=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(PatternElementChainContext);}else{return this.getTypedRuleContext(PatternElementChainContext,i);}};PatternElementContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};PatternElementContext.prototype.patternElement=function(){return this.getTypedRuleContext(PatternElementContext,0);};PatternElementContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterPatternElement(this);}};PatternElementContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitPatternElement(this);}};CypherParser.PatternElementContext=PatternElementContext;CypherParser.prototype.patternElement=function(){var localctx=new PatternElementContext(this,this._ctx,this.state);this.enterRule(localctx,222,CypherParser.RULE_patternElement);var _la=0;// Token type
try{this.state=1658;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,210,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1644;this.nodePattern();this.state=1651;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,209,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1646;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1645;this.match(CypherParser.SP);}this.state=1648;this.patternElementChain();}this.state=1653;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,209,this._ctx);}break;case 2:this.enterOuterAlt(localctx,2);this.state=1654;this.match(CypherParser.T__18);this.state=1655;this.patternElement();this.state=1656;this.match(CypherParser.T__19);break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function NodePatternContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_nodePattern;return this;}NodePatternContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);NodePatternContext.prototype.constructor=NodePatternContext;NodePatternContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};NodePatternContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};NodePatternContext.prototype.nodeLabels=function(){return this.getTypedRuleContext(NodeLabelsContext,0);};NodePatternContext.prototype.properties=function(){return this.getTypedRuleContext(PropertiesContext,0);};NodePatternContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterNodePattern(this);}};NodePatternContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitNodePattern(this);}};CypherParser.NodePatternContext=NodePatternContext;CypherParser.prototype.nodePattern=function(){var localctx=new NodePatternContext(this,this._ctx,this.state);this.enterRule(localctx,224,CypherParser.RULE_nodePattern);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1660;this.match(CypherParser.T__18);this.state=1662;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1661;this.match(CypherParser.SP);}this.state=1668;this._errHandler.sync(this);_la=this._input.LA(1);if((_la-54&~0x1f)==0&&(1<<_la-54&(1<<CypherParser.CYPHER-54|1<<CypherParser.EXPLAIN-54|1<<CypherParser.PROFILE-54|1<<CypherParser.USING-54|1<<CypherParser.PERIODIC-54|1<<CypherParser.COMMIT-54|1<<CypherParser.UNION-54|1<<CypherParser.ALL-54|1<<CypherParser.CREATE-54|1<<CypherParser.DROP-54|1<<CypherParser.INDEX-54|1<<CypherParser.ON-54|1<<CypherParser.CONSTRAINT-54|1<<CypherParser.ASSERT-54|1<<CypherParser.IS-54|1<<CypherParser.UNIQUE-54|1<<CypherParser.EXISTS-54|1<<CypherParser.LOAD-54|1<<CypherParser.CSV-54|1<<CypherParser.WITH-54|1<<CypherParser.HEADERS-54|1<<CypherParser.FROM-54|1<<CypherParser.AS-54|1<<CypherParser.FIELDTERMINATOR-54|1<<CypherParser.OPTIONAL-54|1<<CypherParser.MATCH-54|1<<CypherParser.UNWIND-54|1<<CypherParser.MERGE-54|1<<CypherParser.SET-54|1<<CypherParser.DETACH-54|1<<CypherParser.DELETE-54|1<<CypherParser.REMOVE-54))!==0||(_la-86&~0x1f)==0&&(1<<_la-86&(1<<CypherParser.FOREACH-86|1<<CypherParser.IN-86|1<<CypherParser.DISTINCT-86|1<<CypherParser.RETURN-86|1<<CypherParser.ORDER-86|1<<CypherParser.BY-86|1<<CypherParser.L_SKIP-86|1<<CypherParser.LIMIT-86|1<<CypherParser.ASCENDING-86|1<<CypherParser.ASC-86|1<<CypherParser.DESCENDING-86|1<<CypherParser.DESC-86|1<<CypherParser.JOIN-86|1<<CypherParser.SCAN-86|1<<CypherParser.START-86|1<<CypherParser.NODE-86|1<<CypherParser.RELATIONSHIP-86|1<<CypherParser.REL-86|1<<CypherParser.WHERE-86|1<<CypherParser.SHORTESTPATH-86|1<<CypherParser.ALLSHORTESTPATHS-86|1<<CypherParser.OR-86|1<<CypherParser.XOR-86|1<<CypherParser.AND-86|1<<CypherParser.NOT-86|1<<CypherParser.STARTS-86|1<<CypherParser.ENDS-86|1<<CypherParser.CONTAINS-86|1<<CypherParser.NULL-86|1<<CypherParser.COUNT-86|1<<CypherParser.FILTER-86|1<<CypherParser.EXTRACT-86))!==0||(_la-118&~0x1f)==0&&(1<<_la-118&(1<<CypherParser.ANY-118|1<<CypherParser.NONE-118|1<<CypherParser.SINGLE-118|1<<CypherParser.TRUE-118|1<<CypherParser.FALSE-118|1<<CypherParser.REDUCE-118|1<<CypherParser.CASE-118|1<<CypherParser.ELSE-118|1<<CypherParser.END-118|1<<CypherParser.WHEN-118|1<<CypherParser.THEN-118|1<<CypherParser.CALL-118|1<<CypherParser.YIELD-118|1<<CypherParser.KEY-118|1<<CypherParser.HexLetter-118|1<<CypherParser.UnescapedSymbolicName-118))!==0||_la===CypherParser.EscapedSymbolicName){this.state=1664;this.variable();this.state=1666;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1665;this.match(CypherParser.SP);}}this.state=1674;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.T__1){this.state=1670;this.nodeLabels();this.state=1672;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1671;this.match(CypherParser.SP);}}this.state=1680;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.T__13||_la===CypherParser.T__33){this.state=1676;this.properties();this.state=1678;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1677;this.match(CypherParser.SP);}}this.state=1682;this.match(CypherParser.T__19);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PatternElementChainContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_patternElementChain;return this;}PatternElementChainContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PatternElementChainContext.prototype.constructor=PatternElementChainContext;PatternElementChainContext.prototype.relationshipPattern=function(){return this.getTypedRuleContext(RelationshipPatternContext,0);};PatternElementChainContext.prototype.nodePattern=function(){return this.getTypedRuleContext(NodePatternContext,0);};PatternElementChainContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};PatternElementChainContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterPatternElementChain(this);}};PatternElementChainContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitPatternElementChain(this);}};CypherParser.PatternElementChainContext=PatternElementChainContext;CypherParser.prototype.patternElementChain=function(){var localctx=new PatternElementChainContext(this,this._ctx,this.state);this.enterRule(localctx,226,CypherParser.RULE_patternElementChain);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1684;this.relationshipPattern();this.state=1686;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1685;this.match(CypherParser.SP);}this.state=1688;this.nodePattern();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RelationshipPatternContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_relationshipPattern;return this;}RelationshipPatternContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RelationshipPatternContext.prototype.constructor=RelationshipPatternContext;RelationshipPatternContext.prototype.relationshipPatternStart=function(){return this.getTypedRuleContext(RelationshipPatternStartContext,0);};RelationshipPatternContext.prototype.relationshipPatternEnd=function(){return this.getTypedRuleContext(RelationshipPatternEndContext,0);};RelationshipPatternContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};RelationshipPatternContext.prototype.relationshipDetail=function(){return this.getTypedRuleContext(RelationshipDetailContext,0);};RelationshipPatternContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterRelationshipPattern(this);}};RelationshipPatternContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitRelationshipPattern(this);}};CypherParser.RelationshipPatternContext=RelationshipPatternContext;CypherParser.prototype.relationshipPattern=function(){var localctx=new RelationshipPatternContext(this,this._ctx,this.state);this.enterRule(localctx,228,CypherParser.RULE_relationshipPattern);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1690;this.relationshipPatternStart();this.state=1692;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,219,this._ctx);if(la_===1){this.state=1691;this.match(CypherParser.SP);}this.state=1695;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.T__16){this.state=1694;this.relationshipDetail();}this.state=1698;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1697;this.match(CypherParser.SP);}this.state=1700;this.relationshipPatternEnd();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RelationshipPatternStartContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_relationshipPatternStart;return this;}RelationshipPatternStartContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RelationshipPatternStartContext.prototype.constructor=RelationshipPatternStartContext;RelationshipPatternStartContext.prototype.leftArrowHead=function(){return this.getTypedRuleContext(LeftArrowHeadContext,0);};RelationshipPatternStartContext.prototype.dash=function(){return this.getTypedRuleContext(DashContext,0);};RelationshipPatternStartContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};RelationshipPatternStartContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterRelationshipPatternStart(this);}};RelationshipPatternStartContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitRelationshipPatternStart(this);}};CypherParser.RelationshipPatternStartContext=RelationshipPatternStartContext;CypherParser.prototype.relationshipPatternStart=function(){var localctx=new RelationshipPatternStartContext(this,this._ctx,this.state);this.enterRule(localctx,230,CypherParser.RULE_relationshipPatternStart);var _la=0;// Token type
try{this.state=1709;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.T__29:case CypherParser.T__34:case CypherParser.T__35:case CypherParser.T__36:case CypherParser.T__37:this.enterOuterAlt(localctx,1);this.state=1702;this.leftArrowHead();this.state=1704;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1703;this.match(CypherParser.SP);}this.state=1706;this.dash();break;case CypherParser.T__2:case CypherParser.T__42:case CypherParser.T__43:case CypherParser.T__44:case CypherParser.T__45:case CypherParser.T__46:case CypherParser.T__47:case CypherParser.T__48:case CypherParser.T__49:case CypherParser.T__50:case CypherParser.T__51:case CypherParser.T__52:this.enterOuterAlt(localctx,2);this.state=1708;this.dash();break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RelationshipPatternEndContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_relationshipPatternEnd;return this;}RelationshipPatternEndContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RelationshipPatternEndContext.prototype.constructor=RelationshipPatternEndContext;RelationshipPatternEndContext.prototype.dash=function(){return this.getTypedRuleContext(DashContext,0);};RelationshipPatternEndContext.prototype.rightArrowHead=function(){return this.getTypedRuleContext(RightArrowHeadContext,0);};RelationshipPatternEndContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};RelationshipPatternEndContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterRelationshipPatternEnd(this);}};RelationshipPatternEndContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitRelationshipPatternEnd(this);}};CypherParser.RelationshipPatternEndContext=RelationshipPatternEndContext;CypherParser.prototype.relationshipPatternEnd=function(){var localctx=new RelationshipPatternEndContext(this,this._ctx,this.state);this.enterRule(localctx,232,CypherParser.RULE_relationshipPatternEnd);var _la=0;// Token type
try{this.state=1718;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,225,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1711;this.dash();this.state=1713;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1712;this.match(CypherParser.SP);}this.state=1715;this.rightArrowHead();break;case 2:this.enterOuterAlt(localctx,2);this.state=1717;this.dash();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RelationshipDetailContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_relationshipDetail;return this;}RelationshipDetailContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RelationshipDetailContext.prototype.constructor=RelationshipDetailContext;RelationshipDetailContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};RelationshipDetailContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};RelationshipDetailContext.prototype.relationshipTypes=function(){return this.getTypedRuleContext(RelationshipTypesContext,0);};RelationshipDetailContext.prototype.rangeLiteral=function(){return this.getTypedRuleContext(RangeLiteralContext,0);};RelationshipDetailContext.prototype.properties=function(){return this.getTypedRuleContext(PropertiesContext,0);};RelationshipDetailContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterRelationshipDetail(this);}};RelationshipDetailContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitRelationshipDetail(this);}};CypherParser.RelationshipDetailContext=RelationshipDetailContext;CypherParser.prototype.relationshipDetail=function(){var localctx=new RelationshipDetailContext(this,this._ctx,this.state);this.enterRule(localctx,234,CypherParser.RULE_relationshipDetail);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1720;this.match(CypherParser.T__16);this.state=1722;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1721;this.match(CypherParser.SP);}this.state=1728;this._errHandler.sync(this);_la=this._input.LA(1);if((_la-54&~0x1f)==0&&(1<<_la-54&(1<<CypherParser.CYPHER-54|1<<CypherParser.EXPLAIN-54|1<<CypherParser.PROFILE-54|1<<CypherParser.USING-54|1<<CypherParser.PERIODIC-54|1<<CypherParser.COMMIT-54|1<<CypherParser.UNION-54|1<<CypherParser.ALL-54|1<<CypherParser.CREATE-54|1<<CypherParser.DROP-54|1<<CypherParser.INDEX-54|1<<CypherParser.ON-54|1<<CypherParser.CONSTRAINT-54|1<<CypherParser.ASSERT-54|1<<CypherParser.IS-54|1<<CypherParser.UNIQUE-54|1<<CypherParser.EXISTS-54|1<<CypherParser.LOAD-54|1<<CypherParser.CSV-54|1<<CypherParser.WITH-54|1<<CypherParser.HEADERS-54|1<<CypherParser.FROM-54|1<<CypherParser.AS-54|1<<CypherParser.FIELDTERMINATOR-54|1<<CypherParser.OPTIONAL-54|1<<CypherParser.MATCH-54|1<<CypherParser.UNWIND-54|1<<CypherParser.MERGE-54|1<<CypherParser.SET-54|1<<CypherParser.DETACH-54|1<<CypherParser.DELETE-54|1<<CypherParser.REMOVE-54))!==0||(_la-86&~0x1f)==0&&(1<<_la-86&(1<<CypherParser.FOREACH-86|1<<CypherParser.IN-86|1<<CypherParser.DISTINCT-86|1<<CypherParser.RETURN-86|1<<CypherParser.ORDER-86|1<<CypherParser.BY-86|1<<CypherParser.L_SKIP-86|1<<CypherParser.LIMIT-86|1<<CypherParser.ASCENDING-86|1<<CypherParser.ASC-86|1<<CypherParser.DESCENDING-86|1<<CypherParser.DESC-86|1<<CypherParser.JOIN-86|1<<CypherParser.SCAN-86|1<<CypherParser.START-86|1<<CypherParser.NODE-86|1<<CypherParser.RELATIONSHIP-86|1<<CypherParser.REL-86|1<<CypherParser.WHERE-86|1<<CypherParser.SHORTESTPATH-86|1<<CypherParser.ALLSHORTESTPATHS-86|1<<CypherParser.OR-86|1<<CypherParser.XOR-86|1<<CypherParser.AND-86|1<<CypherParser.NOT-86|1<<CypherParser.STARTS-86|1<<CypherParser.ENDS-86|1<<CypherParser.CONTAINS-86|1<<CypherParser.NULL-86|1<<CypherParser.COUNT-86|1<<CypherParser.FILTER-86|1<<CypherParser.EXTRACT-86))!==0||(_la-118&~0x1f)==0&&(1<<_la-118&(1<<CypherParser.ANY-118|1<<CypherParser.NONE-118|1<<CypherParser.SINGLE-118|1<<CypherParser.TRUE-118|1<<CypherParser.FALSE-118|1<<CypherParser.REDUCE-118|1<<CypherParser.CASE-118|1<<CypherParser.ELSE-118|1<<CypherParser.END-118|1<<CypherParser.WHEN-118|1<<CypherParser.THEN-118|1<<CypherParser.CALL-118|1<<CypherParser.YIELD-118|1<<CypherParser.KEY-118|1<<CypherParser.HexLetter-118|1<<CypherParser.UnescapedSymbolicName-118))!==0||_la===CypherParser.EscapedSymbolicName){this.state=1724;this.variable();this.state=1726;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1725;this.match(CypherParser.SP);}}this.state=1734;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.T__1){this.state=1730;this.relationshipTypes();this.state=1732;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1731;this.match(CypherParser.SP);}}this.state=1737;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.T__22){this.state=1736;this.rangeLiteral();}this.state=1743;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.T__13||_la===CypherParser.T__33){this.state=1739;this.properties();this.state=1741;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1740;this.match(CypherParser.SP);}}this.state=1745;this.match(CypherParser.T__17);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PropertiesContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_properties;return this;}PropertiesContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PropertiesContext.prototype.constructor=PropertiesContext;PropertiesContext.prototype.mapLiteral=function(){return this.getTypedRuleContext(MapLiteralContext,0);};PropertiesContext.prototype.parameter=function(){return this.getTypedRuleContext(ParameterContext,0);};PropertiesContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterProperties(this);}};PropertiesContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitProperties(this);}};CypherParser.PropertiesContext=PropertiesContext;CypherParser.prototype.properties=function(){var localctx=new PropertiesContext(this,this._ctx,this.state);this.enterRule(localctx,236,CypherParser.RULE_properties);try{this.state=1749;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,234,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1747;this.mapLiteral();break;case 2:this.enterOuterAlt(localctx,2);this.state=1748;this.parameter();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RelTypeContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_relType;return this;}RelTypeContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RelTypeContext.prototype.constructor=RelTypeContext;RelTypeContext.prototype.relTypeName=function(){return this.getTypedRuleContext(RelTypeNameContext,0);};RelTypeContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};RelTypeContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterRelType(this);}};RelTypeContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitRelType(this);}};CypherParser.RelTypeContext=RelTypeContext;CypherParser.prototype.relType=function(){var localctx=new RelTypeContext(this,this._ctx,this.state);this.enterRule(localctx,238,CypherParser.RULE_relType);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1751;this.match(CypherParser.T__1);this.state=1753;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1752;this.match(CypherParser.SP);}this.state=1755;this.relTypeName();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RelationshipTypesContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_relationshipTypes;return this;}RelationshipTypesContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RelationshipTypesContext.prototype.constructor=RelationshipTypesContext;RelationshipTypesContext.prototype.relationshipType=function(){return this.getTypedRuleContext(RelationshipTypeContext,0);};RelationshipTypesContext.prototype.relationshipTypeOptionalColon=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(RelationshipTypeOptionalColonContext);}else{return this.getTypedRuleContext(RelationshipTypeOptionalColonContext,i);}};RelationshipTypesContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};RelationshipTypesContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterRelationshipTypes(this);}};RelationshipTypesContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitRelationshipTypes(this);}};CypherParser.RelationshipTypesContext=RelationshipTypesContext;CypherParser.prototype.relationshipTypes=function(){var localctx=new RelationshipTypesContext(this,this._ctx,this.state);this.enterRule(localctx,240,CypherParser.RULE_relationshipTypes);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1757;this.relationshipType();this.state=1765;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,237,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1759;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1758;this.match(CypherParser.SP);}this.state=1761;this.match(CypherParser.T__21);this.state=1762;this.relationshipTypeOptionalColon();}this.state=1767;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,237,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RelationshipTypeContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_relationshipType;return this;}RelationshipTypeContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RelationshipTypeContext.prototype.constructor=RelationshipTypeContext;RelationshipTypeContext.prototype.relTypeName=function(){return this.getTypedRuleContext(RelTypeNameContext,0);};RelationshipTypeContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterRelationshipType(this);}};RelationshipTypeContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitRelationshipType(this);}};CypherParser.RelationshipTypeContext=RelationshipTypeContext;CypherParser.prototype.relationshipType=function(){var localctx=new RelationshipTypeContext(this,this._ctx,this.state);this.enterRule(localctx,242,CypherParser.RULE_relationshipType);try{this.enterOuterAlt(localctx,1);this.state=1768;this.match(CypherParser.T__1);this.state=1769;this.relTypeName();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RelationshipTypeOptionalColonContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_relationshipTypeOptionalColon;return this;}RelationshipTypeOptionalColonContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RelationshipTypeOptionalColonContext.prototype.constructor=RelationshipTypeOptionalColonContext;RelationshipTypeOptionalColonContext.prototype.relTypeName=function(){return this.getTypedRuleContext(RelTypeNameContext,0);};RelationshipTypeOptionalColonContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterRelationshipTypeOptionalColon(this);}};RelationshipTypeOptionalColonContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitRelationshipTypeOptionalColon(this);}};CypherParser.RelationshipTypeOptionalColonContext=RelationshipTypeOptionalColonContext;CypherParser.prototype.relationshipTypeOptionalColon=function(){var localctx=new RelationshipTypeOptionalColonContext(this,this._ctx,this.state);this.enterRule(localctx,244,CypherParser.RULE_relationshipTypeOptionalColon);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1772;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.T__1){this.state=1771;this.match(CypherParser.T__1);}this.state=1774;this.relTypeName();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function NodeLabelsContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_nodeLabels;return this;}NodeLabelsContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);NodeLabelsContext.prototype.constructor=NodeLabelsContext;NodeLabelsContext.prototype.nodeLabel=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(NodeLabelContext);}else{return this.getTypedRuleContext(NodeLabelContext,i);}};NodeLabelsContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};NodeLabelsContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterNodeLabels(this);}};NodeLabelsContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitNodeLabels(this);}};CypherParser.NodeLabelsContext=NodeLabelsContext;CypherParser.prototype.nodeLabels=function(){var localctx=new NodeLabelsContext(this,this._ctx,this.state);this.enterRule(localctx,246,CypherParser.RULE_nodeLabels);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1776;this.nodeLabel();this.state=1783;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,240,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1778;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1777;this.match(CypherParser.SP);}this.state=1780;this.nodeLabel();}this.state=1785;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,240,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function NodeLabelContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_nodeLabel;return this;}NodeLabelContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);NodeLabelContext.prototype.constructor=NodeLabelContext;NodeLabelContext.prototype.labelName=function(){return this.getTypedRuleContext(LabelNameContext,0);};NodeLabelContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterNodeLabel(this);}};NodeLabelContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitNodeLabel(this);}};CypherParser.NodeLabelContext=NodeLabelContext;CypherParser.prototype.nodeLabel=function(){var localctx=new NodeLabelContext(this,this._ctx,this.state);this.enterRule(localctx,248,CypherParser.RULE_nodeLabel);try{this.enterOuterAlt(localctx,1);this.state=1786;this.match(CypherParser.T__1);this.state=1787;this.labelName();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RangeLiteralContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_rangeLiteral;return this;}RangeLiteralContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RangeLiteralContext.prototype.constructor=RangeLiteralContext;RangeLiteralContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};RangeLiteralContext.prototype.integerLiteral=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(IntegerLiteralContext);}else{return this.getTypedRuleContext(IntegerLiteralContext,i);}};RangeLiteralContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterRangeLiteral(this);}};RangeLiteralContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitRangeLiteral(this);}};CypherParser.RangeLiteralContext=RangeLiteralContext;CypherParser.prototype.rangeLiteral=function(){var localctx=new RangeLiteralContext(this,this._ctx,this.state);this.enterRule(localctx,250,CypherParser.RULE_rangeLiteral);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1789;this.match(CypherParser.T__22);this.state=1791;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1790;this.match(CypherParser.SP);}this.state=1797;this._errHandler.sync(this);_la=this._input.LA(1);if((_la-135&~0x1f)==0&&(1<<_la-135&(1<<CypherParser.HexInteger-135|1<<CypherParser.DecimalInteger-135|1<<CypherParser.OctalInteger-135))!==0){this.state=1793;this.integerLiteral();this.state=1795;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1794;this.match(CypherParser.SP);}}this.state=1809;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.T__23){this.state=1799;this.match(CypherParser.T__23);this.state=1801;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1800;this.match(CypherParser.SP);}this.state=1807;this._errHandler.sync(this);_la=this._input.LA(1);if((_la-135&~0x1f)==0&&(1<<_la-135&(1<<CypherParser.HexInteger-135|1<<CypherParser.DecimalInteger-135|1<<CypherParser.OctalInteger-135))!==0){this.state=1803;this.integerLiteral();this.state=1805;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1804;this.match(CypherParser.SP);}}}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function LabelNameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_labelName;return this;}LabelNameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);LabelNameContext.prototype.constructor=LabelNameContext;LabelNameContext.prototype.symbolicName=function(){return this.getTypedRuleContext(SymbolicNameContext,0);};LabelNameContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterLabelName(this);}};LabelNameContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitLabelName(this);}};CypherParser.LabelNameContext=LabelNameContext;CypherParser.prototype.labelName=function(){var localctx=new LabelNameContext(this,this._ctx,this.state);this.enterRule(localctx,252,CypherParser.RULE_labelName);try{this.enterOuterAlt(localctx,1);this.state=1811;this.symbolicName();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RelTypeNameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_relTypeName;return this;}RelTypeNameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RelTypeNameContext.prototype.constructor=RelTypeNameContext;RelTypeNameContext.prototype.symbolicName=function(){return this.getTypedRuleContext(SymbolicNameContext,0);};RelTypeNameContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterRelTypeName(this);}};RelTypeNameContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitRelTypeName(this);}};CypherParser.RelTypeNameContext=RelTypeNameContext;CypherParser.prototype.relTypeName=function(){var localctx=new RelTypeNameContext(this,this._ctx,this.state);this.enterRule(localctx,254,CypherParser.RULE_relTypeName);try{this.enterOuterAlt(localctx,1);this.state=1813;this.symbolicName();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ExpressionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_expression;return this;}ExpressionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ExpressionContext.prototype.constructor=ExpressionContext;ExpressionContext.prototype.orExpression=function(){return this.getTypedRuleContext(OrExpressionContext,0);};ExpressionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterExpression(this);}};ExpressionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitExpression(this);}};CypherParser.ExpressionContext=ExpressionContext;CypherParser.prototype.expression=function(){var localctx=new ExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,256,CypherParser.RULE_expression);try{this.enterOuterAlt(localctx,1);this.state=1815;this.orExpression();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function OrExpressionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_orExpression;return this;}OrExpressionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);OrExpressionContext.prototype.constructor=OrExpressionContext;OrExpressionContext.prototype.xorExpression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(XorExpressionContext);}else{return this.getTypedRuleContext(XorExpressionContext,i);}};OrExpressionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};OrExpressionContext.prototype.OR=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.OR);}else{return this.getToken(CypherParser.OR,i);}};OrExpressionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterOrExpression(this);}};OrExpressionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitOrExpression(this);}};CypherParser.OrExpressionContext=OrExpressionContext;CypherParser.prototype.orExpression=function(){var localctx=new OrExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,258,CypherParser.RULE_orExpression);try{this.enterOuterAlt(localctx,1);this.state=1817;this.xorExpression();this.state=1824;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,248,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1818;this.match(CypherParser.SP);this.state=1819;this.match(CypherParser.OR);this.state=1820;this.match(CypherParser.SP);this.state=1821;this.xorExpression();}this.state=1826;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,248,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function XorExpressionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_xorExpression;return this;}XorExpressionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);XorExpressionContext.prototype.constructor=XorExpressionContext;XorExpressionContext.prototype.andExpression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(AndExpressionContext);}else{return this.getTypedRuleContext(AndExpressionContext,i);}};XorExpressionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};XorExpressionContext.prototype.XOR=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.XOR);}else{return this.getToken(CypherParser.XOR,i);}};XorExpressionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterXorExpression(this);}};XorExpressionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitXorExpression(this);}};CypherParser.XorExpressionContext=XorExpressionContext;CypherParser.prototype.xorExpression=function(){var localctx=new XorExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,260,CypherParser.RULE_xorExpression);try{this.enterOuterAlt(localctx,1);this.state=1827;this.andExpression();this.state=1834;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,249,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1828;this.match(CypherParser.SP);this.state=1829;this.match(CypherParser.XOR);this.state=1830;this.match(CypherParser.SP);this.state=1831;this.andExpression();}this.state=1836;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,249,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function AndExpressionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_andExpression;return this;}AndExpressionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);AndExpressionContext.prototype.constructor=AndExpressionContext;AndExpressionContext.prototype.notExpression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(NotExpressionContext);}else{return this.getTypedRuleContext(NotExpressionContext,i);}};AndExpressionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};AndExpressionContext.prototype.AND=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.AND);}else{return this.getToken(CypherParser.AND,i);}};AndExpressionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterAndExpression(this);}};AndExpressionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitAndExpression(this);}};CypherParser.AndExpressionContext=AndExpressionContext;CypherParser.prototype.andExpression=function(){var localctx=new AndExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,262,CypherParser.RULE_andExpression);try{this.enterOuterAlt(localctx,1);this.state=1837;this.notExpression();this.state=1844;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,250,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1838;this.match(CypherParser.SP);this.state=1839;this.match(CypherParser.AND);this.state=1840;this.match(CypherParser.SP);this.state=1841;this.notExpression();}this.state=1846;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,250,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function NotExpressionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_notExpression;return this;}NotExpressionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);NotExpressionContext.prototype.constructor=NotExpressionContext;NotExpressionContext.prototype.comparisonExpression=function(){return this.getTypedRuleContext(ComparisonExpressionContext,0);};NotExpressionContext.prototype.NOT=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.NOT);}else{return this.getToken(CypherParser.NOT,i);}};NotExpressionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};NotExpressionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterNotExpression(this);}};NotExpressionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitNotExpression(this);}};CypherParser.NotExpressionContext=NotExpressionContext;CypherParser.prototype.notExpression=function(){var localctx=new NotExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,264,CypherParser.RULE_notExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1853;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,252,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1847;this.match(CypherParser.NOT);this.state=1849;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1848;this.match(CypherParser.SP);}}this.state=1855;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,252,this._ctx);}this.state=1856;this.comparisonExpression();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ComparisonExpressionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_comparisonExpression;return this;}ComparisonExpressionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ComparisonExpressionContext.prototype.constructor=ComparisonExpressionContext;ComparisonExpressionContext.prototype.addOrSubtractExpression=function(){return this.getTypedRuleContext(AddOrSubtractExpressionContext,0);};ComparisonExpressionContext.prototype.partialComparisonExpression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(PartialComparisonExpressionContext);}else{return this.getTypedRuleContext(PartialComparisonExpressionContext,i);}};ComparisonExpressionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};ComparisonExpressionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterComparisonExpression(this);}};ComparisonExpressionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitComparisonExpression(this);}};CypherParser.ComparisonExpressionContext=ComparisonExpressionContext;CypherParser.prototype.comparisonExpression=function(){var localctx=new ComparisonExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,266,CypherParser.RULE_comparisonExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1858;this.addOrSubtractExpression();this.state=1865;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,254,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1860;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1859;this.match(CypherParser.SP);}this.state=1862;this.partialComparisonExpression();}this.state=1867;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,254,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function AddOrSubtractExpressionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_addOrSubtractExpression;return this;}AddOrSubtractExpressionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);AddOrSubtractExpressionContext.prototype.constructor=AddOrSubtractExpressionContext;AddOrSubtractExpressionContext.prototype.multiplyDivideModuloExpression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(MultiplyDivideModuloExpressionContext);}else{return this.getTypedRuleContext(MultiplyDivideModuloExpressionContext,i);}};AddOrSubtractExpressionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};AddOrSubtractExpressionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterAddOrSubtractExpression(this);}};AddOrSubtractExpressionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitAddOrSubtractExpression(this);}};CypherParser.AddOrSubtractExpressionContext=AddOrSubtractExpressionContext;CypherParser.prototype.addOrSubtractExpression=function(){var localctx=new AddOrSubtractExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,268,CypherParser.RULE_addOrSubtractExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1868;this.multiplyDivideModuloExpression();this.state=1887;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,260,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1885;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,259,this._ctx);switch(la_){case 1:this.state=1870;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1869;this.match(CypherParser.SP);}this.state=1872;this.match(CypherParser.T__12);this.state=1874;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1873;this.match(CypherParser.SP);}this.state=1876;this.multiplyDivideModuloExpression();break;case 2:this.state=1878;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1877;this.match(CypherParser.SP);}this.state=1880;this.match(CypherParser.T__2);this.state=1882;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1881;this.match(CypherParser.SP);}this.state=1884;this.multiplyDivideModuloExpression();break;}}this.state=1889;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,260,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function MultiplyDivideModuloExpressionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_multiplyDivideModuloExpression;return this;}MultiplyDivideModuloExpressionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);MultiplyDivideModuloExpressionContext.prototype.constructor=MultiplyDivideModuloExpressionContext;MultiplyDivideModuloExpressionContext.prototype.powerOfExpression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(PowerOfExpressionContext);}else{return this.getTypedRuleContext(PowerOfExpressionContext,i);}};MultiplyDivideModuloExpressionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};MultiplyDivideModuloExpressionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterMultiplyDivideModuloExpression(this);}};MultiplyDivideModuloExpressionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitMultiplyDivideModuloExpression(this);}};CypherParser.MultiplyDivideModuloExpressionContext=MultiplyDivideModuloExpressionContext;CypherParser.prototype.multiplyDivideModuloExpression=function(){var localctx=new MultiplyDivideModuloExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,270,CypherParser.RULE_multiplyDivideModuloExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1890;this.powerOfExpression();this.state=1917;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,268,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1915;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,267,this._ctx);switch(la_){case 1:this.state=1892;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1891;this.match(CypherParser.SP);}this.state=1894;this.match(CypherParser.T__22);this.state=1896;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1895;this.match(CypherParser.SP);}this.state=1898;this.powerOfExpression();break;case 2:this.state=1900;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1899;this.match(CypherParser.SP);}this.state=1902;this.match(CypherParser.T__5);this.state=1904;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1903;this.match(CypherParser.SP);}this.state=1906;this.powerOfExpression();break;case 3:this.state=1908;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1907;this.match(CypherParser.SP);}this.state=1910;this.match(CypherParser.T__24);this.state=1912;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1911;this.match(CypherParser.SP);}this.state=1914;this.powerOfExpression();break;}}this.state=1919;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,268,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PowerOfExpressionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_powerOfExpression;return this;}PowerOfExpressionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PowerOfExpressionContext.prototype.constructor=PowerOfExpressionContext;PowerOfExpressionContext.prototype.unaryAddOrSubtractExpression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(UnaryAddOrSubtractExpressionContext);}else{return this.getTypedRuleContext(UnaryAddOrSubtractExpressionContext,i);}};PowerOfExpressionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};PowerOfExpressionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterPowerOfExpression(this);}};PowerOfExpressionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitPowerOfExpression(this);}};CypherParser.PowerOfExpressionContext=PowerOfExpressionContext;CypherParser.prototype.powerOfExpression=function(){var localctx=new PowerOfExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,272,CypherParser.RULE_powerOfExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1920;this.unaryAddOrSubtractExpression();this.state=1931;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,271,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1922;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1921;this.match(CypherParser.SP);}this.state=1924;this.match(CypherParser.T__25);this.state=1926;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1925;this.match(CypherParser.SP);}this.state=1928;this.unaryAddOrSubtractExpression();}this.state=1933;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,271,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function UnaryAddOrSubtractExpressionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_unaryAddOrSubtractExpression;return this;}UnaryAddOrSubtractExpressionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);UnaryAddOrSubtractExpressionContext.prototype.constructor=UnaryAddOrSubtractExpressionContext;UnaryAddOrSubtractExpressionContext.prototype.stringListNullOperatorExpression=function(){return this.getTypedRuleContext(StringListNullOperatorExpressionContext,0);};UnaryAddOrSubtractExpressionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};UnaryAddOrSubtractExpressionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterUnaryAddOrSubtractExpression(this);}};UnaryAddOrSubtractExpressionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitUnaryAddOrSubtractExpression(this);}};CypherParser.UnaryAddOrSubtractExpressionContext=UnaryAddOrSubtractExpressionContext;CypherParser.prototype.unaryAddOrSubtractExpression=function(){var localctx=new UnaryAddOrSubtractExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,274,CypherParser.RULE_unaryAddOrSubtractExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1940;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CypherParser.T__2||_la===CypherParser.T__12){this.state=1934;_la=this._input.LA(1);if(!(_la===CypherParser.T__2||_la===CypherParser.T__12)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}this.state=1936;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1935;this.match(CypherParser.SP);}this.state=1942;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=1943;this.stringListNullOperatorExpression();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function StringListNullOperatorExpressionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_stringListNullOperatorExpression;return this;}StringListNullOperatorExpressionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);StringListNullOperatorExpressionContext.prototype.constructor=StringListNullOperatorExpressionContext;StringListNullOperatorExpressionContext.prototype.propertyOrLabelsExpression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(PropertyOrLabelsExpressionContext);}else{return this.getTypedRuleContext(PropertyOrLabelsExpressionContext,i);}};StringListNullOperatorExpressionContext.prototype.expression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExpressionContext);}else{return this.getTypedRuleContext(ExpressionContext,i);}};StringListNullOperatorExpressionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};StringListNullOperatorExpressionContext.prototype.IS=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.IS);}else{return this.getToken(CypherParser.IS,i);}};StringListNullOperatorExpressionContext.prototype.NULL=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.NULL);}else{return this.getToken(CypherParser.NULL,i);}};StringListNullOperatorExpressionContext.prototype.NOT=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.NOT);}else{return this.getToken(CypherParser.NOT,i);}};StringListNullOperatorExpressionContext.prototype.IN=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.IN);}else{return this.getToken(CypherParser.IN,i);}};StringListNullOperatorExpressionContext.prototype.STARTS=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.STARTS);}else{return this.getToken(CypherParser.STARTS,i);}};StringListNullOperatorExpressionContext.prototype.WITH=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.WITH);}else{return this.getToken(CypherParser.WITH,i);}};StringListNullOperatorExpressionContext.prototype.ENDS=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.ENDS);}else{return this.getToken(CypherParser.ENDS,i);}};StringListNullOperatorExpressionContext.prototype.CONTAINS=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.CONTAINS);}else{return this.getToken(CypherParser.CONTAINS,i);}};StringListNullOperatorExpressionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterStringListNullOperatorExpression(this);}};StringListNullOperatorExpressionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitStringListNullOperatorExpression(this);}};CypherParser.StringListNullOperatorExpressionContext=StringListNullOperatorExpressionContext;CypherParser.prototype.stringListNullOperatorExpression=function(){var localctx=new StringListNullOperatorExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,276,CypherParser.RULE_stringListNullOperatorExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1945;this.propertyOrLabelsExpression();this.state=1999;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,282,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1997;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,281,this._ctx);switch(la_){case 1:this.state=1947;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1946;this.match(CypherParser.SP);}this.state=1949;this.match(CypherParser.T__16);this.state=1950;this.expression();this.state=1951;this.match(CypherParser.T__17);break;case 2:this.state=1954;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1953;this.match(CypherParser.SP);}this.state=1956;this.match(CypherParser.T__16);this.state=1958;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<CypherParser.T__2|1<<CypherParser.T__12|1<<CypherParser.T__13|1<<CypherParser.T__16|1<<CypherParser.T__18))!==0||(_la-34&~0x1f)==0&&(1<<_la-34&(1<<CypherParser.T__33-34|1<<CypherParser.CYPHER-34|1<<CypherParser.EXPLAIN-34|1<<CypherParser.PROFILE-34|1<<CypherParser.USING-34|1<<CypherParser.PERIODIC-34|1<<CypherParser.COMMIT-34|1<<CypherParser.UNION-34|1<<CypherParser.ALL-34|1<<CypherParser.CREATE-34|1<<CypherParser.DROP-34|1<<CypherParser.INDEX-34|1<<CypherParser.ON-34))!==0||(_la-66&~0x1f)==0&&(1<<_la-66&(1<<CypherParser.CONSTRAINT-66|1<<CypherParser.ASSERT-66|1<<CypherParser.IS-66|1<<CypherParser.UNIQUE-66|1<<CypherParser.EXISTS-66|1<<CypherParser.LOAD-66|1<<CypherParser.CSV-66|1<<CypherParser.WITH-66|1<<CypherParser.HEADERS-66|1<<CypherParser.FROM-66|1<<CypherParser.AS-66|1<<CypherParser.FIELDTERMINATOR-66|1<<CypherParser.OPTIONAL-66|1<<CypherParser.MATCH-66|1<<CypherParser.UNWIND-66|1<<CypherParser.MERGE-66|1<<CypherParser.SET-66|1<<CypherParser.DETACH-66|1<<CypherParser.DELETE-66|1<<CypherParser.REMOVE-66|1<<CypherParser.FOREACH-66|1<<CypherParser.IN-66|1<<CypherParser.DISTINCT-66|1<<CypherParser.RETURN-66|1<<CypherParser.ORDER-66|1<<CypherParser.BY-66|1<<CypherParser.L_SKIP-66|1<<CypherParser.LIMIT-66|1<<CypherParser.ASCENDING-66|1<<CypherParser.ASC-66|1<<CypherParser.DESCENDING-66|1<<CypherParser.DESC-66))!==0||(_la-98&~0x1f)==0&&(1<<_la-98&(1<<CypherParser.JOIN-98|1<<CypherParser.SCAN-98|1<<CypherParser.START-98|1<<CypherParser.NODE-98|1<<CypherParser.RELATIONSHIP-98|1<<CypherParser.REL-98|1<<CypherParser.WHERE-98|1<<CypherParser.SHORTESTPATH-98|1<<CypherParser.ALLSHORTESTPATHS-98|1<<CypherParser.OR-98|1<<CypherParser.XOR-98|1<<CypherParser.AND-98|1<<CypherParser.NOT-98|1<<CypherParser.STARTS-98|1<<CypherParser.ENDS-98|1<<CypherParser.CONTAINS-98|1<<CypherParser.NULL-98|1<<CypherParser.COUNT-98|1<<CypherParser.FILTER-98|1<<CypherParser.EXTRACT-98|1<<CypherParser.ANY-98|1<<CypherParser.NONE-98|1<<CypherParser.SINGLE-98|1<<CypherParser.TRUE-98|1<<CypherParser.FALSE-98|1<<CypherParser.REDUCE-98|1<<CypherParser.CASE-98|1<<CypherParser.ELSE-98|1<<CypherParser.END-98|1<<CypherParser.WHEN-98|1<<CypherParser.THEN-98|1<<CypherParser.CALL-98))!==0||(_la-130&~0x1f)==0&&(1<<_la-130&(1<<CypherParser.YIELD-130|1<<CypherParser.KEY-130|1<<CypherParser.StringLiteral-130|1<<CypherParser.HexInteger-130|1<<CypherParser.DecimalInteger-130|1<<CypherParser.OctalInteger-130|1<<CypherParser.HexLetter-130|1<<CypherParser.ExponentDecimalReal-130|1<<CypherParser.RegularDecimalReal-130|1<<CypherParser.UnescapedSymbolicName-130|1<<CypherParser.EscapedSymbolicName-130))!==0){this.state=1957;this.expression();}this.state=1960;this.match(CypherParser.T__23);this.state=1962;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<CypherParser.T__2|1<<CypherParser.T__12|1<<CypherParser.T__13|1<<CypherParser.T__16|1<<CypherParser.T__18))!==0||(_la-34&~0x1f)==0&&(1<<_la-34&(1<<CypherParser.T__33-34|1<<CypherParser.CYPHER-34|1<<CypherParser.EXPLAIN-34|1<<CypherParser.PROFILE-34|1<<CypherParser.USING-34|1<<CypherParser.PERIODIC-34|1<<CypherParser.COMMIT-34|1<<CypherParser.UNION-34|1<<CypherParser.ALL-34|1<<CypherParser.CREATE-34|1<<CypherParser.DROP-34|1<<CypherParser.INDEX-34|1<<CypherParser.ON-34))!==0||(_la-66&~0x1f)==0&&(1<<_la-66&(1<<CypherParser.CONSTRAINT-66|1<<CypherParser.ASSERT-66|1<<CypherParser.IS-66|1<<CypherParser.UNIQUE-66|1<<CypherParser.EXISTS-66|1<<CypherParser.LOAD-66|1<<CypherParser.CSV-66|1<<CypherParser.WITH-66|1<<CypherParser.HEADERS-66|1<<CypherParser.FROM-66|1<<CypherParser.AS-66|1<<CypherParser.FIELDTERMINATOR-66|1<<CypherParser.OPTIONAL-66|1<<CypherParser.MATCH-66|1<<CypherParser.UNWIND-66|1<<CypherParser.MERGE-66|1<<CypherParser.SET-66|1<<CypherParser.DETACH-66|1<<CypherParser.DELETE-66|1<<CypherParser.REMOVE-66|1<<CypherParser.FOREACH-66|1<<CypherParser.IN-66|1<<CypherParser.DISTINCT-66|1<<CypherParser.RETURN-66|1<<CypherParser.ORDER-66|1<<CypherParser.BY-66|1<<CypherParser.L_SKIP-66|1<<CypherParser.LIMIT-66|1<<CypherParser.ASCENDING-66|1<<CypherParser.ASC-66|1<<CypherParser.DESCENDING-66|1<<CypherParser.DESC-66))!==0||(_la-98&~0x1f)==0&&(1<<_la-98&(1<<CypherParser.JOIN-98|1<<CypherParser.SCAN-98|1<<CypherParser.START-98|1<<CypherParser.NODE-98|1<<CypherParser.RELATIONSHIP-98|1<<CypherParser.REL-98|1<<CypherParser.WHERE-98|1<<CypherParser.SHORTESTPATH-98|1<<CypherParser.ALLSHORTESTPATHS-98|1<<CypherParser.OR-98|1<<CypherParser.XOR-98|1<<CypherParser.AND-98|1<<CypherParser.NOT-98|1<<CypherParser.STARTS-98|1<<CypherParser.ENDS-98|1<<CypherParser.CONTAINS-98|1<<CypherParser.NULL-98|1<<CypherParser.COUNT-98|1<<CypherParser.FILTER-98|1<<CypherParser.EXTRACT-98|1<<CypherParser.ANY-98|1<<CypherParser.NONE-98|1<<CypherParser.SINGLE-98|1<<CypherParser.TRUE-98|1<<CypherParser.FALSE-98|1<<CypherParser.REDUCE-98|1<<CypherParser.CASE-98|1<<CypherParser.ELSE-98|1<<CypherParser.END-98|1<<CypherParser.WHEN-98|1<<CypherParser.THEN-98|1<<CypherParser.CALL-98))!==0||(_la-130&~0x1f)==0&&(1<<_la-130&(1<<CypherParser.YIELD-130|1<<CypherParser.KEY-130|1<<CypherParser.StringLiteral-130|1<<CypherParser.HexInteger-130|1<<CypherParser.DecimalInteger-130|1<<CypherParser.OctalInteger-130|1<<CypherParser.HexLetter-130|1<<CypherParser.ExponentDecimalReal-130|1<<CypherParser.RegularDecimalReal-130|1<<CypherParser.UnescapedSymbolicName-130|1<<CypherParser.EscapedSymbolicName-130))!==0){this.state=1961;this.expression();}this.state=1964;this.match(CypherParser.T__17);break;case 3:this.state=1981;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,279,this._ctx);switch(la_){case 1:this.state=1966;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1965;this.match(CypherParser.SP);}this.state=1968;this.match(CypherParser.T__26);break;case 2:this.state=1969;this.match(CypherParser.SP);this.state=1970;this.match(CypherParser.IN);break;case 3:this.state=1971;this.match(CypherParser.SP);this.state=1972;this.match(CypherParser.STARTS);this.state=1973;this.match(CypherParser.SP);this.state=1974;this.match(CypherParser.WITH);break;case 4:this.state=1975;this.match(CypherParser.SP);this.state=1976;this.match(CypherParser.ENDS);this.state=1977;this.match(CypherParser.SP);this.state=1978;this.match(CypherParser.WITH);break;case 5:this.state=1979;this.match(CypherParser.SP);this.state=1980;this.match(CypherParser.CONTAINS);break;}this.state=1984;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1983;this.match(CypherParser.SP);}this.state=1986;this.propertyOrLabelsExpression();break;case 4:this.state=1987;this.match(CypherParser.SP);this.state=1988;this.match(CypherParser.IS);this.state=1989;this.match(CypherParser.SP);this.state=1990;this.match(CypherParser.NULL);break;case 5:this.state=1991;this.match(CypherParser.SP);this.state=1992;this.match(CypherParser.IS);this.state=1993;this.match(CypherParser.SP);this.state=1994;this.match(CypherParser.NOT);this.state=1995;this.match(CypherParser.SP);this.state=1996;this.match(CypherParser.NULL);break;}}this.state=2001;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,282,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PropertyOrLabelsExpressionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_propertyOrLabelsExpression;return this;}PropertyOrLabelsExpressionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PropertyOrLabelsExpressionContext.prototype.constructor=PropertyOrLabelsExpressionContext;PropertyOrLabelsExpressionContext.prototype.atom=function(){return this.getTypedRuleContext(AtomContext,0);};PropertyOrLabelsExpressionContext.prototype.propertyLookup=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(PropertyLookupContext);}else{return this.getTypedRuleContext(PropertyLookupContext,i);}};PropertyOrLabelsExpressionContext.prototype.nodeLabels=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(NodeLabelsContext);}else{return this.getTypedRuleContext(NodeLabelsContext,i);}};PropertyOrLabelsExpressionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};PropertyOrLabelsExpressionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterPropertyOrLabelsExpression(this);}};PropertyOrLabelsExpressionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitPropertyOrLabelsExpression(this);}};CypherParser.PropertyOrLabelsExpressionContext=PropertyOrLabelsExpressionContext;CypherParser.prototype.propertyOrLabelsExpression=function(){var localctx=new PropertyOrLabelsExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,278,CypherParser.RULE_propertyOrLabelsExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2002;this.atom();this.state=2012;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,285,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=2004;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2003;this.match(CypherParser.SP);}this.state=2008;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.T__6:this.state=2006;this.propertyLookup();break;case CypherParser.T__1:this.state=2007;this.nodeLabels();break;default:throw new antlr4.error.NoViableAltException(this);}}this.state=2014;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,285,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function FilterFunctionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_filterFunction;return this;}FilterFunctionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);FilterFunctionContext.prototype.constructor=FilterFunctionContext;FilterFunctionContext.prototype.filterFunctionName=function(){return this.getTypedRuleContext(FilterFunctionNameContext,0);};FilterFunctionContext.prototype.filterExpression=function(){return this.getTypedRuleContext(FilterExpressionContext,0);};FilterFunctionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};FilterFunctionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterFilterFunction(this);}};FilterFunctionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitFilterFunction(this);}};CypherParser.FilterFunctionContext=FilterFunctionContext;CypherParser.prototype.filterFunction=function(){var localctx=new FilterFunctionContext(this,this._ctx,this.state);this.enterRule(localctx,280,CypherParser.RULE_filterFunction);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2015;this.filterFunctionName();this.state=2017;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2016;this.match(CypherParser.SP);}this.state=2019;this.match(CypherParser.T__18);this.state=2021;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2020;this.match(CypherParser.SP);}this.state=2023;this.filterExpression();this.state=2025;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2024;this.match(CypherParser.SP);}this.state=2027;this.match(CypherParser.T__19);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function FilterFunctionNameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_filterFunctionName;return this;}FilterFunctionNameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);FilterFunctionNameContext.prototype.constructor=FilterFunctionNameContext;FilterFunctionNameContext.prototype.FILTER=function(){return this.getToken(CypherParser.FILTER,0);};FilterFunctionNameContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterFilterFunctionName(this);}};FilterFunctionNameContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitFilterFunctionName(this);}};CypherParser.FilterFunctionNameContext=FilterFunctionNameContext;CypherParser.prototype.filterFunctionName=function(){var localctx=new FilterFunctionNameContext(this,this._ctx,this.state);this.enterRule(localctx,282,CypherParser.RULE_filterFunctionName);try{this.enterOuterAlt(localctx,1);this.state=2029;this.match(CypherParser.FILTER);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ExistsFunctionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_existsFunction;return this;}ExistsFunctionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ExistsFunctionContext.prototype.constructor=ExistsFunctionContext;ExistsFunctionContext.prototype.existsFunctionName=function(){return this.getTypedRuleContext(ExistsFunctionNameContext,0);};ExistsFunctionContext.prototype.expression=function(){return this.getTypedRuleContext(ExpressionContext,0);};ExistsFunctionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};ExistsFunctionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterExistsFunction(this);}};ExistsFunctionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitExistsFunction(this);}};CypherParser.ExistsFunctionContext=ExistsFunctionContext;CypherParser.prototype.existsFunction=function(){var localctx=new ExistsFunctionContext(this,this._ctx,this.state);this.enterRule(localctx,284,CypherParser.RULE_existsFunction);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2031;this.existsFunctionName();this.state=2033;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2032;this.match(CypherParser.SP);}this.state=2035;this.match(CypherParser.T__18);this.state=2037;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2036;this.match(CypherParser.SP);}this.state=2039;this.expression();this.state=2041;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2040;this.match(CypherParser.SP);}this.state=2043;this.match(CypherParser.T__19);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ExistsFunctionNameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_existsFunctionName;return this;}ExistsFunctionNameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ExistsFunctionNameContext.prototype.constructor=ExistsFunctionNameContext;ExistsFunctionNameContext.prototype.EXISTS=function(){return this.getToken(CypherParser.EXISTS,0);};ExistsFunctionNameContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterExistsFunctionName(this);}};ExistsFunctionNameContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitExistsFunctionName(this);}};CypherParser.ExistsFunctionNameContext=ExistsFunctionNameContext;CypherParser.prototype.existsFunctionName=function(){var localctx=new ExistsFunctionNameContext(this,this._ctx,this.state);this.enterRule(localctx,286,CypherParser.RULE_existsFunctionName);try{this.enterOuterAlt(localctx,1);this.state=2045;this.match(CypherParser.EXISTS);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function AllFunctionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_allFunction;return this;}AllFunctionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);AllFunctionContext.prototype.constructor=AllFunctionContext;AllFunctionContext.prototype.allFunctionName=function(){return this.getTypedRuleContext(AllFunctionNameContext,0);};AllFunctionContext.prototype.filterExpression=function(){return this.getTypedRuleContext(FilterExpressionContext,0);};AllFunctionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};AllFunctionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterAllFunction(this);}};AllFunctionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitAllFunction(this);}};CypherParser.AllFunctionContext=AllFunctionContext;CypherParser.prototype.allFunction=function(){var localctx=new AllFunctionContext(this,this._ctx,this.state);this.enterRule(localctx,288,CypherParser.RULE_allFunction);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2047;this.allFunctionName();this.state=2049;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2048;this.match(CypherParser.SP);}this.state=2051;this.match(CypherParser.T__18);this.state=2053;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2052;this.match(CypherParser.SP);}this.state=2055;this.filterExpression();this.state=2057;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2056;this.match(CypherParser.SP);}this.state=2059;this.match(CypherParser.T__19);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function AllFunctionNameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_allFunctionName;return this;}AllFunctionNameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);AllFunctionNameContext.prototype.constructor=AllFunctionNameContext;AllFunctionNameContext.prototype.ALL=function(){return this.getToken(CypherParser.ALL,0);};AllFunctionNameContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterAllFunctionName(this);}};AllFunctionNameContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitAllFunctionName(this);}};CypherParser.AllFunctionNameContext=AllFunctionNameContext;CypherParser.prototype.allFunctionName=function(){var localctx=new AllFunctionNameContext(this,this._ctx,this.state);this.enterRule(localctx,290,CypherParser.RULE_allFunctionName);try{this.enterOuterAlt(localctx,1);this.state=2061;this.match(CypherParser.ALL);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function AnyFunctionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_anyFunction;return this;}AnyFunctionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);AnyFunctionContext.prototype.constructor=AnyFunctionContext;AnyFunctionContext.prototype.anyFunctionName=function(){return this.getTypedRuleContext(AnyFunctionNameContext,0);};AnyFunctionContext.prototype.filterExpression=function(){return this.getTypedRuleContext(FilterExpressionContext,0);};AnyFunctionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};AnyFunctionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterAnyFunction(this);}};AnyFunctionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitAnyFunction(this);}};CypherParser.AnyFunctionContext=AnyFunctionContext;CypherParser.prototype.anyFunction=function(){var localctx=new AnyFunctionContext(this,this._ctx,this.state);this.enterRule(localctx,292,CypherParser.RULE_anyFunction);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2063;this.anyFunctionName();this.state=2065;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2064;this.match(CypherParser.SP);}this.state=2067;this.match(CypherParser.T__18);this.state=2069;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2068;this.match(CypherParser.SP);}this.state=2071;this.filterExpression();this.state=2073;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2072;this.match(CypherParser.SP);}this.state=2075;this.match(CypherParser.T__19);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function AnyFunctionNameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_anyFunctionName;return this;}AnyFunctionNameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);AnyFunctionNameContext.prototype.constructor=AnyFunctionNameContext;AnyFunctionNameContext.prototype.ANY=function(){return this.getToken(CypherParser.ANY,0);};AnyFunctionNameContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterAnyFunctionName(this);}};AnyFunctionNameContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitAnyFunctionName(this);}};CypherParser.AnyFunctionNameContext=AnyFunctionNameContext;CypherParser.prototype.anyFunctionName=function(){var localctx=new AnyFunctionNameContext(this,this._ctx,this.state);this.enterRule(localctx,294,CypherParser.RULE_anyFunctionName);try{this.enterOuterAlt(localctx,1);this.state=2077;this.match(CypherParser.ANY);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function NoneFunctionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_noneFunction;return this;}NoneFunctionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);NoneFunctionContext.prototype.constructor=NoneFunctionContext;NoneFunctionContext.prototype.noneFunctionName=function(){return this.getTypedRuleContext(NoneFunctionNameContext,0);};NoneFunctionContext.prototype.filterExpression=function(){return this.getTypedRuleContext(FilterExpressionContext,0);};NoneFunctionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};NoneFunctionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterNoneFunction(this);}};NoneFunctionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitNoneFunction(this);}};CypherParser.NoneFunctionContext=NoneFunctionContext;CypherParser.prototype.noneFunction=function(){var localctx=new NoneFunctionContext(this,this._ctx,this.state);this.enterRule(localctx,296,CypherParser.RULE_noneFunction);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2079;this.noneFunctionName();this.state=2081;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2080;this.match(CypherParser.SP);}this.state=2083;this.match(CypherParser.T__18);this.state=2085;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2084;this.match(CypherParser.SP);}this.state=2087;this.filterExpression();this.state=2089;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2088;this.match(CypherParser.SP);}this.state=2091;this.match(CypherParser.T__19);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function NoneFunctionNameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_noneFunctionName;return this;}NoneFunctionNameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);NoneFunctionNameContext.prototype.constructor=NoneFunctionNameContext;NoneFunctionNameContext.prototype.NONE=function(){return this.getToken(CypherParser.NONE,0);};NoneFunctionNameContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterNoneFunctionName(this);}};NoneFunctionNameContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitNoneFunctionName(this);}};CypherParser.NoneFunctionNameContext=NoneFunctionNameContext;CypherParser.prototype.noneFunctionName=function(){var localctx=new NoneFunctionNameContext(this,this._ctx,this.state);this.enterRule(localctx,298,CypherParser.RULE_noneFunctionName);try{this.enterOuterAlt(localctx,1);this.state=2093;this.match(CypherParser.NONE);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function SingleFunctionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_singleFunction;return this;}SingleFunctionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);SingleFunctionContext.prototype.constructor=SingleFunctionContext;SingleFunctionContext.prototype.singleFunctionName=function(){return this.getTypedRuleContext(SingleFunctionNameContext,0);};SingleFunctionContext.prototype.filterExpression=function(){return this.getTypedRuleContext(FilterExpressionContext,0);};SingleFunctionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};SingleFunctionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterSingleFunction(this);}};SingleFunctionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitSingleFunction(this);}};CypherParser.SingleFunctionContext=SingleFunctionContext;CypherParser.prototype.singleFunction=function(){var localctx=new SingleFunctionContext(this,this._ctx,this.state);this.enterRule(localctx,300,CypherParser.RULE_singleFunction);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2095;this.singleFunctionName();this.state=2097;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2096;this.match(CypherParser.SP);}this.state=2099;this.match(CypherParser.T__18);this.state=2101;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2100;this.match(CypherParser.SP);}this.state=2103;this.filterExpression();this.state=2105;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2104;this.match(CypherParser.SP);}this.state=2107;this.match(CypherParser.T__19);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function SingleFunctionNameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_singleFunctionName;return this;}SingleFunctionNameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);SingleFunctionNameContext.prototype.constructor=SingleFunctionNameContext;SingleFunctionNameContext.prototype.SINGLE=function(){return this.getToken(CypherParser.SINGLE,0);};SingleFunctionNameContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterSingleFunctionName(this);}};SingleFunctionNameContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitSingleFunctionName(this);}};CypherParser.SingleFunctionNameContext=SingleFunctionNameContext;CypherParser.prototype.singleFunctionName=function(){var localctx=new SingleFunctionNameContext(this,this._ctx,this.state);this.enterRule(localctx,302,CypherParser.RULE_singleFunctionName);try{this.enterOuterAlt(localctx,1);this.state=2109;this.match(CypherParser.SINGLE);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ExtractFunctionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_extractFunction;return this;}ExtractFunctionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ExtractFunctionContext.prototype.constructor=ExtractFunctionContext;ExtractFunctionContext.prototype.extractFunctionName=function(){return this.getTypedRuleContext(ExtractFunctionNameContext,0);};ExtractFunctionContext.prototype.filterExpression=function(){return this.getTypedRuleContext(FilterExpressionContext,0);};ExtractFunctionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};ExtractFunctionContext.prototype.expression=function(){return this.getTypedRuleContext(ExpressionContext,0);};ExtractFunctionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterExtractFunction(this);}};ExtractFunctionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitExtractFunction(this);}};CypherParser.ExtractFunctionContext=ExtractFunctionContext;CypherParser.prototype.extractFunction=function(){var localctx=new ExtractFunctionContext(this,this._ctx,this.state);this.enterRule(localctx,304,CypherParser.RULE_extractFunction);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2111;this.extractFunctionName();this.state=2113;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2112;this.match(CypherParser.SP);}this.state=2115;this.match(CypherParser.T__18);this.state=2117;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2116;this.match(CypherParser.SP);}this.state=2119;this.filterExpression();this.state=2128;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,308,this._ctx);if(la_===1){this.state=2121;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2120;this.match(CypherParser.SP);}this.state=2123;this.match(CypherParser.T__21);this.state=2125;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2124;this.match(CypherParser.SP);}this.state=2127;this.expression();}this.state=2131;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2130;this.match(CypherParser.SP);}this.state=2133;this.match(CypherParser.T__19);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ExtractFunctionNameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_extractFunctionName;return this;}ExtractFunctionNameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ExtractFunctionNameContext.prototype.constructor=ExtractFunctionNameContext;ExtractFunctionNameContext.prototype.EXTRACT=function(){return this.getToken(CypherParser.EXTRACT,0);};ExtractFunctionNameContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterExtractFunctionName(this);}};ExtractFunctionNameContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitExtractFunctionName(this);}};CypherParser.ExtractFunctionNameContext=ExtractFunctionNameContext;CypherParser.prototype.extractFunctionName=function(){var localctx=new ExtractFunctionNameContext(this,this._ctx,this.state);this.enterRule(localctx,306,CypherParser.RULE_extractFunctionName);try{this.enterOuterAlt(localctx,1);this.state=2135;this.match(CypherParser.EXTRACT);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ReduceFunctionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_reduceFunction;return this;}ReduceFunctionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ReduceFunctionContext.prototype.constructor=ReduceFunctionContext;ReduceFunctionContext.prototype.reduceFunctionName=function(){return this.getTypedRuleContext(ReduceFunctionNameContext,0);};ReduceFunctionContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};ReduceFunctionContext.prototype.expression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExpressionContext);}else{return this.getTypedRuleContext(ExpressionContext,i);}};ReduceFunctionContext.prototype.idInColl=function(){return this.getTypedRuleContext(IdInCollContext,0);};ReduceFunctionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};ReduceFunctionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterReduceFunction(this);}};ReduceFunctionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitReduceFunction(this);}};CypherParser.ReduceFunctionContext=ReduceFunctionContext;CypherParser.prototype.reduceFunction=function(){var localctx=new ReduceFunctionContext(this,this._ctx,this.state);this.enterRule(localctx,308,CypherParser.RULE_reduceFunction);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2137;this.reduceFunctionName();this.state=2139;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2138;this.match(CypherParser.SP);}this.state=2141;this.match(CypherParser.T__18);this.state=2143;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2142;this.match(CypherParser.SP);}this.state=2145;this.variable();this.state=2147;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2146;this.match(CypherParser.SP);}this.state=2149;this.match(CypherParser.T__11);this.state=2151;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2150;this.match(CypherParser.SP);}this.state=2153;this.expression();this.state=2155;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2154;this.match(CypherParser.SP);}this.state=2157;this.match(CypherParser.T__14);this.state=2159;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2158;this.match(CypherParser.SP);}this.state=2161;this.idInColl();this.state=2163;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2162;this.match(CypherParser.SP);}this.state=2165;this.match(CypherParser.T__21);this.state=2167;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2166;this.match(CypherParser.SP);}this.state=2169;this.expression();this.state=2171;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2170;this.match(CypherParser.SP);}this.state=2173;this.match(CypherParser.T__19);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ReduceFunctionNameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_reduceFunctionName;return this;}ReduceFunctionNameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ReduceFunctionNameContext.prototype.constructor=ReduceFunctionNameContext;ReduceFunctionNameContext.prototype.REDUCE=function(){return this.getToken(CypherParser.REDUCE,0);};ReduceFunctionNameContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterReduceFunctionName(this);}};ReduceFunctionNameContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitReduceFunctionName(this);}};CypherParser.ReduceFunctionNameContext=ReduceFunctionNameContext;CypherParser.prototype.reduceFunctionName=function(){var localctx=new ReduceFunctionNameContext(this,this._ctx,this.state);this.enterRule(localctx,310,CypherParser.RULE_reduceFunctionName);try{this.enterOuterAlt(localctx,1);this.state=2175;this.match(CypherParser.REDUCE);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ShortestPathPatternFunctionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_shortestPathPatternFunction;return this;}ShortestPathPatternFunctionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ShortestPathPatternFunctionContext.prototype.constructor=ShortestPathPatternFunctionContext;ShortestPathPatternFunctionContext.prototype.shortestPathFunctionName=function(){return this.getTypedRuleContext(ShortestPathFunctionNameContext,0);};ShortestPathPatternFunctionContext.prototype.patternElement=function(){return this.getTypedRuleContext(PatternElementContext,0);};ShortestPathPatternFunctionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};ShortestPathPatternFunctionContext.prototype.allShortestPathFunctionName=function(){return this.getTypedRuleContext(AllShortestPathFunctionNameContext,0);};ShortestPathPatternFunctionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterShortestPathPatternFunction(this);}};ShortestPathPatternFunctionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitShortestPathPatternFunction(this);}};CypherParser.ShortestPathPatternFunctionContext=ShortestPathPatternFunctionContext;CypherParser.prototype.shortestPathPatternFunction=function(){var localctx=new ShortestPathPatternFunctionContext(this,this._ctx,this.state);this.enterRule(localctx,312,CypherParser.RULE_shortestPathPatternFunction);var _la=0;// Token type
try{this.state=2205;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.SHORTESTPATH:this.enterOuterAlt(localctx,1);this.state=2177;this.shortestPathFunctionName();this.state=2179;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2178;this.match(CypherParser.SP);}this.state=2181;this.match(CypherParser.T__18);this.state=2183;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2182;this.match(CypherParser.SP);}this.state=2185;this.patternElement();this.state=2187;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2186;this.match(CypherParser.SP);}this.state=2189;this.match(CypherParser.T__19);break;case CypherParser.ALLSHORTESTPATHS:this.enterOuterAlt(localctx,2);this.state=2191;this.allShortestPathFunctionName();this.state=2193;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2192;this.match(CypherParser.SP);}this.state=2195;this.match(CypherParser.T__18);this.state=2197;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2196;this.match(CypherParser.SP);}this.state=2199;this.patternElement();this.state=2201;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2200;this.match(CypherParser.SP);}this.state=2203;this.match(CypherParser.T__19);break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ShortestPathFunctionNameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_shortestPathFunctionName;return this;}ShortestPathFunctionNameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ShortestPathFunctionNameContext.prototype.constructor=ShortestPathFunctionNameContext;ShortestPathFunctionNameContext.prototype.SHORTESTPATH=function(){return this.getToken(CypherParser.SHORTESTPATH,0);};ShortestPathFunctionNameContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterShortestPathFunctionName(this);}};ShortestPathFunctionNameContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitShortestPathFunctionName(this);}};CypherParser.ShortestPathFunctionNameContext=ShortestPathFunctionNameContext;CypherParser.prototype.shortestPathFunctionName=function(){var localctx=new ShortestPathFunctionNameContext(this,this._ctx,this.state);this.enterRule(localctx,314,CypherParser.RULE_shortestPathFunctionName);try{this.enterOuterAlt(localctx,1);this.state=2207;this.match(CypherParser.SHORTESTPATH);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function AllShortestPathFunctionNameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_allShortestPathFunctionName;return this;}AllShortestPathFunctionNameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);AllShortestPathFunctionNameContext.prototype.constructor=AllShortestPathFunctionNameContext;AllShortestPathFunctionNameContext.prototype.ALLSHORTESTPATHS=function(){return this.getToken(CypherParser.ALLSHORTESTPATHS,0);};AllShortestPathFunctionNameContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterAllShortestPathFunctionName(this);}};AllShortestPathFunctionNameContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitAllShortestPathFunctionName(this);}};CypherParser.AllShortestPathFunctionNameContext=AllShortestPathFunctionNameContext;CypherParser.prototype.allShortestPathFunctionName=function(){var localctx=new AllShortestPathFunctionNameContext(this,this._ctx,this.state);this.enterRule(localctx,316,CypherParser.RULE_allShortestPathFunctionName);try{this.enterOuterAlt(localctx,1);this.state=2209;this.match(CypherParser.ALLSHORTESTPATHS);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function AtomContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_atom;return this;}AtomContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);AtomContext.prototype.constructor=AtomContext;AtomContext.prototype.literal=function(){return this.getTypedRuleContext(LiteralContext,0);};AtomContext.prototype.parameter=function(){return this.getTypedRuleContext(ParameterContext,0);};AtomContext.prototype.caseExpression=function(){return this.getTypedRuleContext(CaseExpressionContext,0);};AtomContext.prototype.COUNT=function(){return this.getToken(CypherParser.COUNT,0);};AtomContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};AtomContext.prototype.listComprehension=function(){return this.getTypedRuleContext(ListComprehensionContext,0);};AtomContext.prototype.patternComprehension=function(){return this.getTypedRuleContext(PatternComprehensionContext,0);};AtomContext.prototype.filterFunction=function(){return this.getTypedRuleContext(FilterFunctionContext,0);};AtomContext.prototype.extractFunction=function(){return this.getTypedRuleContext(ExtractFunctionContext,0);};AtomContext.prototype.reduceFunction=function(){return this.getTypedRuleContext(ReduceFunctionContext,0);};AtomContext.prototype.allFunction=function(){return this.getTypedRuleContext(AllFunctionContext,0);};AtomContext.prototype.anyFunction=function(){return this.getTypedRuleContext(AnyFunctionContext,0);};AtomContext.prototype.noneFunction=function(){return this.getTypedRuleContext(NoneFunctionContext,0);};AtomContext.prototype.singleFunction=function(){return this.getTypedRuleContext(SingleFunctionContext,0);};AtomContext.prototype.existsFunction=function(){return this.getTypedRuleContext(ExistsFunctionContext,0);};AtomContext.prototype.shortestPathPatternFunction=function(){return this.getTypedRuleContext(ShortestPathPatternFunctionContext,0);};AtomContext.prototype.relationshipsPattern=function(){return this.getTypedRuleContext(RelationshipsPatternContext,0);};AtomContext.prototype.parenthesizedExpression=function(){return this.getTypedRuleContext(ParenthesizedExpressionContext,0);};AtomContext.prototype.functionInvocation=function(){return this.getTypedRuleContext(FunctionInvocationContext,0);};AtomContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};AtomContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterAtom(this);}};AtomContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitAtom(this);}};CypherParser.AtomContext=AtomContext;CypherParser.prototype.atom=function(){var localctx=new AtomContext(this,this._ctx,this.state);this.enterRule(localctx,318,CypherParser.RULE_atom);var _la=0;// Token type
try{this.state=2242;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,329,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=2211;this.literal();break;case 2:this.enterOuterAlt(localctx,2);this.state=2212;this.parameter();break;case 3:this.enterOuterAlt(localctx,3);this.state=2213;this.caseExpression();break;case 4:this.enterOuterAlt(localctx,4);this.state=2214;this.match(CypherParser.COUNT);this.state=2216;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2215;this.match(CypherParser.SP);}this.state=2218;this.match(CypherParser.T__18);this.state=2220;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2219;this.match(CypherParser.SP);}this.state=2222;this.match(CypherParser.T__22);this.state=2224;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2223;this.match(CypherParser.SP);}this.state=2226;this.match(CypherParser.T__19);break;case 5:this.enterOuterAlt(localctx,5);this.state=2227;this.listComprehension();break;case 6:this.enterOuterAlt(localctx,6);this.state=2228;this.patternComprehension();break;case 7:this.enterOuterAlt(localctx,7);this.state=2229;this.filterFunction();break;case 8:this.enterOuterAlt(localctx,8);this.state=2230;this.extractFunction();break;case 9:this.enterOuterAlt(localctx,9);this.state=2231;this.reduceFunction();break;case 10:this.enterOuterAlt(localctx,10);this.state=2232;this.allFunction();break;case 11:this.enterOuterAlt(localctx,11);this.state=2233;this.anyFunction();break;case 12:this.enterOuterAlt(localctx,12);this.state=2234;this.noneFunction();break;case 13:this.enterOuterAlt(localctx,13);this.state=2235;this.singleFunction();break;case 14:this.enterOuterAlt(localctx,14);this.state=2236;this.existsFunction();break;case 15:this.enterOuterAlt(localctx,15);this.state=2237;this.shortestPathPatternFunction();break;case 16:this.enterOuterAlt(localctx,16);this.state=2238;this.relationshipsPattern();break;case 17:this.enterOuterAlt(localctx,17);this.state=2239;this.parenthesizedExpression();break;case 18:this.enterOuterAlt(localctx,18);this.state=2240;this.functionInvocation();break;case 19:this.enterOuterAlt(localctx,19);this.state=2241;this.variable();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function LiteralContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_literal;return this;}LiteralContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);LiteralContext.prototype.constructor=LiteralContext;LiteralContext.prototype.numberLiteral=function(){return this.getTypedRuleContext(NumberLiteralContext,0);};LiteralContext.prototype.stringLiteral=function(){return this.getTypedRuleContext(StringLiteralContext,0);};LiteralContext.prototype.booleanLiteral=function(){return this.getTypedRuleContext(BooleanLiteralContext,0);};LiteralContext.prototype.NULL=function(){return this.getToken(CypherParser.NULL,0);};LiteralContext.prototype.mapLiteral=function(){return this.getTypedRuleContext(MapLiteralContext,0);};LiteralContext.prototype.listLiteral=function(){return this.getTypedRuleContext(ListLiteralContext,0);};LiteralContext.prototype.mapProjection=function(){return this.getTypedRuleContext(MapProjectionContext,0);};LiteralContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterLiteral(this);}};LiteralContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitLiteral(this);}};CypherParser.LiteralContext=LiteralContext;CypherParser.prototype.literal=function(){var localctx=new LiteralContext(this,this._ctx,this.state);this.enterRule(localctx,320,CypherParser.RULE_literal);try{this.state=2251;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,330,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=2244;this.numberLiteral();break;case 2:this.enterOuterAlt(localctx,2);this.state=2245;this.stringLiteral();break;case 3:this.enterOuterAlt(localctx,3);this.state=2246;this.booleanLiteral();break;case 4:this.enterOuterAlt(localctx,4);this.state=2247;this.match(CypherParser.NULL);break;case 5:this.enterOuterAlt(localctx,5);this.state=2248;this.mapLiteral();break;case 6:this.enterOuterAlt(localctx,6);this.state=2249;this.listLiteral();break;case 7:this.enterOuterAlt(localctx,7);this.state=2250;this.mapProjection();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function StringLiteralContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_stringLiteral;return this;}StringLiteralContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);StringLiteralContext.prototype.constructor=StringLiteralContext;StringLiteralContext.prototype.StringLiteral=function(){return this.getToken(CypherParser.StringLiteral,0);};StringLiteralContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterStringLiteral(this);}};StringLiteralContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitStringLiteral(this);}};CypherParser.StringLiteralContext=StringLiteralContext;CypherParser.prototype.stringLiteral=function(){var localctx=new StringLiteralContext(this,this._ctx,this.state);this.enterRule(localctx,322,CypherParser.RULE_stringLiteral);try{this.enterOuterAlt(localctx,1);this.state=2253;this.match(CypherParser.StringLiteral);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function BooleanLiteralContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_booleanLiteral;return this;}BooleanLiteralContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);BooleanLiteralContext.prototype.constructor=BooleanLiteralContext;BooleanLiteralContext.prototype.TRUE=function(){return this.getToken(CypherParser.TRUE,0);};BooleanLiteralContext.prototype.FALSE=function(){return this.getToken(CypherParser.FALSE,0);};BooleanLiteralContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterBooleanLiteral(this);}};BooleanLiteralContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitBooleanLiteral(this);}};CypherParser.BooleanLiteralContext=BooleanLiteralContext;CypherParser.prototype.booleanLiteral=function(){var localctx=new BooleanLiteralContext(this,this._ctx,this.state);this.enterRule(localctx,324,CypherParser.RULE_booleanLiteral);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2255;_la=this._input.LA(1);if(!(_la===CypherParser.TRUE||_la===CypherParser.FALSE)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ListLiteralContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_listLiteral;return this;}ListLiteralContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ListLiteralContext.prototype.constructor=ListLiteralContext;ListLiteralContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};ListLiteralContext.prototype.expression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExpressionContext);}else{return this.getTypedRuleContext(ExpressionContext,i);}};ListLiteralContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterListLiteral(this);}};ListLiteralContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitListLiteral(this);}};CypherParser.ListLiteralContext=ListLiteralContext;CypherParser.prototype.listLiteral=function(){var localctx=new ListLiteralContext(this,this._ctx,this.state);this.enterRule(localctx,326,CypherParser.RULE_listLiteral);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2257;this.match(CypherParser.T__16);this.state=2259;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2258;this.match(CypherParser.SP);}this.state=2278;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<CypherParser.T__2|1<<CypherParser.T__12|1<<CypherParser.T__13|1<<CypherParser.T__16|1<<CypherParser.T__18))!==0||(_la-34&~0x1f)==0&&(1<<_la-34&(1<<CypherParser.T__33-34|1<<CypherParser.CYPHER-34|1<<CypherParser.EXPLAIN-34|1<<CypherParser.PROFILE-34|1<<CypherParser.USING-34|1<<CypherParser.PERIODIC-34|1<<CypherParser.COMMIT-34|1<<CypherParser.UNION-34|1<<CypherParser.ALL-34|1<<CypherParser.CREATE-34|1<<CypherParser.DROP-34|1<<CypherParser.INDEX-34|1<<CypherParser.ON-34))!==0||(_la-66&~0x1f)==0&&(1<<_la-66&(1<<CypherParser.CONSTRAINT-66|1<<CypherParser.ASSERT-66|1<<CypherParser.IS-66|1<<CypherParser.UNIQUE-66|1<<CypherParser.EXISTS-66|1<<CypherParser.LOAD-66|1<<CypherParser.CSV-66|1<<CypherParser.WITH-66|1<<CypherParser.HEADERS-66|1<<CypherParser.FROM-66|1<<CypherParser.AS-66|1<<CypherParser.FIELDTERMINATOR-66|1<<CypherParser.OPTIONAL-66|1<<CypherParser.MATCH-66|1<<CypherParser.UNWIND-66|1<<CypherParser.MERGE-66|1<<CypherParser.SET-66|1<<CypherParser.DETACH-66|1<<CypherParser.DELETE-66|1<<CypherParser.REMOVE-66|1<<CypherParser.FOREACH-66|1<<CypherParser.IN-66|1<<CypherParser.DISTINCT-66|1<<CypherParser.RETURN-66|1<<CypherParser.ORDER-66|1<<CypherParser.BY-66|1<<CypherParser.L_SKIP-66|1<<CypherParser.LIMIT-66|1<<CypherParser.ASCENDING-66|1<<CypherParser.ASC-66|1<<CypherParser.DESCENDING-66|1<<CypherParser.DESC-66))!==0||(_la-98&~0x1f)==0&&(1<<_la-98&(1<<CypherParser.JOIN-98|1<<CypherParser.SCAN-98|1<<CypherParser.START-98|1<<CypherParser.NODE-98|1<<CypherParser.RELATIONSHIP-98|1<<CypherParser.REL-98|1<<CypherParser.WHERE-98|1<<CypherParser.SHORTESTPATH-98|1<<CypherParser.ALLSHORTESTPATHS-98|1<<CypherParser.OR-98|1<<CypherParser.XOR-98|1<<CypherParser.AND-98|1<<CypherParser.NOT-98|1<<CypherParser.STARTS-98|1<<CypherParser.ENDS-98|1<<CypherParser.CONTAINS-98|1<<CypherParser.NULL-98|1<<CypherParser.COUNT-98|1<<CypherParser.FILTER-98|1<<CypherParser.EXTRACT-98|1<<CypherParser.ANY-98|1<<CypherParser.NONE-98|1<<CypherParser.SINGLE-98|1<<CypherParser.TRUE-98|1<<CypherParser.FALSE-98|1<<CypherParser.REDUCE-98|1<<CypherParser.CASE-98|1<<CypherParser.ELSE-98|1<<CypherParser.END-98|1<<CypherParser.WHEN-98|1<<CypherParser.THEN-98|1<<CypherParser.CALL-98))!==0||(_la-130&~0x1f)==0&&(1<<_la-130&(1<<CypherParser.YIELD-130|1<<CypherParser.KEY-130|1<<CypherParser.StringLiteral-130|1<<CypherParser.HexInteger-130|1<<CypherParser.DecimalInteger-130|1<<CypherParser.OctalInteger-130|1<<CypherParser.HexLetter-130|1<<CypherParser.ExponentDecimalReal-130|1<<CypherParser.RegularDecimalReal-130|1<<CypherParser.UnescapedSymbolicName-130|1<<CypherParser.EscapedSymbolicName-130))!==0){this.state=2261;this.expression();this.state=2263;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2262;this.match(CypherParser.SP);}this.state=2275;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CypherParser.T__14){this.state=2265;this.match(CypherParser.T__14);this.state=2267;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2266;this.match(CypherParser.SP);}this.state=2269;this.expression();this.state=2271;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2270;this.match(CypherParser.SP);}this.state=2277;this._errHandler.sync(this);_la=this._input.LA(1);}}this.state=2280;this.match(CypherParser.T__17);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PartialComparisonExpressionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_partialComparisonExpression;return this;}PartialComparisonExpressionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PartialComparisonExpressionContext.prototype.constructor=PartialComparisonExpressionContext;PartialComparisonExpressionContext.prototype.addOrSubtractExpression=function(){return this.getTypedRuleContext(AddOrSubtractExpressionContext,0);};PartialComparisonExpressionContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};PartialComparisonExpressionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterPartialComparisonExpression(this);}};PartialComparisonExpressionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitPartialComparisonExpression(this);}};CypherParser.PartialComparisonExpressionContext=PartialComparisonExpressionContext;CypherParser.prototype.partialComparisonExpression=function(){var localctx=new PartialComparisonExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,328,CypherParser.RULE_partialComparisonExpression);var _la=0;// Token type
try{this.state=2317;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.T__11:this.enterOuterAlt(localctx,1);this.state=2282;this.match(CypherParser.T__11);this.state=2284;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2283;this.match(CypherParser.SP);}this.state=2286;this.addOrSubtractExpression();break;case CypherParser.T__27:this.enterOuterAlt(localctx,2);this.state=2287;this.match(CypherParser.T__27);this.state=2289;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2288;this.match(CypherParser.SP);}this.state=2291;this.addOrSubtractExpression();break;case CypherParser.T__28:this.enterOuterAlt(localctx,3);this.state=2292;this.match(CypherParser.T__28);this.state=2294;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2293;this.match(CypherParser.SP);}this.state=2296;this.addOrSubtractExpression();break;case CypherParser.T__29:this.enterOuterAlt(localctx,4);this.state=2297;this.match(CypherParser.T__29);this.state=2299;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2298;this.match(CypherParser.SP);}this.state=2301;this.addOrSubtractExpression();break;case CypherParser.T__30:this.enterOuterAlt(localctx,5);this.state=2302;this.match(CypherParser.T__30);this.state=2304;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2303;this.match(CypherParser.SP);}this.state=2306;this.addOrSubtractExpression();break;case CypherParser.T__31:this.enterOuterAlt(localctx,6);this.state=2307;this.match(CypherParser.T__31);this.state=2309;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2308;this.match(CypherParser.SP);}this.state=2311;this.addOrSubtractExpression();break;case CypherParser.T__32:this.enterOuterAlt(localctx,7);this.state=2312;this.match(CypherParser.T__32);this.state=2314;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2313;this.match(CypherParser.SP);}this.state=2316;this.addOrSubtractExpression();break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ParenthesizedExpressionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_parenthesizedExpression;return this;}ParenthesizedExpressionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ParenthesizedExpressionContext.prototype.constructor=ParenthesizedExpressionContext;ParenthesizedExpressionContext.prototype.expression=function(){return this.getTypedRuleContext(ExpressionContext,0);};ParenthesizedExpressionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};ParenthesizedExpressionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterParenthesizedExpression(this);}};ParenthesizedExpressionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitParenthesizedExpression(this);}};CypherParser.ParenthesizedExpressionContext=ParenthesizedExpressionContext;CypherParser.prototype.parenthesizedExpression=function(){var localctx=new ParenthesizedExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,330,CypherParser.RULE_parenthesizedExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2319;this.match(CypherParser.T__18);this.state=2321;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2320;this.match(CypherParser.SP);}this.state=2323;this.expression();this.state=2325;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2324;this.match(CypherParser.SP);}this.state=2327;this.match(CypherParser.T__19);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RelationshipsPatternContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_relationshipsPattern;return this;}RelationshipsPatternContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RelationshipsPatternContext.prototype.constructor=RelationshipsPatternContext;RelationshipsPatternContext.prototype.nodePattern=function(){return this.getTypedRuleContext(NodePatternContext,0);};RelationshipsPatternContext.prototype.patternElementChain=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(PatternElementChainContext);}else{return this.getTypedRuleContext(PatternElementChainContext,i);}};RelationshipsPatternContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};RelationshipsPatternContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterRelationshipsPattern(this);}};RelationshipsPatternContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitRelationshipsPattern(this);}};CypherParser.RelationshipsPatternContext=RelationshipsPatternContext;CypherParser.prototype.relationshipsPattern=function(){var localctx=new RelationshipsPatternContext(this,this._ctx,this.state);this.enterRule(localctx,332,CypherParser.RULE_relationshipsPattern);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2329;this.nodePattern();this.state=2334;this._errHandler.sync(this);var _alt=1;do{switch(_alt){case 1:this.state=2331;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2330;this.match(CypherParser.SP);}this.state=2333;this.patternElementChain();break;default:throw new antlr4.error.NoViableAltException(this);}this.state=2336;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,348,this._ctx);}while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function FilterExpressionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_filterExpression;return this;}FilterExpressionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);FilterExpressionContext.prototype.constructor=FilterExpressionContext;FilterExpressionContext.prototype.idInColl=function(){return this.getTypedRuleContext(IdInCollContext,0);};FilterExpressionContext.prototype.where=function(){return this.getTypedRuleContext(WhereContext,0);};FilterExpressionContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};FilterExpressionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterFilterExpression(this);}};FilterExpressionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitFilterExpression(this);}};CypherParser.FilterExpressionContext=FilterExpressionContext;CypherParser.prototype.filterExpression=function(){var localctx=new FilterExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,334,CypherParser.RULE_filterExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2338;this.idInColl();this.state=2343;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,350,this._ctx);if(la_===1){this.state=2340;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2339;this.match(CypherParser.SP);}this.state=2342;this.where();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function IdInCollContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_idInColl;return this;}IdInCollContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);IdInCollContext.prototype.constructor=IdInCollContext;IdInCollContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};IdInCollContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};IdInCollContext.prototype.IN=function(){return this.getToken(CypherParser.IN,0);};IdInCollContext.prototype.expression=function(){return this.getTypedRuleContext(ExpressionContext,0);};IdInCollContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterIdInColl(this);}};IdInCollContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitIdInColl(this);}};CypherParser.IdInCollContext=IdInCollContext;CypherParser.prototype.idInColl=function(){var localctx=new IdInCollContext(this,this._ctx,this.state);this.enterRule(localctx,336,CypherParser.RULE_idInColl);try{this.enterOuterAlt(localctx,1);this.state=2345;this.variable();this.state=2346;this.match(CypherParser.SP);this.state=2347;this.match(CypherParser.IN);this.state=2348;this.match(CypherParser.SP);this.state=2349;this.expression();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function FunctionInvocationContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_functionInvocation;return this;}FunctionInvocationContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);FunctionInvocationContext.prototype.constructor=FunctionInvocationContext;FunctionInvocationContext.prototype.functionInvocationBody=function(){return this.getTypedRuleContext(FunctionInvocationBodyContext,0);};FunctionInvocationContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};FunctionInvocationContext.prototype.DISTINCT=function(){return this.getToken(CypherParser.DISTINCT,0);};FunctionInvocationContext.prototype.expression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExpressionContext);}else{return this.getTypedRuleContext(ExpressionContext,i);}};FunctionInvocationContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterFunctionInvocation(this);}};FunctionInvocationContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitFunctionInvocation(this);}};CypherParser.FunctionInvocationContext=FunctionInvocationContext;CypherParser.prototype.functionInvocation=function(){var localctx=new FunctionInvocationContext(this,this._ctx,this.state);this.enterRule(localctx,338,CypherParser.RULE_functionInvocation);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2351;this.functionInvocationBody();this.state=2353;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2352;this.match(CypherParser.SP);}this.state=2355;this.match(CypherParser.T__18);this.state=2357;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2356;this.match(CypherParser.SP);}this.state=2363;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,354,this._ctx);if(la_===1){this.state=2359;this.match(CypherParser.DISTINCT);this.state=2361;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2360;this.match(CypherParser.SP);}}this.state=2382;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<CypherParser.T__2|1<<CypherParser.T__12|1<<CypherParser.T__13|1<<CypherParser.T__16|1<<CypherParser.T__18))!==0||(_la-34&~0x1f)==0&&(1<<_la-34&(1<<CypherParser.T__33-34|1<<CypherParser.CYPHER-34|1<<CypherParser.EXPLAIN-34|1<<CypherParser.PROFILE-34|1<<CypherParser.USING-34|1<<CypherParser.PERIODIC-34|1<<CypherParser.COMMIT-34|1<<CypherParser.UNION-34|1<<CypherParser.ALL-34|1<<CypherParser.CREATE-34|1<<CypherParser.DROP-34|1<<CypherParser.INDEX-34|1<<CypherParser.ON-34))!==0||(_la-66&~0x1f)==0&&(1<<_la-66&(1<<CypherParser.CONSTRAINT-66|1<<CypherParser.ASSERT-66|1<<CypherParser.IS-66|1<<CypherParser.UNIQUE-66|1<<CypherParser.EXISTS-66|1<<CypherParser.LOAD-66|1<<CypherParser.CSV-66|1<<CypherParser.WITH-66|1<<CypherParser.HEADERS-66|1<<CypherParser.FROM-66|1<<CypherParser.AS-66|1<<CypherParser.FIELDTERMINATOR-66|1<<CypherParser.OPTIONAL-66|1<<CypherParser.MATCH-66|1<<CypherParser.UNWIND-66|1<<CypherParser.MERGE-66|1<<CypherParser.SET-66|1<<CypherParser.DETACH-66|1<<CypherParser.DELETE-66|1<<CypherParser.REMOVE-66|1<<CypherParser.FOREACH-66|1<<CypherParser.IN-66|1<<CypherParser.DISTINCT-66|1<<CypherParser.RETURN-66|1<<CypherParser.ORDER-66|1<<CypherParser.BY-66|1<<CypherParser.L_SKIP-66|1<<CypherParser.LIMIT-66|1<<CypherParser.ASCENDING-66|1<<CypherParser.ASC-66|1<<CypherParser.DESCENDING-66|1<<CypherParser.DESC-66))!==0||(_la-98&~0x1f)==0&&(1<<_la-98&(1<<CypherParser.JOIN-98|1<<CypherParser.SCAN-98|1<<CypherParser.START-98|1<<CypherParser.NODE-98|1<<CypherParser.RELATIONSHIP-98|1<<CypherParser.REL-98|1<<CypherParser.WHERE-98|1<<CypherParser.SHORTESTPATH-98|1<<CypherParser.ALLSHORTESTPATHS-98|1<<CypherParser.OR-98|1<<CypherParser.XOR-98|1<<CypherParser.AND-98|1<<CypherParser.NOT-98|1<<CypherParser.STARTS-98|1<<CypherParser.ENDS-98|1<<CypherParser.CONTAINS-98|1<<CypherParser.NULL-98|1<<CypherParser.COUNT-98|1<<CypherParser.FILTER-98|1<<CypherParser.EXTRACT-98|1<<CypherParser.ANY-98|1<<CypherParser.NONE-98|1<<CypherParser.SINGLE-98|1<<CypherParser.TRUE-98|1<<CypherParser.FALSE-98|1<<CypherParser.REDUCE-98|1<<CypherParser.CASE-98|1<<CypherParser.ELSE-98|1<<CypherParser.END-98|1<<CypherParser.WHEN-98|1<<CypherParser.THEN-98|1<<CypherParser.CALL-98))!==0||(_la-130&~0x1f)==0&&(1<<_la-130&(1<<CypherParser.YIELD-130|1<<CypherParser.KEY-130|1<<CypherParser.StringLiteral-130|1<<CypherParser.HexInteger-130|1<<CypherParser.DecimalInteger-130|1<<CypherParser.OctalInteger-130|1<<CypherParser.HexLetter-130|1<<CypherParser.ExponentDecimalReal-130|1<<CypherParser.RegularDecimalReal-130|1<<CypherParser.UnescapedSymbolicName-130|1<<CypherParser.EscapedSymbolicName-130))!==0){this.state=2365;this.expression();this.state=2367;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2366;this.match(CypherParser.SP);}this.state=2379;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CypherParser.T__14){this.state=2369;this.match(CypherParser.T__14);this.state=2371;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2370;this.match(CypherParser.SP);}this.state=2373;this.expression();this.state=2375;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2374;this.match(CypherParser.SP);}this.state=2381;this._errHandler.sync(this);_la=this._input.LA(1);}}this.state=2384;this.match(CypherParser.T__19);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function FunctionInvocationBodyContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_functionInvocationBody;return this;}FunctionInvocationBodyContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);FunctionInvocationBodyContext.prototype.constructor=FunctionInvocationBodyContext;FunctionInvocationBodyContext.prototype.namespace=function(){return this.getTypedRuleContext(NamespaceContext,0);};FunctionInvocationBodyContext.prototype.functionName=function(){return this.getTypedRuleContext(FunctionNameContext,0);};FunctionInvocationBodyContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterFunctionInvocationBody(this);}};FunctionInvocationBodyContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitFunctionInvocationBody(this);}};CypherParser.FunctionInvocationBodyContext=FunctionInvocationBodyContext;CypherParser.prototype.functionInvocationBody=function(){var localctx=new FunctionInvocationBodyContext(this,this._ctx,this.state);this.enterRule(localctx,340,CypherParser.RULE_functionInvocationBody);try{this.enterOuterAlt(localctx,1);this.state=2386;this.namespace();this.state=2387;this.functionName();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function FunctionNameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_functionName;return this;}FunctionNameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);FunctionNameContext.prototype.constructor=FunctionNameContext;FunctionNameContext.prototype.UnescapedSymbolicName=function(){return this.getToken(CypherParser.UnescapedSymbolicName,0);};FunctionNameContext.prototype.EscapedSymbolicName=function(){return this.getToken(CypherParser.EscapedSymbolicName,0);};FunctionNameContext.prototype.COUNT=function(){return this.getToken(CypherParser.COUNT,0);};FunctionNameContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterFunctionName(this);}};FunctionNameContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitFunctionName(this);}};CypherParser.FunctionNameContext=FunctionNameContext;CypherParser.prototype.functionName=function(){var localctx=new FunctionNameContext(this,this._ctx,this.state);this.enterRule(localctx,342,CypherParser.RULE_functionName);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2389;_la=this._input.LA(1);if(!(_la===CypherParser.COUNT||_la===CypherParser.UnescapedSymbolicName||_la===CypherParser.EscapedSymbolicName)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ProcedureNameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_procedureName;return this;}ProcedureNameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ProcedureNameContext.prototype.constructor=ProcedureNameContext;ProcedureNameContext.prototype.symbolicName=function(){return this.getTypedRuleContext(SymbolicNameContext,0);};ProcedureNameContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterProcedureName(this);}};ProcedureNameContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitProcedureName(this);}};CypherParser.ProcedureNameContext=ProcedureNameContext;CypherParser.prototype.procedureName=function(){var localctx=new ProcedureNameContext(this,this._ctx,this.state);this.enterRule(localctx,344,CypherParser.RULE_procedureName);try{this.enterOuterAlt(localctx,1);this.state=2391;this.symbolicName();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ListComprehensionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_listComprehension;return this;}ListComprehensionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ListComprehensionContext.prototype.constructor=ListComprehensionContext;ListComprehensionContext.prototype.filterExpression=function(){return this.getTypedRuleContext(FilterExpressionContext,0);};ListComprehensionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};ListComprehensionContext.prototype.expression=function(){return this.getTypedRuleContext(ExpressionContext,0);};ListComprehensionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterListComprehension(this);}};ListComprehensionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitListComprehension(this);}};CypherParser.ListComprehensionContext=ListComprehensionContext;CypherParser.prototype.listComprehension=function(){var localctx=new ListComprehensionContext(this,this._ctx,this.state);this.enterRule(localctx,346,CypherParser.RULE_listComprehension);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2393;this.match(CypherParser.T__16);this.state=2395;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2394;this.match(CypherParser.SP);}this.state=2397;this.filterExpression();this.state=2406;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,363,this._ctx);if(la_===1){this.state=2399;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2398;this.match(CypherParser.SP);}this.state=2401;this.match(CypherParser.T__21);this.state=2403;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2402;this.match(CypherParser.SP);}this.state=2405;this.expression();}this.state=2409;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2408;this.match(CypherParser.SP);}this.state=2411;this.match(CypherParser.T__17);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PatternComprehensionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_patternComprehension;return this;}PatternComprehensionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PatternComprehensionContext.prototype.constructor=PatternComprehensionContext;PatternComprehensionContext.prototype.relationshipsPattern=function(){return this.getTypedRuleContext(RelationshipsPatternContext,0);};PatternComprehensionContext.prototype.expression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExpressionContext);}else{return this.getTypedRuleContext(ExpressionContext,i);}};PatternComprehensionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};PatternComprehensionContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};PatternComprehensionContext.prototype.WHERE=function(){return this.getToken(CypherParser.WHERE,0);};PatternComprehensionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterPatternComprehension(this);}};PatternComprehensionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitPatternComprehension(this);}};CypherParser.PatternComprehensionContext=PatternComprehensionContext;CypherParser.prototype.patternComprehension=function(){var localctx=new PatternComprehensionContext(this,this._ctx,this.state);this.enterRule(localctx,348,CypherParser.RULE_patternComprehension);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2413;this.match(CypherParser.T__16);this.state=2415;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2414;this.match(CypherParser.SP);}this.state=2425;this._errHandler.sync(this);_la=this._input.LA(1);if((_la-54&~0x1f)==0&&(1<<_la-54&(1<<CypherParser.CYPHER-54|1<<CypherParser.EXPLAIN-54|1<<CypherParser.PROFILE-54|1<<CypherParser.USING-54|1<<CypherParser.PERIODIC-54|1<<CypherParser.COMMIT-54|1<<CypherParser.UNION-54|1<<CypherParser.ALL-54|1<<CypherParser.CREATE-54|1<<CypherParser.DROP-54|1<<CypherParser.INDEX-54|1<<CypherParser.ON-54|1<<CypherParser.CONSTRAINT-54|1<<CypherParser.ASSERT-54|1<<CypherParser.IS-54|1<<CypherParser.UNIQUE-54|1<<CypherParser.EXISTS-54|1<<CypherParser.LOAD-54|1<<CypherParser.CSV-54|1<<CypherParser.WITH-54|1<<CypherParser.HEADERS-54|1<<CypherParser.FROM-54|1<<CypherParser.AS-54|1<<CypherParser.FIELDTERMINATOR-54|1<<CypherParser.OPTIONAL-54|1<<CypherParser.MATCH-54|1<<CypherParser.UNWIND-54|1<<CypherParser.MERGE-54|1<<CypherParser.SET-54|1<<CypherParser.DETACH-54|1<<CypherParser.DELETE-54|1<<CypherParser.REMOVE-54))!==0||(_la-86&~0x1f)==0&&(1<<_la-86&(1<<CypherParser.FOREACH-86|1<<CypherParser.IN-86|1<<CypherParser.DISTINCT-86|1<<CypherParser.RETURN-86|1<<CypherParser.ORDER-86|1<<CypherParser.BY-86|1<<CypherParser.L_SKIP-86|1<<CypherParser.LIMIT-86|1<<CypherParser.ASCENDING-86|1<<CypherParser.ASC-86|1<<CypherParser.DESCENDING-86|1<<CypherParser.DESC-86|1<<CypherParser.JOIN-86|1<<CypherParser.SCAN-86|1<<CypherParser.START-86|1<<CypherParser.NODE-86|1<<CypherParser.RELATIONSHIP-86|1<<CypherParser.REL-86|1<<CypherParser.WHERE-86|1<<CypherParser.SHORTESTPATH-86|1<<CypherParser.ALLSHORTESTPATHS-86|1<<CypherParser.OR-86|1<<CypherParser.XOR-86|1<<CypherParser.AND-86|1<<CypherParser.NOT-86|1<<CypherParser.STARTS-86|1<<CypherParser.ENDS-86|1<<CypherParser.CONTAINS-86|1<<CypherParser.NULL-86|1<<CypherParser.COUNT-86|1<<CypherParser.FILTER-86|1<<CypherParser.EXTRACT-86))!==0||(_la-118&~0x1f)==0&&(1<<_la-118&(1<<CypherParser.ANY-118|1<<CypherParser.NONE-118|1<<CypherParser.SINGLE-118|1<<CypherParser.TRUE-118|1<<CypherParser.FALSE-118|1<<CypherParser.REDUCE-118|1<<CypherParser.CASE-118|1<<CypherParser.ELSE-118|1<<CypherParser.END-118|1<<CypherParser.WHEN-118|1<<CypherParser.THEN-118|1<<CypherParser.CALL-118|1<<CypherParser.YIELD-118|1<<CypherParser.KEY-118|1<<CypherParser.HexLetter-118|1<<CypherParser.UnescapedSymbolicName-118))!==0||_la===CypherParser.EscapedSymbolicName){this.state=2417;this.variable();this.state=2419;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2418;this.match(CypherParser.SP);}this.state=2421;this.match(CypherParser.T__11);this.state=2423;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2422;this.match(CypherParser.SP);}}this.state=2427;this.relationshipsPattern();this.state=2429;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2428;this.match(CypherParser.SP);}this.state=2439;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.WHERE){this.state=2431;this.match(CypherParser.WHERE);this.state=2433;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2432;this.match(CypherParser.SP);}this.state=2435;this.expression();this.state=2437;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2436;this.match(CypherParser.SP);}}this.state=2441;this.match(CypherParser.T__21);this.state=2443;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2442;this.match(CypherParser.SP);}this.state=2445;this.expression();this.state=2447;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2446;this.match(CypherParser.SP);}this.state=2449;this.match(CypherParser.T__17);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PropertyLookupContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_propertyLookup;return this;}PropertyLookupContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PropertyLookupContext.prototype.constructor=PropertyLookupContext;PropertyLookupContext.prototype.propertyKeyName=function(){return this.getTypedRuleContext(PropertyKeyNameContext,0);};PropertyLookupContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};PropertyLookupContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterPropertyLookup(this);}};PropertyLookupContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitPropertyLookup(this);}};CypherParser.PropertyLookupContext=PropertyLookupContext;CypherParser.prototype.propertyLookup=function(){var localctx=new PropertyLookupContext(this,this._ctx,this.state);this.enterRule(localctx,350,CypherParser.RULE_propertyLookup);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2451;this.match(CypherParser.T__6);this.state=2453;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2452;this.match(CypherParser.SP);}this.state=2455;this.propertyKeyName();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CaseExpressionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_caseExpression;return this;}CaseExpressionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CaseExpressionContext.prototype.constructor=CaseExpressionContext;CaseExpressionContext.prototype.END=function(){return this.getToken(CypherParser.END,0);};CaseExpressionContext.prototype.ELSE=function(){return this.getToken(CypherParser.ELSE,0);};CaseExpressionContext.prototype.expression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExpressionContext);}else{return this.getTypedRuleContext(ExpressionContext,i);}};CaseExpressionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};CaseExpressionContext.prototype.CASE=function(){return this.getToken(CypherParser.CASE,0);};CaseExpressionContext.prototype.caseAlternatives=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(CaseAlternativesContext);}else{return this.getTypedRuleContext(CaseAlternativesContext,i);}};CaseExpressionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCaseExpression(this);}};CaseExpressionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCaseExpression(this);}};CypherParser.CaseExpressionContext=CaseExpressionContext;CypherParser.prototype.caseExpression=function(){var localctx=new CaseExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,352,CypherParser.RULE_caseExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2479;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,381,this._ctx);switch(la_){case 1:this.state=2457;this.match(CypherParser.CASE);this.state=2462;this._errHandler.sync(this);var _alt=1;do{switch(_alt){case 1:this.state=2459;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2458;this.match(CypherParser.SP);}this.state=2461;this.caseAlternatives();break;default:throw new antlr4.error.NoViableAltException(this);}this.state=2464;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,377,this._ctx);}while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER);break;case 2:this.state=2466;this.match(CypherParser.CASE);this.state=2468;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2467;this.match(CypherParser.SP);}this.state=2470;this.expression();this.state=2475;this._errHandler.sync(this);var _alt=1;do{switch(_alt){case 1:this.state=2472;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2471;this.match(CypherParser.SP);}this.state=2474;this.caseAlternatives();break;default:throw new antlr4.error.NoViableAltException(this);}this.state=2477;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,380,this._ctx);}while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER);break;}this.state=2489;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,384,this._ctx);if(la_===1){this.state=2482;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2481;this.match(CypherParser.SP);}this.state=2484;this.match(CypherParser.ELSE);this.state=2486;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2485;this.match(CypherParser.SP);}this.state=2488;this.expression();}this.state=2492;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2491;this.match(CypherParser.SP);}this.state=2494;this.match(CypherParser.END);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CaseAlternativesContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_caseAlternatives;return this;}CaseAlternativesContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CaseAlternativesContext.prototype.constructor=CaseAlternativesContext;CaseAlternativesContext.prototype.WHEN=function(){return this.getToken(CypherParser.WHEN,0);};CaseAlternativesContext.prototype.expression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExpressionContext);}else{return this.getTypedRuleContext(ExpressionContext,i);}};CaseAlternativesContext.prototype.THEN=function(){return this.getToken(CypherParser.THEN,0);};CaseAlternativesContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};CaseAlternativesContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCaseAlternatives(this);}};CaseAlternativesContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCaseAlternatives(this);}};CypherParser.CaseAlternativesContext=CaseAlternativesContext;CypherParser.prototype.caseAlternatives=function(){var localctx=new CaseAlternativesContext(this,this._ctx,this.state);this.enterRule(localctx,354,CypherParser.RULE_caseAlternatives);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2496;this.match(CypherParser.WHEN);this.state=2498;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2497;this.match(CypherParser.SP);}this.state=2500;this.expression();this.state=2502;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2501;this.match(CypherParser.SP);}this.state=2504;this.match(CypherParser.THEN);this.state=2506;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2505;this.match(CypherParser.SP);}this.state=2508;this.expression();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function VariableContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_variable;return this;}VariableContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);VariableContext.prototype.constructor=VariableContext;VariableContext.prototype.symbolicName=function(){return this.getTypedRuleContext(SymbolicNameContext,0);};VariableContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterVariable(this);}};VariableContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitVariable(this);}};CypherParser.VariableContext=VariableContext;CypherParser.prototype.variable=function(){var localctx=new VariableContext(this,this._ctx,this.state);this.enterRule(localctx,356,CypherParser.RULE_variable);try{this.enterOuterAlt(localctx,1);this.state=2510;this.symbolicName();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function NumberLiteralContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_numberLiteral;return this;}NumberLiteralContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);NumberLiteralContext.prototype.constructor=NumberLiteralContext;NumberLiteralContext.prototype.doubleLiteral=function(){return this.getTypedRuleContext(DoubleLiteralContext,0);};NumberLiteralContext.prototype.integerLiteral=function(){return this.getTypedRuleContext(IntegerLiteralContext,0);};NumberLiteralContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterNumberLiteral(this);}};NumberLiteralContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitNumberLiteral(this);}};CypherParser.NumberLiteralContext=NumberLiteralContext;CypherParser.prototype.numberLiteral=function(){var localctx=new NumberLiteralContext(this,this._ctx,this.state);this.enterRule(localctx,358,CypherParser.RULE_numberLiteral);try{this.state=2514;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.ExponentDecimalReal:case CypherParser.RegularDecimalReal:this.enterOuterAlt(localctx,1);this.state=2512;this.doubleLiteral();break;case CypherParser.HexInteger:case CypherParser.DecimalInteger:case CypherParser.OctalInteger:this.enterOuterAlt(localctx,2);this.state=2513;this.integerLiteral();break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function MapLiteralContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_mapLiteral;return this;}MapLiteralContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);MapLiteralContext.prototype.constructor=MapLiteralContext;MapLiteralContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};MapLiteralContext.prototype.literalEntry=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(LiteralEntryContext);}else{return this.getTypedRuleContext(LiteralEntryContext,i);}};MapLiteralContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterMapLiteral(this);}};MapLiteralContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitMapLiteral(this);}};CypherParser.MapLiteralContext=MapLiteralContext;CypherParser.prototype.mapLiteral=function(){var localctx=new MapLiteralContext(this,this._ctx,this.state);this.enterRule(localctx,360,CypherParser.RULE_mapLiteral);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2516;this.match(CypherParser.T__13);this.state=2518;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2517;this.match(CypherParser.SP);}this.state=2537;this._errHandler.sync(this);_la=this._input.LA(1);if((_la-54&~0x1f)==0&&(1<<_la-54&(1<<CypherParser.CYPHER-54|1<<CypherParser.EXPLAIN-54|1<<CypherParser.PROFILE-54|1<<CypherParser.USING-54|1<<CypherParser.PERIODIC-54|1<<CypherParser.COMMIT-54|1<<CypherParser.UNION-54|1<<CypherParser.ALL-54|1<<CypherParser.CREATE-54|1<<CypherParser.DROP-54|1<<CypherParser.INDEX-54|1<<CypherParser.ON-54|1<<CypherParser.CONSTRAINT-54|1<<CypherParser.ASSERT-54|1<<CypherParser.IS-54|1<<CypherParser.UNIQUE-54|1<<CypherParser.EXISTS-54|1<<CypherParser.LOAD-54|1<<CypherParser.CSV-54|1<<CypherParser.WITH-54|1<<CypherParser.HEADERS-54|1<<CypherParser.FROM-54|1<<CypherParser.AS-54|1<<CypherParser.FIELDTERMINATOR-54|1<<CypherParser.OPTIONAL-54|1<<CypherParser.MATCH-54|1<<CypherParser.UNWIND-54|1<<CypherParser.MERGE-54|1<<CypherParser.SET-54|1<<CypherParser.DETACH-54|1<<CypherParser.DELETE-54|1<<CypherParser.REMOVE-54))!==0||(_la-86&~0x1f)==0&&(1<<_la-86&(1<<CypherParser.FOREACH-86|1<<CypherParser.IN-86|1<<CypherParser.DISTINCT-86|1<<CypherParser.RETURN-86|1<<CypherParser.ORDER-86|1<<CypherParser.BY-86|1<<CypherParser.L_SKIP-86|1<<CypherParser.LIMIT-86|1<<CypherParser.ASCENDING-86|1<<CypherParser.ASC-86|1<<CypherParser.DESCENDING-86|1<<CypherParser.DESC-86|1<<CypherParser.JOIN-86|1<<CypherParser.SCAN-86|1<<CypherParser.START-86|1<<CypherParser.NODE-86|1<<CypherParser.RELATIONSHIP-86|1<<CypherParser.REL-86|1<<CypherParser.WHERE-86|1<<CypherParser.SHORTESTPATH-86|1<<CypherParser.ALLSHORTESTPATHS-86|1<<CypherParser.OR-86|1<<CypherParser.XOR-86|1<<CypherParser.AND-86|1<<CypherParser.NOT-86|1<<CypherParser.STARTS-86|1<<CypherParser.ENDS-86|1<<CypherParser.CONTAINS-86|1<<CypherParser.NULL-86|1<<CypherParser.COUNT-86|1<<CypherParser.FILTER-86|1<<CypherParser.EXTRACT-86))!==0||(_la-118&~0x1f)==0&&(1<<_la-118&(1<<CypherParser.ANY-118|1<<CypherParser.NONE-118|1<<CypherParser.SINGLE-118|1<<CypherParser.TRUE-118|1<<CypherParser.FALSE-118|1<<CypherParser.REDUCE-118|1<<CypherParser.CASE-118|1<<CypherParser.ELSE-118|1<<CypherParser.END-118|1<<CypherParser.WHEN-118|1<<CypherParser.THEN-118|1<<CypherParser.CALL-118|1<<CypherParser.YIELD-118|1<<CypherParser.KEY-118|1<<CypherParser.HexLetter-118|1<<CypherParser.UnescapedSymbolicName-118))!==0||_la===CypherParser.EscapedSymbolicName){this.state=2520;this.literalEntry();this.state=2522;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2521;this.match(CypherParser.SP);}this.state=2534;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CypherParser.T__14){this.state=2524;this.match(CypherParser.T__14);this.state=2526;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2525;this.match(CypherParser.SP);}this.state=2528;this.literalEntry();this.state=2530;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2529;this.match(CypherParser.SP);}this.state=2536;this._errHandler.sync(this);_la=this._input.LA(1);}}this.state=2539;this.match(CypherParser.T__15);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function MapProjectionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_mapProjection;return this;}MapProjectionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);MapProjectionContext.prototype.constructor=MapProjectionContext;MapProjectionContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};MapProjectionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};MapProjectionContext.prototype.mapProjectionVariants=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(MapProjectionVariantsContext);}else{return this.getTypedRuleContext(MapProjectionVariantsContext,i);}};MapProjectionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterMapProjection(this);}};MapProjectionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitMapProjection(this);}};CypherParser.MapProjectionContext=MapProjectionContext;CypherParser.prototype.mapProjection=function(){var localctx=new MapProjectionContext(this,this._ctx,this.state);this.enterRule(localctx,362,CypherParser.RULE_mapProjection);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2541;this.variable();this.state=2543;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2542;this.match(CypherParser.SP);}this.state=2545;this.match(CypherParser.T__13);this.state=2547;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,397,this._ctx);if(la_===1){this.state=2546;this.match(CypherParser.SP);}this.state=2550;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.T__6||(_la-54&~0x1f)==0&&(1<<_la-54&(1<<CypherParser.CYPHER-54|1<<CypherParser.EXPLAIN-54|1<<CypherParser.PROFILE-54|1<<CypherParser.USING-54|1<<CypherParser.PERIODIC-54|1<<CypherParser.COMMIT-54|1<<CypherParser.UNION-54|1<<CypherParser.ALL-54|1<<CypherParser.CREATE-54|1<<CypherParser.DROP-54|1<<CypherParser.INDEX-54|1<<CypherParser.ON-54|1<<CypherParser.CONSTRAINT-54|1<<CypherParser.ASSERT-54|1<<CypherParser.IS-54|1<<CypherParser.UNIQUE-54|1<<CypherParser.EXISTS-54|1<<CypherParser.LOAD-54|1<<CypherParser.CSV-54|1<<CypherParser.WITH-54|1<<CypherParser.HEADERS-54|1<<CypherParser.FROM-54|1<<CypherParser.AS-54|1<<CypherParser.FIELDTERMINATOR-54|1<<CypherParser.OPTIONAL-54|1<<CypherParser.MATCH-54|1<<CypherParser.UNWIND-54|1<<CypherParser.MERGE-54|1<<CypherParser.SET-54|1<<CypherParser.DETACH-54|1<<CypherParser.DELETE-54|1<<CypherParser.REMOVE-54))!==0||(_la-86&~0x1f)==0&&(1<<_la-86&(1<<CypherParser.FOREACH-86|1<<CypherParser.IN-86|1<<CypherParser.DISTINCT-86|1<<CypherParser.RETURN-86|1<<CypherParser.ORDER-86|1<<CypherParser.BY-86|1<<CypherParser.L_SKIP-86|1<<CypherParser.LIMIT-86|1<<CypherParser.ASCENDING-86|1<<CypherParser.ASC-86|1<<CypherParser.DESCENDING-86|1<<CypherParser.DESC-86|1<<CypherParser.JOIN-86|1<<CypherParser.SCAN-86|1<<CypherParser.START-86|1<<CypherParser.NODE-86|1<<CypherParser.RELATIONSHIP-86|1<<CypherParser.REL-86|1<<CypherParser.WHERE-86|1<<CypherParser.SHORTESTPATH-86|1<<CypherParser.ALLSHORTESTPATHS-86|1<<CypherParser.OR-86|1<<CypherParser.XOR-86|1<<CypherParser.AND-86|1<<CypherParser.NOT-86|1<<CypherParser.STARTS-86|1<<CypherParser.ENDS-86|1<<CypherParser.CONTAINS-86|1<<CypherParser.NULL-86|1<<CypherParser.COUNT-86|1<<CypherParser.FILTER-86|1<<CypherParser.EXTRACT-86))!==0||(_la-118&~0x1f)==0&&(1<<_la-118&(1<<CypherParser.ANY-118|1<<CypherParser.NONE-118|1<<CypherParser.SINGLE-118|1<<CypherParser.TRUE-118|1<<CypherParser.FALSE-118|1<<CypherParser.REDUCE-118|1<<CypherParser.CASE-118|1<<CypherParser.ELSE-118|1<<CypherParser.END-118|1<<CypherParser.WHEN-118|1<<CypherParser.THEN-118|1<<CypherParser.CALL-118|1<<CypherParser.YIELD-118|1<<CypherParser.KEY-118|1<<CypherParser.HexLetter-118|1<<CypherParser.UnescapedSymbolicName-118))!==0||_la===CypherParser.EscapedSymbolicName){this.state=2549;this.mapProjectionVariants();}this.state=2562;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,401,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=2553;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2552;this.match(CypherParser.SP);}this.state=2555;this.match(CypherParser.T__14);this.state=2557;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2556;this.match(CypherParser.SP);}this.state=2559;this.mapProjectionVariants();}this.state=2564;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,401,this._ctx);}this.state=2566;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2565;this.match(CypherParser.SP);}this.state=2568;this.match(CypherParser.T__15);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function MapProjectionVariantsContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_mapProjectionVariants;return this;}MapProjectionVariantsContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);MapProjectionVariantsContext.prototype.constructor=MapProjectionVariantsContext;MapProjectionVariantsContext.prototype.literalEntry=function(){return this.getTypedRuleContext(LiteralEntryContext,0);};MapProjectionVariantsContext.prototype.propertySelector=function(){return this.getTypedRuleContext(PropertySelectorContext,0);};MapProjectionVariantsContext.prototype.variableSelector=function(){return this.getTypedRuleContext(VariableSelectorContext,0);};MapProjectionVariantsContext.prototype.allPropertiesSelector=function(){return this.getTypedRuleContext(AllPropertiesSelectorContext,0);};MapProjectionVariantsContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterMapProjectionVariants(this);}};MapProjectionVariantsContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitMapProjectionVariants(this);}};CypherParser.MapProjectionVariantsContext=MapProjectionVariantsContext;CypherParser.prototype.mapProjectionVariants=function(){var localctx=new MapProjectionVariantsContext(this,this._ctx,this.state);this.enterRule(localctx,364,CypherParser.RULE_mapProjectionVariants);try{this.enterOuterAlt(localctx,1);this.state=2574;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,403,this._ctx);switch(la_){case 1:this.state=2570;this.literalEntry();break;case 2:this.state=2571;this.propertySelector();break;case 3:this.state=2572;this.variableSelector();break;case 4:this.state=2573;this.allPropertiesSelector();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function LiteralEntryContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_literalEntry;return this;}LiteralEntryContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);LiteralEntryContext.prototype.constructor=LiteralEntryContext;LiteralEntryContext.prototype.propertyKeyName=function(){return this.getTypedRuleContext(PropertyKeyNameContext,0);};LiteralEntryContext.prototype.expression=function(){return this.getTypedRuleContext(ExpressionContext,0);};LiteralEntryContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};LiteralEntryContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterLiteralEntry(this);}};LiteralEntryContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitLiteralEntry(this);}};CypherParser.LiteralEntryContext=LiteralEntryContext;CypherParser.prototype.literalEntry=function(){var localctx=new LiteralEntryContext(this,this._ctx,this.state);this.enterRule(localctx,366,CypherParser.RULE_literalEntry);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2576;this.propertyKeyName();this.state=2578;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2577;this.match(CypherParser.SP);}this.state=2580;this.match(CypherParser.T__1);this.state=2582;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2581;this.match(CypherParser.SP);}this.state=2584;this.expression();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PropertySelectorContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_propertySelector;return this;}PropertySelectorContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PropertySelectorContext.prototype.constructor=PropertySelectorContext;PropertySelectorContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};PropertySelectorContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterPropertySelector(this);}};PropertySelectorContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitPropertySelector(this);}};CypherParser.PropertySelectorContext=PropertySelectorContext;CypherParser.prototype.propertySelector=function(){var localctx=new PropertySelectorContext(this,this._ctx,this.state);this.enterRule(localctx,368,CypherParser.RULE_propertySelector);try{this.enterOuterAlt(localctx,1);this.state=2586;this.match(CypherParser.T__6);this.state=2587;this.variable();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function VariableSelectorContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_variableSelector;return this;}VariableSelectorContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);VariableSelectorContext.prototype.constructor=VariableSelectorContext;VariableSelectorContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};VariableSelectorContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterVariableSelector(this);}};VariableSelectorContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitVariableSelector(this);}};CypherParser.VariableSelectorContext=VariableSelectorContext;CypherParser.prototype.variableSelector=function(){var localctx=new VariableSelectorContext(this,this._ctx,this.state);this.enterRule(localctx,370,CypherParser.RULE_variableSelector);try{this.enterOuterAlt(localctx,1);this.state=2589;this.variable();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function AllPropertiesSelectorContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_allPropertiesSelector;return this;}AllPropertiesSelectorContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);AllPropertiesSelectorContext.prototype.constructor=AllPropertiesSelectorContext;AllPropertiesSelectorContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterAllPropertiesSelector(this);}};AllPropertiesSelectorContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitAllPropertiesSelector(this);}};CypherParser.AllPropertiesSelectorContext=AllPropertiesSelectorContext;CypherParser.prototype.allPropertiesSelector=function(){var localctx=new AllPropertiesSelectorContext(this,this._ctx,this.state);this.enterRule(localctx,372,CypherParser.RULE_allPropertiesSelector);try{this.enterOuterAlt(localctx,1);this.state=2591;this.match(CypherParser.T__6);this.state=2592;this.match(CypherParser.T__22);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ParameterContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_parameter;return this;}ParameterContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ParameterContext.prototype.constructor=ParameterContext;ParameterContext.prototype.legacyParameter=function(){return this.getTypedRuleContext(LegacyParameterContext,0);};ParameterContext.prototype.newParameter=function(){return this.getTypedRuleContext(NewParameterContext,0);};ParameterContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterParameter(this);}};ParameterContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitParameter(this);}};CypherParser.ParameterContext=ParameterContext;CypherParser.prototype.parameter=function(){var localctx=new ParameterContext(this,this._ctx,this.state);this.enterRule(localctx,374,CypherParser.RULE_parameter);try{this.state=2596;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.T__13:this.enterOuterAlt(localctx,1);this.state=2594;this.legacyParameter();break;case CypherParser.T__33:this.enterOuterAlt(localctx,2);this.state=2595;this.newParameter();break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function LegacyParameterContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_legacyParameter;return this;}LegacyParameterContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);LegacyParameterContext.prototype.constructor=LegacyParameterContext;LegacyParameterContext.prototype.parameterName=function(){return this.getTypedRuleContext(ParameterNameContext,0);};LegacyParameterContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};LegacyParameterContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterLegacyParameter(this);}};LegacyParameterContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitLegacyParameter(this);}};CypherParser.LegacyParameterContext=LegacyParameterContext;CypherParser.prototype.legacyParameter=function(){var localctx=new LegacyParameterContext(this,this._ctx,this.state);this.enterRule(localctx,376,CypherParser.RULE_legacyParameter);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2598;this.match(CypherParser.T__13);this.state=2600;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2599;this.match(CypherParser.SP);}this.state=2602;this.parameterName();this.state=2604;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2603;this.match(CypherParser.SP);}this.state=2606;this.match(CypherParser.T__15);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function NewParameterContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_newParameter;return this;}NewParameterContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);NewParameterContext.prototype.constructor=NewParameterContext;NewParameterContext.prototype.parameterName=function(){return this.getTypedRuleContext(ParameterNameContext,0);};NewParameterContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterNewParameter(this);}};NewParameterContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitNewParameter(this);}};CypherParser.NewParameterContext=NewParameterContext;CypherParser.prototype.newParameter=function(){var localctx=new NewParameterContext(this,this._ctx,this.state);this.enterRule(localctx,378,CypherParser.RULE_newParameter);try{this.enterOuterAlt(localctx,1);this.state=2608;this.match(CypherParser.T__33);this.state=2609;this.parameterName();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ParameterNameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_parameterName;return this;}ParameterNameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ParameterNameContext.prototype.constructor=ParameterNameContext;ParameterNameContext.prototype.symbolicName=function(){return this.getTypedRuleContext(SymbolicNameContext,0);};ParameterNameContext.prototype.DecimalInteger=function(){return this.getToken(CypherParser.DecimalInteger,0);};ParameterNameContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterParameterName(this);}};ParameterNameContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitParameterName(this);}};CypherParser.ParameterNameContext=ParameterNameContext;CypherParser.prototype.parameterName=function(){var localctx=new ParameterNameContext(this,this._ctx,this.state);this.enterRule(localctx,380,CypherParser.RULE_parameterName);try{this.state=2613;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.CYPHER:case CypherParser.EXPLAIN:case CypherParser.PROFILE:case CypherParser.USING:case CypherParser.PERIODIC:case CypherParser.COMMIT:case CypherParser.UNION:case CypherParser.ALL:case CypherParser.CREATE:case CypherParser.DROP:case CypherParser.INDEX:case CypherParser.ON:case CypherParser.CONSTRAINT:case CypherParser.ASSERT:case CypherParser.IS:case CypherParser.UNIQUE:case CypherParser.EXISTS:case CypherParser.LOAD:case CypherParser.CSV:case CypherParser.WITH:case CypherParser.HEADERS:case CypherParser.FROM:case CypherParser.AS:case CypherParser.FIELDTERMINATOR:case CypherParser.OPTIONAL:case CypherParser.MATCH:case CypherParser.UNWIND:case CypherParser.MERGE:case CypherParser.SET:case CypherParser.DETACH:case CypherParser.DELETE:case CypherParser.REMOVE:case CypherParser.FOREACH:case CypherParser.IN:case CypherParser.DISTINCT:case CypherParser.RETURN:case CypherParser.ORDER:case CypherParser.BY:case CypherParser.L_SKIP:case CypherParser.LIMIT:case CypherParser.ASCENDING:case CypherParser.ASC:case CypherParser.DESCENDING:case CypherParser.DESC:case CypherParser.JOIN:case CypherParser.SCAN:case CypherParser.START:case CypherParser.NODE:case CypherParser.RELATIONSHIP:case CypherParser.REL:case CypherParser.WHERE:case CypherParser.SHORTESTPATH:case CypherParser.ALLSHORTESTPATHS:case CypherParser.OR:case CypherParser.XOR:case CypherParser.AND:case CypherParser.NOT:case CypherParser.STARTS:case CypherParser.ENDS:case CypherParser.CONTAINS:case CypherParser.NULL:case CypherParser.COUNT:case CypherParser.FILTER:case CypherParser.EXTRACT:case CypherParser.ANY:case CypherParser.NONE:case CypherParser.SINGLE:case CypherParser.TRUE:case CypherParser.FALSE:case CypherParser.REDUCE:case CypherParser.CASE:case CypherParser.ELSE:case CypherParser.END:case CypherParser.WHEN:case CypherParser.THEN:case CypherParser.CALL:case CypherParser.YIELD:case CypherParser.KEY:case CypherParser.HexLetter:case CypherParser.UnescapedSymbolicName:case CypherParser.EscapedSymbolicName:this.enterOuterAlt(localctx,1);this.state=2611;this.symbolicName();break;case CypherParser.DecimalInteger:this.enterOuterAlt(localctx,2);this.state=2612;this.match(CypherParser.DecimalInteger);break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PropertyExpressionsContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_propertyExpressions;return this;}PropertyExpressionsContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PropertyExpressionsContext.prototype.constructor=PropertyExpressionsContext;PropertyExpressionsContext.prototype.propertyExpression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(PropertyExpressionContext);}else{return this.getTypedRuleContext(PropertyExpressionContext,i);}};PropertyExpressionsContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};PropertyExpressionsContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterPropertyExpressions(this);}};PropertyExpressionsContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitPropertyExpressions(this);}};CypherParser.PropertyExpressionsContext=PropertyExpressionsContext;CypherParser.prototype.propertyExpressions=function(){var localctx=new PropertyExpressionsContext(this,this._ctx,this.state);this.enterRule(localctx,382,CypherParser.RULE_propertyExpressions);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2615;this.propertyExpression();this.state=2626;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,412,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=2617;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2616;this.match(CypherParser.SP);}this.state=2619;this.match(CypherParser.T__14);this.state=2621;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2620;this.match(CypherParser.SP);}this.state=2623;this.propertyExpression();}this.state=2628;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,412,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PropertyExpressionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_propertyExpression;return this;}PropertyExpressionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PropertyExpressionContext.prototype.constructor=PropertyExpressionContext;PropertyExpressionContext.prototype.atom=function(){return this.getTypedRuleContext(AtomContext,0);};PropertyExpressionContext.prototype.propertyLookup=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(PropertyLookupContext);}else{return this.getTypedRuleContext(PropertyLookupContext,i);}};PropertyExpressionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};PropertyExpressionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterPropertyExpression(this);}};PropertyExpressionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitPropertyExpression(this);}};CypherParser.PropertyExpressionContext=PropertyExpressionContext;CypherParser.prototype.propertyExpression=function(){var localctx=new PropertyExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,384,CypherParser.RULE_propertyExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2629;this.atom();this.state=2634;this._errHandler.sync(this);var _alt=1;do{switch(_alt){case 1:this.state=2631;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2630;this.match(CypherParser.SP);}this.state=2633;this.propertyLookup();break;default:throw new antlr4.error.NoViableAltException(this);}this.state=2636;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,414,this._ctx);}while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PropertyKeysContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_propertyKeys;return this;}PropertyKeysContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PropertyKeysContext.prototype.constructor=PropertyKeysContext;PropertyKeysContext.prototype.propertyKeyName=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(PropertyKeyNameContext);}else{return this.getTypedRuleContext(PropertyKeyNameContext,i);}};PropertyKeysContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};PropertyKeysContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterPropertyKeys(this);}};PropertyKeysContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitPropertyKeys(this);}};CypherParser.PropertyKeysContext=PropertyKeysContext;CypherParser.prototype.propertyKeys=function(){var localctx=new PropertyKeysContext(this,this._ctx,this.state);this.enterRule(localctx,386,CypherParser.RULE_propertyKeys);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2638;this.propertyKeyName();this.state=2649;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,417,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=2640;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2639;this.match(CypherParser.SP);}this.state=2642;this.match(CypherParser.T__14);this.state=2644;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2643;this.match(CypherParser.SP);}this.state=2646;this.propertyKeyName();}this.state=2651;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,417,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PropertyKeyNameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_propertyKeyName;return this;}PropertyKeyNameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PropertyKeyNameContext.prototype.constructor=PropertyKeyNameContext;PropertyKeyNameContext.prototype.symbolicName=function(){return this.getTypedRuleContext(SymbolicNameContext,0);};PropertyKeyNameContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterPropertyKeyName(this);}};PropertyKeyNameContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitPropertyKeyName(this);}};CypherParser.PropertyKeyNameContext=PropertyKeyNameContext;CypherParser.prototype.propertyKeyName=function(){var localctx=new PropertyKeyNameContext(this,this._ctx,this.state);this.enterRule(localctx,388,CypherParser.RULE_propertyKeyName);try{this.enterOuterAlt(localctx,1);this.state=2652;this.symbolicName();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function IntegerLiteralContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_integerLiteral;return this;}IntegerLiteralContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);IntegerLiteralContext.prototype.constructor=IntegerLiteralContext;IntegerLiteralContext.prototype.HexInteger=function(){return this.getToken(CypherParser.HexInteger,0);};IntegerLiteralContext.prototype.OctalInteger=function(){return this.getToken(CypherParser.OctalInteger,0);};IntegerLiteralContext.prototype.DecimalInteger=function(){return this.getToken(CypherParser.DecimalInteger,0);};IntegerLiteralContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterIntegerLiteral(this);}};IntegerLiteralContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitIntegerLiteral(this);}};CypherParser.IntegerLiteralContext=IntegerLiteralContext;CypherParser.prototype.integerLiteral=function(){var localctx=new IntegerLiteralContext(this,this._ctx,this.state);this.enterRule(localctx,390,CypherParser.RULE_integerLiteral);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2654;_la=this._input.LA(1);if(!((_la-135&~0x1f)==0&&(1<<_la-135&(1<<CypherParser.HexInteger-135|1<<CypherParser.DecimalInteger-135|1<<CypherParser.OctalInteger-135))!==0)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function DoubleLiteralContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_doubleLiteral;return this;}DoubleLiteralContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);DoubleLiteralContext.prototype.constructor=DoubleLiteralContext;DoubleLiteralContext.prototype.ExponentDecimalReal=function(){return this.getToken(CypherParser.ExponentDecimalReal,0);};DoubleLiteralContext.prototype.RegularDecimalReal=function(){return this.getToken(CypherParser.RegularDecimalReal,0);};DoubleLiteralContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterDoubleLiteral(this);}};DoubleLiteralContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitDoubleLiteral(this);}};CypherParser.DoubleLiteralContext=DoubleLiteralContext;CypherParser.prototype.doubleLiteral=function(){var localctx=new DoubleLiteralContext(this,this._ctx,this.state);this.enterRule(localctx,392,CypherParser.RULE_doubleLiteral);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2656;_la=this._input.LA(1);if(!(_la===CypherParser.ExponentDecimalReal||_la===CypherParser.RegularDecimalReal)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function NamespaceContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_namespace;return this;}NamespaceContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);NamespaceContext.prototype.constructor=NamespaceContext;NamespaceContext.prototype.symbolicName=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(SymbolicNameContext);}else{return this.getTypedRuleContext(SymbolicNameContext,i);}};NamespaceContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterNamespace(this);}};NamespaceContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitNamespace(this);}};CypherParser.NamespaceContext=NamespaceContext;CypherParser.prototype.namespace=function(){var localctx=new NamespaceContext(this,this._ctx,this.state);this.enterRule(localctx,394,CypherParser.RULE_namespace);try{this.enterOuterAlt(localctx,1);this.state=2663;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,418,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=2658;this.symbolicName();this.state=2659;this.match(CypherParser.T__6);}this.state=2665;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,418,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function LeftArrowHeadContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_leftArrowHead;return this;}LeftArrowHeadContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);LeftArrowHeadContext.prototype.constructor=LeftArrowHeadContext;LeftArrowHeadContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterLeftArrowHead(this);}};LeftArrowHeadContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitLeftArrowHead(this);}};CypherParser.LeftArrowHeadContext=LeftArrowHeadContext;CypherParser.prototype.leftArrowHead=function(){var localctx=new LeftArrowHeadContext(this,this._ctx,this.state);this.enterRule(localctx,396,CypherParser.RULE_leftArrowHead);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2666;_la=this._input.LA(1);if(!((_la-30&~0x1f)==0&&(1<<_la-30&(1<<CypherParser.T__29-30|1<<CypherParser.T__34-30|1<<CypherParser.T__35-30|1<<CypherParser.T__36-30|1<<CypherParser.T__37-30))!==0)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RightArrowHeadContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_rightArrowHead;return this;}RightArrowHeadContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RightArrowHeadContext.prototype.constructor=RightArrowHeadContext;RightArrowHeadContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterRightArrowHead(this);}};RightArrowHeadContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitRightArrowHead(this);}};CypherParser.RightArrowHeadContext=RightArrowHeadContext;CypherParser.prototype.rightArrowHead=function(){var localctx=new RightArrowHeadContext(this,this._ctx,this.state);this.enterRule(localctx,398,CypherParser.RULE_rightArrowHead);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2668;_la=this._input.LA(1);if(!((_la-31&~0x1f)==0&&(1<<_la-31&(1<<CypherParser.T__30-31|1<<CypherParser.T__38-31|1<<CypherParser.T__39-31|1<<CypherParser.T__40-31|1<<CypherParser.T__41-31))!==0)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function DashContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_dash;return this;}DashContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);DashContext.prototype.constructor=DashContext;DashContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterDash(this);}};DashContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitDash(this);}};CypherParser.DashContext=DashContext;CypherParser.prototype.dash=function(){var localctx=new DashContext(this,this._ctx,this.state);this.enterRule(localctx,400,CypherParser.RULE_dash);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2670;_la=this._input.LA(1);if(!(_la===CypherParser.T__2||(_la-43&~0x1f)==0&&(1<<_la-43&(1<<CypherParser.T__42-43|1<<CypherParser.T__43-43|1<<CypherParser.T__44-43|1<<CypherParser.T__45-43|1<<CypherParser.T__46-43|1<<CypherParser.T__47-43|1<<CypherParser.T__48-43|1<<CypherParser.T__49-43|1<<CypherParser.T__50-43|1<<CypherParser.T__51-43|1<<CypherParser.T__52-43))!==0)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function SymbolicNameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_symbolicName;return this;}SymbolicNameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);SymbolicNameContext.prototype.constructor=SymbolicNameContext;SymbolicNameContext.prototype.keyword=function(){return this.getTypedRuleContext(KeywordContext,0);};SymbolicNameContext.prototype.UnescapedSymbolicName=function(){return this.getToken(CypherParser.UnescapedSymbolicName,0);};SymbolicNameContext.prototype.EscapedSymbolicName=function(){return this.getToken(CypherParser.EscapedSymbolicName,0);};SymbolicNameContext.prototype.HexLetter=function(){return this.getToken(CypherParser.HexLetter,0);};SymbolicNameContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterSymbolicName(this);}};SymbolicNameContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitSymbolicName(this);}};CypherParser.SymbolicNameContext=SymbolicNameContext;CypherParser.prototype.symbolicName=function(){var localctx=new SymbolicNameContext(this,this._ctx,this.state);this.enterRule(localctx,402,CypherParser.RULE_symbolicName);try{this.state=2676;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.CYPHER:case CypherParser.EXPLAIN:case CypherParser.PROFILE:case CypherParser.USING:case CypherParser.PERIODIC:case CypherParser.COMMIT:case CypherParser.UNION:case CypherParser.ALL:case CypherParser.CREATE:case CypherParser.DROP:case CypherParser.INDEX:case CypherParser.ON:case CypherParser.CONSTRAINT:case CypherParser.ASSERT:case CypherParser.IS:case CypherParser.UNIQUE:case CypherParser.EXISTS:case CypherParser.LOAD:case CypherParser.CSV:case CypherParser.WITH:case CypherParser.HEADERS:case CypherParser.FROM:case CypherParser.AS:case CypherParser.FIELDTERMINATOR:case CypherParser.OPTIONAL:case CypherParser.MATCH:case CypherParser.UNWIND:case CypherParser.MERGE:case CypherParser.SET:case CypherParser.DETACH:case CypherParser.DELETE:case CypherParser.REMOVE:case CypherParser.FOREACH:case CypherParser.IN:case CypherParser.DISTINCT:case CypherParser.RETURN:case CypherParser.ORDER:case CypherParser.BY:case CypherParser.L_SKIP:case CypherParser.LIMIT:case CypherParser.ASCENDING:case CypherParser.ASC:case CypherParser.DESCENDING:case CypherParser.DESC:case CypherParser.JOIN:case CypherParser.SCAN:case CypherParser.START:case CypherParser.NODE:case CypherParser.RELATIONSHIP:case CypherParser.REL:case CypherParser.WHERE:case CypherParser.SHORTESTPATH:case CypherParser.ALLSHORTESTPATHS:case CypherParser.OR:case CypherParser.XOR:case CypherParser.AND:case CypherParser.NOT:case CypherParser.STARTS:case CypherParser.ENDS:case CypherParser.CONTAINS:case CypherParser.NULL:case CypherParser.COUNT:case CypherParser.FILTER:case CypherParser.EXTRACT:case CypherParser.ANY:case CypherParser.NONE:case CypherParser.SINGLE:case CypherParser.TRUE:case CypherParser.FALSE:case CypherParser.REDUCE:case CypherParser.CASE:case CypherParser.ELSE:case CypherParser.END:case CypherParser.WHEN:case CypherParser.THEN:case CypherParser.CALL:case CypherParser.YIELD:case CypherParser.KEY:this.enterOuterAlt(localctx,1);this.state=2672;this.keyword();break;case CypherParser.UnescapedSymbolicName:this.enterOuterAlt(localctx,2);this.state=2673;this.match(CypherParser.UnescapedSymbolicName);break;case CypherParser.EscapedSymbolicName:this.enterOuterAlt(localctx,3);this.state=2674;this.match(CypherParser.EscapedSymbolicName);break;case CypherParser.HexLetter:this.enterOuterAlt(localctx,4);this.state=2675;this.match(CypherParser.HexLetter);break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function KeywordContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_keyword;return this;}KeywordContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);KeywordContext.prototype.constructor=KeywordContext;KeywordContext.prototype.CYPHER=function(){return this.getToken(CypherParser.CYPHER,0);};KeywordContext.prototype.EXPLAIN=function(){return this.getToken(CypherParser.EXPLAIN,0);};KeywordContext.prototype.PROFILE=function(){return this.getToken(CypherParser.PROFILE,0);};KeywordContext.prototype.USING=function(){return this.getToken(CypherParser.USING,0);};KeywordContext.prototype.PERIODIC=function(){return this.getToken(CypherParser.PERIODIC,0);};KeywordContext.prototype.COMMIT=function(){return this.getToken(CypherParser.COMMIT,0);};KeywordContext.prototype.UNION=function(){return this.getToken(CypherParser.UNION,0);};KeywordContext.prototype.ALL=function(){return this.getToken(CypherParser.ALL,0);};KeywordContext.prototype.CREATE=function(){return this.getToken(CypherParser.CREATE,0);};KeywordContext.prototype.DROP=function(){return this.getToken(CypherParser.DROP,0);};KeywordContext.prototype.INDEX=function(){return this.getToken(CypherParser.INDEX,0);};KeywordContext.prototype.ON=function(){return this.getToken(CypherParser.ON,0);};KeywordContext.prototype.CONSTRAINT=function(){return this.getToken(CypherParser.CONSTRAINT,0);};KeywordContext.prototype.ASSERT=function(){return this.getToken(CypherParser.ASSERT,0);};KeywordContext.prototype.IS=function(){return this.getToken(CypherParser.IS,0);};KeywordContext.prototype.UNIQUE=function(){return this.getToken(CypherParser.UNIQUE,0);};KeywordContext.prototype.EXISTS=function(){return this.getToken(CypherParser.EXISTS,0);};KeywordContext.prototype.LOAD=function(){return this.getToken(CypherParser.LOAD,0);};KeywordContext.prototype.CSV=function(){return this.getToken(CypherParser.CSV,0);};KeywordContext.prototype.WITH=function(){return this.getToken(CypherParser.WITH,0);};KeywordContext.prototype.HEADERS=function(){return this.getToken(CypherParser.HEADERS,0);};KeywordContext.prototype.FROM=function(){return this.getToken(CypherParser.FROM,0);};KeywordContext.prototype.AS=function(){return this.getToken(CypherParser.AS,0);};KeywordContext.prototype.FIELDTERMINATOR=function(){return this.getToken(CypherParser.FIELDTERMINATOR,0);};KeywordContext.prototype.OPTIONAL=function(){return this.getToken(CypherParser.OPTIONAL,0);};KeywordContext.prototype.MATCH=function(){return this.getToken(CypherParser.MATCH,0);};KeywordContext.prototype.UNWIND=function(){return this.getToken(CypherParser.UNWIND,0);};KeywordContext.prototype.MERGE=function(){return this.getToken(CypherParser.MERGE,0);};KeywordContext.prototype.SET=function(){return this.getToken(CypherParser.SET,0);};KeywordContext.prototype.DETACH=function(){return this.getToken(CypherParser.DETACH,0);};KeywordContext.prototype.DELETE=function(){return this.getToken(CypherParser.DELETE,0);};KeywordContext.prototype.REMOVE=function(){return this.getToken(CypherParser.REMOVE,0);};KeywordContext.prototype.FOREACH=function(){return this.getToken(CypherParser.FOREACH,0);};KeywordContext.prototype.IN=function(){return this.getToken(CypherParser.IN,0);};KeywordContext.prototype.DISTINCT=function(){return this.getToken(CypherParser.DISTINCT,0);};KeywordContext.prototype.RETURN=function(){return this.getToken(CypherParser.RETURN,0);};KeywordContext.prototype.ORDER=function(){return this.getToken(CypherParser.ORDER,0);};KeywordContext.prototype.BY=function(){return this.getToken(CypherParser.BY,0);};KeywordContext.prototype.L_SKIP=function(){return this.getToken(CypherParser.L_SKIP,0);};KeywordContext.prototype.LIMIT=function(){return this.getToken(CypherParser.LIMIT,0);};KeywordContext.prototype.ASCENDING=function(){return this.getToken(CypherParser.ASCENDING,0);};KeywordContext.prototype.ASC=function(){return this.getToken(CypherParser.ASC,0);};KeywordContext.prototype.DESCENDING=function(){return this.getToken(CypherParser.DESCENDING,0);};KeywordContext.prototype.DESC=function(){return this.getToken(CypherParser.DESC,0);};KeywordContext.prototype.JOIN=function(){return this.getToken(CypherParser.JOIN,0);};KeywordContext.prototype.SCAN=function(){return this.getToken(CypherParser.SCAN,0);};KeywordContext.prototype.START=function(){return this.getToken(CypherParser.START,0);};KeywordContext.prototype.NODE=function(){return this.getToken(CypherParser.NODE,0);};KeywordContext.prototype.RELATIONSHIP=function(){return this.getToken(CypherParser.RELATIONSHIP,0);};KeywordContext.prototype.REL=function(){return this.getToken(CypherParser.REL,0);};KeywordContext.prototype.WHERE=function(){return this.getToken(CypherParser.WHERE,0);};KeywordContext.prototype.SHORTESTPATH=function(){return this.getToken(CypherParser.SHORTESTPATH,0);};KeywordContext.prototype.ALLSHORTESTPATHS=function(){return this.getToken(CypherParser.ALLSHORTESTPATHS,0);};KeywordContext.prototype.OR=function(){return this.getToken(CypherParser.OR,0);};KeywordContext.prototype.XOR=function(){return this.getToken(CypherParser.XOR,0);};KeywordContext.prototype.AND=function(){return this.getToken(CypherParser.AND,0);};KeywordContext.prototype.NOT=function(){return this.getToken(CypherParser.NOT,0);};KeywordContext.prototype.STARTS=function(){return this.getToken(CypherParser.STARTS,0);};KeywordContext.prototype.ENDS=function(){return this.getToken(CypherParser.ENDS,0);};KeywordContext.prototype.CONTAINS=function(){return this.getToken(CypherParser.CONTAINS,0);};KeywordContext.prototype.NULL=function(){return this.getToken(CypherParser.NULL,0);};KeywordContext.prototype.COUNT=function(){return this.getToken(CypherParser.COUNT,0);};KeywordContext.prototype.FILTER=function(){return this.getToken(CypherParser.FILTER,0);};KeywordContext.prototype.EXTRACT=function(){return this.getToken(CypherParser.EXTRACT,0);};KeywordContext.prototype.ANY=function(){return this.getToken(CypherParser.ANY,0);};KeywordContext.prototype.NONE=function(){return this.getToken(CypherParser.NONE,0);};KeywordContext.prototype.SINGLE=function(){return this.getToken(CypherParser.SINGLE,0);};KeywordContext.prototype.TRUE=function(){return this.getToken(CypherParser.TRUE,0);};KeywordContext.prototype.FALSE=function(){return this.getToken(CypherParser.FALSE,0);};KeywordContext.prototype.REDUCE=function(){return this.getToken(CypherParser.REDUCE,0);};KeywordContext.prototype.CASE=function(){return this.getToken(CypherParser.CASE,0);};KeywordContext.prototype.ELSE=function(){return this.getToken(CypherParser.ELSE,0);};KeywordContext.prototype.END=function(){return this.getToken(CypherParser.END,0);};KeywordContext.prototype.WHEN=function(){return this.getToken(CypherParser.WHEN,0);};KeywordContext.prototype.THEN=function(){return this.getToken(CypherParser.THEN,0);};KeywordContext.prototype.CALL=function(){return this.getToken(CypherParser.CALL,0);};KeywordContext.prototype.YIELD=function(){return this.getToken(CypherParser.YIELD,0);};KeywordContext.prototype.KEY=function(){return this.getToken(CypherParser.KEY,0);};KeywordContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterKeyword(this);}};KeywordContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitKeyword(this);}};CypherParser.KeywordContext=KeywordContext;CypherParser.prototype.keyword=function(){var localctx=new KeywordContext(this,this._ctx,this.state);this.enterRule(localctx,404,CypherParser.RULE_keyword);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2678;_la=this._input.LA(1);if(!((_la-54&~0x1f)==0&&(1<<_la-54&(1<<CypherParser.CYPHER-54|1<<CypherParser.EXPLAIN-54|1<<CypherParser.PROFILE-54|1<<CypherParser.USING-54|1<<CypherParser.PERIODIC-54|1<<CypherParser.COMMIT-54|1<<CypherParser.UNION-54|1<<CypherParser.ALL-54|1<<CypherParser.CREATE-54|1<<CypherParser.DROP-54|1<<CypherParser.INDEX-54|1<<CypherParser.ON-54|1<<CypherParser.CONSTRAINT-54|1<<CypherParser.ASSERT-54|1<<CypherParser.IS-54|1<<CypherParser.UNIQUE-54|1<<CypherParser.EXISTS-54|1<<CypherParser.LOAD-54|1<<CypherParser.CSV-54|1<<CypherParser.WITH-54|1<<CypherParser.HEADERS-54|1<<CypherParser.FROM-54|1<<CypherParser.AS-54|1<<CypherParser.FIELDTERMINATOR-54|1<<CypherParser.OPTIONAL-54|1<<CypherParser.MATCH-54|1<<CypherParser.UNWIND-54|1<<CypherParser.MERGE-54|1<<CypherParser.SET-54|1<<CypherParser.DETACH-54|1<<CypherParser.DELETE-54|1<<CypherParser.REMOVE-54))!==0||(_la-86&~0x1f)==0&&(1<<_la-86&(1<<CypherParser.FOREACH-86|1<<CypherParser.IN-86|1<<CypherParser.DISTINCT-86|1<<CypherParser.RETURN-86|1<<CypherParser.ORDER-86|1<<CypherParser.BY-86|1<<CypherParser.L_SKIP-86|1<<CypherParser.LIMIT-86|1<<CypherParser.ASCENDING-86|1<<CypherParser.ASC-86|1<<CypherParser.DESCENDING-86|1<<CypherParser.DESC-86|1<<CypherParser.JOIN-86|1<<CypherParser.SCAN-86|1<<CypherParser.START-86|1<<CypherParser.NODE-86|1<<CypherParser.RELATIONSHIP-86|1<<CypherParser.REL-86|1<<CypherParser.WHERE-86|1<<CypherParser.SHORTESTPATH-86|1<<CypherParser.ALLSHORTESTPATHS-86|1<<CypherParser.OR-86|1<<CypherParser.XOR-86|1<<CypherParser.AND-86|1<<CypherParser.NOT-86|1<<CypherParser.STARTS-86|1<<CypherParser.ENDS-86|1<<CypherParser.CONTAINS-86|1<<CypherParser.NULL-86|1<<CypherParser.COUNT-86|1<<CypherParser.FILTER-86|1<<CypherParser.EXTRACT-86))!==0||(_la-118&~0x1f)==0&&(1<<_la-118&(1<<CypherParser.ANY-118|1<<CypherParser.NONE-118|1<<CypherParser.SINGLE-118|1<<CypherParser.TRUE-118|1<<CypherParser.FALSE-118|1<<CypherParser.REDUCE-118|1<<CypherParser.CASE-118|1<<CypherParser.ELSE-118|1<<CypherParser.END-118|1<<CypherParser.WHEN-118|1<<CypherParser.THEN-118|1<<CypherParser.CALL-118|1<<CypherParser.YIELD-118|1<<CypherParser.KEY-118))!==0)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};exports.CypherParser=CypherParser;

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Utils = __webpack_require__(0);
var Token = __webpack_require__(2).Token;
var RuleNode = __webpack_require__(7).RuleNode;
var ErrorNode = __webpack_require__(7).ErrorNode;
var TerminalNode = __webpack_require__(7).TerminalNode;
var ParserRuleContext = __webpack_require__(21).ParserRuleContext;
var RuleContext = __webpack_require__(17).RuleContext;
var INVALID_ALT_NUMBER = __webpack_require__(11).INVALID_ALT_NUMBER;


/** A set of utility routines useful for all kinds of ANTLR trees. */
function Trees() {
}

// Print out a whole tree in LISP form. {@link //getNodeText} is used on the
//  node payloads to get the text for the nodes.  Detect
//  parse trees and extract data appropriately.
Trees.toStringTree = function(tree, ruleNames, recog) {
	ruleNames = ruleNames || null;
	recog = recog || null;
    if(recog!==null) {
       ruleNames = recog.ruleNames;
    }
    var s = Trees.getNodeText(tree, ruleNames);
    s = Utils.escapeWhitespace(s, false);
    var c = tree.getChildCount();
    if(c===0) {
        return s;
    }
    var res = "(" + s + ' ';
    if(c>0) {
        s = Trees.toStringTree(tree.getChild(0), ruleNames);
        res = res.concat(s);
    }
    for(var i=1;i<c;i++) {
        s = Trees.toStringTree(tree.getChild(i), ruleNames);
        res = res.concat(' ' + s);
    }
    res = res.concat(")");
    return res;
};

Trees.getNodeText = function(t, ruleNames, recog) {
	ruleNames = ruleNames || null;
	recog = recog || null;
    if(recog!==null) {
        ruleNames = recog.ruleNames;
    }
    if(ruleNames!==null) {
       if (t instanceof RuleContext) {
           var altNumber = t.getAltNumber();
           if ( altNumber!=INVALID_ALT_NUMBER ) {
               return ruleNames[t.ruleIndex]+":"+altNumber;
           }
           return ruleNames[t.ruleIndex];
       } else if ( t instanceof ErrorNode) {
           return t.toString();
       } else if(t instanceof TerminalNode) {
           if(t.symbol!==null) {
               return t.symbol.text;
           }
       }
    }
    // no recog for rule names
    var payload = t.getPayload();
    if (payload instanceof Token ) {
       return payload.text;
    }
    return t.getPayload().toString();
};


// Return ordered list of all children of this node
Trees.getChildren = function(t) {
	var list = [];
	for(var i=0;i<t.getChildCount();i++) {
		list.push(t.getChild(i));
	}
	return list;
};

// Return a list of all ancestors of this node.  The first node of
//  list is the root and the last is the parent of this node.
//
Trees.getAncestors = function(t) {
    var ancestors = [];
    t = t.getParent();
    while(t!==null) {
        ancestors = [t].concat(ancestors);
        t = t.getParent();
    }
    return ancestors;
};

Trees.findAllTokenNodes = function(t, ttype) {
    return Trees.findAllNodes(t, ttype, true);
};

Trees.findAllRuleNodes = function(t, ruleIndex) {
	return Trees.findAllNodes(t, ruleIndex, false);
};

Trees.findAllNodes = function(t, index, findTokens) {
	var nodes = [];
	Trees._findAllNodes(t, index, findTokens, nodes);
	return nodes;
};

Trees._findAllNodes = function(t, index, findTokens, nodes) {
	// check this node (the root) first
	if(findTokens && (t instanceof TerminalNode)) {
		if(t.symbol.type===index) {
			nodes.push(t);
		}
	} else if(!findTokens && (t instanceof ParserRuleContext)) {
		if(t.ruleIndex===index) {
			nodes.push(t);
		}
	}
	// check children
	for(var i=0;i<t.getChildCount();i++) {
		Trees._findAllNodes(t.getChild(i), index, findTokens, nodes);
	}
};

Trees.descendants = function(t) {
	var nodes = [t];
    for(var i=0;i<t.getChildCount();i++) {
        nodes = nodes.concat(Trees.descendants(t.getChild(i)));
    }
    return nodes;
};


exports.Trees = Trees;

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Token = __webpack_require__(2).Token;
var ATN = __webpack_require__(11).ATN;
var ATNType = __webpack_require__(54).ATNType;
var ATNStates = __webpack_require__(6);
var ATNState = ATNStates.ATNState;
var BasicState = ATNStates.BasicState;
var DecisionState = ATNStates.DecisionState;
var BlockStartState = ATNStates.BlockStartState;
var BlockEndState = ATNStates.BlockEndState;
var LoopEndState = ATNStates.LoopEndState;
var RuleStartState = ATNStates.RuleStartState;
var RuleStopState = ATNStates.RuleStopState;
var TokensStartState = ATNStates.TokensStartState;
var PlusLoopbackState = ATNStates.PlusLoopbackState;
var StarLoopbackState = ATNStates.StarLoopbackState;
var StarLoopEntryState = ATNStates.StarLoopEntryState;
var PlusBlockStartState = ATNStates.PlusBlockStartState;
var StarBlockStartState = ATNStates.StarBlockStartState;
var BasicBlockStartState = ATNStates.BasicBlockStartState;
var Transitions = __webpack_require__(12);
var Transition = Transitions.Transition;
var AtomTransition = Transitions.AtomTransition;
var SetTransition = Transitions.SetTransition;
var NotSetTransition = Transitions.NotSetTransition;
var RuleTransition = Transitions.RuleTransition;
var RangeTransition = Transitions.RangeTransition;
var ActionTransition = Transitions.ActionTransition;
var EpsilonTransition = Transitions.EpsilonTransition;
var WildcardTransition = Transitions.WildcardTransition;
var PredicateTransition = Transitions.PredicateTransition;
var PrecedencePredicateTransition = Transitions.PrecedencePredicateTransition;
var IntervalSet = __webpack_require__(4).IntervalSet;
var Interval = __webpack_require__(4).Interval;
var ATNDeserializationOptions = __webpack_require__(30).ATNDeserializationOptions;
var LexerActions = __webpack_require__(31);
var LexerActionType = LexerActions.LexerActionType;
var LexerSkipAction = LexerActions.LexerSkipAction;
var LexerChannelAction = LexerActions.LexerChannelAction;
var LexerCustomAction = LexerActions.LexerCustomAction;
var LexerMoreAction = LexerActions.LexerMoreAction;
var LexerTypeAction = LexerActions.LexerTypeAction;
var LexerPushModeAction = LexerActions.LexerPushModeAction;
var LexerPopModeAction = LexerActions.LexerPopModeAction;
var LexerModeAction = LexerActions.LexerModeAction;
// This is the earliest supported serialized UUID.
// stick to serialized version for now, we don't need a UUID instance
var BASE_SERIALIZED_UUID = "AADB8D7E-AEEF-4415-AD2B-8204D6CF042E";

//
// This UUID indicates the serialized ATN contains two sets of
// IntervalSets, where the second set's values are encoded as
// 32-bit integers to support the full Unicode SMP range up to U+10FFFF.
//
var ADDED_UNICODE_SMP = "59627784-3BE5-417A-B9EB-8131A7286089";

// This list contains all of the currently supported UUIDs, ordered by when
// the feature first appeared in this branch.
var SUPPORTED_UUIDS = [ BASE_SERIALIZED_UUID, ADDED_UNICODE_SMP ];

var SERIALIZED_VERSION = 3;

// This is the current serialized UUID.
var SERIALIZED_UUID = ADDED_UNICODE_SMP;

function initArray( length, value) {
	var tmp = [];
	tmp[length-1] = value;
	return tmp.map(function(i) {return value;});
}

function ATNDeserializer (options) {

    if ( options=== undefined || options === null ) {
        options = ATNDeserializationOptions.defaultOptions;
    }
    this.deserializationOptions = options;
    this.stateFactories = null;
    this.actionFactories = null;

    return this;
}

// Determines if a particular serialized representation of an ATN supports
// a particular feature, identified by the {@link UUID} used for serializing
// the ATN at the time the feature was first introduced.
//
// @param feature The {@link UUID} marking the first time the feature was
// supported in the serialized ATN.
// @param actualUuid The {@link UUID} of the actual serialized ATN which is
// currently being deserialized.
// @return {@code true} if the {@code actualUuid} value represents a
// serialized ATN at or after the feature identified by {@code feature} was
// introduced; otherwise, {@code false}.

ATNDeserializer.prototype.isFeatureSupported = function(feature, actualUuid) {
    var idx1 = SUPPORTED_UUIDS.indexOf(feature);
    if (idx1<0) {
        return false;
    }
    var idx2 = SUPPORTED_UUIDS.indexOf(actualUuid);
    return idx2 >= idx1;
};

ATNDeserializer.prototype.deserialize = function(data) {
    this.reset(data);
    this.checkVersion();
    this.checkUUID();
    var atn = this.readATN();
    this.readStates(atn);
    this.readRules(atn);
    this.readModes(atn);
    var sets = [];
    // First, deserialize sets with 16-bit arguments <= U+FFFF.
    this.readSets(atn, sets, this.readInt.bind(this));
    // Next, if the ATN was serialized with the Unicode SMP feature,
    // deserialize sets with 32-bit arguments <= U+10FFFF.
    if (this.isFeatureSupported(ADDED_UNICODE_SMP, this.uuid)) {
        this.readSets(atn, sets, this.readInt32.bind(this));
    }
    this.readEdges(atn, sets);
    this.readDecisions(atn);
    this.readLexerActions(atn);
    this.markPrecedenceDecisions(atn);
    this.verifyATN(atn);
    if (this.deserializationOptions.generateRuleBypassTransitions && atn.grammarType === ATNType.PARSER ) {
        this.generateRuleBypassTransitions(atn);
        // re-verify after modification
        this.verifyATN(atn);
    }
    return atn;
};

ATNDeserializer.prototype.reset = function(data) {
	var adjust = function(c) {
        var v = c.charCodeAt(0);
        return v>1  ? v-2 : -1;
	};
    var temp = data.split("").map(adjust);
    // don't adjust the first value since that's the version number
    temp[0] = data.charCodeAt(0);
    this.data = temp;
    this.pos = 0;
};

ATNDeserializer.prototype.checkVersion = function() {
    var version = this.readInt();
    if ( version !== SERIALIZED_VERSION ) {
        throw ("Could not deserialize ATN with version " + version + " (expected " + SERIALIZED_VERSION + ").");
    }
};

ATNDeserializer.prototype.checkUUID = function() {
    var uuid = this.readUUID();
    if (SUPPORTED_UUIDS.indexOf(uuid)<0) {
        throw ("Could not deserialize ATN with UUID: " + uuid +
                        " (expected " + SERIALIZED_UUID + " or a legacy UUID).", uuid, SERIALIZED_UUID);
    }
    this.uuid = uuid;
};

ATNDeserializer.prototype.readATN = function() {
    var grammarType = this.readInt();
    var maxTokenType = this.readInt();
    return new ATN(grammarType, maxTokenType);
};

ATNDeserializer.prototype.readStates = function(atn) {
	var j, pair, stateNumber;
    var loopBackStateNumbers = [];
    var endStateNumbers = [];
    var nstates = this.readInt();
    for(var i=0; i<nstates; i++) {
        var stype = this.readInt();
        // ignore bad type of states
        if (stype===ATNState.INVALID_TYPE) {
            atn.addState(null);
            continue;
        }
        var ruleIndex = this.readInt();
        if (ruleIndex === 0xFFFF) {
            ruleIndex = -1;
        }
        var s = this.stateFactory(stype, ruleIndex);
        if (stype === ATNState.LOOP_END) { // special case
            var loopBackStateNumber = this.readInt();
            loopBackStateNumbers.push([s, loopBackStateNumber]);
        } else if(s instanceof BlockStartState) {
            var endStateNumber = this.readInt();
            endStateNumbers.push([s, endStateNumber]);
        }
        atn.addState(s);
    }
    // delay the assignment of loop back and end states until we know all the
	// state instances have been initialized
    for (j=0; j<loopBackStateNumbers.length; j++) {
        pair = loopBackStateNumbers[j];
        pair[0].loopBackState = atn.states[pair[1]];
    }

    for (j=0; j<endStateNumbers.length; j++) {
        pair = endStateNumbers[j];
        pair[0].endState = atn.states[pair[1]];
    }

    var numNonGreedyStates = this.readInt();
    for (j=0; j<numNonGreedyStates; j++) {
        stateNumber = this.readInt();
        atn.states[stateNumber].nonGreedy = true;
    }

    var numPrecedenceStates = this.readInt();
    for (j=0; j<numPrecedenceStates; j++) {
        stateNumber = this.readInt();
        atn.states[stateNumber].isPrecedenceRule = true;
    }
};

ATNDeserializer.prototype.readRules = function(atn) {
    var i;
    var nrules = this.readInt();
    if (atn.grammarType === ATNType.LEXER ) {
        atn.ruleToTokenType = initArray(nrules, 0);
    }
    atn.ruleToStartState = initArray(nrules, 0);
    for (i=0; i<nrules; i++) {
        var s = this.readInt();
        var startState = atn.states[s];
        atn.ruleToStartState[i] = startState;
        if ( atn.grammarType === ATNType.LEXER ) {
            var tokenType = this.readInt();
            if (tokenType === 0xFFFF) {
                tokenType = Token.EOF;
            }
            atn.ruleToTokenType[i] = tokenType;
        }
    }
    atn.ruleToStopState = initArray(nrules, 0);
    for (i=0; i<atn.states.length; i++) {
        var state = atn.states[i];
        if (!(state instanceof RuleStopState)) {
            continue;
        }
        atn.ruleToStopState[state.ruleIndex] = state;
        atn.ruleToStartState[state.ruleIndex].stopState = state;
    }
};

ATNDeserializer.prototype.readModes = function(atn) {
    var nmodes = this.readInt();
    for (var i=0; i<nmodes; i++) {
        var s = this.readInt();
        atn.modeToStartState.push(atn.states[s]);
    }
};

ATNDeserializer.prototype.readSets = function(atn, sets, readUnicode) {
    var m = this.readInt();
    for (var i=0; i<m; i++) {
        var iset = new IntervalSet();
        sets.push(iset);
        var n = this.readInt();
        var containsEof = this.readInt();
        if (containsEof!==0) {
            iset.addOne(-1);
        }
        for (var j=0; j<n; j++) {
            var i1 = readUnicode();
            var i2 = readUnicode();
            iset.addRange(i1, i2);
        }
    }
};

ATNDeserializer.prototype.readEdges = function(atn, sets) {
	var i, j, state, trans, target;
    var nedges = this.readInt();
    for (i=0; i<nedges; i++) {
        var src = this.readInt();
        var trg = this.readInt();
        var ttype = this.readInt();
        var arg1 = this.readInt();
        var arg2 = this.readInt();
        var arg3 = this.readInt();
        trans = this.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets);
        var srcState = atn.states[src];
        srcState.addTransition(trans);
    }
    // edges for rule stop states can be derived, so they aren't serialized
    for (i=0; i<atn.states.length; i++) {
        state = atn.states[i];
        for (j=0; j<state.transitions.length; j++) {
            var t = state.transitions[j];
            if (!(t instanceof RuleTransition)) {
                continue;
            }
			var outermostPrecedenceReturn = -1;
			if (atn.ruleToStartState[t.target.ruleIndex].isPrecedenceRule) {
				if (t.precedence === 0) {
					outermostPrecedenceReturn = t.target.ruleIndex;
				}
			}

			trans = new EpsilonTransition(t.followState, outermostPrecedenceReturn);
            atn.ruleToStopState[t.target.ruleIndex].addTransition(trans);
        }
    }

    for (i=0; i<atn.states.length; i++) {
        state = atn.states[i];
        if (state instanceof BlockStartState) {
            // we need to know the end state to set its start state
            if (state.endState === null) {
                throw ("IllegalState");
            }
            // block end states can only be associated to a single block start
			// state
            if ( state.endState.startState !== null) {
                throw ("IllegalState");
            }
            state.endState.startState = state;
        }
        if (state instanceof PlusLoopbackState) {
            for (j=0; j<state.transitions.length; j++) {
                target = state.transitions[j].target;
                if (target instanceof PlusBlockStartState) {
                    target.loopBackState = state;
                }
            }
        } else if (state instanceof StarLoopbackState) {
            for (j=0; j<state.transitions.length; j++) {
                target = state.transitions[j].target;
                if (target instanceof StarLoopEntryState) {
                    target.loopBackState = state;
                }
            }
        }
    }
};

ATNDeserializer.prototype.readDecisions = function(atn) {
    var ndecisions = this.readInt();
    for (var i=0; i<ndecisions; i++) {
        var s = this.readInt();
        var decState = atn.states[s];
        atn.decisionToState.push(decState);
        decState.decision = i;
    }
};

ATNDeserializer.prototype.readLexerActions = function(atn) {
    if (atn.grammarType === ATNType.LEXER) {
        var count = this.readInt();
        atn.lexerActions = initArray(count, null);
        for (var i=0; i<count; i++) {
            var actionType = this.readInt();
            var data1 = this.readInt();
            if (data1 === 0xFFFF) {
                data1 = -1;
            }
            var data2 = this.readInt();
            if (data2 === 0xFFFF) {
                data2 = -1;
            }
            var lexerAction = this.lexerActionFactory(actionType, data1, data2);
            atn.lexerActions[i] = lexerAction;
        }
    }
};

ATNDeserializer.prototype.generateRuleBypassTransitions = function(atn) {
	var i;
    var count = atn.ruleToStartState.length;
    for(i=0; i<count; i++) {
        atn.ruleToTokenType[i] = atn.maxTokenType + i + 1;
    }
    for(i=0; i<count; i++) {
        this.generateRuleBypassTransition(atn, i);
    }
};

ATNDeserializer.prototype.generateRuleBypassTransition = function(atn, idx) {
	var i, state;
    var bypassStart = new BasicBlockStartState();
    bypassStart.ruleIndex = idx;
    atn.addState(bypassStart);

    var bypassStop = new BlockEndState();
    bypassStop.ruleIndex = idx;
    atn.addState(bypassStop);

    bypassStart.endState = bypassStop;
    atn.defineDecisionState(bypassStart);

    bypassStop.startState = bypassStart;

    var excludeTransition = null;
    var endState = null;

    if (atn.ruleToStartState[idx].isPrecedenceRule) {
        // wrap from the beginning of the rule to the StarLoopEntryState
        endState = null;
        for(i=0; i<atn.states.length; i++) {
            state = atn.states[i];
            if (this.stateIsEndStateFor(state, idx)) {
                endState = state;
                excludeTransition = state.loopBackState.transitions[0];
                break;
            }
        }
        if (excludeTransition === null) {
            throw ("Couldn't identify final state of the precedence rule prefix section.");
        }
    } else {
        endState = atn.ruleToStopState[idx];
    }

    // all non-excluded transitions that currently target end state need to
	// target blockEnd instead
    for(i=0; i<atn.states.length; i++) {
        state = atn.states[i];
        for(var j=0; j<state.transitions.length; j++) {
            var transition = state.transitions[j];
            if (transition === excludeTransition) {
                continue;
            }
            if (transition.target === endState) {
                transition.target = bypassStop;
            }
        }
    }

    // all transitions leaving the rule start state need to leave blockStart
	// instead
    var ruleToStartState = atn.ruleToStartState[idx];
    var count = ruleToStartState.transitions.length;
    while ( count > 0) {
        bypassStart.addTransition(ruleToStartState.transitions[count-1]);
        ruleToStartState.transitions = ruleToStartState.transitions.slice(-1);
    }
    // link the new states
    atn.ruleToStartState[idx].addTransition(new EpsilonTransition(bypassStart));
    bypassStop.addTransition(new EpsilonTransition(endState));

    var matchState = new BasicState();
    atn.addState(matchState);
    matchState.addTransition(new AtomTransition(bypassStop, atn.ruleToTokenType[idx]));
    bypassStart.addTransition(new EpsilonTransition(matchState));
};

ATNDeserializer.prototype.stateIsEndStateFor = function(state, idx) {
    if ( state.ruleIndex !== idx) {
        return null;
    }
    if (!( state instanceof StarLoopEntryState)) {
        return null;
    }
    var maybeLoopEndState = state.transitions[state.transitions.length - 1].target;
    if (!( maybeLoopEndState instanceof LoopEndState)) {
        return null;
    }
    if (maybeLoopEndState.epsilonOnlyTransitions &&
        (maybeLoopEndState.transitions[0].target instanceof RuleStopState)) {
        return state;
    } else {
        return null;
    }
};

//
// Analyze the {@link StarLoopEntryState} states in the specified ATN to set
// the {@link StarLoopEntryState//isPrecedenceDecision} field to the
// correct value.
//
// @param atn The ATN.
//
ATNDeserializer.prototype.markPrecedenceDecisions = function(atn) {
	for(var i=0; i<atn.states.length; i++) {
		var state = atn.states[i];
		if (!( state instanceof StarLoopEntryState)) {
            continue;
        }
        // We analyze the ATN to determine if this ATN decision state is the
        // decision for the closure block that determines whether a
        // precedence rule should continue or complete.
        //
        if ( atn.ruleToStartState[state.ruleIndex].isPrecedenceRule) {
            var maybeLoopEndState = state.transitions[state.transitions.length - 1].target;
            if (maybeLoopEndState instanceof LoopEndState) {
                if ( maybeLoopEndState.epsilonOnlyTransitions &&
                        (maybeLoopEndState.transitions[0].target instanceof RuleStopState)) {
                    state.isPrecedenceDecision = true;
                }
            }
        }
	}
};

ATNDeserializer.prototype.verifyATN = function(atn) {
    if (!this.deserializationOptions.verifyATN) {
        return;
    }
    // verify assumptions
	for(var i=0; i<atn.states.length; i++) {
        var state = atn.states[i];
        if (state === null) {
            continue;
        }
        this.checkCondition(state.epsilonOnlyTransitions || state.transitions.length <= 1);
        if (state instanceof PlusBlockStartState) {
            this.checkCondition(state.loopBackState !== null);
        } else  if (state instanceof StarLoopEntryState) {
            this.checkCondition(state.loopBackState !== null);
            this.checkCondition(state.transitions.length === 2);
            if (state.transitions[0].target instanceof StarBlockStartState) {
                this.checkCondition(state.transitions[1].target instanceof LoopEndState);
                this.checkCondition(!state.nonGreedy);
            } else if (state.transitions[0].target instanceof LoopEndState) {
                this.checkCondition(state.transitions[1].target instanceof StarBlockStartState);
                this.checkCondition(state.nonGreedy);
            } else {
                throw("IllegalState");
            }
        } else if (state instanceof StarLoopbackState) {
            this.checkCondition(state.transitions.length === 1);
            this.checkCondition(state.transitions[0].target instanceof StarLoopEntryState);
        } else if (state instanceof LoopEndState) {
            this.checkCondition(state.loopBackState !== null);
        } else if (state instanceof RuleStartState) {
            this.checkCondition(state.stopState !== null);
        } else if (state instanceof BlockStartState) {
            this.checkCondition(state.endState !== null);
        } else if (state instanceof BlockEndState) {
            this.checkCondition(state.startState !== null);
        } else if (state instanceof DecisionState) {
            this.checkCondition(state.transitions.length <= 1 || state.decision >= 0);
        } else {
            this.checkCondition(state.transitions.length <= 1 || (state instanceof RuleStopState));
        }
	}
};

ATNDeserializer.prototype.checkCondition = function(condition, message) {
    if (!condition) {
        if (message === undefined || message===null) {
            message = "IllegalState";
        }
        throw (message);
    }
};

ATNDeserializer.prototype.readInt = function() {
    return this.data[this.pos++];
};

ATNDeserializer.prototype.readInt32 = function() {
    var low = this.readInt();
    var high = this.readInt();
    return low | (high << 16);
};

ATNDeserializer.prototype.readLong = function() {
    var low = this.readInt32();
    var high = this.readInt32();
    return (low & 0x00000000FFFFFFFF) | (high << 32);
};

function createByteToHex() {
	var bth = [];
	for (var i = 0; i < 256; i++) {
		bth[i] = (i + 0x100).toString(16).substr(1).toUpperCase();
	}
	return bth;
}

var byteToHex = createByteToHex();

ATNDeserializer.prototype.readUUID = function() {
	var bb = [];
	for(var i=7;i>=0;i--) {
		var int = this.readInt();
		/* jshint bitwise: false */
		bb[(2*i)+1] = int & 0xFF;
		bb[2*i] = (int >> 8) & 0xFF;
	}
    return byteToHex[bb[0]] + byteToHex[bb[1]] +
    byteToHex[bb[2]] + byteToHex[bb[3]] + '-' +
    byteToHex[bb[4]] + byteToHex[bb[5]] + '-' +
    byteToHex[bb[6]] + byteToHex[bb[7]] + '-' +
    byteToHex[bb[8]] + byteToHex[bb[9]] + '-' +
    byteToHex[bb[10]] + byteToHex[bb[11]] +
    byteToHex[bb[12]] + byteToHex[bb[13]] +
    byteToHex[bb[14]] + byteToHex[bb[15]];
};

ATNDeserializer.prototype.edgeFactory = function(atn, type, src, trg, arg1, arg2, arg3, sets) {
    var target = atn.states[trg];
    switch(type) {
    case Transition.EPSILON:
        return new EpsilonTransition(target);
    case Transition.RANGE:
        return arg3 !== 0 ? new RangeTransition(target, Token.EOF, arg2) : new RangeTransition(target, arg1, arg2);
    case Transition.RULE:
        return new RuleTransition(atn.states[arg1], arg2, arg3, target);
    case Transition.PREDICATE:
        return new PredicateTransition(target, arg1, arg2, arg3 !== 0);
    case Transition.PRECEDENCE:
        return new PrecedencePredicateTransition(target, arg1);
    case Transition.ATOM:
        return arg3 !== 0 ? new AtomTransition(target, Token.EOF) : new AtomTransition(target, arg1);
    case Transition.ACTION:
        return new ActionTransition(target, arg1, arg2, arg3 !== 0);
    case Transition.SET:
        return new SetTransition(target, sets[arg1]);
    case Transition.NOT_SET:
        return new NotSetTransition(target, sets[arg1]);
    case Transition.WILDCARD:
        return new WildcardTransition(target);
    default:
        throw "The specified transition type: " + type + " is not valid.";
    }
};

ATNDeserializer.prototype.stateFactory = function(type, ruleIndex) {
    if (this.stateFactories === null) {
        var sf = [];
        sf[ATNState.INVALID_TYPE] = null;
        sf[ATNState.BASIC] = function() { return new BasicState(); };
        sf[ATNState.RULE_START] = function() { return new RuleStartState(); };
        sf[ATNState.BLOCK_START] = function() { return new BasicBlockStartState(); };
        sf[ATNState.PLUS_BLOCK_START] = function() { return new PlusBlockStartState(); };
        sf[ATNState.STAR_BLOCK_START] = function() { return new StarBlockStartState(); };
        sf[ATNState.TOKEN_START] = function() { return new TokensStartState(); };
        sf[ATNState.RULE_STOP] = function() { return new RuleStopState(); };
        sf[ATNState.BLOCK_END] = function() { return new BlockEndState(); };
        sf[ATNState.STAR_LOOP_BACK] = function() { return new StarLoopbackState(); };
        sf[ATNState.STAR_LOOP_ENTRY] = function() { return new StarLoopEntryState(); };
        sf[ATNState.PLUS_LOOP_BACK] = function() { return new PlusLoopbackState(); };
        sf[ATNState.LOOP_END] = function() { return new LoopEndState(); };
        this.stateFactories = sf;
    }
    if (type>this.stateFactories.length || this.stateFactories[type] === null) {
        throw("The specified state type " + type + " is not valid.");
    } else {
        var s = this.stateFactories[type]();
        if (s!==null) {
            s.ruleIndex = ruleIndex;
            return s;
        }
    }
};

ATNDeserializer.prototype.lexerActionFactory = function(type, data1, data2) {
    if (this.actionFactories === null) {
        var af = [];
        af[LexerActionType.CHANNEL] = function(data1, data2) { return new LexerChannelAction(data1); };
        af[LexerActionType.CUSTOM] = function(data1, data2) { return new LexerCustomAction(data1, data2); };
        af[LexerActionType.MODE] = function(data1, data2) { return new LexerModeAction(data1); };
        af[LexerActionType.MORE] = function(data1, data2) { return LexerMoreAction.INSTANCE; };
        af[LexerActionType.POP_MODE] = function(data1, data2) { return LexerPopModeAction.INSTANCE; };
        af[LexerActionType.PUSH_MODE] = function(data1, data2) { return new LexerPushModeAction(data1); };
        af[LexerActionType.SKIP] = function(data1, data2) { return LexerSkipAction.INSTANCE; };
        af[LexerActionType.TYPE] = function(data1, data2) { return new LexerTypeAction(data1); };
        this.actionFactories = af;
    }
    if (type>this.actionFactories.length || this.actionFactories[type] === null) {
        throw("The specified lexer action type " + type + " is not valid.");
    } else {
        return this.actionFactories[type](data1, data2);
    }
};


exports.ATNDeserializer = ATNDeserializer;

/***/ }),
/* 30 */
/***/ (function(module, exports) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

function ATNDeserializationOptions(copyFrom) {
	if(copyFrom===undefined) {
		copyFrom = null;
	}
	this.readOnly = false;
    this.verifyATN = copyFrom===null ? true : copyFrom.verifyATN;
    this.generateRuleBypassTransitions = copyFrom===null ? false : copyFrom.generateRuleBypassTransitions;

    return this;
}

ATNDeserializationOptions.defaultOptions = new ATNDeserializationOptions();
ATNDeserializationOptions.defaultOptions.readOnly = true;

//    def __setattr__(self, key, value):
//        if key!="readOnly" and self.readOnly:
//            raise Exception("The object is read only.")
//        super(type(self), self).__setattr__(key,value)

exports.ATNDeserializationOptions = ATNDeserializationOptions;


/***/ }),
/* 31 */
/***/ (function(module, exports) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
 //

function LexerActionType() {
}

LexerActionType.CHANNEL = 0;     //The type of a {@link LexerChannelAction} action.
LexerActionType.CUSTOM = 1;      //The type of a {@link LexerCustomAction} action.
LexerActionType.MODE = 2;        //The type of a {@link LexerModeAction} action.
LexerActionType.MORE = 3;        //The type of a {@link LexerMoreAction} action.
LexerActionType.POP_MODE = 4;    //The type of a {@link LexerPopModeAction} action.
LexerActionType.PUSH_MODE = 5;   //The type of a {@link LexerPushModeAction} action.
LexerActionType.SKIP = 6;        //The type of a {@link LexerSkipAction} action.
LexerActionType.TYPE = 7;        //The type of a {@link LexerTypeAction} action.

function LexerAction(action) {
    this.actionType = action;
    this.isPositionDependent = false;
    return this;
}

LexerAction.prototype.hashCode = function() {
    var hash = new Hash();
    this.updateHashCode(hash);
    return hash.finish()
};

LexerAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType);
};

LexerAction.prototype.equals = function(other) {
    return this === other;
};



//
// Implements the {@code skip} lexer action by calling {@link Lexer//skip}.
//
// <p>The {@code skip} command does not have any parameters, so this action is
// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
function LexerSkipAction() {
	LexerAction.call(this, LexerActionType.SKIP);
	return this;
}

LexerSkipAction.prototype = Object.create(LexerAction.prototype);
LexerSkipAction.prototype.constructor = LexerSkipAction;

// Provides a singleton instance of this parameterless lexer action.
LexerSkipAction.INSTANCE = new LexerSkipAction();

LexerSkipAction.prototype.execute = function(lexer) {
    lexer.skip();
};

LexerSkipAction.prototype.toString = function() {
	return "skip";
};

//  Implements the {@code type} lexer action by calling {@link Lexer//setType}
// with the assigned type.
function LexerTypeAction(type) {
	LexerAction.call(this, LexerActionType.TYPE);
	this.type = type;
	return this;
}

LexerTypeAction.prototype = Object.create(LexerAction.prototype);
LexerTypeAction.prototype.constructor = LexerTypeAction;

LexerTypeAction.prototype.execute = function(lexer) {
    lexer.type = this.type;
};

LexerTypeAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.type);
};


LexerTypeAction.prototype.equals = function(other) {
    if(this === other) {
        return true;
    } else if (! (other instanceof LexerTypeAction)) {
        return false;
    } else {
        return this.type === other.type;
    }
};

LexerTypeAction.prototype.toString = function() {
    return "type(" + this.type + ")";
};

// Implements the {@code pushMode} lexer action by calling
// {@link Lexer//pushMode} with the assigned mode.
function LexerPushModeAction(mode) {
	LexerAction.call(this, LexerActionType.PUSH_MODE);
    this.mode = mode;
    return this;
}

LexerPushModeAction.prototype = Object.create(LexerAction.prototype);
LexerPushModeAction.prototype.constructor = LexerPushModeAction;

// <p>This action is implemented by calling {@link Lexer//pushMode} with the
// value provided by {@link //getMode}.</p>
LexerPushModeAction.prototype.execute = function(lexer) {
    lexer.pushMode(this.mode);
};

LexerPushModeAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.mode);
};

LexerPushModeAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerPushModeAction)) {
        return false;
    } else {
        return this.mode === other.mode;
    }
};

LexerPushModeAction.prototype.toString = function() {
	return "pushMode(" + this.mode + ")";
};


// Implements the {@code popMode} lexer action by calling {@link Lexer//popMode}.
//
// <p>The {@code popMode} command does not have any parameters, so this action is
// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
function LexerPopModeAction() {
	LexerAction.call(this,LexerActionType.POP_MODE);
	return this;
}

LexerPopModeAction.prototype = Object.create(LexerAction.prototype);
LexerPopModeAction.prototype.constructor = LexerPopModeAction;

LexerPopModeAction.INSTANCE = new LexerPopModeAction();

// <p>This action is implemented by calling {@link Lexer//popMode}.</p>
LexerPopModeAction.prototype.execute = function(lexer) {
    lexer.popMode();
};

LexerPopModeAction.prototype.toString = function() {
	return "popMode";
};

// Implements the {@code more} lexer action by calling {@link Lexer//more}.
//
// <p>The {@code more} command does not have any parameters, so this action is
// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
function LexerMoreAction() {
	LexerAction.call(this, LexerActionType.MORE);
	return this;
}

LexerMoreAction.prototype = Object.create(LexerAction.prototype);
LexerMoreAction.prototype.constructor = LexerMoreAction;

LexerMoreAction.INSTANCE = new LexerMoreAction();

// <p>This action is implemented by calling {@link Lexer//popMode}.</p>
LexerMoreAction.prototype.execute = function(lexer) {
    lexer.more();
};

LexerMoreAction.prototype.toString = function() {
    return "more";
};


// Implements the {@code mode} lexer action by calling {@link Lexer//mode} with
// the assigned mode.
function LexerModeAction(mode) {
	LexerAction.call(this, LexerActionType.MODE);
    this.mode = mode;
    return this;
}

LexerModeAction.prototype = Object.create(LexerAction.prototype);
LexerModeAction.prototype.constructor = LexerModeAction;

// <p>This action is implemented by calling {@link Lexer//mode} with the
// value provided by {@link //getMode}.</p>
LexerModeAction.prototype.execute = function(lexer) {
    lexer.mode(this.mode);
};

LexerModeAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.mode);
};

LexerModeAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerModeAction)) {
        return false;
    } else {
        return this.mode === other.mode;
    }
};

LexerModeAction.prototype.toString = function() {
    return "mode(" + this.mode + ")";
};

// Executes a custom lexer action by calling {@link Recognizer//action} with the
// rule and action indexes assigned to the custom action. The implementation of
// a custom action is added to the generated code for the lexer in an override
// of {@link Recognizer//action} when the grammar is compiled.
//
// <p>This class may represent embedded actions created with the <code>{...}</code>
// syntax in ANTLR 4, as well as actions created for lexer commands where the
// command argument could not be evaluated when the grammar was compiled.</p>


    // Constructs a custom lexer action with the specified rule and action
    // indexes.
    //
    // @param ruleIndex The rule index to use for calls to
    // {@link Recognizer//action}.
    // @param actionIndex The action index to use for calls to
    // {@link Recognizer//action}.

function LexerCustomAction(ruleIndex, actionIndex) {
	LexerAction.call(this, LexerActionType.CUSTOM);
    this.ruleIndex = ruleIndex;
    this.actionIndex = actionIndex;
    this.isPositionDependent = true;
    return this;
}

LexerCustomAction.prototype = Object.create(LexerAction.prototype);
LexerCustomAction.prototype.constructor = LexerCustomAction;

// <p>Custom actions are implemented by calling {@link Lexer//action} with the
// appropriate rule and action indexes.</p>
LexerCustomAction.prototype.execute = function(lexer) {
    lexer.action(null, this.ruleIndex, this.actionIndex);
};

LexerCustomAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.ruleIndex, this.actionIndex);
};

LexerCustomAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerCustomAction)) {
        return false;
    } else {
        return this.ruleIndex === other.ruleIndex && this.actionIndex === other.actionIndex;
    }
};

// Implements the {@code channel} lexer action by calling
// {@link Lexer//setChannel} with the assigned channel.
// Constructs a new {@code channel} action with the specified channel value.
// @param channel The channel value to pass to {@link Lexer//setChannel}.
function LexerChannelAction(channel) {
	LexerAction.call(this, LexerActionType.CHANNEL);
    this.channel = channel;
    return this;
}

LexerChannelAction.prototype = Object.create(LexerAction.prototype);
LexerChannelAction.prototype.constructor = LexerChannelAction;

// <p>This action is implemented by calling {@link Lexer//setChannel} with the
// value provided by {@link //getChannel}.</p>
LexerChannelAction.prototype.execute = function(lexer) {
    lexer._channel = this.channel;
};

LexerChannelAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.channel);
};

LexerChannelAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerChannelAction)) {
        return false;
    } else {
        return this.channel === other.channel;
    }
};

LexerChannelAction.prototype.toString = function() {
    return "channel(" + this.channel + ")";
};

// This implementation of {@link LexerAction} is used for tracking input offsets
// for position-dependent actions within a {@link LexerActionExecutor}.
//
// <p>This action is not serialized as part of the ATN, and is only required for
// position-dependent lexer actions which appear at a location other than the
// end of a rule. For more information about DFA optimizations employed for
// lexer actions, see {@link LexerActionExecutor//append} and
// {@link LexerActionExecutor//fixOffsetBeforeMatch}.</p>

// Constructs a new indexed custom action by associating a character offset
// with a {@link LexerAction}.
//
// <p>Note: This class is only required for lexer actions for which
// {@link LexerAction//isPositionDependent} returns {@code true}.</p>
//
// @param offset The offset into the input {@link CharStream}, relative to
// the token start index, at which the specified lexer action should be
// executed.
// @param action The lexer action to execute at a particular offset in the
// input {@link CharStream}.
function LexerIndexedCustomAction(offset, action) {
	LexerAction.call(this, action.actionType);
    this.offset = offset;
    this.action = action;
    this.isPositionDependent = true;
    return this;
}

LexerIndexedCustomAction.prototype = Object.create(LexerAction.prototype);
LexerIndexedCustomAction.prototype.constructor = LexerIndexedCustomAction;

// <p>This method calls {@link //execute} on the result of {@link //getAction}
// using the provided {@code lexer}.</p>
LexerIndexedCustomAction.prototype.execute = function(lexer) {
    // assume the input stream position was properly set by the calling code
    this.action.execute(lexer);
};

LexerIndexedCustomAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.offset, this.action);
};

LexerIndexedCustomAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerIndexedCustomAction)) {
        return false;
    } else {
        return this.offset === other.offset && this.action === other.action;
    }
};


exports.LexerActionType = LexerActionType;
exports.LexerSkipAction = LexerSkipAction;
exports.LexerChannelAction = LexerChannelAction;
exports.LexerCustomAction = LexerCustomAction;
exports.LexerIndexedCustomAction = LexerIndexedCustomAction;
exports.LexerMoreAction = LexerMoreAction;
exports.LexerTypeAction = LexerTypeAction;
exports.LexerPushModeAction = LexerPushModeAction;
exports.LexerPopModeAction = LexerPopModeAction;
exports.LexerModeAction = LexerModeAction;

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

var Token = __webpack_require__(2).Token;
var ConsoleErrorListener = __webpack_require__(19).ConsoleErrorListener;
var ProxyErrorListener = __webpack_require__(19).ProxyErrorListener;

function Recognizer() {
    this._listeners = [ ConsoleErrorListener.INSTANCE ];
    this._interp = null;
    this._stateNumber = -1;
    return this;
}

Recognizer.tokenTypeMapCache = {};
Recognizer.ruleIndexMapCache = {};


Recognizer.prototype.checkVersion = function(toolVersion) {
    var runtimeVersion = "4.7";
    if (runtimeVersion!==toolVersion) {
        console.log("ANTLR runtime and generated code versions disagree: "+runtimeVersion+"!="+toolVersion);
    }
};

Recognizer.prototype.addErrorListener = function(listener) {
    this._listeners.push(listener);
};

Recognizer.prototype.removeErrorListeners = function() {
    this._listeners = [];
};

Recognizer.prototype.getTokenTypeMap = function() {
    var tokenNames = this.getTokenNames();
    if (tokenNames===null) {
        throw("The current recognizer does not provide a list of token names.");
    }
    var result = this.tokenTypeMapCache[tokenNames];
    if(result===undefined) {
        result = tokenNames.reduce(function(o, k, i) { o[k] = i; });
        result.EOF = Token.EOF;
        this.tokenTypeMapCache[tokenNames] = result;
    }
    return result;
};

// Get a map from rule names to rule indexes.
//
// <p>Used for XPath and tree pattern compilation.</p>
//
Recognizer.prototype.getRuleIndexMap = function() {
    var ruleNames = this.ruleNames;
    if (ruleNames===null) {
        throw("The current recognizer does not provide a list of rule names.");
    }
    var result = this.ruleIndexMapCache[ruleNames];
    if(result===undefined) {
        result = ruleNames.reduce(function(o, k, i) { o[k] = i; });
        this.ruleIndexMapCache[ruleNames] = result;
    }
    return result;
};

Recognizer.prototype.getTokenType = function(tokenName) {
    var ttype = this.getTokenTypeMap()[tokenName];
    if (ttype !==undefined) {
        return ttype;
    } else {
        return Token.INVALID_TYPE;
    }
};


// What is the error header, normally line/character position information?//
Recognizer.prototype.getErrorHeader = function(e) {
    var line = e.getOffendingToken().line;
    var column = e.getOffendingToken().column;
    return "line " + line + ":" + column;
};


// How should a token be displayed in an error message? The default
//  is to display just the text, but during development you might
//  want to have a lot of information spit out.  Override in that case
//  to use t.toString() (which, for CommonToken, dumps everything about
//  the token). This is better than forcing you to override a method in
//  your token objects because you don't have to go modify your lexer
//  so that it creates a new Java type.
//
// @deprecated This method is not called by the ANTLR 4 Runtime. Specific
// implementations of {@link ANTLRErrorStrategy} may provide a similar
// feature when necessary. For example, see
// {@link DefaultErrorStrategy//getTokenErrorDisplay}.
//
Recognizer.prototype.getTokenErrorDisplay = function(t) {
    if (t===null) {
        return "<no token>";
    }
    var s = t.text;
    if (s===null) {
        if (t.type===Token.EOF) {
            s = "<EOF>";
        } else {
            s = "<" + t.type + ">";
        }
    }
    s = s.replace("\n","\\n").replace("\r","\\r").replace("\t","\\t");
    return "'" + s + "'";
};

Recognizer.prototype.getErrorListenerDispatch = function() {
    return new ProxyErrorListener(this._listeners);
};

// subclass needs to override these if there are sempreds or actions
// that the ATN interp needs to execute
Recognizer.prototype.sempred = function(localctx, ruleIndex, actionIndex) {
    return true;
};

Recognizer.prototype.precpred = function(localctx , precedence) {
    return true;
};

//Indicate that the recognizer has changed internal state that is
//consistent with the ATN state passed in.  This way we always know
//where we are in the ATN as the parser goes along. The rule
//context objects form a stack that lets us see the stack of
//invoking rules. Combine this and we have complete ATN
//configuration information.

Object.defineProperty(Recognizer.prototype, "state", {
	get : function() {
		return this._stateNumber;
	},
	set : function(state) {
		this._stateNumber = state;
	}
});


exports.Recognizer = Recognizer;


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

var DFAState = __webpack_require__(15).DFAState;
var ATNConfigSet = __webpack_require__(13).ATNConfigSet;
var getCachedPredictionContext = __webpack_require__(10).getCachedPredictionContext;

function ATNSimulator(atn, sharedContextCache) {

    // The context cache maps all PredictionContext objects that are ==
    //  to a single cached copy. This cache is shared across all contexts
    //  in all ATNConfigs in all DFA states.  We rebuild each ATNConfigSet
    //  to use only cached nodes/graphs in addDFAState(). We don't want to
    //  fill this during closure() since there are lots of contexts that
    //  pop up but are not used ever again. It also greatly slows down closure().
    //
    //  <p>This cache makes a huge difference in memory and a little bit in speed.
    //  For the Java grammar on java.*, it dropped the memory requirements
    //  at the end from 25M to 16M. We don't store any of the full context
    //  graphs in the DFA because they are limited to local context only,
    //  but apparently there's a lot of repetition there as well. We optimize
    //  the config contexts before storing the config set in the DFA states
    //  by literally rebuilding them with cached subgraphs only.</p>
    //
    //  <p>I tried a cache for use during closure operations, that was
    //  whacked after each adaptivePredict(). It cost a little bit
    //  more time I think and doesn't save on the overall footprint
    //  so it's not worth the complexity.</p>
    ///
    this.atn = atn;
    this.sharedContextCache = sharedContextCache;
    return this;
}

// Must distinguish between missing edge and edge we know leads nowhere///
ATNSimulator.ERROR = new DFAState(0x7FFFFFFF, new ATNConfigSet());


ATNSimulator.prototype.getCachedContext = function(context) {
    if (this.sharedContextCache ===null) {
        return context;
    }
    var visited = {};
    return getCachedPredictionContext(context, this.sharedContextCache, visited);
};

exports.ATNSimulator = ATNSimulator;


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//
//
// This enumeration defines the prediction modes available in ANTLR 4 along with
// utility methods for analyzing configuration sets for conflicts and/or
// ambiguities.

var Set = __webpack_require__(0).Set;
var Map = __webpack_require__(0).Map;
var BitSet = __webpack_require__(0).BitSet;
var AltDict = __webpack_require__(0).AltDict;
var ATN = __webpack_require__(11).ATN;
var RuleStopState = __webpack_require__(6).RuleStopState;
var ATNConfigSet = __webpack_require__(13).ATNConfigSet;
var ATNConfig = __webpack_require__(16).ATNConfig;
var SemanticContext = __webpack_require__(14).SemanticContext;
var Hash = __webpack_require__(0).Hash;
var hashStuff = __webpack_require__(0).hashStuff;
var equalArrays = __webpack_require__(0).equalArrays;

function PredictionMode() {
	return this;
}

//
// The SLL(*) prediction mode. This prediction mode ignores the current
// parser context when making predictions. This is the fastest prediction
// mode, and provides correct results for many grammars. This prediction
// mode is more powerful than the prediction mode provided by ANTLR 3, but
// may result in syntax errors for grammar and input combinations which are
// not SLL.
//
// <p>
// When using this prediction mode, the parser will either return a correct
// parse tree (i.e. the same parse tree that would be returned with the
// {@link //LL} prediction mode), or it will report a syntax error. If a
// syntax error is encountered when using the {@link //SLL} prediction mode,
// it may be due to either an actual syntax error in the input or indicate
// that the particular combination of grammar and input requires the more
// powerful {@link //LL} prediction abilities to complete successfully.</p>
//
// <p>
// This prediction mode does not provide any guarantees for prediction
// behavior for syntactically-incorrect inputs.</p>
//
PredictionMode.SLL = 0;
//
// The LL(*) prediction mode. This prediction mode allows the current parser
// context to be used for resolving SLL conflicts that occur during
// prediction. This is the fastest prediction mode that guarantees correct
// parse results for all combinations of grammars with syntactically correct
// inputs.
//
// <p>
// When using this prediction mode, the parser will make correct decisions
// for all syntactically-correct grammar and input combinations. However, in
// cases where the grammar is truly ambiguous this prediction mode might not
// report a precise answer for <em>exactly which</em> alternatives are
// ambiguous.</p>
//
// <p>
// This prediction mode does not provide any guarantees for prediction
// behavior for syntactically-incorrect inputs.</p>
//
PredictionMode.LL = 1;
//
// The LL(*) prediction mode with exact ambiguity detection. In addition to
// the correctness guarantees provided by the {@link //LL} prediction mode,
// this prediction mode instructs the prediction algorithm to determine the
// complete and exact set of ambiguous alternatives for every ambiguous
// decision encountered while parsing.
//
// <p>
// This prediction mode may be used for diagnosing ambiguities during
// grammar development. Due to the performance overhead of calculating sets
// of ambiguous alternatives, this prediction mode should be avoided when
// the exact results are not necessary.</p>
//
// <p>
// This prediction mode does not provide any guarantees for prediction
// behavior for syntactically-incorrect inputs.</p>
//
PredictionMode.LL_EXACT_AMBIG_DETECTION = 2;


//
// Computes the SLL prediction termination condition.
//
// <p>
// This method computes the SLL prediction termination condition for both of
// the following cases.</p>
//
// <ul>
// <li>The usual SLL+LL fallback upon SLL conflict</li>
// <li>Pure SLL without LL fallback</li>
// </ul>
//
// <p><strong>COMBINED SLL+LL PARSING</strong></p>
//
// <p>When LL-fallback is enabled upon SLL conflict, correct predictions are
// ensured regardless of how the termination condition is computed by this
// method. Due to the substantially higher cost of LL prediction, the
// prediction should only fall back to LL when the additional lookahead
// cannot lead to a unique SLL prediction.</p>
//
// <p>Assuming combined SLL+LL parsing, an SLL configuration set with only
// conflicting subsets should fall back to full LL, even if the
// configuration sets don't resolve to the same alternative (e.g.
// {@code {1,2}} and {@code {3,4}}. If there is at least one non-conflicting
// configuration, SLL could continue with the hopes that more lookahead will
// resolve via one of those non-conflicting configurations.</p>
//
// <p>Here's the prediction termination rule them: SLL (for SLL+LL parsing)
// stops when it sees only conflicting configuration subsets. In contrast,
// full LL keeps going when there is uncertainty.</p>
//
// <p><strong>HEURISTIC</strong></p>
//
// <p>As a heuristic, we stop prediction when we see any conflicting subset
// unless we see a state that only has one alternative associated with it.
// The single-alt-state thing lets prediction continue upon rules like
// (otherwise, it would admit defeat too soon):</p>
//
// <p>{@code [12|1|[], 6|2|[], 12|2|[]]. s : (ID | ID ID?) ';' ;}</p>
//
// <p>When the ATN simulation reaches the state before {@code ';'}, it has a
// DFA state that looks like: {@code [12|1|[], 6|2|[], 12|2|[]]}. Naturally
// {@code 12|1|[]} and {@code 12|2|[]} conflict, but we cannot stop
// processing this node because alternative to has another way to continue,
// via {@code [6|2|[]]}.</p>
//
// <p>It also let's us continue for this rule:</p>
//
// <p>{@code [1|1|[], 1|2|[], 8|3|[]] a : A | A | A B ;}</p>
//
// <p>After matching input A, we reach the stop state for rule A, state 1.
// State 8 is the state right before B. Clearly alternatives 1 and 2
// conflict and no amount of further lookahead will separate the two.
// However, alternative 3 will be able to continue and so we do not stop
// working on this state. In the previous example, we're concerned with
// states associated with the conflicting alternatives. Here alt 3 is not
// associated with the conflicting configs, but since we can continue
// looking for input reasonably, don't declare the state done.</p>
//
// <p><strong>PURE SLL PARSING</strong></p>
//
// <p>To handle pure SLL parsing, all we have to do is make sure that we
// combine stack contexts for configurations that differ only by semantic
// predicate. From there, we can do the usual SLL termination heuristic.</p>
//
// <p><strong>PREDICATES IN SLL+LL PARSING</strong></p>
//
// <p>SLL decisions don't evaluate predicates until after they reach DFA stop
// states because they need to create the DFA cache that works in all
// semantic situations. In contrast, full LL evaluates predicates collected
// during start state computation so it can ignore predicates thereafter.
// This means that SLL termination detection can totally ignore semantic
// predicates.</p>
//
// <p>Implementation-wise, {@link ATNConfigSet} combines stack contexts but not
// semantic predicate contexts so we might see two configurations like the
// following.</p>
//
// <p>{@code (s, 1, x, {}), (s, 1, x', {p})}</p>
//
// <p>Before testing these configurations against others, we have to merge
// {@code x} and {@code x'} (without modifying the existing configurations).
// For example, we test {@code (x+x')==x''} when looking for conflicts in
// the following configurations.</p>
//
// <p>{@code (s, 1, x, {}), (s, 1, x', {p}), (s, 2, x'', {})}</p>
//
// <p>If the configuration set has predicates (as indicated by
// {@link ATNConfigSet//hasSemanticContext}), this algorithm makes a copy of
// the configurations to strip out all of the predicates so that a standard
// {@link ATNConfigSet} will merge everything ignoring predicates.</p>
//
PredictionMode.hasSLLConflictTerminatingPrediction = function( mode, configs) {
    // Configs in rule stop states indicate reaching the end of the decision
    // rule (local context) or end of start rule (full context). If all
    // configs meet this condition, then none of the configurations is able
    // to match additional input so we terminate prediction.
    //
    if (PredictionMode.allConfigsInRuleStopStates(configs)) {
        return true;
    }
    // pure SLL mode parsing
    if (mode === PredictionMode.SLL) {
        // Don't bother with combining configs from different semantic
        // contexts if we can fail over to full LL; costs more time
        // since we'll often fail over anyway.
        if (configs.hasSemanticContext) {
            // dup configs, tossing out semantic predicates
            var dup = new ATNConfigSet();
            for(var i=0;i<configs.items.length;i++) {
            	var c = configs.items[i];
                c = new ATNConfig({semanticContext:SemanticContext.NONE}, c);
                dup.add(c);
            }
            configs = dup;
        }
        // now we have combined contexts for configs with dissimilar preds
    }
    // pure SLL or combined SLL+LL mode parsing
    var altsets = PredictionMode.getConflictingAltSubsets(configs);
    return PredictionMode.hasConflictingAltSet(altsets) && !PredictionMode.hasStateAssociatedWithOneAlt(configs);
};

// Checks if any configuration in {@code configs} is in a
// {@link RuleStopState}. Configurations meeting this condition have reached
// the end of the decision rule (local context) or end of start rule (full
// context).
//
// @param configs the configuration set to test
// @return {@code true} if any configuration in {@code configs} is in a
// {@link RuleStopState}, otherwise {@code false}
PredictionMode.hasConfigInRuleStopState = function(configs) {
	for(var i=0;i<configs.items.length;i++) {
		var c = configs.items[i];
        if (c.state instanceof RuleStopState) {
            return true;
        }
	}
    return false;
};

// Checks if all configurations in {@code configs} are in a
// {@link RuleStopState}. Configurations meeting this condition have reached
// the end of the decision rule (local context) or end of start rule (full
// context).
//
// @param configs the configuration set to test
// @return {@code true} if all configurations in {@code configs} are in a
// {@link RuleStopState}, otherwise {@code false}
PredictionMode.allConfigsInRuleStopStates = function(configs) {
	for(var i=0;i<configs.items.length;i++) {
		var c = configs.items[i];
        if (!(c.state instanceof RuleStopState)) {
            return false;
        }
	}
    return true;
};

//
// Full LL prediction termination.
//
// <p>Can we stop looking ahead during ATN simulation or is there some
// uncertainty as to which alternative we will ultimately pick, after
// consuming more input? Even if there are partial conflicts, we might know
// that everything is going to resolve to the same minimum alternative. That
// means we can stop since no more lookahead will change that fact. On the
// other hand, there might be multiple conflicts that resolve to different
// minimums. That means we need more look ahead to decide which of those
// alternatives we should predict.</p>
//
// <p>The basic idea is to split the set of configurations {@code C}, into
// conflicting subsets {@code (s, _, ctx, _)} and singleton subsets with
// non-conflicting configurations. Two configurations conflict if they have
// identical {@link ATNConfig//state} and {@link ATNConfig//context} values
// but different {@link ATNConfig//alt} value, e.g. {@code (s, i, ctx, _)}
// and {@code (s, j, ctx, _)} for {@code i!=j}.</p>
//
// <p>Reduce these configuration subsets to the set of possible alternatives.
// You can compute the alternative subsets in one pass as follows:</p>
//
// <p>{@code A_s,ctx = {i | (s, i, ctx, _)}} for each configuration in
// {@code C} holding {@code s} and {@code ctx} fixed.</p>
//
// <p>Or in pseudo-code, for each configuration {@code c} in {@code C}:</p>
//
// <pre>
// map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not
// alt and not pred
// </pre>
//
// <p>The values in {@code map} are the set of {@code A_s,ctx} sets.</p>
//
// <p>If {@code |A_s,ctx|=1} then there is no conflict associated with
// {@code s} and {@code ctx}.</p>
//
// <p>Reduce the subsets to singletons by choosing a minimum of each subset. If
// the union of these alternative subsets is a singleton, then no amount of
// more lookahead will help us. We will always pick that alternative. If,
// however, there is more than one alternative, then we are uncertain which
// alternative to predict and must continue looking for resolution. We may
// or may not discover an ambiguity in the future, even if there are no
// conflicting subsets this round.</p>
//
// <p>The biggest sin is to terminate early because it means we've made a
// decision but were uncertain as to the eventual outcome. We haven't used
// enough lookahead. On the other hand, announcing a conflict too late is no
// big deal; you will still have the conflict. It's just inefficient. It
// might even look until the end of file.</p>
//
// <p>No special consideration for semantic predicates is required because
// predicates are evaluated on-the-fly for full LL prediction, ensuring that
// no configuration contains a semantic context during the termination
// check.</p>
//
// <p><strong>CONFLICTING CONFIGS</strong></p>
//
// <p>Two configurations {@code (s, i, x)} and {@code (s, j, x')}, conflict
// when {@code i!=j} but {@code x=x'}. Because we merge all
// {@code (s, i, _)} configurations together, that means that there are at
// most {@code n} configurations associated with state {@code s} for
// {@code n} possible alternatives in the decision. The merged stacks
// complicate the comparison of configuration contexts {@code x} and
// {@code x'}. Sam checks to see if one is a subset of the other by calling
// merge and checking to see if the merged result is either {@code x} or
// {@code x'}. If the {@code x} associated with lowest alternative {@code i}
// is the superset, then {@code i} is the only possible prediction since the
// others resolve to {@code min(i)} as well. However, if {@code x} is
// associated with {@code j>i} then at least one stack configuration for
// {@code j} is not in conflict with alternative {@code i}. The algorithm
// should keep going, looking for more lookahead due to the uncertainty.</p>
//
// <p>For simplicity, I'm doing a equality check between {@code x} and
// {@code x'} that lets the algorithm continue to consume lookahead longer
// than necessary. The reason I like the equality is of course the
// simplicity but also because that is the test you need to detect the
// alternatives that are actually in conflict.</p>
//
// <p><strong>CONTINUE/STOP RULE</strong></p>
//
// <p>Continue if union of resolved alternative sets from non-conflicting and
// conflicting alternative subsets has more than one alternative. We are
// uncertain about which alternative to predict.</p>
//
// <p>The complete set of alternatives, {@code [i for (_,i,_)]}, tells us which
// alternatives are still in the running for the amount of input we've
// consumed at this point. The conflicting sets let us to strip away
// configurations that won't lead to more states because we resolve
// conflicts to the configuration with a minimum alternate for the
// conflicting set.</p>
//
// <p><strong>CASES</strong></p>
//
// <ul>
//
// <li>no conflicts and more than 1 alternative in set =&gt; continue</li>
//
// <li> {@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s, 3, z)},
// {@code (s', 1, y)}, {@code (s', 2, y)} yields non-conflicting set
// {@code {3}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =
// {@code {1,3}} =&gt; continue
// </li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},
// {@code (s', 2, y)}, {@code (s'', 1, z)} yields non-conflicting set
// {@code {1}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =
// {@code {1}} =&gt; stop and predict 1</li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},
// {@code (s', 2, y)} yields conflicting, reduced sets {@code {1}} U
// {@code {1}} = {@code {1}} =&gt; stop and predict 1, can announce
// ambiguity {@code {1,2}}</li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 2, y)},
// {@code (s', 3, y)} yields conflicting, reduced sets {@code {1}} U
// {@code {2}} = {@code {1,2}} =&gt; continue</li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 3, y)},
// {@code (s', 4, y)} yields conflicting, reduced sets {@code {1}} U
// {@code {3}} = {@code {1,3}} =&gt; continue</li>
//
// </ul>
//
// <p><strong>EXACT AMBIGUITY DETECTION</strong></p>
//
// <p>If all states report the same conflicting set of alternatives, then we
// know we have the exact ambiguity set.</p>
//
// <p><code>|A_<em>i</em>|&gt;1</code> and
// <code>A_<em>i</em> = A_<em>j</em></code> for all <em>i</em>, <em>j</em>.</p>
//
// <p>In other words, we continue examining lookahead until all {@code A_i}
// have more than one alternative and all {@code A_i} are the same. If
// {@code A={{1,2}, {1,3}}}, then regular LL prediction would terminate
// because the resolved set is {@code {1}}. To determine what the real
// ambiguity is, we have to know whether the ambiguity is between one and
// two or one and three so we keep going. We can only stop prediction when
// we need exact ambiguity detection when the sets look like
// {@code A={{1,2}}} or {@code {{1,2},{1,2}}}, etc...</p>
//
PredictionMode.resolvesToJustOneViableAlt = function(altsets) {
    return PredictionMode.getSingleViableAlt(altsets);
};

//
// Determines if every alternative subset in {@code altsets} contains more
// than one alternative.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if every {@link BitSet} in {@code altsets} has
// {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}
//
PredictionMode.allSubsetsConflict = function(altsets) {
    return ! PredictionMode.hasNonConflictingAltSet(altsets);
};
//
// Determines if any single alternative subset in {@code altsets} contains
// exactly one alternative.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if {@code altsets} contains a {@link BitSet} with
// {@link BitSet//cardinality cardinality} 1, otherwise {@code false}
//
PredictionMode.hasNonConflictingAltSet = function(altsets) {
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        if (alts.length===1) {
            return true;
        }
	}
    return false;
};

//
// Determines if any single alternative subset in {@code altsets} contains
// more than one alternative.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if {@code altsets} contains a {@link BitSet} with
// {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}
//
PredictionMode.hasConflictingAltSet = function(altsets) {
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        if (alts.length>1) {
            return true;
        }
	}
    return false;
};

//
// Determines if every alternative subset in {@code altsets} is equivalent.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if every member of {@code altsets} is equal to the
// others, otherwise {@code false}
//
PredictionMode.allSubsetsEqual = function(altsets) {
    var first = null;
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        if (first === null) {
            first = alts;
        } else if (alts!==first) {
            return false;
        }
	}
    return true;
};

//
// Returns the unique alternative predicted by all alternative subsets in
// {@code altsets}. If no such alternative exists, this method returns
// {@link ATN//INVALID_ALT_NUMBER}.
//
// @param altsets a collection of alternative subsets
//
PredictionMode.getUniqueAlt = function(altsets) {
    var all = PredictionMode.getAlts(altsets);
    if (all.length===1) {
        return all.minValue();
    } else {
        return ATN.INVALID_ALT_NUMBER;
    }
};

// Gets the complete set of represented alternatives for a collection of
// alternative subsets. This method returns the union of each {@link BitSet}
// in {@code altsets}.
//
// @param altsets a collection of alternative subsets
// @return the set of represented alternatives in {@code altsets}
//
PredictionMode.getAlts = function(altsets) {
    var all = new BitSet();
    altsets.map( function(alts) { all.or(alts); });
    return all;
};

//
// This function gets the conflicting alt subsets from a configuration set.
// For each configuration {@code c} in {@code configs}:
//
// <pre>
// map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not
// alt and not pred
// </pre>

PredictionMode.getConflictingAltSubsets = function(configs) {
    var configToAlts = new Map();
    configToAlts.hashFunction = function(cfg) { hashStuff(cfg.state.stateNumber, cfg.context); };
    configToAlts.equalsFunction = function(c1, c2) { return c1.state.stateNumber==c2.state.stateNumber && c1.context.equals(c2.context);}
    configs.items.map(function(cfg) {
        var alts = configToAlts.get(cfg);
        if (alts === null) {
            alts = new BitSet();
            configToAlts.put(cfg, alts);
        }
        alts.add(cfg.alt);
	});
    return configToAlts.getValues();
};

//
// Get a map from state to alt subset from a configuration set. For each
// configuration {@code c} in {@code configs}:
//
// <pre>
// map[c.{@link ATNConfig//state state}] U= c.{@link ATNConfig//alt alt}
// </pre>
//
PredictionMode.getStateToAltMap = function(configs) {
    var m = new AltDict();
    configs.items.map(function(c) {
        var alts = m.get(c.state);
        if (alts === null) {
            alts = new BitSet();
            m.put(c.state, alts);
        }
        alts.add(c.alt);
    });
    return m;
};

PredictionMode.hasStateAssociatedWithOneAlt = function(configs) {
    var values = PredictionMode.getStateToAltMap(configs).values();
    for(var i=0;i<values.length;i++) {
        if (values[i].length===1) {
            return true;
        }
    }
    return false;
};

PredictionMode.getSingleViableAlt = function(altsets) {
    var result = null;
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        var minAlt = alts.minValue();
        if(result===null) {
            result = minAlt;
        } else if(result!==minAlt) { // more than 1 viable alt
            return ATN.INVALID_ALT_NUMBER;
        }
	}
    return result;
};

exports.PredictionMode = PredictionMode;


/***/ }),
/* 35 */
/***/ (function(module, exports) {

/*! https://mths.be/codepointat v0.2.0 by @mathias */
if (!String.prototype.codePointAt) {
	(function() {
		'use strict'; // needed to support `apply`/`call` with `undefined`/`null`
		var defineProperty = (function() {
			// IE 8 only supports `Object.defineProperty` on DOM elements
			try {
				var object = {};
				var $defineProperty = Object.defineProperty;
				var result = $defineProperty(object, object, object) && $defineProperty;
			} catch(error) {}
			return result;
		}());
		var codePointAt = function(position) {
			if (this == null) {
				throw TypeError();
			}
			var string = String(this);
			var size = string.length;
			// `ToInteger`
			var index = position ? Number(position) : 0;
			if (index != index) { // better `isNaN`
				index = 0;
			}
			// Account for out-of-bounds indices:
			if (index < 0 || index >= size) {
				return undefined;
			}
			// Get the first code unit
			var first = string.charCodeAt(index);
			var second;
			if ( // check if it’s the start of a surrogate pair
				first >= 0xD800 && first <= 0xDBFF && // high surrogate
				size > index + 1 // there is a next code unit
			) {
				second = string.charCodeAt(index + 1);
				if (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate
					// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
					return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
				}
			}
			return first;
		};
		if (defineProperty) {
			defineProperty(String.prototype, 'codePointAt', {
				'value': codePointAt,
				'configurable': true,
				'writable': true
			});
		} else {
			String.prototype.codePointAt = codePointAt;
		}
	}());
}


/***/ }),
/* 36 */
/***/ (function(module, exports) {

/*! https://mths.be/fromcodepoint v0.2.1 by @mathias */
if (!String.fromCodePoint) {
	(function() {
		var defineProperty = (function() {
			// IE 8 only supports `Object.defineProperty` on DOM elements
			try {
				var object = {};
				var $defineProperty = Object.defineProperty;
				var result = $defineProperty(object, object, object) && $defineProperty;
			} catch(error) {}
			return result;
		}());
		var stringFromCharCode = String.fromCharCode;
		var floor = Math.floor;
		var fromCodePoint = function(_) {
			var MAX_SIZE = 0x4000;
			var codeUnits = [];
			var highSurrogate;
			var lowSurrogate;
			var index = -1;
			var length = arguments.length;
			if (!length) {
				return '';
			}
			var result = '';
			while (++index < length) {
				var codePoint = Number(arguments[index]);
				if (
					!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
					codePoint < 0 || // not a valid Unicode code point
					codePoint > 0x10FFFF || // not a valid Unicode code point
					floor(codePoint) != codePoint // not an integer
				) {
					throw RangeError('Invalid code point: ' + codePoint);
				}
				if (codePoint <= 0xFFFF) { // BMP code point
					codeUnits.push(codePoint);
				} else { // Astral code point; split in surrogate halves
					// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
					codePoint -= 0x10000;
					highSurrogate = (codePoint >> 10) + 0xD800;
					lowSurrogate = (codePoint % 0x400) + 0xDC00;
					codeUnits.push(highSurrogate, lowSurrogate);
				}
				if (index + 1 == length || codeUnits.length > MAX_SIZE) {
					result += stringFromCharCode.apply(null, codeUnits);
					codeUnits.length = 0;
				}
			}
			return result;
		};
		if (defineProperty) {
			defineProperty(String, 'fromCodePoint', {
				'value': fromCodePoint,
				'configurable': true,
				'writable': true
			});
		} else {
			String.fromCodePoint = fromCodePoint;
		}
	}());
}


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

var Token = __webpack_require__(2).Token;
var Errors = __webpack_require__(8);
var NoViableAltException = Errors.NoViableAltException;
var InputMismatchException = Errors.InputMismatchException;
var FailedPredicateException = Errors.FailedPredicateException;
var ParseCancellationException = Errors.ParseCancellationException;
var ATNState = __webpack_require__(6).ATNState;
var Interval = __webpack_require__(4).Interval;
var IntervalSet = __webpack_require__(4).IntervalSet;

function ErrorStrategy() {

}

ErrorStrategy.prototype.reset = function(recognizer){
};

ErrorStrategy.prototype.recoverInline = function(recognizer){
};

ErrorStrategy.prototype.recover = function(recognizer, e){
};

ErrorStrategy.prototype.sync = function(recognizer){
};

ErrorStrategy.prototype.inErrorRecoveryMode = function(recognizer){
};

ErrorStrategy.prototype.reportError = function(recognizer){
};



// This is the default implementation of {@link ANTLRErrorStrategy} used for
// error reporting and recovery in ANTLR parsers.
//
function DefaultErrorStrategy() {
	ErrorStrategy.call(this);
    // Indicates whether the error strategy is currently "recovering from an
    // error". This is used to suppress reporting multiple error messages while
    // attempting to recover from a detected syntax error.
    //
    // @see //inErrorRecoveryMode
    //
    this.errorRecoveryMode = false;

    // The index into the input stream where the last error occurred.
    // This is used to prevent infinite loops where an error is found
    // but no token is consumed during recovery...another error is found,
    // ad nauseum. This is a failsafe mechanism to guarantee that at least
    // one token/tree node is consumed for two errors.
    //
    this.lastErrorIndex = -1;
    this.lastErrorStates = null;
    return this;
}

DefaultErrorStrategy.prototype = Object.create(ErrorStrategy.prototype);
DefaultErrorStrategy.prototype.constructor = DefaultErrorStrategy;

// <p>The default implementation simply calls {@link //endErrorCondition} to
// ensure that the handler is not in error recovery mode.</p>
DefaultErrorStrategy.prototype.reset = function(recognizer) {
    this.endErrorCondition(recognizer);
};

//
// This method is called to enter error recovery mode when a recognition
// exception is reported.
//
// @param recognizer the parser instance
//
DefaultErrorStrategy.prototype.beginErrorCondition = function(recognizer) {
    this.errorRecoveryMode = true;
};

DefaultErrorStrategy.prototype.inErrorRecoveryMode = function(recognizer) {
    return this.errorRecoveryMode;
};

//
// This method is called to leave error recovery mode after recovering from
// a recognition exception.
//
// @param recognizer
//
DefaultErrorStrategy.prototype.endErrorCondition = function(recognizer) {
    this.errorRecoveryMode = false;
    this.lastErrorStates = null;
    this.lastErrorIndex = -1;
};

//
// {@inheritDoc}
//
// <p>The default implementation simply calls {@link //endErrorCondition}.</p>
//
DefaultErrorStrategy.prototype.reportMatch = function(recognizer) {
    this.endErrorCondition(recognizer);
};

//
// {@inheritDoc}
//
// <p>The default implementation returns immediately if the handler is already
// in error recovery mode. Otherwise, it calls {@link //beginErrorCondition}
// and dispatches the reporting task based on the runtime type of {@code e}
// according to the following table.</p>
//
// <ul>
// <li>{@link NoViableAltException}: Dispatches the call to
// {@link //reportNoViableAlternative}</li>
// <li>{@link InputMismatchException}: Dispatches the call to
// {@link //reportInputMismatch}</li>
// <li>{@link FailedPredicateException}: Dispatches the call to
// {@link //reportFailedPredicate}</li>
// <li>All other types: calls {@link Parser//notifyErrorListeners} to report
// the exception</li>
// </ul>
//
DefaultErrorStrategy.prototype.reportError = function(recognizer, e) {
   // if we've already reported an error and have not matched a token
   // yet successfully, don't report any errors.
    if(this.inErrorRecoveryMode(recognizer)) {
        return; // don't report spurious errors
    }
    this.beginErrorCondition(recognizer);
    if ( e instanceof NoViableAltException ) {
        this.reportNoViableAlternative(recognizer, e);
    } else if ( e instanceof InputMismatchException ) {
        this.reportInputMismatch(recognizer, e);
    } else if ( e instanceof FailedPredicateException ) {
        this.reportFailedPredicate(recognizer, e);
    } else {
        console.log("unknown recognition error type: " + e.constructor.name);
        console.log(e.stack);
        recognizer.notifyErrorListeners(e.getOffendingToken(), e.getMessage(), e);
    }
};
//
// {@inheritDoc}
//
// <p>The default implementation resynchronizes the parser by consuming tokens
// until we find one in the resynchronization set--loosely the set of tokens
// that can follow the current rule.</p>
//
DefaultErrorStrategy.prototype.recover = function(recognizer, e) {
    if (this.lastErrorIndex===recognizer.getInputStream().index &&
        this.lastErrorStates !== null && this.lastErrorStates.indexOf(recognizer.state)>=0) {
		// uh oh, another error at same token index and previously-visited
		// state in ATN; must be a case where LT(1) is in the recovery
		// token set so nothing got consumed. Consume a single token
		// at least to prevent an infinite loop; this is a failsafe.
		recognizer.consume();
    }
    this.lastErrorIndex = recognizer._input.index;
    if (this.lastErrorStates === null) {
        this.lastErrorStates = [];
    }
    this.lastErrorStates.push(recognizer.state);
    var followSet = this.getErrorRecoverySet(recognizer);
    this.consumeUntil(recognizer, followSet);
};

// The default implementation of {@link ANTLRErrorStrategy//sync} makes sure
// that the current lookahead symbol is consistent with what were expecting
// at this point in the ATN. You can call this anytime but ANTLR only
// generates code to check before subrules/loops and each iteration.
//
// <p>Implements Jim Idle's magic sync mechanism in closures and optional
// subrules. E.g.,</p>
//
// <pre>
// a : sync ( stuff sync )* ;
// sync : {consume to what can follow sync} ;
// </pre>
//
// At the start of a sub rule upon error, {@link //sync} performs single
// token deletion, if possible. If it can't do that, it bails on the current
// rule and uses the default error recovery, which consumes until the
// resynchronization set of the current rule.
//
// <p>If the sub rule is optional ({@code (...)?}, {@code (...)*}, or block
// with an empty alternative), then the expected set includes what follows
// the subrule.</p>
//
// <p>During loop iteration, it consumes until it sees a token that can start a
// sub rule or what follows loop. Yes, that is pretty aggressive. We opt to
// stay in the loop as long as possible.</p>
//
// <p><strong>ORIGINS</strong></p>
//
// <p>Previous versions of ANTLR did a poor job of their recovery within loops.
// A single mismatch token or missing token would force the parser to bail
// out of the entire rules surrounding the loop. So, for rule</p>
//
// <pre>
// classDef : 'class' ID '{' member* '}'
// </pre>
//
// input with an extra token between members would force the parser to
// consume until it found the next class definition rather than the next
// member definition of the current class.
//
// <p>This functionality cost a little bit of effort because the parser has to
// compare token set at the start of the loop and at each iteration. If for
// some reason speed is suffering for you, you can turn off this
// functionality by simply overriding this method as a blank { }.</p>
//
DefaultErrorStrategy.prototype.sync = function(recognizer) {
    // If already recovering, don't try to sync
    if (this.inErrorRecoveryMode(recognizer)) {
        return;
    }
    var s = recognizer._interp.atn.states[recognizer.state];
    var la = recognizer.getTokenStream().LA(1);
    // try cheaper subset first; might get lucky. seems to shave a wee bit off
    var nextTokens = recognizer.atn.nextTokens(s);
    if (nextTokens.contains(Token.EPSILON) || nextTokens.contains(la)) {
        return;
    }
    switch (s.stateType) {
    case ATNState.BLOCK_START:
    case ATNState.STAR_BLOCK_START:
    case ATNState.PLUS_BLOCK_START:
    case ATNState.STAR_LOOP_ENTRY:
       // report error and recover if possible
        if( this.singleTokenDeletion(recognizer) !== null) {
            return;
        } else {
            throw new InputMismatchException(recognizer);
        }
        break;
    case ATNState.PLUS_LOOP_BACK:
    case ATNState.STAR_LOOP_BACK:
        this.reportUnwantedToken(recognizer);
        var expecting = new IntervalSet();
        expecting.addSet(recognizer.getExpectedTokens());
        var whatFollowsLoopIterationOrRule = expecting.addSet(this.getErrorRecoverySet(recognizer));
        this.consumeUntil(recognizer, whatFollowsLoopIterationOrRule);
        break;
    default:
        // do nothing if we can't identify the exact kind of ATN state
    }
};

// This is called by {@link //reportError} when the exception is a
// {@link NoViableAltException}.
//
// @see //reportError
//
// @param recognizer the parser instance
// @param e the recognition exception
//
DefaultErrorStrategy.prototype.reportNoViableAlternative = function(recognizer, e) {
    var tokens = recognizer.getTokenStream();
    var input;
    if(tokens !== null) {
        if (e.startToken.type===Token.EOF) {
            input = "<EOF>";
        } else {
            input = tokens.getText(new Interval(e.startToken, e.offendingToken));
        }
    } else {
        input = "<unknown input>";
    }
    var msg = "no viable alternative at input " + this.escapeWSAndQuote(input);
    recognizer.notifyErrorListeners(msg, e.offendingToken, e);
};

//
// This is called by {@link //reportError} when the exception is an
// {@link InputMismatchException}.
//
// @see //reportError
//
// @param recognizer the parser instance
// @param e the recognition exception
//
DefaultErrorStrategy.prototype.reportInputMismatch = function(recognizer, e) {
    var msg = "mismatched input " + this.getTokenErrorDisplay(e.offendingToken) +
          " expecting " + e.getExpectedTokens().toString(recognizer.literalNames, recognizer.symbolicNames);
    recognizer.notifyErrorListeners(msg, e.offendingToken, e);
};

//
// This is called by {@link //reportError} when the exception is a
// {@link FailedPredicateException}.
//
// @see //reportError
//
// @param recognizer the parser instance
// @param e the recognition exception
//
DefaultErrorStrategy.prototype.reportFailedPredicate = function(recognizer, e) {
    var ruleName = recognizer.ruleNames[recognizer._ctx.ruleIndex];
    var msg = "rule " + ruleName + " " + e.message;
    recognizer.notifyErrorListeners(msg, e.offendingToken, e);
};

// This method is called to report a syntax error which requires the removal
// of a token from the input stream. At the time this method is called, the
// erroneous symbol is current {@code LT(1)} symbol and has not yet been
// removed from the input stream. When this method returns,
// {@code recognizer} is in error recovery mode.
//
// <p>This method is called when {@link //singleTokenDeletion} identifies
// single-token deletion as a viable recovery strategy for a mismatched
// input error.</p>
//
// <p>The default implementation simply returns if the handler is already in
// error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to
// enter error recovery mode, followed by calling
// {@link Parser//notifyErrorListeners}.</p>
//
// @param recognizer the parser instance
//
DefaultErrorStrategy.prototype.reportUnwantedToken = function(recognizer) {
    if (this.inErrorRecoveryMode(recognizer)) {
        return;
    }
    this.beginErrorCondition(recognizer);
    var t = recognizer.getCurrentToken();
    var tokenName = this.getTokenErrorDisplay(t);
    var expecting = this.getExpectedTokens(recognizer);
    var msg = "extraneous input " + tokenName + " expecting " +
        expecting.toString(recognizer.literalNames, recognizer.symbolicNames);
    recognizer.notifyErrorListeners(msg, t, null);
};
// This method is called to report a syntax error which requires the
// insertion of a missing token into the input stream. At the time this
// method is called, the missing token has not yet been inserted. When this
// method returns, {@code recognizer} is in error recovery mode.
//
// <p>This method is called when {@link //singleTokenInsertion} identifies
// single-token insertion as a viable recovery strategy for a mismatched
// input error.</p>
//
// <p>The default implementation simply returns if the handler is already in
// error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to
// enter error recovery mode, followed by calling
// {@link Parser//notifyErrorListeners}.</p>
//
// @param recognizer the parser instance
//
DefaultErrorStrategy.prototype.reportMissingToken = function(recognizer) {
    if ( this.inErrorRecoveryMode(recognizer)) {
        return;
    }
    this.beginErrorCondition(recognizer);
    var t = recognizer.getCurrentToken();
    var expecting = this.getExpectedTokens(recognizer);
    var msg = "missing " + expecting.toString(recognizer.literalNames, recognizer.symbolicNames) +
          " at " + this.getTokenErrorDisplay(t);
    recognizer.notifyErrorListeners(msg, t, null);
};

// <p>The default implementation attempts to recover from the mismatched input
// by using single token insertion and deletion as described below. If the
// recovery attempt fails, this method throws an
// {@link InputMismatchException}.</p>
//
// <p><strong>EXTRA TOKEN</strong> (single token deletion)</p>
//
// <p>{@code LA(1)} is not what we are looking for. If {@code LA(2)} has the
// right token, however, then assume {@code LA(1)} is some extra spurious
// token and delete it. Then consume and return the next token (which was
// the {@code LA(2)} token) as the successful result of the match operation.</p>
//
// <p>This recovery strategy is implemented by {@link
// //singleTokenDeletion}.</p>
//
// <p><strong>MISSING TOKEN</strong> (single token insertion)</p>
//
// <p>If current token (at {@code LA(1)}) is consistent with what could come
// after the expected {@code LA(1)} token, then assume the token is missing
// and use the parser's {@link TokenFactory} to create it on the fly. The
// "insertion" is performed by returning the created token as the successful
// result of the match operation.</p>
//
// <p>This recovery strategy is implemented by {@link
// //singleTokenInsertion}.</p>
//
// <p><strong>EXAMPLE</strong></p>
//
// <p>For example, Input {@code i=(3;} is clearly missing the {@code ')'}. When
// the parser returns from the nested call to {@code expr}, it will have
// call chain:</p>
//
// <pre>
// stat &rarr; expr &rarr; atom
// </pre>
//
// and it will be trying to match the {@code ')'} at this point in the
// derivation:
//
// <pre>
// =&gt; ID '=' '(' INT ')' ('+' atom)* ';'
// ^
// </pre>
//
// The attempt to match {@code ')'} will fail when it sees {@code ';'} and
// call {@link //recoverInline}. To recover, it sees that {@code LA(1)==';'}
// is in the set of tokens that can follow the {@code ')'} token reference
// in rule {@code atom}. It can assume that you forgot the {@code ')'}.
//
DefaultErrorStrategy.prototype.recoverInline = function(recognizer) {
    // SINGLE TOKEN DELETION
    var matchedSymbol = this.singleTokenDeletion(recognizer);
    if (matchedSymbol !== null) {
        // we have deleted the extra token.
        // now, move past ttype token as if all were ok
        recognizer.consume();
        return matchedSymbol;
    }
    // SINGLE TOKEN INSERTION
    if (this.singleTokenInsertion(recognizer)) {
        return this.getMissingSymbol(recognizer);
    }
    // even that didn't work; must throw the exception
    throw new InputMismatchException(recognizer);
};

//
// This method implements the single-token insertion inline error recovery
// strategy. It is called by {@link //recoverInline} if the single-token
// deletion strategy fails to recover from the mismatched input. If this
// method returns {@code true}, {@code recognizer} will be in error recovery
// mode.
//
// <p>This method determines whether or not single-token insertion is viable by
// checking if the {@code LA(1)} input symbol could be successfully matched
// if it were instead the {@code LA(2)} symbol. If this method returns
// {@code true}, the caller is responsible for creating and inserting a
// token with the correct type to produce this behavior.</p>
//
// @param recognizer the parser instance
// @return {@code true} if single-token insertion is a viable recovery
// strategy for the current mismatched input, otherwise {@code false}
//
DefaultErrorStrategy.prototype.singleTokenInsertion = function(recognizer) {
    var currentSymbolType = recognizer.getTokenStream().LA(1);
    // if current token is consistent with what could come after current
    // ATN state, then we know we're missing a token; error recovery
    // is free to conjure up and insert the missing token
    var atn = recognizer._interp.atn;
    var currentState = atn.states[recognizer.state];
    var next = currentState.transitions[0].target;
    var expectingAtLL2 = atn.nextTokens(next, recognizer._ctx);
    if (expectingAtLL2.contains(currentSymbolType) ){
        this.reportMissingToken(recognizer);
        return true;
    } else {
        return false;
    }
};

// This method implements the single-token deletion inline error recovery
// strategy. It is called by {@link //recoverInline} to attempt to recover
// from mismatched input. If this method returns null, the parser and error
// handler state will not have changed. If this method returns non-null,
// {@code recognizer} will <em>not</em> be in error recovery mode since the
// returned token was a successful match.
//
// <p>If the single-token deletion is successful, this method calls
// {@link //reportUnwantedToken} to report the error, followed by
// {@link Parser//consume} to actually "delete" the extraneous token. Then,
// before returning {@link //reportMatch} is called to signal a successful
// match.</p>
//
// @param recognizer the parser instance
// @return the successfully matched {@link Token} instance if single-token
// deletion successfully recovers from the mismatched input, otherwise
// {@code null}
//
DefaultErrorStrategy.prototype.singleTokenDeletion = function(recognizer) {
    var nextTokenType = recognizer.getTokenStream().LA(2);
    var expecting = this.getExpectedTokens(recognizer);
    if (expecting.contains(nextTokenType)) {
        this.reportUnwantedToken(recognizer);
        // print("recoverFromMismatchedToken deleting " \
        // + str(recognizer.getTokenStream().LT(1)) \
        // + " since " + str(recognizer.getTokenStream().LT(2)) \
        // + " is what we want", file=sys.stderr)
        recognizer.consume(); // simply delete extra token
        // we want to return the token we're actually matching
        var matchedSymbol = recognizer.getCurrentToken();
        this.reportMatch(recognizer); // we know current token is correct
        return matchedSymbol;
    } else {
        return null;
    }
};

// Conjure up a missing token during error recovery.
//
// The recognizer attempts to recover from single missing
// symbols. But, actions might refer to that missing symbol.
// For example, x=ID {f($x);}. The action clearly assumes
// that there has been an identifier matched previously and that
// $x points at that token. If that token is missing, but
// the next token in the stream is what we want we assume that
// this token is missing and we keep going. Because we
// have to return some token to replace the missing token,
// we have to conjure one up. This method gives the user control
// over the tokens returned for missing tokens. Mostly,
// you will want to create something special for identifier
// tokens. For literals such as '{' and ',', the default
// action in the parser or tree parser works. It simply creates
// a CommonToken of the appropriate type. The text will be the token.
// If you change what tokens must be created by the lexer,
// override this method to create the appropriate tokens.
//
DefaultErrorStrategy.prototype.getMissingSymbol = function(recognizer) {
    var currentSymbol = recognizer.getCurrentToken();
    var expecting = this.getExpectedTokens(recognizer);
    var expectedTokenType = expecting.first(); // get any element
    var tokenText;
    if (expectedTokenType===Token.EOF) {
        tokenText = "<missing EOF>";
    } else {
        tokenText = "<missing " + recognizer.literalNames[expectedTokenType] + ">";
    }
    var current = currentSymbol;
    var lookback = recognizer.getTokenStream().LT(-1);
    if (current.type===Token.EOF && lookback !== null) {
        current = lookback;
    }
    return recognizer.getTokenFactory().create(current.source,
        expectedTokenType, tokenText, Token.DEFAULT_CHANNEL,
        -1, -1, current.line, current.column);
};

DefaultErrorStrategy.prototype.getExpectedTokens = function(recognizer) {
    return recognizer.getExpectedTokens();
};

// How should a token be displayed in an error message? The default
// is to display just the text, but during development you might
// want to have a lot of information spit out. Override in that case
// to use t.toString() (which, for CommonToken, dumps everything about
// the token). This is better than forcing you to override a method in
// your token objects because you don't have to go modify your lexer
// so that it creates a new Java type.
//
DefaultErrorStrategy.prototype.getTokenErrorDisplay = function(t) {
    if (t === null) {
        return "<no token>";
    }
    var s = t.text;
    if (s === null) {
        if (t.type===Token.EOF) {
            s = "<EOF>";
        } else {
            s = "<" + t.type + ">";
        }
    }
    return this.escapeWSAndQuote(s);
};

DefaultErrorStrategy.prototype.escapeWSAndQuote = function(s) {
    s = s.replace(/\n/g,"\\n");
    s = s.replace(/\r/g,"\\r");
    s = s.replace(/\t/g,"\\t");
    return "'" + s + "'";
};

// Compute the error recovery set for the current rule. During
// rule invocation, the parser pushes the set of tokens that can
// follow that rule reference on the stack; this amounts to
// computing FIRST of what follows the rule reference in the
// enclosing rule. See LinearApproximator.FIRST().
// This local follow set only includes tokens
// from within the rule; i.e., the FIRST computation done by
// ANTLR stops at the end of a rule.
//
// EXAMPLE
//
// When you find a "no viable alt exception", the input is not
// consistent with any of the alternatives for rule r. The best
// thing to do is to consume tokens until you see something that
// can legally follow a call to r//or* any rule that called r.
// You don't want the exact set of viable next tokens because the
// input might just be missing a token--you might consume the
// rest of the input looking for one of the missing tokens.
//
// Consider grammar:
//
// a : '[' b ']'
// | '(' b ')'
// ;
// b : c '^' INT ;
// c : ID
// | INT
// ;
//
// At each rule invocation, the set of tokens that could follow
// that rule is pushed on a stack. Here are the various
// context-sensitive follow sets:
//
// FOLLOW(b1_in_a) = FIRST(']') = ']'
// FOLLOW(b2_in_a) = FIRST(')') = ')'
// FOLLOW(c_in_b) = FIRST('^') = '^'
//
// Upon erroneous input "[]", the call chain is
//
// a -> b -> c
//
// and, hence, the follow context stack is:
//
// depth follow set start of rule execution
// 0 <EOF> a (from main())
// 1 ']' b
// 2 '^' c
//
// Notice that ')' is not included, because b would have to have
// been called from a different context in rule a for ')' to be
// included.
//
// For error recovery, we cannot consider FOLLOW(c)
// (context-sensitive or otherwise). We need the combined set of
// all context-sensitive FOLLOW sets--the set of all tokens that
// could follow any reference in the call chain. We need to
// resync to one of those tokens. Note that FOLLOW(c)='^' and if
// we resync'd to that token, we'd consume until EOF. We need to
// sync to context-sensitive FOLLOWs for a, b, and c: {']','^'}.
// In this case, for input "[]", LA(1) is ']' and in the set, so we would
// not consume anything. After printing an error, rule c would
// return normally. Rule b would not find the required '^' though.
// At this point, it gets a mismatched token error and throws an
// exception (since LA(1) is not in the viable following token
// set). The rule exception handler tries to recover, but finds
// the same recovery set and doesn't consume anything. Rule b
// exits normally returning to rule a. Now it finds the ']' (and
// with the successful match exits errorRecovery mode).
//
// So, you can see that the parser walks up the call chain looking
// for the token that was a member of the recovery set.
//
// Errors are not generated in errorRecovery mode.
//
// ANTLR's error recovery mechanism is based upon original ideas:
//
// "Algorithms + Data Structures = Programs" by Niklaus Wirth
//
// and
//
// "A note on error recovery in recursive descent parsers":
// http://portal.acm.org/citation.cfm?id=947902.947905
//
// Later, Josef Grosch had some good ideas:
//
// "Efficient and Comfortable Error Recovery in Recursive Descent
// Parsers":
// ftp://www.cocolab.com/products/cocktail/doca4.ps/ell.ps.zip
//
// Like Grosch I implement context-sensitive FOLLOW sets that are combined
// at run-time upon error to avoid overhead during parsing.
//
DefaultErrorStrategy.prototype.getErrorRecoverySet = function(recognizer) {
    var atn = recognizer._interp.atn;
    var ctx = recognizer._ctx;
    var recoverSet = new IntervalSet();
    while (ctx !== null && ctx.invokingState>=0) {
        // compute what follows who invoked us
        var invokingState = atn.states[ctx.invokingState];
        var rt = invokingState.transitions[0];
        var follow = atn.nextTokens(rt.followState);
        recoverSet.addSet(follow);
        ctx = ctx.parentCtx;
    }
    recoverSet.removeOne(Token.EPSILON);
    return recoverSet;
};

// Consume tokens until one matches the given token set.//
DefaultErrorStrategy.prototype.consumeUntil = function(recognizer, set) {
    var ttype = recognizer.getTokenStream().LA(1);
    while( ttype !== Token.EOF && !set.contains(ttype)) {
        recognizer.consume();
        ttype = recognizer.getTokenStream().LA(1);
    }
};

//
// This implementation of {@link ANTLRErrorStrategy} responds to syntax errors
// by immediately canceling the parse operation with a
// {@link ParseCancellationException}. The implementation ensures that the
// {@link ParserRuleContext//exception} field is set for all parse tree nodes
// that were not completed prior to encountering the error.
//
// <p>
// This error strategy is useful in the following scenarios.</p>
//
// <ul>
// <li><strong>Two-stage parsing:</strong> This error strategy allows the first
// stage of two-stage parsing to immediately terminate if an error is
// encountered, and immediately fall back to the second stage. In addition to
// avoiding wasted work by attempting to recover from errors here, the empty
// implementation of {@link BailErrorStrategy//sync} improves the performance of
// the first stage.</li>
// <li><strong>Silent validation:</strong> When syntax errors are not being
// reported or logged, and the parse result is simply ignored if errors occur,
// the {@link BailErrorStrategy} avoids wasting work on recovering from errors
// when the result will be ignored either way.</li>
// </ul>
//
// <p>
// {@code myparser.setErrorHandler(new BailErrorStrategy());}</p>
//
// @see Parser//setErrorHandler(ANTLRErrorStrategy)
//
function BailErrorStrategy() {
	DefaultErrorStrategy.call(this);
	return this;
}

BailErrorStrategy.prototype = Object.create(DefaultErrorStrategy.prototype);
BailErrorStrategy.prototype.constructor = BailErrorStrategy;

// Instead of recovering from exception {@code e}, re-throw it wrapped
// in a {@link ParseCancellationException} so it is not caught by the
// rule function catches. Use {@link Exception//getCause()} to get the
// original {@link RecognitionException}.
//
BailErrorStrategy.prototype.recover = function(recognizer, e) {
    var context = recognizer._ctx;
    while (context !== null) {
        context.exception = e;
        context = context.parentCtx;
    }
    throw new ParseCancellationException(e);
};

// Make sure we don't attempt to recover inline; if the parser
// successfully recovers, it won't throw an exception.
//
BailErrorStrategy.prototype.recoverInline = function(recognizer) {
    this.recover(recognizer, new InputMismatchException(recognizer));
};

// Make sure we don't attempt to recover from problems in subrules.//
BailErrorStrategy.prototype.sync = function(recognizer) {
    // pass
};

exports.BailErrorStrategy = BailErrorStrategy;
exports.DefaultErrorStrategy = DefaultErrorStrategy;

/***/ }),
/* 38 */
/***/ (function(module, exports) {



/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Generated from cypher-editor-support/src/_generated/Cypher.g4 by ANTLR 4.7
// jshint ignore: start
var antlr4 = __webpack_require__(9);

// This class defines a complete listener for a parse tree produced by CypherParser.
function CypherListener() {
	antlr4.tree.ParseTreeListener.call(this);
	return this;
}

CypherListener.prototype = Object.create(antlr4.tree.ParseTreeListener.prototype);
CypherListener.prototype.constructor = CypherListener;

// Enter a parse tree produced by CypherParser#cypher.
CypherListener.prototype.enterCypher = function (ctx) {};

// Exit a parse tree produced by CypherParser#cypher.
CypherListener.prototype.exitCypher = function (ctx) {};

// Enter a parse tree produced by CypherParser#cypherPart.
CypherListener.prototype.enterCypherPart = function (ctx) {};

// Exit a parse tree produced by CypherParser#cypherPart.
CypherListener.prototype.exitCypherPart = function (ctx) {};

// Enter a parse tree produced by CypherParser#cypherConsoleCommand.
CypherListener.prototype.enterCypherConsoleCommand = function (ctx) {};

// Exit a parse tree produced by CypherParser#cypherConsoleCommand.
CypherListener.prototype.exitCypherConsoleCommand = function (ctx) {};

// Enter a parse tree produced by CypherParser#cypherConsoleCommandName.
CypherListener.prototype.enterCypherConsoleCommandName = function (ctx) {};

// Exit a parse tree produced by CypherParser#cypherConsoleCommandName.
CypherListener.prototype.exitCypherConsoleCommandName = function (ctx) {};

// Enter a parse tree produced by CypherParser#cypherConsoleCommandParameters.
CypherListener.prototype.enterCypherConsoleCommandParameters = function (ctx) {};

// Exit a parse tree produced by CypherParser#cypherConsoleCommandParameters.
CypherListener.prototype.exitCypherConsoleCommandParameters = function (ctx) {};

// Enter a parse tree produced by CypherParser#cypherConsoleCommandParameter.
CypherListener.prototype.enterCypherConsoleCommandParameter = function (ctx) {};

// Exit a parse tree produced by CypherParser#cypherConsoleCommandParameter.
CypherListener.prototype.exitCypherConsoleCommandParameter = function (ctx) {};

// Enter a parse tree produced by CypherParser#arrowExpression.
CypherListener.prototype.enterArrowExpression = function (ctx) {};

// Exit a parse tree produced by CypherParser#arrowExpression.
CypherListener.prototype.exitArrowExpression = function (ctx) {};

// Enter a parse tree produced by CypherParser#url.
CypherListener.prototype.enterUrl = function (ctx) {};

// Exit a parse tree produced by CypherParser#url.
CypherListener.prototype.exitUrl = function (ctx) {};

// Enter a parse tree produced by CypherParser#uri.
CypherListener.prototype.enterUri = function (ctx) {};

// Exit a parse tree produced by CypherParser#uri.
CypherListener.prototype.exitUri = function (ctx) {};

// Enter a parse tree produced by CypherParser#scheme.
CypherListener.prototype.enterScheme = function (ctx) {};

// Exit a parse tree produced by CypherParser#scheme.
CypherListener.prototype.exitScheme = function (ctx) {};

// Enter a parse tree produced by CypherParser#host.
CypherListener.prototype.enterHost = function (ctx) {};

// Exit a parse tree produced by CypherParser#host.
CypherListener.prototype.exitHost = function (ctx) {};

// Enter a parse tree produced by CypherParser#hostname.
CypherListener.prototype.enterHostname = function (ctx) {};

// Exit a parse tree produced by CypherParser#hostname.
CypherListener.prototype.exitHostname = function (ctx) {};

// Enter a parse tree produced by CypherParser#hostnumber.
CypherListener.prototype.enterHostnumber = function (ctx) {};

// Exit a parse tree produced by CypherParser#hostnumber.
CypherListener.prototype.exitHostnumber = function (ctx) {};

// Enter a parse tree produced by CypherParser#port.
CypherListener.prototype.enterPort = function (ctx) {};

// Exit a parse tree produced by CypherParser#port.
CypherListener.prototype.exitPort = function (ctx) {};

// Enter a parse tree produced by CypherParser#path.
CypherListener.prototype.enterPath = function (ctx) {};

// Exit a parse tree produced by CypherParser#path.
CypherListener.prototype.exitPath = function (ctx) {};

// Enter a parse tree produced by CypherParser#user.
CypherListener.prototype.enterUser = function (ctx) {};

// Exit a parse tree produced by CypherParser#user.
CypherListener.prototype.exitUser = function (ctx) {};

// Enter a parse tree produced by CypherParser#login.
CypherListener.prototype.enterLogin = function (ctx) {};

// Exit a parse tree produced by CypherParser#login.
CypherListener.prototype.exitLogin = function (ctx) {};

// Enter a parse tree produced by CypherParser#password.
CypherListener.prototype.enterPassword = function (ctx) {};

// Exit a parse tree produced by CypherParser#password.
CypherListener.prototype.exitPassword = function (ctx) {};

// Enter a parse tree produced by CypherParser#frag.
CypherListener.prototype.enterFrag = function (ctx) {};

// Exit a parse tree produced by CypherParser#frag.
CypherListener.prototype.exitFrag = function (ctx) {};

// Enter a parse tree produced by CypherParser#urlQuery.
CypherListener.prototype.enterUrlQuery = function (ctx) {};

// Exit a parse tree produced by CypherParser#urlQuery.
CypherListener.prototype.exitUrlQuery = function (ctx) {};

// Enter a parse tree produced by CypherParser#search.
CypherListener.prototype.enterSearch = function (ctx) {};

// Exit a parse tree produced by CypherParser#search.
CypherListener.prototype.exitSearch = function (ctx) {};

// Enter a parse tree produced by CypherParser#searchparameter.
CypherListener.prototype.enterSearchparameter = function (ctx) {};

// Exit a parse tree produced by CypherParser#searchparameter.
CypherListener.prototype.exitSearchparameter = function (ctx) {};

// Enter a parse tree produced by CypherParser#string.
CypherListener.prototype.enterString = function (ctx) {};

// Exit a parse tree produced by CypherParser#string.
CypherListener.prototype.exitString = function (ctx) {};

// Enter a parse tree produced by CypherParser#urlDigits.
CypherListener.prototype.enterUrlDigits = function (ctx) {};

// Exit a parse tree produced by CypherParser#urlDigits.
CypherListener.prototype.exitUrlDigits = function (ctx) {};

// Enter a parse tree produced by CypherParser#json.
CypherListener.prototype.enterJson = function (ctx) {};

// Exit a parse tree produced by CypherParser#json.
CypherListener.prototype.exitJson = function (ctx) {};

// Enter a parse tree produced by CypherParser#obj.
CypherListener.prototype.enterObj = function (ctx) {};

// Exit a parse tree produced by CypherParser#obj.
CypherListener.prototype.exitObj = function (ctx) {};

// Enter a parse tree produced by CypherParser#pair.
CypherListener.prototype.enterPair = function (ctx) {};

// Exit a parse tree produced by CypherParser#pair.
CypherListener.prototype.exitPair = function (ctx) {};

// Enter a parse tree produced by CypherParser#array.
CypherListener.prototype.enterArray = function (ctx) {};

// Exit a parse tree produced by CypherParser#array.
CypherListener.prototype.exitArray = function (ctx) {};

// Enter a parse tree produced by CypherParser#value.
CypherListener.prototype.enterValue = function (ctx) {};

// Exit a parse tree produced by CypherParser#value.
CypherListener.prototype.exitValue = function (ctx) {};

// Enter a parse tree produced by CypherParser#keyValueLiteral.
CypherListener.prototype.enterKeyValueLiteral = function (ctx) {};

// Exit a parse tree produced by CypherParser#keyValueLiteral.
CypherListener.prototype.exitKeyValueLiteral = function (ctx) {};

// Enter a parse tree produced by CypherParser#commandPath.
CypherListener.prototype.enterCommandPath = function (ctx) {};

// Exit a parse tree produced by CypherParser#commandPath.
CypherListener.prototype.exitCommandPath = function (ctx) {};

// Enter a parse tree produced by CypherParser#subCommand.
CypherListener.prototype.enterSubCommand = function (ctx) {};

// Exit a parse tree produced by CypherParser#subCommand.
CypherListener.prototype.exitSubCommand = function (ctx) {};

// Enter a parse tree produced by CypherParser#cypherQuery.
CypherListener.prototype.enterCypherQuery = function (ctx) {};

// Exit a parse tree produced by CypherParser#cypherQuery.
CypherListener.prototype.exitCypherQuery = function (ctx) {};

// Enter a parse tree produced by CypherParser#queryOptions.
CypherListener.prototype.enterQueryOptions = function (ctx) {};

// Exit a parse tree produced by CypherParser#queryOptions.
CypherListener.prototype.exitQueryOptions = function (ctx) {};

// Enter a parse tree produced by CypherParser#anyCypherOption.
CypherListener.prototype.enterAnyCypherOption = function (ctx) {};

// Exit a parse tree produced by CypherParser#anyCypherOption.
CypherListener.prototype.exitAnyCypherOption = function (ctx) {};

// Enter a parse tree produced by CypherParser#cypherOption.
CypherListener.prototype.enterCypherOption = function (ctx) {};

// Exit a parse tree produced by CypherParser#cypherOption.
CypherListener.prototype.exitCypherOption = function (ctx) {};

// Enter a parse tree produced by CypherParser#versionNumber.
CypherListener.prototype.enterVersionNumber = function (ctx) {};

// Exit a parse tree produced by CypherParser#versionNumber.
CypherListener.prototype.exitVersionNumber = function (ctx) {};

// Enter a parse tree produced by CypherParser#explain.
CypherListener.prototype.enterExplain = function (ctx) {};

// Exit a parse tree produced by CypherParser#explain.
CypherListener.prototype.exitExplain = function (ctx) {};

// Enter a parse tree produced by CypherParser#profile.
CypherListener.prototype.enterProfile = function (ctx) {};

// Exit a parse tree produced by CypherParser#profile.
CypherListener.prototype.exitProfile = function (ctx) {};

// Enter a parse tree produced by CypherParser#configurationOption.
CypherListener.prototype.enterConfigurationOption = function (ctx) {};

// Exit a parse tree produced by CypherParser#configurationOption.
CypherListener.prototype.exitConfigurationOption = function (ctx) {};

// Enter a parse tree produced by CypherParser#statement.
CypherListener.prototype.enterStatement = function (ctx) {};

// Exit a parse tree produced by CypherParser#statement.
CypherListener.prototype.exitStatement = function (ctx) {};

// Enter a parse tree produced by CypherParser#query.
CypherListener.prototype.enterQuery = function (ctx) {};

// Exit a parse tree produced by CypherParser#query.
CypherListener.prototype.exitQuery = function (ctx) {};

// Enter a parse tree produced by CypherParser#regularQuery.
CypherListener.prototype.enterRegularQuery = function (ctx) {};

// Exit a parse tree produced by CypherParser#regularQuery.
CypherListener.prototype.exitRegularQuery = function (ctx) {};

// Enter a parse tree produced by CypherParser#bulkImportQuery.
CypherListener.prototype.enterBulkImportQuery = function (ctx) {};

// Exit a parse tree produced by CypherParser#bulkImportQuery.
CypherListener.prototype.exitBulkImportQuery = function (ctx) {};

// Enter a parse tree produced by CypherParser#singleQuery.
CypherListener.prototype.enterSingleQuery = function (ctx) {};

// Exit a parse tree produced by CypherParser#singleQuery.
CypherListener.prototype.exitSingleQuery = function (ctx) {};

// Enter a parse tree produced by CypherParser#periodicCommitHint.
CypherListener.prototype.enterPeriodicCommitHint = function (ctx) {};

// Exit a parse tree produced by CypherParser#periodicCommitHint.
CypherListener.prototype.exitPeriodicCommitHint = function (ctx) {};

// Enter a parse tree produced by CypherParser#loadCSVQuery.
CypherListener.prototype.enterLoadCSVQuery = function (ctx) {};

// Exit a parse tree produced by CypherParser#loadCSVQuery.
CypherListener.prototype.exitLoadCSVQuery = function (ctx) {};

// Enter a parse tree produced by CypherParser#union.
CypherListener.prototype.enterUnion = function (ctx) {};

// Exit a parse tree produced by CypherParser#union.
CypherListener.prototype.exitUnion = function (ctx) {};

// Enter a parse tree produced by CypherParser#clause.
CypherListener.prototype.enterClause = function (ctx) {};

// Exit a parse tree produced by CypherParser#clause.
CypherListener.prototype.exitClause = function (ctx) {};

// Enter a parse tree produced by CypherParser#command.
CypherListener.prototype.enterCommand = function (ctx) {};

// Exit a parse tree produced by CypherParser#command.
CypherListener.prototype.exitCommand = function (ctx) {};

// Enter a parse tree produced by CypherParser#createUniqueConstraint.
CypherListener.prototype.enterCreateUniqueConstraint = function (ctx) {};

// Exit a parse tree produced by CypherParser#createUniqueConstraint.
CypherListener.prototype.exitCreateUniqueConstraint = function (ctx) {};

// Enter a parse tree produced by CypherParser#createNodeKeyConstraint.
CypherListener.prototype.enterCreateNodeKeyConstraint = function (ctx) {};

// Exit a parse tree produced by CypherParser#createNodeKeyConstraint.
CypherListener.prototype.exitCreateNodeKeyConstraint = function (ctx) {};

// Enter a parse tree produced by CypherParser#createNodePropertyExistenceConstraint.
CypherListener.prototype.enterCreateNodePropertyExistenceConstraint = function (ctx) {};

// Exit a parse tree produced by CypherParser#createNodePropertyExistenceConstraint.
CypherListener.prototype.exitCreateNodePropertyExistenceConstraint = function (ctx) {};

// Enter a parse tree produced by CypherParser#createRelationshipPropertyExistenceConstraint.
CypherListener.prototype.enterCreateRelationshipPropertyExistenceConstraint = function (ctx) {};

// Exit a parse tree produced by CypherParser#createRelationshipPropertyExistenceConstraint.
CypherListener.prototype.exitCreateRelationshipPropertyExistenceConstraint = function (ctx) {};

// Enter a parse tree produced by CypherParser#createIndex.
CypherListener.prototype.enterCreateIndex = function (ctx) {};

// Exit a parse tree produced by CypherParser#createIndex.
CypherListener.prototype.exitCreateIndex = function (ctx) {};

// Enter a parse tree produced by CypherParser#dropUniqueConstraint.
CypherListener.prototype.enterDropUniqueConstraint = function (ctx) {};

// Exit a parse tree produced by CypherParser#dropUniqueConstraint.
CypherListener.prototype.exitDropUniqueConstraint = function (ctx) {};

// Enter a parse tree produced by CypherParser#dropNodeKeyConstraint.
CypherListener.prototype.enterDropNodeKeyConstraint = function (ctx) {};

// Exit a parse tree produced by CypherParser#dropNodeKeyConstraint.
CypherListener.prototype.exitDropNodeKeyConstraint = function (ctx) {};

// Enter a parse tree produced by CypherParser#dropNodePropertyExistenceConstraint.
CypherListener.prototype.enterDropNodePropertyExistenceConstraint = function (ctx) {};

// Exit a parse tree produced by CypherParser#dropNodePropertyExistenceConstraint.
CypherListener.prototype.exitDropNodePropertyExistenceConstraint = function (ctx) {};

// Enter a parse tree produced by CypherParser#dropRelationshipPropertyExistenceConstraint.
CypherListener.prototype.enterDropRelationshipPropertyExistenceConstraint = function (ctx) {};

// Exit a parse tree produced by CypherParser#dropRelationshipPropertyExistenceConstraint.
CypherListener.prototype.exitDropRelationshipPropertyExistenceConstraint = function (ctx) {};

// Enter a parse tree produced by CypherParser#dropIndex.
CypherListener.prototype.enterDropIndex = function (ctx) {};

// Exit a parse tree produced by CypherParser#dropIndex.
CypherListener.prototype.exitDropIndex = function (ctx) {};

// Enter a parse tree produced by CypherParser#index.
CypherListener.prototype.enterIndex = function (ctx) {};

// Exit a parse tree produced by CypherParser#index.
CypherListener.prototype.exitIndex = function (ctx) {};

// Enter a parse tree produced by CypherParser#uniqueConstraint.
CypherListener.prototype.enterUniqueConstraint = function (ctx) {};

// Exit a parse tree produced by CypherParser#uniqueConstraint.
CypherListener.prototype.exitUniqueConstraint = function (ctx) {};

// Enter a parse tree produced by CypherParser#nodeKeyConstraint.
CypherListener.prototype.enterNodeKeyConstraint = function (ctx) {};

// Exit a parse tree produced by CypherParser#nodeKeyConstraint.
CypherListener.prototype.exitNodeKeyConstraint = function (ctx) {};

// Enter a parse tree produced by CypherParser#nodePropertyExistenceConstraint.
CypherListener.prototype.enterNodePropertyExistenceConstraint = function (ctx) {};

// Exit a parse tree produced by CypherParser#nodePropertyExistenceConstraint.
CypherListener.prototype.exitNodePropertyExistenceConstraint = function (ctx) {};

// Enter a parse tree produced by CypherParser#relationshipPropertyExistenceConstraint.
CypherListener.prototype.enterRelationshipPropertyExistenceConstraint = function (ctx) {};

// Exit a parse tree produced by CypherParser#relationshipPropertyExistenceConstraint.
CypherListener.prototype.exitRelationshipPropertyExistenceConstraint = function (ctx) {};

// Enter a parse tree produced by CypherParser#relationshipPatternSyntax.
CypherListener.prototype.enterRelationshipPatternSyntax = function (ctx) {};

// Exit a parse tree produced by CypherParser#relationshipPatternSyntax.
CypherListener.prototype.exitRelationshipPatternSyntax = function (ctx) {};

// Enter a parse tree produced by CypherParser#loadCSVClause.
CypherListener.prototype.enterLoadCSVClause = function (ctx) {};

// Exit a parse tree produced by CypherParser#loadCSVClause.
CypherListener.prototype.exitLoadCSVClause = function (ctx) {};

// Enter a parse tree produced by CypherParser#matchClause.
CypherListener.prototype.enterMatchClause = function (ctx) {};

// Exit a parse tree produced by CypherParser#matchClause.
CypherListener.prototype.exitMatchClause = function (ctx) {};

// Enter a parse tree produced by CypherParser#unwindClause.
CypherListener.prototype.enterUnwindClause = function (ctx) {};

// Exit a parse tree produced by CypherParser#unwindClause.
CypherListener.prototype.exitUnwindClause = function (ctx) {};

// Enter a parse tree produced by CypherParser#mergeClause.
CypherListener.prototype.enterMergeClause = function (ctx) {};

// Exit a parse tree produced by CypherParser#mergeClause.
CypherListener.prototype.exitMergeClause = function (ctx) {};

// Enter a parse tree produced by CypherParser#mergeAction.
CypherListener.prototype.enterMergeAction = function (ctx) {};

// Exit a parse tree produced by CypherParser#mergeAction.
CypherListener.prototype.exitMergeAction = function (ctx) {};

// Enter a parse tree produced by CypherParser#createClause.
CypherListener.prototype.enterCreateClause = function (ctx) {};

// Exit a parse tree produced by CypherParser#createClause.
CypherListener.prototype.exitCreateClause = function (ctx) {};

// Enter a parse tree produced by CypherParser#createUniqueClause.
CypherListener.prototype.enterCreateUniqueClause = function (ctx) {};

// Exit a parse tree produced by CypherParser#createUniqueClause.
CypherListener.prototype.exitCreateUniqueClause = function (ctx) {};

// Enter a parse tree produced by CypherParser#setClause.
CypherListener.prototype.enterSetClause = function (ctx) {};

// Exit a parse tree produced by CypherParser#setClause.
CypherListener.prototype.exitSetClause = function (ctx) {};

// Enter a parse tree produced by CypherParser#setItem.
CypherListener.prototype.enterSetItem = function (ctx) {};

// Exit a parse tree produced by CypherParser#setItem.
CypherListener.prototype.exitSetItem = function (ctx) {};

// Enter a parse tree produced by CypherParser#deleteClause.
CypherListener.prototype.enterDeleteClause = function (ctx) {};

// Exit a parse tree produced by CypherParser#deleteClause.
CypherListener.prototype.exitDeleteClause = function (ctx) {};

// Enter a parse tree produced by CypherParser#removeClause.
CypherListener.prototype.enterRemoveClause = function (ctx) {};

// Exit a parse tree produced by CypherParser#removeClause.
CypherListener.prototype.exitRemoveClause = function (ctx) {};

// Enter a parse tree produced by CypherParser#removeItem.
CypherListener.prototype.enterRemoveItem = function (ctx) {};

// Exit a parse tree produced by CypherParser#removeItem.
CypherListener.prototype.exitRemoveItem = function (ctx) {};

// Enter a parse tree produced by CypherParser#foreachClause.
CypherListener.prototype.enterForeachClause = function (ctx) {};

// Exit a parse tree produced by CypherParser#foreachClause.
CypherListener.prototype.exitForeachClause = function (ctx) {};

// Enter a parse tree produced by CypherParser#withClause.
CypherListener.prototype.enterWithClause = function (ctx) {};

// Exit a parse tree produced by CypherParser#withClause.
CypherListener.prototype.exitWithClause = function (ctx) {};

// Enter a parse tree produced by CypherParser#returnClause.
CypherListener.prototype.enterReturnClause = function (ctx) {};

// Exit a parse tree produced by CypherParser#returnClause.
CypherListener.prototype.exitReturnClause = function (ctx) {};

// Enter a parse tree produced by CypherParser#returnBody.
CypherListener.prototype.enterReturnBody = function (ctx) {};

// Exit a parse tree produced by CypherParser#returnBody.
CypherListener.prototype.exitReturnBody = function (ctx) {};

// Enter a parse tree produced by CypherParser#returnItems.
CypherListener.prototype.enterReturnItems = function (ctx) {};

// Exit a parse tree produced by CypherParser#returnItems.
CypherListener.prototype.exitReturnItems = function (ctx) {};

// Enter a parse tree produced by CypherParser#returnItem.
CypherListener.prototype.enterReturnItem = function (ctx) {};

// Exit a parse tree produced by CypherParser#returnItem.
CypherListener.prototype.exitReturnItem = function (ctx) {};

// Enter a parse tree produced by CypherParser#call.
CypherListener.prototype.enterCall = function (ctx) {};

// Exit a parse tree produced by CypherParser#call.
CypherListener.prototype.exitCall = function (ctx) {};

// Enter a parse tree produced by CypherParser#procedureInvocation.
CypherListener.prototype.enterProcedureInvocation = function (ctx) {};

// Exit a parse tree produced by CypherParser#procedureInvocation.
CypherListener.prototype.exitProcedureInvocation = function (ctx) {};

// Enter a parse tree produced by CypherParser#procedureInvocationBody.
CypherListener.prototype.enterProcedureInvocationBody = function (ctx) {};

// Exit a parse tree produced by CypherParser#procedureInvocationBody.
CypherListener.prototype.exitProcedureInvocationBody = function (ctx) {};

// Enter a parse tree produced by CypherParser#procedureArguments.
CypherListener.prototype.enterProcedureArguments = function (ctx) {};

// Exit a parse tree produced by CypherParser#procedureArguments.
CypherListener.prototype.exitProcedureArguments = function (ctx) {};

// Enter a parse tree produced by CypherParser#procedureResults.
CypherListener.prototype.enterProcedureResults = function (ctx) {};

// Exit a parse tree produced by CypherParser#procedureResults.
CypherListener.prototype.exitProcedureResults = function (ctx) {};

// Enter a parse tree produced by CypherParser#procedureResult.
CypherListener.prototype.enterProcedureResult = function (ctx) {};

// Exit a parse tree produced by CypherParser#procedureResult.
CypherListener.prototype.exitProcedureResult = function (ctx) {};

// Enter a parse tree produced by CypherParser#aliasedProcedureResult.
CypherListener.prototype.enterAliasedProcedureResult = function (ctx) {};

// Exit a parse tree produced by CypherParser#aliasedProcedureResult.
CypherListener.prototype.exitAliasedProcedureResult = function (ctx) {};

// Enter a parse tree produced by CypherParser#simpleProcedureResult.
CypherListener.prototype.enterSimpleProcedureResult = function (ctx) {};

// Exit a parse tree produced by CypherParser#simpleProcedureResult.
CypherListener.prototype.exitSimpleProcedureResult = function (ctx) {};

// Enter a parse tree produced by CypherParser#procedureOutput.
CypherListener.prototype.enterProcedureOutput = function (ctx) {};

// Exit a parse tree produced by CypherParser#procedureOutput.
CypherListener.prototype.exitProcedureOutput = function (ctx) {};

// Enter a parse tree produced by CypherParser#order.
CypherListener.prototype.enterOrder = function (ctx) {};

// Exit a parse tree produced by CypherParser#order.
CypherListener.prototype.exitOrder = function (ctx) {};

// Enter a parse tree produced by CypherParser#skip.
CypherListener.prototype.enterSkip = function (ctx) {};

// Exit a parse tree produced by CypherParser#skip.
CypherListener.prototype.exitSkip = function (ctx) {};

// Enter a parse tree produced by CypherParser#limit.
CypherListener.prototype.enterLimit = function (ctx) {};

// Exit a parse tree produced by CypherParser#limit.
CypherListener.prototype.exitLimit = function (ctx) {};

// Enter a parse tree produced by CypherParser#sortItem.
CypherListener.prototype.enterSortItem = function (ctx) {};

// Exit a parse tree produced by CypherParser#sortItem.
CypherListener.prototype.exitSortItem = function (ctx) {};

// Enter a parse tree produced by CypherParser#hint.
CypherListener.prototype.enterHint = function (ctx) {};

// Exit a parse tree produced by CypherParser#hint.
CypherListener.prototype.exitHint = function (ctx) {};

// Enter a parse tree produced by CypherParser#startClause.
CypherListener.prototype.enterStartClause = function (ctx) {};

// Exit a parse tree produced by CypherParser#startClause.
CypherListener.prototype.exitStartClause = function (ctx) {};

// Enter a parse tree produced by CypherParser#startPoint.
CypherListener.prototype.enterStartPoint = function (ctx) {};

// Exit a parse tree produced by CypherParser#startPoint.
CypherListener.prototype.exitStartPoint = function (ctx) {};

// Enter a parse tree produced by CypherParser#lookup.
CypherListener.prototype.enterLookup = function (ctx) {};

// Exit a parse tree produced by CypherParser#lookup.
CypherListener.prototype.exitLookup = function (ctx) {};

// Enter a parse tree produced by CypherParser#nodeLookup.
CypherListener.prototype.enterNodeLookup = function (ctx) {};

// Exit a parse tree produced by CypherParser#nodeLookup.
CypherListener.prototype.exitNodeLookup = function (ctx) {};

// Enter a parse tree produced by CypherParser#relationshipLookup.
CypherListener.prototype.enterRelationshipLookup = function (ctx) {};

// Exit a parse tree produced by CypherParser#relationshipLookup.
CypherListener.prototype.exitRelationshipLookup = function (ctx) {};

// Enter a parse tree produced by CypherParser#identifiedIndexLookup.
CypherListener.prototype.enterIdentifiedIndexLookup = function (ctx) {};

// Exit a parse tree produced by CypherParser#identifiedIndexLookup.
CypherListener.prototype.exitIdentifiedIndexLookup = function (ctx) {};

// Enter a parse tree produced by CypherParser#indexQuery.
CypherListener.prototype.enterIndexQuery = function (ctx) {};

// Exit a parse tree produced by CypherParser#indexQuery.
CypherListener.prototype.exitIndexQuery = function (ctx) {};

// Enter a parse tree produced by CypherParser#idLookup.
CypherListener.prototype.enterIdLookup = function (ctx) {};

// Exit a parse tree produced by CypherParser#idLookup.
CypherListener.prototype.exitIdLookup = function (ctx) {};

// Enter a parse tree produced by CypherParser#literalIds.
CypherListener.prototype.enterLiteralIds = function (ctx) {};

// Exit a parse tree produced by CypherParser#literalIds.
CypherListener.prototype.exitLiteralIds = function (ctx) {};

// Enter a parse tree produced by CypherParser#where.
CypherListener.prototype.enterWhere = function (ctx) {};

// Exit a parse tree produced by CypherParser#where.
CypherListener.prototype.exitWhere = function (ctx) {};

// Enter a parse tree produced by CypherParser#pattern.
CypherListener.prototype.enterPattern = function (ctx) {};

// Exit a parse tree produced by CypherParser#pattern.
CypherListener.prototype.exitPattern = function (ctx) {};

// Enter a parse tree produced by CypherParser#patternPart.
CypherListener.prototype.enterPatternPart = function (ctx) {};

// Exit a parse tree produced by CypherParser#patternPart.
CypherListener.prototype.exitPatternPart = function (ctx) {};

// Enter a parse tree produced by CypherParser#anonymousPatternPart.
CypherListener.prototype.enterAnonymousPatternPart = function (ctx) {};

// Exit a parse tree produced by CypherParser#anonymousPatternPart.
CypherListener.prototype.exitAnonymousPatternPart = function (ctx) {};

// Enter a parse tree produced by CypherParser#patternElement.
CypherListener.prototype.enterPatternElement = function (ctx) {};

// Exit a parse tree produced by CypherParser#patternElement.
CypherListener.prototype.exitPatternElement = function (ctx) {};

// Enter a parse tree produced by CypherParser#nodePattern.
CypherListener.prototype.enterNodePattern = function (ctx) {};

// Exit a parse tree produced by CypherParser#nodePattern.
CypherListener.prototype.exitNodePattern = function (ctx) {};

// Enter a parse tree produced by CypherParser#patternElementChain.
CypherListener.prototype.enterPatternElementChain = function (ctx) {};

// Exit a parse tree produced by CypherParser#patternElementChain.
CypherListener.prototype.exitPatternElementChain = function (ctx) {};

// Enter a parse tree produced by CypherParser#relationshipPattern.
CypherListener.prototype.enterRelationshipPattern = function (ctx) {};

// Exit a parse tree produced by CypherParser#relationshipPattern.
CypherListener.prototype.exitRelationshipPattern = function (ctx) {};

// Enter a parse tree produced by CypherParser#relationshipPatternStart.
CypherListener.prototype.enterRelationshipPatternStart = function (ctx) {};

// Exit a parse tree produced by CypherParser#relationshipPatternStart.
CypherListener.prototype.exitRelationshipPatternStart = function (ctx) {};

// Enter a parse tree produced by CypherParser#relationshipPatternEnd.
CypherListener.prototype.enterRelationshipPatternEnd = function (ctx) {};

// Exit a parse tree produced by CypherParser#relationshipPatternEnd.
CypherListener.prototype.exitRelationshipPatternEnd = function (ctx) {};

// Enter a parse tree produced by CypherParser#relationshipDetail.
CypherListener.prototype.enterRelationshipDetail = function (ctx) {};

// Exit a parse tree produced by CypherParser#relationshipDetail.
CypherListener.prototype.exitRelationshipDetail = function (ctx) {};

// Enter a parse tree produced by CypherParser#properties.
CypherListener.prototype.enterProperties = function (ctx) {};

// Exit a parse tree produced by CypherParser#properties.
CypherListener.prototype.exitProperties = function (ctx) {};

// Enter a parse tree produced by CypherParser#relType.
CypherListener.prototype.enterRelType = function (ctx) {};

// Exit a parse tree produced by CypherParser#relType.
CypherListener.prototype.exitRelType = function (ctx) {};

// Enter a parse tree produced by CypherParser#relationshipTypes.
CypherListener.prototype.enterRelationshipTypes = function (ctx) {};

// Exit a parse tree produced by CypherParser#relationshipTypes.
CypherListener.prototype.exitRelationshipTypes = function (ctx) {};

// Enter a parse tree produced by CypherParser#relationshipType.
CypherListener.prototype.enterRelationshipType = function (ctx) {};

// Exit a parse tree produced by CypherParser#relationshipType.
CypherListener.prototype.exitRelationshipType = function (ctx) {};

// Enter a parse tree produced by CypherParser#relationshipTypeOptionalColon.
CypherListener.prototype.enterRelationshipTypeOptionalColon = function (ctx) {};

// Exit a parse tree produced by CypherParser#relationshipTypeOptionalColon.
CypherListener.prototype.exitRelationshipTypeOptionalColon = function (ctx) {};

// Enter a parse tree produced by CypherParser#nodeLabels.
CypherListener.prototype.enterNodeLabels = function (ctx) {};

// Exit a parse tree produced by CypherParser#nodeLabels.
CypherListener.prototype.exitNodeLabels = function (ctx) {};

// Enter a parse tree produced by CypherParser#nodeLabel.
CypherListener.prototype.enterNodeLabel = function (ctx) {};

// Exit a parse tree produced by CypherParser#nodeLabel.
CypherListener.prototype.exitNodeLabel = function (ctx) {};

// Enter a parse tree produced by CypherParser#rangeLiteral.
CypherListener.prototype.enterRangeLiteral = function (ctx) {};

// Exit a parse tree produced by CypherParser#rangeLiteral.
CypherListener.prototype.exitRangeLiteral = function (ctx) {};

// Enter a parse tree produced by CypherParser#labelName.
CypherListener.prototype.enterLabelName = function (ctx) {};

// Exit a parse tree produced by CypherParser#labelName.
CypherListener.prototype.exitLabelName = function (ctx) {};

// Enter a parse tree produced by CypherParser#relTypeName.
CypherListener.prototype.enterRelTypeName = function (ctx) {};

// Exit a parse tree produced by CypherParser#relTypeName.
CypherListener.prototype.exitRelTypeName = function (ctx) {};

// Enter a parse tree produced by CypherParser#expression.
CypherListener.prototype.enterExpression = function (ctx) {};

// Exit a parse tree produced by CypherParser#expression.
CypherListener.prototype.exitExpression = function (ctx) {};

// Enter a parse tree produced by CypherParser#orExpression.
CypherListener.prototype.enterOrExpression = function (ctx) {};

// Exit a parse tree produced by CypherParser#orExpression.
CypherListener.prototype.exitOrExpression = function (ctx) {};

// Enter a parse tree produced by CypherParser#xorExpression.
CypherListener.prototype.enterXorExpression = function (ctx) {};

// Exit a parse tree produced by CypherParser#xorExpression.
CypherListener.prototype.exitXorExpression = function (ctx) {};

// Enter a parse tree produced by CypherParser#andExpression.
CypherListener.prototype.enterAndExpression = function (ctx) {};

// Exit a parse tree produced by CypherParser#andExpression.
CypherListener.prototype.exitAndExpression = function (ctx) {};

// Enter a parse tree produced by CypherParser#notExpression.
CypherListener.prototype.enterNotExpression = function (ctx) {};

// Exit a parse tree produced by CypherParser#notExpression.
CypherListener.prototype.exitNotExpression = function (ctx) {};

// Enter a parse tree produced by CypherParser#comparisonExpression.
CypherListener.prototype.enterComparisonExpression = function (ctx) {};

// Exit a parse tree produced by CypherParser#comparisonExpression.
CypherListener.prototype.exitComparisonExpression = function (ctx) {};

// Enter a parse tree produced by CypherParser#addOrSubtractExpression.
CypherListener.prototype.enterAddOrSubtractExpression = function (ctx) {};

// Exit a parse tree produced by CypherParser#addOrSubtractExpression.
CypherListener.prototype.exitAddOrSubtractExpression = function (ctx) {};

// Enter a parse tree produced by CypherParser#multiplyDivideModuloExpression.
CypherListener.prototype.enterMultiplyDivideModuloExpression = function (ctx) {};

// Exit a parse tree produced by CypherParser#multiplyDivideModuloExpression.
CypherListener.prototype.exitMultiplyDivideModuloExpression = function (ctx) {};

// Enter a parse tree produced by CypherParser#powerOfExpression.
CypherListener.prototype.enterPowerOfExpression = function (ctx) {};

// Exit a parse tree produced by CypherParser#powerOfExpression.
CypherListener.prototype.exitPowerOfExpression = function (ctx) {};

// Enter a parse tree produced by CypherParser#unaryAddOrSubtractExpression.
CypherListener.prototype.enterUnaryAddOrSubtractExpression = function (ctx) {};

// Exit a parse tree produced by CypherParser#unaryAddOrSubtractExpression.
CypherListener.prototype.exitUnaryAddOrSubtractExpression = function (ctx) {};

// Enter a parse tree produced by CypherParser#stringListNullOperatorExpression.
CypherListener.prototype.enterStringListNullOperatorExpression = function (ctx) {};

// Exit a parse tree produced by CypherParser#stringListNullOperatorExpression.
CypherListener.prototype.exitStringListNullOperatorExpression = function (ctx) {};

// Enter a parse tree produced by CypherParser#propertyOrLabelsExpression.
CypherListener.prototype.enterPropertyOrLabelsExpression = function (ctx) {};

// Exit a parse tree produced by CypherParser#propertyOrLabelsExpression.
CypherListener.prototype.exitPropertyOrLabelsExpression = function (ctx) {};

// Enter a parse tree produced by CypherParser#filterFunction.
CypherListener.prototype.enterFilterFunction = function (ctx) {};

// Exit a parse tree produced by CypherParser#filterFunction.
CypherListener.prototype.exitFilterFunction = function (ctx) {};

// Enter a parse tree produced by CypherParser#filterFunctionName.
CypherListener.prototype.enterFilterFunctionName = function (ctx) {};

// Exit a parse tree produced by CypherParser#filterFunctionName.
CypherListener.prototype.exitFilterFunctionName = function (ctx) {};

// Enter a parse tree produced by CypherParser#existsFunction.
CypherListener.prototype.enterExistsFunction = function (ctx) {};

// Exit a parse tree produced by CypherParser#existsFunction.
CypherListener.prototype.exitExistsFunction = function (ctx) {};

// Enter a parse tree produced by CypherParser#existsFunctionName.
CypherListener.prototype.enterExistsFunctionName = function (ctx) {};

// Exit a parse tree produced by CypherParser#existsFunctionName.
CypherListener.prototype.exitExistsFunctionName = function (ctx) {};

// Enter a parse tree produced by CypherParser#allFunction.
CypherListener.prototype.enterAllFunction = function (ctx) {};

// Exit a parse tree produced by CypherParser#allFunction.
CypherListener.prototype.exitAllFunction = function (ctx) {};

// Enter a parse tree produced by CypherParser#allFunctionName.
CypherListener.prototype.enterAllFunctionName = function (ctx) {};

// Exit a parse tree produced by CypherParser#allFunctionName.
CypherListener.prototype.exitAllFunctionName = function (ctx) {};

// Enter a parse tree produced by CypherParser#anyFunction.
CypherListener.prototype.enterAnyFunction = function (ctx) {};

// Exit a parse tree produced by CypherParser#anyFunction.
CypherListener.prototype.exitAnyFunction = function (ctx) {};

// Enter a parse tree produced by CypherParser#anyFunctionName.
CypherListener.prototype.enterAnyFunctionName = function (ctx) {};

// Exit a parse tree produced by CypherParser#anyFunctionName.
CypherListener.prototype.exitAnyFunctionName = function (ctx) {};

// Enter a parse tree produced by CypherParser#noneFunction.
CypherListener.prototype.enterNoneFunction = function (ctx) {};

// Exit a parse tree produced by CypherParser#noneFunction.
CypherListener.prototype.exitNoneFunction = function (ctx) {};

// Enter a parse tree produced by CypherParser#noneFunctionName.
CypherListener.prototype.enterNoneFunctionName = function (ctx) {};

// Exit a parse tree produced by CypherParser#noneFunctionName.
CypherListener.prototype.exitNoneFunctionName = function (ctx) {};

// Enter a parse tree produced by CypherParser#singleFunction.
CypherListener.prototype.enterSingleFunction = function (ctx) {};

// Exit a parse tree produced by CypherParser#singleFunction.
CypherListener.prototype.exitSingleFunction = function (ctx) {};

// Enter a parse tree produced by CypherParser#singleFunctionName.
CypherListener.prototype.enterSingleFunctionName = function (ctx) {};

// Exit a parse tree produced by CypherParser#singleFunctionName.
CypherListener.prototype.exitSingleFunctionName = function (ctx) {};

// Enter a parse tree produced by CypherParser#extractFunction.
CypherListener.prototype.enterExtractFunction = function (ctx) {};

// Exit a parse tree produced by CypherParser#extractFunction.
CypherListener.prototype.exitExtractFunction = function (ctx) {};

// Enter a parse tree produced by CypherParser#extractFunctionName.
CypherListener.prototype.enterExtractFunctionName = function (ctx) {};

// Exit a parse tree produced by CypherParser#extractFunctionName.
CypherListener.prototype.exitExtractFunctionName = function (ctx) {};

// Enter a parse tree produced by CypherParser#reduceFunction.
CypherListener.prototype.enterReduceFunction = function (ctx) {};

// Exit a parse tree produced by CypherParser#reduceFunction.
CypherListener.prototype.exitReduceFunction = function (ctx) {};

// Enter a parse tree produced by CypherParser#reduceFunctionName.
CypherListener.prototype.enterReduceFunctionName = function (ctx) {};

// Exit a parse tree produced by CypherParser#reduceFunctionName.
CypherListener.prototype.exitReduceFunctionName = function (ctx) {};

// Enter a parse tree produced by CypherParser#shortestPathPatternFunction.
CypherListener.prototype.enterShortestPathPatternFunction = function (ctx) {};

// Exit a parse tree produced by CypherParser#shortestPathPatternFunction.
CypherListener.prototype.exitShortestPathPatternFunction = function (ctx) {};

// Enter a parse tree produced by CypherParser#shortestPathFunctionName.
CypherListener.prototype.enterShortestPathFunctionName = function (ctx) {};

// Exit a parse tree produced by CypherParser#shortestPathFunctionName.
CypherListener.prototype.exitShortestPathFunctionName = function (ctx) {};

// Enter a parse tree produced by CypherParser#allShortestPathFunctionName.
CypherListener.prototype.enterAllShortestPathFunctionName = function (ctx) {};

// Exit a parse tree produced by CypherParser#allShortestPathFunctionName.
CypherListener.prototype.exitAllShortestPathFunctionName = function (ctx) {};

// Enter a parse tree produced by CypherParser#atom.
CypherListener.prototype.enterAtom = function (ctx) {};

// Exit a parse tree produced by CypherParser#atom.
CypherListener.prototype.exitAtom = function (ctx) {};

// Enter a parse tree produced by CypherParser#literal.
CypherListener.prototype.enterLiteral = function (ctx) {};

// Exit a parse tree produced by CypherParser#literal.
CypherListener.prototype.exitLiteral = function (ctx) {};

// Enter a parse tree produced by CypherParser#stringLiteral.
CypherListener.prototype.enterStringLiteral = function (ctx) {};

// Exit a parse tree produced by CypherParser#stringLiteral.
CypherListener.prototype.exitStringLiteral = function (ctx) {};

// Enter a parse tree produced by CypherParser#booleanLiteral.
CypherListener.prototype.enterBooleanLiteral = function (ctx) {};

// Exit a parse tree produced by CypherParser#booleanLiteral.
CypherListener.prototype.exitBooleanLiteral = function (ctx) {};

// Enter a parse tree produced by CypherParser#listLiteral.
CypherListener.prototype.enterListLiteral = function (ctx) {};

// Exit a parse tree produced by CypherParser#listLiteral.
CypherListener.prototype.exitListLiteral = function (ctx) {};

// Enter a parse tree produced by CypherParser#partialComparisonExpression.
CypherListener.prototype.enterPartialComparisonExpression = function (ctx) {};

// Exit a parse tree produced by CypherParser#partialComparisonExpression.
CypherListener.prototype.exitPartialComparisonExpression = function (ctx) {};

// Enter a parse tree produced by CypherParser#parenthesizedExpression.
CypherListener.prototype.enterParenthesizedExpression = function (ctx) {};

// Exit a parse tree produced by CypherParser#parenthesizedExpression.
CypherListener.prototype.exitParenthesizedExpression = function (ctx) {};

// Enter a parse tree produced by CypherParser#relationshipsPattern.
CypherListener.prototype.enterRelationshipsPattern = function (ctx) {};

// Exit a parse tree produced by CypherParser#relationshipsPattern.
CypherListener.prototype.exitRelationshipsPattern = function (ctx) {};

// Enter a parse tree produced by CypherParser#filterExpression.
CypherListener.prototype.enterFilterExpression = function (ctx) {};

// Exit a parse tree produced by CypherParser#filterExpression.
CypherListener.prototype.exitFilterExpression = function (ctx) {};

// Enter a parse tree produced by CypherParser#idInColl.
CypherListener.prototype.enterIdInColl = function (ctx) {};

// Exit a parse tree produced by CypherParser#idInColl.
CypherListener.prototype.exitIdInColl = function (ctx) {};

// Enter a parse tree produced by CypherParser#functionInvocation.
CypherListener.prototype.enterFunctionInvocation = function (ctx) {};

// Exit a parse tree produced by CypherParser#functionInvocation.
CypherListener.prototype.exitFunctionInvocation = function (ctx) {};

// Enter a parse tree produced by CypherParser#functionInvocationBody.
CypherListener.prototype.enterFunctionInvocationBody = function (ctx) {};

// Exit a parse tree produced by CypherParser#functionInvocationBody.
CypherListener.prototype.exitFunctionInvocationBody = function (ctx) {};

// Enter a parse tree produced by CypherParser#functionName.
CypherListener.prototype.enterFunctionName = function (ctx) {};

// Exit a parse tree produced by CypherParser#functionName.
CypherListener.prototype.exitFunctionName = function (ctx) {};

// Enter a parse tree produced by CypherParser#procedureName.
CypherListener.prototype.enterProcedureName = function (ctx) {};

// Exit a parse tree produced by CypherParser#procedureName.
CypherListener.prototype.exitProcedureName = function (ctx) {};

// Enter a parse tree produced by CypherParser#listComprehension.
CypherListener.prototype.enterListComprehension = function (ctx) {};

// Exit a parse tree produced by CypherParser#listComprehension.
CypherListener.prototype.exitListComprehension = function (ctx) {};

// Enter a parse tree produced by CypherParser#patternComprehension.
CypherListener.prototype.enterPatternComprehension = function (ctx) {};

// Exit a parse tree produced by CypherParser#patternComprehension.
CypherListener.prototype.exitPatternComprehension = function (ctx) {};

// Enter a parse tree produced by CypherParser#propertyLookup.
CypherListener.prototype.enterPropertyLookup = function (ctx) {};

// Exit a parse tree produced by CypherParser#propertyLookup.
CypherListener.prototype.exitPropertyLookup = function (ctx) {};

// Enter a parse tree produced by CypherParser#caseExpression.
CypherListener.prototype.enterCaseExpression = function (ctx) {};

// Exit a parse tree produced by CypherParser#caseExpression.
CypherListener.prototype.exitCaseExpression = function (ctx) {};

// Enter a parse tree produced by CypherParser#caseAlternatives.
CypherListener.prototype.enterCaseAlternatives = function (ctx) {};

// Exit a parse tree produced by CypherParser#caseAlternatives.
CypherListener.prototype.exitCaseAlternatives = function (ctx) {};

// Enter a parse tree produced by CypherParser#variable.
CypherListener.prototype.enterVariable = function (ctx) {};

// Exit a parse tree produced by CypherParser#variable.
CypherListener.prototype.exitVariable = function (ctx) {};

// Enter a parse tree produced by CypherParser#numberLiteral.
CypherListener.prototype.enterNumberLiteral = function (ctx) {};

// Exit a parse tree produced by CypherParser#numberLiteral.
CypherListener.prototype.exitNumberLiteral = function (ctx) {};

// Enter a parse tree produced by CypherParser#mapLiteral.
CypherListener.prototype.enterMapLiteral = function (ctx) {};

// Exit a parse tree produced by CypherParser#mapLiteral.
CypherListener.prototype.exitMapLiteral = function (ctx) {};

// Enter a parse tree produced by CypherParser#mapProjection.
CypherListener.prototype.enterMapProjection = function (ctx) {};

// Exit a parse tree produced by CypherParser#mapProjection.
CypherListener.prototype.exitMapProjection = function (ctx) {};

// Enter a parse tree produced by CypherParser#mapProjectionVariants.
CypherListener.prototype.enterMapProjectionVariants = function (ctx) {};

// Exit a parse tree produced by CypherParser#mapProjectionVariants.
CypherListener.prototype.exitMapProjectionVariants = function (ctx) {};

// Enter a parse tree produced by CypherParser#literalEntry.
CypherListener.prototype.enterLiteralEntry = function (ctx) {};

// Exit a parse tree produced by CypherParser#literalEntry.
CypherListener.prototype.exitLiteralEntry = function (ctx) {};

// Enter a parse tree produced by CypherParser#propertySelector.
CypherListener.prototype.enterPropertySelector = function (ctx) {};

// Exit a parse tree produced by CypherParser#propertySelector.
CypherListener.prototype.exitPropertySelector = function (ctx) {};

// Enter a parse tree produced by CypherParser#variableSelector.
CypherListener.prototype.enterVariableSelector = function (ctx) {};

// Exit a parse tree produced by CypherParser#variableSelector.
CypherListener.prototype.exitVariableSelector = function (ctx) {};

// Enter a parse tree produced by CypherParser#allPropertiesSelector.
CypherListener.prototype.enterAllPropertiesSelector = function (ctx) {};

// Exit a parse tree produced by CypherParser#allPropertiesSelector.
CypherListener.prototype.exitAllPropertiesSelector = function (ctx) {};

// Enter a parse tree produced by CypherParser#parameter.
CypherListener.prototype.enterParameter = function (ctx) {};

// Exit a parse tree produced by CypherParser#parameter.
CypherListener.prototype.exitParameter = function (ctx) {};

// Enter a parse tree produced by CypherParser#legacyParameter.
CypherListener.prototype.enterLegacyParameter = function (ctx) {};

// Exit a parse tree produced by CypherParser#legacyParameter.
CypherListener.prototype.exitLegacyParameter = function (ctx) {};

// Enter a parse tree produced by CypherParser#newParameter.
CypherListener.prototype.enterNewParameter = function (ctx) {};

// Exit a parse tree produced by CypherParser#newParameter.
CypherListener.prototype.exitNewParameter = function (ctx) {};

// Enter a parse tree produced by CypherParser#parameterName.
CypherListener.prototype.enterParameterName = function (ctx) {};

// Exit a parse tree produced by CypherParser#parameterName.
CypherListener.prototype.exitParameterName = function (ctx) {};

// Enter a parse tree produced by CypherParser#propertyExpressions.
CypherListener.prototype.enterPropertyExpressions = function (ctx) {};

// Exit a parse tree produced by CypherParser#propertyExpressions.
CypherListener.prototype.exitPropertyExpressions = function (ctx) {};

// Enter a parse tree produced by CypherParser#propertyExpression.
CypherListener.prototype.enterPropertyExpression = function (ctx) {};

// Exit a parse tree produced by CypherParser#propertyExpression.
CypherListener.prototype.exitPropertyExpression = function (ctx) {};

// Enter a parse tree produced by CypherParser#propertyKeys.
CypherListener.prototype.enterPropertyKeys = function (ctx) {};

// Exit a parse tree produced by CypherParser#propertyKeys.
CypherListener.prototype.exitPropertyKeys = function (ctx) {};

// Enter a parse tree produced by CypherParser#propertyKeyName.
CypherListener.prototype.enterPropertyKeyName = function (ctx) {};

// Exit a parse tree produced by CypherParser#propertyKeyName.
CypherListener.prototype.exitPropertyKeyName = function (ctx) {};

// Enter a parse tree produced by CypherParser#integerLiteral.
CypherListener.prototype.enterIntegerLiteral = function (ctx) {};

// Exit a parse tree produced by CypherParser#integerLiteral.
CypherListener.prototype.exitIntegerLiteral = function (ctx) {};

// Enter a parse tree produced by CypherParser#doubleLiteral.
CypherListener.prototype.enterDoubleLiteral = function (ctx) {};

// Exit a parse tree produced by CypherParser#doubleLiteral.
CypherListener.prototype.exitDoubleLiteral = function (ctx) {};

// Enter a parse tree produced by CypherParser#namespace.
CypherListener.prototype.enterNamespace = function (ctx) {};

// Exit a parse tree produced by CypherParser#namespace.
CypherListener.prototype.exitNamespace = function (ctx) {};

// Enter a parse tree produced by CypherParser#leftArrowHead.
CypherListener.prototype.enterLeftArrowHead = function (ctx) {};

// Exit a parse tree produced by CypherParser#leftArrowHead.
CypherListener.prototype.exitLeftArrowHead = function (ctx) {};

// Enter a parse tree produced by CypherParser#rightArrowHead.
CypherListener.prototype.enterRightArrowHead = function (ctx) {};

// Exit a parse tree produced by CypherParser#rightArrowHead.
CypherListener.prototype.exitRightArrowHead = function (ctx) {};

// Enter a parse tree produced by CypherParser#dash.
CypherListener.prototype.enterDash = function (ctx) {};

// Exit a parse tree produced by CypherParser#dash.
CypherListener.prototype.exitDash = function (ctx) {};

// Enter a parse tree produced by CypherParser#symbolicName.
CypherListener.prototype.enterSymbolicName = function (ctx) {};

// Exit a parse tree produced by CypherParser#symbolicName.
CypherListener.prototype.exitSymbolicName = function (ctx) {};

// Enter a parse tree produced by CypherParser#keyword.
CypherListener.prototype.enterKeyword = function (ctx) {};

// Exit a parse tree produced by CypherParser#keyword.
CypherListener.prototype.exitKeyword = function (ctx) {};

exports.CypherListener = CypherListener;

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.15';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array == null ? 0 : array.length,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision && nativeIsFinite(number)) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key === 'constructor' && typeof object[key] === 'function') {
        return;
      }

      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      // The sourceURL gets injected into the source that's eval-ed, so be careful
      // with lookup (in case of e.g. prototype pollution), and strip newlines if any.
      // A newline wouldn't be a valid sourceURL anyway, and it'd enable code injection.
      var sourceURL = '//# sourceURL=' +
        (hasOwnProperty.call(options, 'sourceURL')
          ? (options.sourceURL + '').replace(/[\r\n]/g, ' ')
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      // Like with sourceURL, we take care to not check the option's prototype,
      // as this configuration is a code injection vector.
      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '';
        if (!hasOwnProperty.call(realNames, key)) {
          realNames[key] = [];
        }
        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (true) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
      return _;
    }.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = _)._ = _;
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(this));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(73), __webpack_require__(74)(module)))

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

(function() {
  var PathSeparator, queryIsLastPathSegment;

  PathSeparator = __webpack_require__(24).sep;

  exports.basenameScore = function(string, query, score) {
    var base, depth, index, lastCharacter, segmentCount, slashCount;
    index = string.length - 1;
    while (string[index] === PathSeparator) {
      index--;
    }
    slashCount = 0;
    lastCharacter = index;
    base = null;
    while (index >= 0) {
      if (string[index] === PathSeparator) {
        slashCount++;
        if (base == null) {
          base = string.substring(index + 1, lastCharacter + 1);
        }
      } else if (index === 0) {
        if (lastCharacter < string.length - 1) {
          if (base == null) {
            base = string.substring(0, lastCharacter + 1);
          }
        } else {
          if (base == null) {
            base = string;
          }
        }
      }
      index--;
    }
    if (base === string) {
      score *= 2;
    } else if (base) {
      score += exports.score(base, query);
    }
    segmentCount = slashCount + 1;
    depth = Math.max(1, 10 - segmentCount);
    score *= depth * 0.01;
    return score;
  };

  exports.score = function(string, query) {
    var character, characterScore, indexInQuery, indexInString, lowerCaseIndex, minIndex, queryLength, queryScore, stringLength, totalCharacterScore, upperCaseIndex, _ref;
    if (string === query) {
      return 1;
    }
    if (queryIsLastPathSegment(string, query)) {
      return 1;
    }
    totalCharacterScore = 0;
    queryLength = query.length;
    stringLength = string.length;
    indexInQuery = 0;
    indexInString = 0;
    while (indexInQuery < queryLength) {
      character = query[indexInQuery++];
      lowerCaseIndex = string.indexOf(character.toLowerCase());
      upperCaseIndex = string.indexOf(character.toUpperCase());
      minIndex = Math.min(lowerCaseIndex, upperCaseIndex);
      if (minIndex === -1) {
        minIndex = Math.max(lowerCaseIndex, upperCaseIndex);
      }
      indexInString = minIndex;
      if (indexInString === -1) {
        return 0;
      }
      characterScore = 0.1;
      if (string[indexInString] === character) {
        characterScore += 0.1;
      }
      if (indexInString === 0 || string[indexInString - 1] === PathSeparator) {
        characterScore += 0.8;
      } else if ((_ref = string[indexInString - 1]) === '-' || _ref === '_' || _ref === ' ') {
        characterScore += 0.7;
      }
      string = string.substring(indexInString + 1, stringLength);
      totalCharacterScore += characterScore;
    }
    queryScore = totalCharacterScore / queryLength;
    return ((queryScore * (queryLength / stringLength)) + queryScore) / 2;
  };

  queryIsLastPathSegment = function(string, query) {
    if (string[string.length - query.length - 1] === PathSeparator) {
      return string.lastIndexOf(query) === string.length - query.length;
    }
  };

}).call(this);


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parse = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _antlr = __webpack_require__(9);

var _antlr2 = _interopRequireDefault(_antlr);

var _ReferencesProvider = __webpack_require__(43);

var _CypherTypes = __webpack_require__(1);

var CypherTypes = _interopRequireWildcard(_CypherTypes);

var _CypherParser = __webpack_require__(27);

var _CypherLexer = __webpack_require__(92);

var _ErrorListener = __webpack_require__(44);

var _ReferencesListener = __webpack_require__(93);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var parse = exports.parse = function parse(input) {
  var referencesListener = new _ReferencesListener.ReferencesListener();
  var errorListener = new _ErrorListener.ErrorListener();
  var chars = new _antlr2.default.InputStream(input);
  var lexer = new _CypherLexer.CypherLexer(chars);
  lexer.removeErrorListeners();
  lexer.addErrorListener(errorListener);
  var tokens = new _antlr2.default.CommonTokenStream(lexer);
  var parser = new _CypherParser.CypherParser(tokens);
  parser.buildParseTrees = true;
  parser.removeErrorListeners();
  parser.addErrorListener(errorListener);
  parser.addParseListener(referencesListener);
  var parseTree = parser.cypher();
  var queries = referencesListener.queries,
      indexes = referencesListener.indexes;


  var referencesProviders = CypherTypes.SYMBOLIC_CONTEXTS.reduce(function (acc, t) {
    return _extends({}, acc, _defineProperty({}, t, new _ReferencesProvider.ReferencesProvider(queries, indexes[t])));
  }, {});

  return { parseTree: parseTree, referencesListener: referencesListener, errorListener: errorListener, referencesProviders: referencesProviders };
};

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 * Copyright (c) 2002-2017 "Neo Technology,"
 * Network Engine for Objects in Lund AB [http://neotechnology.com]
 *
 * This file is part of Neo4j.
 *
 * Neo4j is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var ReferencesProvider = exports.ReferencesProvider = function () {
  function ReferencesProvider(queries, index) {
    _classCallCheck(this, ReferencesProvider);

    this.queries = [];
    this.index = {};
    var names = index.names,
        namesByQuery = index.namesByQuery,
        referencesByName = index.referencesByName,
        referencesByQueryAndName = index.referencesByQueryAndName;

    this.queries = queries;
    this.index = {
      names: Object.keys(names),
      namesByQuery: namesByQuery.map(function (q) {
        return Object.keys(q);
      }),
      referencesByName: referencesByName,
      referencesByQueryAndName: referencesByQueryAndName
    };
  }

  _createClass(ReferencesProvider, [{
    key: "getReferences",
    value: function getReferences(name) {
      var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      if (query == null) {
        return this.index.referencesByName[name];
      }
      var pos = this.queries.indexOf(query);
      return (this.index.referencesByQueryAndName[pos] || {})[name];
    }
  }, {
    key: "getNames",
    value: function getNames() {
      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      if (query == null) {
        return this.index.names;
      }
      var pos = this.queries.indexOf(query);
      return this.index.namesByQuery[pos] || [];
    }
  }]);

  return ReferencesProvider;
}();

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ErrorListener = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _antlr = __webpack_require__(9);

var _antlr2 = _interopRequireDefault(_antlr);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2002-2017 "Neo Technology,"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Network Engine for Objects in Lund AB [http://neotechnology.com]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This file is part of Neo4j.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Neo4j is free software: you can redistribute it and/or modify
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * it under the terms of the GNU General Public License as published by
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * the Free Software Foundation, either version 3 of the License, or
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * (at your option) any later version.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This program is distributed in the hope that it will be useful,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * but WITHOUT ANY WARRANTY; without even the implied warranty of
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
eneral Public License for more details.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You should have received a copy of the GNU General Public License
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var ErrorListener = exports.ErrorListener = function (_antlr4$error$ErrorLi) {
  _inherits(ErrorListener, _antlr4$error$ErrorLi);

  function ErrorListener() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ErrorListener);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ErrorListener.__proto__ || Object.getPrototypeOf(ErrorListener)).call.apply(_ref, [this].concat(args))), _this), _this.errors = [], _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ErrorListener, [{
    key: "syntaxError",


    // eslint-disable-next-line no-unused-vars
    value: function syntaxError(rec, sym, line, col, msg, e) {
      if (msg === "mismatched input '<EOF>' expecting {';', SP}") {
        // suppress error about missing semicolon at the end of a query
        return;
      }
      if (msg === "missing ';' at '<EOF>'") {
        return;
      }
      if (msg === "mismatched input '<EOF>' expecting {':', CYPHER, EXPLAIN, PROFILE, USING, CREATE, DROP, LOAD, WITH, OPTIONAL, MATCH, UNWIND, MERGE, SET, DETACH, DELETE, REMOVE, FOREACH, RETURN, START, CALL}") {
        return;
      }
      this.errors.push({ line: line, col: col, msg: msg });
    }
  }]);

  return ErrorListener;
}(_antlr2.default.error.ErrorListener);

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Generated from cypher-editor-support/src/_generated.simple/Cypher.g4 by ANTLR 4.7
// jshint ignore: start
var antlr4 = __webpack_require__(9);

// This class defines a complete listener for a parse tree produced by CypherParser.
function CypherListener() {
	antlr4.tree.ParseTreeListener.call(this);
	return this;
}

CypherListener.prototype = Object.create(antlr4.tree.ParseTreeListener.prototype);
CypherListener.prototype.constructor = CypherListener;

// Enter a parse tree produced by CypherParser#raw.
CypherListener.prototype.enterRaw = function (ctx) {};

// Exit a parse tree produced by CypherParser#raw.
CypherListener.prototype.exitRaw = function (ctx) {};

// Enter a parse tree produced by CypherParser#cypher.
CypherListener.prototype.enterCypher = function (ctx) {};

// Exit a parse tree produced by CypherParser#cypher.
CypherListener.prototype.exitCypher = function (ctx) {};

// Enter a parse tree produced by CypherParser#cypherPart.
CypherListener.prototype.enterCypherPart = function (ctx) {};

// Exit a parse tree produced by CypherParser#cypherPart.
CypherListener.prototype.exitCypherPart = function (ctx) {};

// Enter a parse tree produced by CypherParser#cypherConsoleCommand.
CypherListener.prototype.enterCypherConsoleCommand = function (ctx) {};

// Exit a parse tree produced by CypherParser#cypherConsoleCommand.
CypherListener.prototype.exitCypherConsoleCommand = function (ctx) {};

// Enter a parse tree produced by CypherParser#cypherConsoleCommandName.
CypherListener.prototype.enterCypherConsoleCommandName = function (ctx) {};

// Exit a parse tree produced by CypherParser#cypherConsoleCommandName.
CypherListener.prototype.exitCypherConsoleCommandName = function (ctx) {};

// Enter a parse tree produced by CypherParser#cypherConsoleCommandParameters.
CypherListener.prototype.enterCypherConsoleCommandParameters = function (ctx) {};

// Exit a parse tree produced by CypherParser#cypherConsoleCommandParameters.
CypherListener.prototype.exitCypherConsoleCommandParameters = function (ctx) {};

// Enter a parse tree produced by CypherParser#cypherConsoleCommandParameter.
CypherListener.prototype.enterCypherConsoleCommandParameter = function (ctx) {};

// Exit a parse tree produced by CypherParser#cypherConsoleCommandParameter.
CypherListener.prototype.exitCypherConsoleCommandParameter = function (ctx) {};

// Enter a parse tree produced by CypherParser#arrowExpression.
CypherListener.prototype.enterArrowExpression = function (ctx) {};

// Exit a parse tree produced by CypherParser#arrowExpression.
CypherListener.prototype.exitArrowExpression = function (ctx) {};

// Enter a parse tree produced by CypherParser#url.
CypherListener.prototype.enterUrl = function (ctx) {};

// Exit a parse tree produced by CypherParser#url.
CypherListener.prototype.exitUrl = function (ctx) {};

// Enter a parse tree produced by CypherParser#uri.
CypherListener.prototype.enterUri = function (ctx) {};

// Exit a parse tree produced by CypherParser#uri.
CypherListener.prototype.exitUri = function (ctx) {};

// Enter a parse tree produced by CypherParser#scheme.
CypherListener.prototype.enterScheme = function (ctx) {};

// Exit a parse tree produced by CypherParser#scheme.
CypherListener.prototype.exitScheme = function (ctx) {};

// Enter a parse tree produced by CypherParser#host.
CypherListener.prototype.enterHost = function (ctx) {};

// Exit a parse tree produced by CypherParser#host.
CypherListener.prototype.exitHost = function (ctx) {};

// Enter a parse tree produced by CypherParser#hostname.
CypherListener.prototype.enterHostname = function (ctx) {};

// Exit a parse tree produced by CypherParser#hostname.
CypherListener.prototype.exitHostname = function (ctx) {};

// Enter a parse tree produced by CypherParser#hostnumber.
CypherListener.prototype.enterHostnumber = function (ctx) {};

// Exit a parse tree produced by CypherParser#hostnumber.
CypherListener.prototype.exitHostnumber = function (ctx) {};

// Enter a parse tree produced by CypherParser#port.
CypherListener.prototype.enterPort = function (ctx) {};

// Exit a parse tree produced by CypherParser#port.
CypherListener.prototype.exitPort = function (ctx) {};

// Enter a parse tree produced by CypherParser#path.
CypherListener.prototype.enterPath = function (ctx) {};

// Exit a parse tree produced by CypherParser#path.
CypherListener.prototype.exitPath = function (ctx) {};

// Enter a parse tree produced by CypherParser#user.
CypherListener.prototype.enterUser = function (ctx) {};

// Exit a parse tree produced by CypherParser#user.
CypherListener.prototype.exitUser = function (ctx) {};

// Enter a parse tree produced by CypherParser#login.
CypherListener.prototype.enterLogin = function (ctx) {};

// Exit a parse tree produced by CypherParser#login.
CypherListener.prototype.exitLogin = function (ctx) {};

// Enter a parse tree produced by CypherParser#password.
CypherListener.prototype.enterPassword = function (ctx) {};

// Exit a parse tree produced by CypherParser#password.
CypherListener.prototype.exitPassword = function (ctx) {};

// Enter a parse tree produced by CypherParser#frag.
CypherListener.prototype.enterFrag = function (ctx) {};

// Exit a parse tree produced by CypherParser#frag.
CypherListener.prototype.exitFrag = function (ctx) {};

// Enter a parse tree produced by CypherParser#urlQuery.
CypherListener.prototype.enterUrlQuery = function (ctx) {};

// Exit a parse tree produced by CypherParser#urlQuery.
CypherListener.prototype.exitUrlQuery = function (ctx) {};

// Enter a parse tree produced by CypherParser#search.
CypherListener.prototype.enterSearch = function (ctx) {};

// Exit a parse tree produced by CypherParser#search.
CypherListener.prototype.exitSearch = function (ctx) {};

// Enter a parse tree produced by CypherParser#searchparameter.
CypherListener.prototype.enterSearchparameter = function (ctx) {};

// Exit a parse tree produced by CypherParser#searchparameter.
CypherListener.prototype.exitSearchparameter = function (ctx) {};

// Enter a parse tree produced by CypherParser#string.
CypherListener.prototype.enterString = function (ctx) {};

// Exit a parse tree produced by CypherParser#string.
CypherListener.prototype.exitString = function (ctx) {};

// Enter a parse tree produced by CypherParser#urlDigits.
CypherListener.prototype.enterUrlDigits = function (ctx) {};

// Exit a parse tree produced by CypherParser#urlDigits.
CypherListener.prototype.exitUrlDigits = function (ctx) {};

// Enter a parse tree produced by CypherParser#json.
CypherListener.prototype.enterJson = function (ctx) {};

// Exit a parse tree produced by CypherParser#json.
CypherListener.prototype.exitJson = function (ctx) {};

// Enter a parse tree produced by CypherParser#obj.
CypherListener.prototype.enterObj = function (ctx) {};

// Exit a parse tree produced by CypherParser#obj.
CypherListener.prototype.exitObj = function (ctx) {};

// Enter a parse tree produced by CypherParser#pair.
CypherListener.prototype.enterPair = function (ctx) {};

// Exit a parse tree produced by CypherParser#pair.
CypherListener.prototype.exitPair = function (ctx) {};

// Enter a parse tree produced by CypherParser#array.
CypherListener.prototype.enterArray = function (ctx) {};

// Exit a parse tree produced by CypherParser#array.
CypherListener.prototype.exitArray = function (ctx) {};

// Enter a parse tree produced by CypherParser#value.
CypherListener.prototype.enterValue = function (ctx) {};

// Exit a parse tree produced by CypherParser#value.
CypherListener.prototype.exitValue = function (ctx) {};

// Enter a parse tree produced by CypherParser#keyValueLiteral.
CypherListener.prototype.enterKeyValueLiteral = function (ctx) {};

// Exit a parse tree produced by CypherParser#keyValueLiteral.
CypherListener.prototype.exitKeyValueLiteral = function (ctx) {};

// Enter a parse tree produced by CypherParser#commandPath.
CypherListener.prototype.enterCommandPath = function (ctx) {};

// Exit a parse tree produced by CypherParser#commandPath.
CypherListener.prototype.exitCommandPath = function (ctx) {};

// Enter a parse tree produced by CypherParser#subCommand.
CypherListener.prototype.enterSubCommand = function (ctx) {};

// Exit a parse tree produced by CypherParser#subCommand.
CypherListener.prototype.exitSubCommand = function (ctx) {};

// Enter a parse tree produced by CypherParser#cypherQuery.
CypherListener.prototype.enterCypherQuery = function (ctx) {};

// Exit a parse tree produced by CypherParser#cypherQuery.
CypherListener.prototype.exitCypherQuery = function (ctx) {};

// Enter a parse tree produced by CypherParser#queryOptions.
CypherListener.prototype.enterQueryOptions = function (ctx) {};

// Exit a parse tree produced by CypherParser#queryOptions.
CypherListener.prototype.exitQueryOptions = function (ctx) {};

// Enter a parse tree produced by CypherParser#anyCypherOption.
CypherListener.prototype.enterAnyCypherOption = function (ctx) {};

// Exit a parse tree produced by CypherParser#anyCypherOption.
CypherListener.prototype.exitAnyCypherOption = function (ctx) {};

// Enter a parse tree produced by CypherParser#cypherOption.
CypherListener.prototype.enterCypherOption = function (ctx) {};

// Exit a parse tree produced by CypherParser#cypherOption.
CypherListener.prototype.exitCypherOption = function (ctx) {};

// Enter a parse tree produced by CypherParser#versionNumber.
CypherListener.prototype.enterVersionNumber = function (ctx) {};

// Exit a parse tree produced by CypherParser#versionNumber.
CypherListener.prototype.exitVersionNumber = function (ctx) {};

// Enter a parse tree produced by CypherParser#explain.
CypherListener.prototype.enterExplain = function (ctx) {};

// Exit a parse tree produced by CypherParser#explain.
CypherListener.prototype.exitExplain = function (ctx) {};

// Enter a parse tree produced by CypherParser#profile.
CypherListener.prototype.enterProfile = function (ctx) {};

// Exit a parse tree produced by CypherParser#profile.
CypherListener.prototype.exitProfile = function (ctx) {};

// Enter a parse tree produced by CypherParser#configurationOption.
CypherListener.prototype.enterConfigurationOption = function (ctx) {};

// Exit a parse tree produced by CypherParser#configurationOption.
CypherListener.prototype.exitConfigurationOption = function (ctx) {};

// Enter a parse tree produced by CypherParser#statement.
CypherListener.prototype.enterStatement = function (ctx) {};

// Exit a parse tree produced by CypherParser#statement.
CypherListener.prototype.exitStatement = function (ctx) {};

// Enter a parse tree produced by CypherParser#query.
CypherListener.prototype.enterQuery = function (ctx) {};

// Exit a parse tree produced by CypherParser#query.
CypherListener.prototype.exitQuery = function (ctx) {};

// Enter a parse tree produced by CypherParser#regularQuery.
CypherListener.prototype.enterRegularQuery = function (ctx) {};

// Exit a parse tree produced by CypherParser#regularQuery.
CypherListener.prototype.exitRegularQuery = function (ctx) {};

// Enter a parse tree produced by CypherParser#bulkImportQuery.
CypherListener.prototype.enterBulkImportQuery = function (ctx) {};

// Exit a parse tree produced by CypherParser#bulkImportQuery.
CypherListener.prototype.exitBulkImportQuery = function (ctx) {};

// Enter a parse tree produced by CypherParser#singleQuery.
CypherListener.prototype.enterSingleQuery = function (ctx) {};

// Exit a parse tree produced by CypherParser#singleQuery.
CypherListener.prototype.exitSingleQuery = function (ctx) {};

// Enter a parse tree produced by CypherParser#periodicCommitHint.
CypherListener.prototype.enterPeriodicCommitHint = function (ctx) {};

// Exit a parse tree produced by CypherParser#periodicCommitHint.
CypherListener.prototype.exitPeriodicCommitHint = function (ctx) {};

// Enter a parse tree produced by CypherParser#loadCSVQuery.
CypherListener.prototype.enterLoadCSVQuery = function (ctx) {};

// Exit a parse tree produced by CypherParser#loadCSVQuery.
CypherListener.prototype.exitLoadCSVQuery = function (ctx) {};

// Enter a parse tree produced by CypherParser#union.
CypherListener.prototype.enterUnion = function (ctx) {};

// Exit a parse tree produced by CypherParser#union.
CypherListener.prototype.exitUnion = function (ctx) {};

// Enter a parse tree produced by CypherParser#clause.
CypherListener.prototype.enterClause = function (ctx) {};

// Exit a parse tree produced by CypherParser#clause.
CypherListener.prototype.exitClause = function (ctx) {};

// Enter a parse tree produced by CypherParser#command.
CypherListener.prototype.enterCommand = function (ctx) {};

// Exit a parse tree produced by CypherParser#command.
CypherListener.prototype.exitCommand = function (ctx) {};

// Enter a parse tree produced by CypherParser#createUniqueConstraint.
CypherListener.prototype.enterCreateUniqueConstraint = function (ctx) {};

// Exit a parse tree produced by CypherParser#createUniqueConstraint.
CypherListener.prototype.exitCreateUniqueConstraint = function (ctx) {};

// Enter a parse tree produced by CypherParser#createNodeKeyConstraint.
CypherListener.prototype.enterCreateNodeKeyConstraint = function (ctx) {};

// Exit a parse tree produced by CypherParser#createNodeKeyConstraint.
CypherListener.prototype.exitCreateNodeKeyConstraint = function (ctx) {};

// Enter a parse tree produced by CypherParser#createNodePropertyExistenceConstraint.
CypherListener.prototype.enterCreateNodePropertyExistenceConstraint = function (ctx) {};

// Exit a parse tree produced by CypherParser#createNodePropertyExistenceConstraint.
CypherListener.prototype.exitCreateNodePropertyExistenceConstraint = function (ctx) {};

// Enter a parse tree produced by CypherParser#createRelationshipPropertyExistenceConstraint.
CypherListener.prototype.enterCreateRelationshipPropertyExistenceConstraint = function (ctx) {};

// Exit a parse tree produced by CypherParser#createRelationshipPropertyExistenceConstraint.
CypherListener.prototype.exitCreateRelationshipPropertyExistenceConstraint = function (ctx) {};

// Enter a parse tree produced by CypherParser#createIndex.
CypherListener.prototype.enterCreateIndex = function (ctx) {};

// Exit a parse tree produced by CypherParser#createIndex.
CypherListener.prototype.exitCreateIndex = function (ctx) {};

// Enter a parse tree produced by CypherParser#dropUniqueConstraint.
CypherListener.prototype.enterDropUniqueConstraint = function (ctx) {};

// Exit a parse tree produced by CypherParser#dropUniqueConstraint.
CypherListener.prototype.exitDropUniqueConstraint = function (ctx) {};

// Enter a parse tree produced by CypherParser#dropNodeKeyConstraint.
CypherListener.prototype.enterDropNodeKeyConstraint = function (ctx) {};

// Exit a parse tree produced by CypherParser#dropNodeKeyConstraint.
CypherListener.prototype.exitDropNodeKeyConstraint = function (ctx) {};

// Enter a parse tree produced by CypherParser#dropNodePropertyExistenceConstraint.
CypherListener.prototype.enterDropNodePropertyExistenceConstraint = function (ctx) {};

// Exit a parse tree produced by CypherParser#dropNodePropertyExistenceConstraint.
CypherListener.prototype.exitDropNodePropertyExistenceConstraint = function (ctx) {};

// Enter a parse tree produced by CypherParser#dropRelationshipPropertyExistenceConstraint.
CypherListener.prototype.enterDropRelationshipPropertyExistenceConstraint = function (ctx) {};

// Exit a parse tree produced by CypherParser#dropRelationshipPropertyExistenceConstraint.
CypherListener.prototype.exitDropRelationshipPropertyExistenceConstraint = function (ctx) {};

// Enter a parse tree produced by CypherParser#dropIndex.
CypherListener.prototype.enterDropIndex = function (ctx) {};

// Exit a parse tree produced by CypherParser#dropIndex.
CypherListener.prototype.exitDropIndex = function (ctx) {};

// Enter a parse tree produced by CypherParser#index.
CypherListener.prototype.enterIndex = function (ctx) {};

// Exit a parse tree produced by CypherParser#index.
CypherListener.prototype.exitIndex = function (ctx) {};

// Enter a parse tree produced by CypherParser#uniqueConstraint.
CypherListener.prototype.enterUniqueConstraint = function (ctx) {};

// Exit a parse tree produced by CypherParser#uniqueConstraint.
CypherListener.prototype.exitUniqueConstraint = function (ctx) {};

// Enter a parse tree produced by CypherParser#nodeKeyConstraint.
CypherListener.prototype.enterNodeKeyConstraint = function (ctx) {};

// Exit a parse tree produced by CypherParser#nodeKeyConstraint.
CypherListener.prototype.exitNodeKeyConstraint = function (ctx) {};

// Enter a parse tree produced by CypherParser#nodePropertyExistenceConstraint.
CypherListener.prototype.enterNodePropertyExistenceConstraint = function (ctx) {};

// Exit a parse tree produced by CypherParser#nodePropertyExistenceConstraint.
CypherListener.prototype.exitNodePropertyExistenceConstraint = function (ctx) {};

// Enter a parse tree produced by CypherParser#relationshipPropertyExistenceConstraint.
CypherListener.prototype.enterRelationshipPropertyExistenceConstraint = function (ctx) {};

// Exit a parse tree produced by CypherParser#relationshipPropertyExistenceConstraint.
CypherListener.prototype.exitRelationshipPropertyExistenceConstraint = function (ctx) {};

// Enter a parse tree produced by CypherParser#relationshipPatternSyntax.
CypherListener.prototype.enterRelationshipPatternSyntax = function (ctx) {};

// Exit a parse tree produced by CypherParser#relationshipPatternSyntax.
CypherListener.prototype.exitRelationshipPatternSyntax = function (ctx) {};

// Enter a parse tree produced by CypherParser#loadCSVClause.
CypherListener.prototype.enterLoadCSVClause = function (ctx) {};

// Exit a parse tree produced by CypherParser#loadCSVClause.
CypherListener.prototype.exitLoadCSVClause = function (ctx) {};

// Enter a parse tree produced by CypherParser#matchClause.
CypherListener.prototype.enterMatchClause = function (ctx) {};

// Exit a parse tree produced by CypherParser#matchClause.
CypherListener.prototype.exitMatchClause = function (ctx) {};

// Enter a parse tree produced by CypherParser#unwindClause.
CypherListener.prototype.enterUnwindClause = function (ctx) {};

// Exit a parse tree produced by CypherParser#unwindClause.
CypherListener.prototype.exitUnwindClause = function (ctx) {};

// Enter a parse tree produced by CypherParser#mergeClause.
CypherListener.prototype.enterMergeClause = function (ctx) {};

// Exit a parse tree produced by CypherParser#mergeClause.
CypherListener.prototype.exitMergeClause = function (ctx) {};

// Enter a parse tree produced by CypherParser#mergeAction.
CypherListener.prototype.enterMergeAction = function (ctx) {};

// Exit a parse tree produced by CypherParser#mergeAction.
CypherListener.prototype.exitMergeAction = function (ctx) {};

// Enter a parse tree produced by CypherParser#createClause.
CypherListener.prototype.enterCreateClause = function (ctx) {};

// Exit a parse tree produced by CypherParser#createClause.
CypherListener.prototype.exitCreateClause = function (ctx) {};

// Enter a parse tree produced by CypherParser#createUniqueClause.
CypherListener.prototype.enterCreateUniqueClause = function (ctx) {};

// Exit a parse tree produced by CypherParser#createUniqueClause.
CypherListener.prototype.exitCreateUniqueClause = function (ctx) {};

// Enter a parse tree produced by CypherParser#setClause.
CypherListener.prototype.enterSetClause = function (ctx) {};

// Exit a parse tree produced by CypherParser#setClause.
CypherListener.prototype.exitSetClause = function (ctx) {};

// Enter a parse tree produced by CypherParser#setItem.
CypherListener.prototype.enterSetItem = function (ctx) {};

// Exit a parse tree produced by CypherParser#setItem.
CypherListener.prototype.exitSetItem = function (ctx) {};

// Enter a parse tree produced by CypherParser#deleteClause.
CypherListener.prototype.enterDeleteClause = function (ctx) {};

// Exit a parse tree produced by CypherParser#deleteClause.
CypherListener.prototype.exitDeleteClause = function (ctx) {};

// Enter a parse tree produced by CypherParser#removeClause.
CypherListener.prototype.enterRemoveClause = function (ctx) {};

// Exit a parse tree produced by CypherParser#removeClause.
CypherListener.prototype.exitRemoveClause = function (ctx) {};

// Enter a parse tree produced by CypherParser#removeItem.
CypherListener.prototype.enterRemoveItem = function (ctx) {};

// Exit a parse tree produced by CypherParser#removeItem.
CypherListener.prototype.exitRemoveItem = function (ctx) {};

// Enter a parse tree produced by CypherParser#foreachClause.
CypherListener.prototype.enterForeachClause = function (ctx) {};

// Exit a parse tree produced by CypherParser#foreachClause.
CypherListener.prototype.exitForeachClause = function (ctx) {};

// Enter a parse tree produced by CypherParser#withClause.
CypherListener.prototype.enterWithClause = function (ctx) {};

// Exit a parse tree produced by CypherParser#withClause.
CypherListener.prototype.exitWithClause = function (ctx) {};

// Enter a parse tree produced by CypherParser#returnClause.
CypherListener.prototype.enterReturnClause = function (ctx) {};

// Exit a parse tree produced by CypherParser#returnClause.
CypherListener.prototype.exitReturnClause = function (ctx) {};

// Enter a parse tree produced by CypherParser#returnBody.
CypherListener.prototype.enterReturnBody = function (ctx) {};

// Exit a parse tree produced by CypherParser#returnBody.
CypherListener.prototype.exitReturnBody = function (ctx) {};

// Enter a parse tree produced by CypherParser#func.
CypherListener.prototype.enterFunc = function (ctx) {};

// Exit a parse tree produced by CypherParser#func.
CypherListener.prototype.exitFunc = function (ctx) {};

// Enter a parse tree produced by CypherParser#returnItems.
CypherListener.prototype.enterReturnItems = function (ctx) {};

// Exit a parse tree produced by CypherParser#returnItems.
CypherListener.prototype.exitReturnItems = function (ctx) {};

// Enter a parse tree produced by CypherParser#returnItem.
CypherListener.prototype.enterReturnItem = function (ctx) {};

// Exit a parse tree produced by CypherParser#returnItem.
CypherListener.prototype.exitReturnItem = function (ctx) {};

// Enter a parse tree produced by CypherParser#call.
CypherListener.prototype.enterCall = function (ctx) {};

// Exit a parse tree produced by CypherParser#call.
CypherListener.prototype.exitCall = function (ctx) {};

// Enter a parse tree produced by CypherParser#procedureInvocation.
CypherListener.prototype.enterProcedureInvocation = function (ctx) {};

// Exit a parse tree produced by CypherParser#procedureInvocation.
CypherListener.prototype.exitProcedureInvocation = function (ctx) {};

// Enter a parse tree produced by CypherParser#procedureInvocationBody.
CypherListener.prototype.enterProcedureInvocationBody = function (ctx) {};

// Exit a parse tree produced by CypherParser#procedureInvocationBody.
CypherListener.prototype.exitProcedureInvocationBody = function (ctx) {};

// Enter a parse tree produced by CypherParser#procedureArguments.
CypherListener.prototype.enterProcedureArguments = function (ctx) {};

// Exit a parse tree produced by CypherParser#procedureArguments.
CypherListener.prototype.exitProcedureArguments = function (ctx) {};

// Enter a parse tree produced by CypherParser#procedureResults.
CypherListener.prototype.enterProcedureResults = function (ctx) {};

// Exit a parse tree produced by CypherParser#procedureResults.
CypherListener.prototype.exitProcedureResults = function (ctx) {};

// Enter a parse tree produced by CypherParser#procedureResult.
CypherListener.prototype.enterProcedureResult = function (ctx) {};

// Exit a parse tree produced by CypherParser#procedureResult.
CypherListener.prototype.exitProcedureResult = function (ctx) {};

// Enter a parse tree produced by CypherParser#aliasedProcedureResult.
CypherListener.prototype.enterAliasedProcedureResult = function (ctx) {};

// Exit a parse tree produced by CypherParser#aliasedProcedureResult.
CypherListener.prototype.exitAliasedProcedureResult = function (ctx) {};

// Enter a parse tree produced by CypherParser#simpleProcedureResult.
CypherListener.prototype.enterSimpleProcedureResult = function (ctx) {};

// Exit a parse tree produced by CypherParser#simpleProcedureResult.
CypherListener.prototype.exitSimpleProcedureResult = function (ctx) {};

// Enter a parse tree produced by CypherParser#procedureOutput.
CypherListener.prototype.enterProcedureOutput = function (ctx) {};

// Exit a parse tree produced by CypherParser#procedureOutput.
CypherListener.prototype.exitProcedureOutput = function (ctx) {};

// Enter a parse tree produced by CypherParser#order.
CypherListener.prototype.enterOrder = function (ctx) {};

// Exit a parse tree produced by CypherParser#order.
CypherListener.prototype.exitOrder = function (ctx) {};

// Enter a parse tree produced by CypherParser#skip.
CypherListener.prototype.enterSkip = function (ctx) {};

// Exit a parse tree produced by CypherParser#skip.
CypherListener.prototype.exitSkip = function (ctx) {};

// Enter a parse tree produced by CypherParser#limit.
CypherListener.prototype.enterLimit = function (ctx) {};

// Exit a parse tree produced by CypherParser#limit.
CypherListener.prototype.exitLimit = function (ctx) {};

// Enter a parse tree produced by CypherParser#sortItem.
CypherListener.prototype.enterSortItem = function (ctx) {};

// Exit a parse tree produced by CypherParser#sortItem.
CypherListener.prototype.exitSortItem = function (ctx) {};

// Enter a parse tree produced by CypherParser#hint.
CypherListener.prototype.enterHint = function (ctx) {};

// Exit a parse tree produced by CypherParser#hint.
CypherListener.prototype.exitHint = function (ctx) {};

// Enter a parse tree produced by CypherParser#startClause.
CypherListener.prototype.enterStartClause = function (ctx) {};

// Exit a parse tree produced by CypherParser#startClause.
CypherListener.prototype.exitStartClause = function (ctx) {};

// Enter a parse tree produced by CypherParser#startPoint.
CypherListener.prototype.enterStartPoint = function (ctx) {};

// Exit a parse tree produced by CypherParser#startPoint.
CypherListener.prototype.exitStartPoint = function (ctx) {};

// Enter a parse tree produced by CypherParser#lookup.
CypherListener.prototype.enterLookup = function (ctx) {};

// Exit a parse tree produced by CypherParser#lookup.
CypherListener.prototype.exitLookup = function (ctx) {};

// Enter a parse tree produced by CypherParser#nodeLookup.
CypherListener.prototype.enterNodeLookup = function (ctx) {};

// Exit a parse tree produced by CypherParser#nodeLookup.
CypherListener.prototype.exitNodeLookup = function (ctx) {};

// Enter a parse tree produced by CypherParser#relationshipLookup.
CypherListener.prototype.enterRelationshipLookup = function (ctx) {};

// Exit a parse tree produced by CypherParser#relationshipLookup.
CypherListener.prototype.exitRelationshipLookup = function (ctx) {};

// Enter a parse tree produced by CypherParser#identifiedIndexLookup.
CypherListener.prototype.enterIdentifiedIndexLookup = function (ctx) {};

// Exit a parse tree produced by CypherParser#identifiedIndexLookup.
CypherListener.prototype.exitIdentifiedIndexLookup = function (ctx) {};

// Enter a parse tree produced by CypherParser#indexQuery.
CypherListener.prototype.enterIndexQuery = function (ctx) {};

// Exit a parse tree produced by CypherParser#indexQuery.
CypherListener.prototype.exitIndexQuery = function (ctx) {};

// Enter a parse tree produced by CypherParser#idLookup.
CypherListener.prototype.enterIdLookup = function (ctx) {};

// Exit a parse tree produced by CypherParser#idLookup.
CypherListener.prototype.exitIdLookup = function (ctx) {};

// Enter a parse tree produced by CypherParser#literalIds.
CypherListener.prototype.enterLiteralIds = function (ctx) {};

// Exit a parse tree produced by CypherParser#literalIds.
CypherListener.prototype.exitLiteralIds = function (ctx) {};

// Enter a parse tree produced by CypherParser#where.
CypherListener.prototype.enterWhere = function (ctx) {};

// Exit a parse tree produced by CypherParser#where.
CypherListener.prototype.exitWhere = function (ctx) {};

// Enter a parse tree produced by CypherParser#pattern.
CypherListener.prototype.enterPattern = function (ctx) {};

// Exit a parse tree produced by CypherParser#pattern.
CypherListener.prototype.exitPattern = function (ctx) {};

// Enter a parse tree produced by CypherParser#patternPart.
CypherListener.prototype.enterPatternPart = function (ctx) {};

// Exit a parse tree produced by CypherParser#patternPart.
CypherListener.prototype.exitPatternPart = function (ctx) {};

// Enter a parse tree produced by CypherParser#anonymousPatternPart.
CypherListener.prototype.enterAnonymousPatternPart = function (ctx) {};

// Exit a parse tree produced by CypherParser#anonymousPatternPart.
CypherListener.prototype.exitAnonymousPatternPart = function (ctx) {};

// Enter a parse tree produced by CypherParser#patternElement.
CypherListener.prototype.enterPatternElement = function (ctx) {};

// Exit a parse tree produced by CypherParser#patternElement.
CypherListener.prototype.exitPatternElement = function (ctx) {};

// Enter a parse tree produced by CypherParser#nodePattern.
CypherListener.prototype.enterNodePattern = function (ctx) {};

// Exit a parse tree produced by CypherParser#nodePattern.
CypherListener.prototype.exitNodePattern = function (ctx) {};

// Enter a parse tree produced by CypherParser#patternElementChain.
CypherListener.prototype.enterPatternElementChain = function (ctx) {};

// Exit a parse tree produced by CypherParser#patternElementChain.
CypherListener.prototype.exitPatternElementChain = function (ctx) {};

// Enter a parse tree produced by CypherParser#relationshipPattern.
CypherListener.prototype.enterRelationshipPattern = function (ctx) {};

// Exit a parse tree produced by CypherParser#relationshipPattern.
CypherListener.prototype.exitRelationshipPattern = function (ctx) {};

// Enter a parse tree produced by CypherParser#relationshipPatternStart.
CypherListener.prototype.enterRelationshipPatternStart = function (ctx) {};

// Exit a parse tree produced by CypherParser#relationshipPatternStart.
CypherListener.prototype.exitRelationshipPatternStart = function (ctx) {};

// Enter a parse tree produced by CypherParser#relationshipPatternEnd.
CypherListener.prototype.enterRelationshipPatternEnd = function (ctx) {};

// Exit a parse tree produced by CypherParser#relationshipPatternEnd.
CypherListener.prototype.exitRelationshipPatternEnd = function (ctx) {};

// Enter a parse tree produced by CypherParser#relationshipDetail.
CypherListener.prototype.enterRelationshipDetail = function (ctx) {};

// Exit a parse tree produced by CypherParser#relationshipDetail.
CypherListener.prototype.exitRelationshipDetail = function (ctx) {};

// Enter a parse tree produced by CypherParser#properties.
CypherListener.prototype.enterProperties = function (ctx) {};

// Exit a parse tree produced by CypherParser#properties.
CypherListener.prototype.exitProperties = function (ctx) {};

// Enter a parse tree produced by CypherParser#relType.
CypherListener.prototype.enterRelType = function (ctx) {};

// Exit a parse tree produced by CypherParser#relType.
CypherListener.prototype.exitRelType = function (ctx) {};

// Enter a parse tree produced by CypherParser#relationshipTypes.
CypherListener.prototype.enterRelationshipTypes = function (ctx) {};

// Exit a parse tree produced by CypherParser#relationshipTypes.
CypherListener.prototype.exitRelationshipTypes = function (ctx) {};

// Enter a parse tree produced by CypherParser#relationshipType.
CypherListener.prototype.enterRelationshipType = function (ctx) {};

// Exit a parse tree produced by CypherParser#relationshipType.
CypherListener.prototype.exitRelationshipType = function (ctx) {};

// Enter a parse tree produced by CypherParser#relationshipTypeOptionalColon.
CypherListener.prototype.enterRelationshipTypeOptionalColon = function (ctx) {};

// Exit a parse tree produced by CypherParser#relationshipTypeOptionalColon.
CypherListener.prototype.exitRelationshipTypeOptionalColon = function (ctx) {};

// Enter a parse tree produced by CypherParser#nodeLabels.
CypherListener.prototype.enterNodeLabels = function (ctx) {};

// Exit a parse tree produced by CypherParser#nodeLabels.
CypherListener.prototype.exitNodeLabels = function (ctx) {};

// Enter a parse tree produced by CypherParser#nodeLabel.
CypherListener.prototype.enterNodeLabel = function (ctx) {};

// Exit a parse tree produced by CypherParser#nodeLabel.
CypherListener.prototype.exitNodeLabel = function (ctx) {};

// Enter a parse tree produced by CypherParser#rangeLiteral.
CypherListener.prototype.enterRangeLiteral = function (ctx) {};

// Exit a parse tree produced by CypherParser#rangeLiteral.
CypherListener.prototype.exitRangeLiteral = function (ctx) {};

// Enter a parse tree produced by CypherParser#labelName.
CypherListener.prototype.enterLabelName = function (ctx) {};

// Exit a parse tree produced by CypherParser#labelName.
CypherListener.prototype.exitLabelName = function (ctx) {};

// Enter a parse tree produced by CypherParser#relTypeName.
CypherListener.prototype.enterRelTypeName = function (ctx) {};

// Exit a parse tree produced by CypherParser#relTypeName.
CypherListener.prototype.exitRelTypeName = function (ctx) {};

// Enter a parse tree produced by CypherParser#expression.
CypherListener.prototype.enterExpression = function (ctx) {};

// Exit a parse tree produced by CypherParser#expression.
CypherListener.prototype.exitExpression = function (ctx) {};

// Enter a parse tree produced by CypherParser#orExpression.
CypherListener.prototype.enterOrExpression = function (ctx) {};

// Exit a parse tree produced by CypherParser#orExpression.
CypherListener.prototype.exitOrExpression = function (ctx) {};

// Enter a parse tree produced by CypherParser#xorExpression.
CypherListener.prototype.enterXorExpression = function (ctx) {};

// Exit a parse tree produced by CypherParser#xorExpression.
CypherListener.prototype.exitXorExpression = function (ctx) {};

// Enter a parse tree produced by CypherParser#andExpression.
CypherListener.prototype.enterAndExpression = function (ctx) {};

// Exit a parse tree produced by CypherParser#andExpression.
CypherListener.prototype.exitAndExpression = function (ctx) {};

// Enter a parse tree produced by CypherParser#notExpression.
CypherListener.prototype.enterNotExpression = function (ctx) {};

// Exit a parse tree produced by CypherParser#notExpression.
CypherListener.prototype.exitNotExpression = function (ctx) {};

// Enter a parse tree produced by CypherParser#comparisonExpression.
CypherListener.prototype.enterComparisonExpression = function (ctx) {};

// Exit a parse tree produced by CypherParser#comparisonExpression.
CypherListener.prototype.exitComparisonExpression = function (ctx) {};

// Enter a parse tree produced by CypherParser#addOrSubtractExpression.
CypherListener.prototype.enterAddOrSubtractExpression = function (ctx) {};

// Exit a parse tree produced by CypherParser#addOrSubtractExpression.
CypherListener.prototype.exitAddOrSubtractExpression = function (ctx) {};

// Enter a parse tree produced by CypherParser#multiplyDivideModuloExpression.
CypherListener.prototype.enterMultiplyDivideModuloExpression = function (ctx) {};

// Exit a parse tree produced by CypherParser#multiplyDivideModuloExpression.
CypherListener.prototype.exitMultiplyDivideModuloExpression = function (ctx) {};

// Enter a parse tree produced by CypherParser#powerOfExpression.
CypherListener.prototype.enterPowerOfExpression = function (ctx) {};

// Exit a parse tree produced by CypherParser#powerOfExpression.
CypherListener.prototype.exitPowerOfExpression = function (ctx) {};

// Enter a parse tree produced by CypherParser#unaryAddOrSubtractExpression.
CypherListener.prototype.enterUnaryAddOrSubtractExpression = function (ctx) {};

// Exit a parse tree produced by CypherParser#unaryAddOrSubtractExpression.
CypherListener.prototype.exitUnaryAddOrSubtractExpression = function (ctx) {};

// Enter a parse tree produced by CypherParser#stringListNullOperatorExpression.
CypherListener.prototype.enterStringListNullOperatorExpression = function (ctx) {};

// Exit a parse tree produced by CypherParser#stringListNullOperatorExpression.
CypherListener.prototype.exitStringListNullOperatorExpression = function (ctx) {};

// Enter a parse tree produced by CypherParser#propertyOrLabelsExpression.
CypherListener.prototype.enterPropertyOrLabelsExpression = function (ctx) {};

// Exit a parse tree produced by CypherParser#propertyOrLabelsExpression.
CypherListener.prototype.exitPropertyOrLabelsExpression = function (ctx) {};

// Enter a parse tree produced by CypherParser#filterFunction.
CypherListener.prototype.enterFilterFunction = function (ctx) {};

// Exit a parse tree produced by CypherParser#filterFunction.
CypherListener.prototype.exitFilterFunction = function (ctx) {};

// Enter a parse tree produced by CypherParser#filterFunctionName.
CypherListener.prototype.enterFilterFunctionName = function (ctx) {};

// Exit a parse tree produced by CypherParser#filterFunctionName.
CypherListener.prototype.exitFilterFunctionName = function (ctx) {};

// Enter a parse tree produced by CypherParser#existsFunction.
CypherListener.prototype.enterExistsFunction = function (ctx) {};

// Exit a parse tree produced by CypherParser#existsFunction.
CypherListener.prototype.exitExistsFunction = function (ctx) {};

// Enter a parse tree produced by CypherParser#existsFunctionName.
CypherListener.prototype.enterExistsFunctionName = function (ctx) {};

// Exit a parse tree produced by CypherParser#existsFunctionName.
CypherListener.prototype.exitExistsFunctionName = function (ctx) {};

// Enter a parse tree produced by CypherParser#allFunction.
CypherListener.prototype.enterAllFunction = function (ctx) {};

// Exit a parse tree produced by CypherParser#allFunction.
CypherListener.prototype.exitAllFunction = function (ctx) {};

// Enter a parse tree produced by CypherParser#allFunctionName.
CypherListener.prototype.enterAllFunctionName = function (ctx) {};

// Exit a parse tree produced by CypherParser#allFunctionName.
CypherListener.prototype.exitAllFunctionName = function (ctx) {};

// Enter a parse tree produced by CypherParser#anyFunction.
CypherListener.prototype.enterAnyFunction = function (ctx) {};

// Exit a parse tree produced by CypherParser#anyFunction.
CypherListener.prototype.exitAnyFunction = function (ctx) {};

// Enter a parse tree produced by CypherParser#anyFunctionName.
CypherListener.prototype.enterAnyFunctionName = function (ctx) {};

// Exit a parse tree produced by CypherParser#anyFunctionName.
CypherListener.prototype.exitAnyFunctionName = function (ctx) {};

// Enter a parse tree produced by CypherParser#noneFunction.
CypherListener.prototype.enterNoneFunction = function (ctx) {};

// Exit a parse tree produced by CypherParser#noneFunction.
CypherListener.prototype.exitNoneFunction = function (ctx) {};

// Enter a parse tree produced by CypherParser#noneFunctionName.
CypherListener.prototype.enterNoneFunctionName = function (ctx) {};

// Exit a parse tree produced by CypherParser#noneFunctionName.
CypherListener.prototype.exitNoneFunctionName = function (ctx) {};

// Enter a parse tree produced by CypherParser#singleFunction.
CypherListener.prototype.enterSingleFunction = function (ctx) {};

// Exit a parse tree produced by CypherParser#singleFunction.
CypherListener.prototype.exitSingleFunction = function (ctx) {};

// Enter a parse tree produced by CypherParser#singleFunctionName.
CypherListener.prototype.enterSingleFunctionName = function (ctx) {};

// Exit a parse tree produced by CypherParser#singleFunctionName.
CypherListener.prototype.exitSingleFunctionName = function (ctx) {};

// Enter a parse tree produced by CypherParser#extractFunction.
CypherListener.prototype.enterExtractFunction = function (ctx) {};

// Exit a parse tree produced by CypherParser#extractFunction.
CypherListener.prototype.exitExtractFunction = function (ctx) {};

// Enter a parse tree produced by CypherParser#extractFunctionName.
CypherListener.prototype.enterExtractFunctionName = function (ctx) {};

// Exit a parse tree produced by CypherParser#extractFunctionName.
CypherListener.prototype.exitExtractFunctionName = function (ctx) {};

// Enter a parse tree produced by CypherParser#reduceFunction.
CypherListener.prototype.enterReduceFunction = function (ctx) {};

// Exit a parse tree produced by CypherParser#reduceFunction.
CypherListener.prototype.exitReduceFunction = function (ctx) {};

// Enter a parse tree produced by CypherParser#reduceFunctionName.
CypherListener.prototype.enterReduceFunctionName = function (ctx) {};

// Exit a parse tree produced by CypherParser#reduceFunctionName.
CypherListener.prototype.exitReduceFunctionName = function (ctx) {};

// Enter a parse tree produced by CypherParser#shortestPathPatternFunction.
CypherListener.prototype.enterShortestPathPatternFunction = function (ctx) {};

// Exit a parse tree produced by CypherParser#shortestPathPatternFunction.
CypherListener.prototype.exitShortestPathPatternFunction = function (ctx) {};

// Enter a parse tree produced by CypherParser#shortestPathFunctionName.
CypherListener.prototype.enterShortestPathFunctionName = function (ctx) {};

// Exit a parse tree produced by CypherParser#shortestPathFunctionName.
CypherListener.prototype.exitShortestPathFunctionName = function (ctx) {};

// Enter a parse tree produced by CypherParser#allShortestPathFunctionName.
CypherListener.prototype.enterAllShortestPathFunctionName = function (ctx) {};

// Exit a parse tree produced by CypherParser#allShortestPathFunctionName.
CypherListener.prototype.exitAllShortestPathFunctionName = function (ctx) {};

// Enter a parse tree produced by CypherParser#atom.
CypherListener.prototype.enterAtom = function (ctx) {};

// Exit a parse tree produced by CypherParser#atom.
CypherListener.prototype.exitAtom = function (ctx) {};

// Enter a parse tree produced by CypherParser#literal.
CypherListener.prototype.enterLiteral = function (ctx) {};

// Exit a parse tree produced by CypherParser#literal.
CypherListener.prototype.exitLiteral = function (ctx) {};

// Enter a parse tree produced by CypherParser#stringLiteral.
CypherListener.prototype.enterStringLiteral = function (ctx) {};

// Exit a parse tree produced by CypherParser#stringLiteral.
CypherListener.prototype.exitStringLiteral = function (ctx) {};

// Enter a parse tree produced by CypherParser#booleanLiteral.
CypherListener.prototype.enterBooleanLiteral = function (ctx) {};

// Exit a parse tree produced by CypherParser#booleanLiteral.
CypherListener.prototype.exitBooleanLiteral = function (ctx) {};

// Enter a parse tree produced by CypherParser#listLiteral.
CypherListener.prototype.enterListLiteral = function (ctx) {};

// Exit a parse tree produced by CypherParser#listLiteral.
CypherListener.prototype.exitListLiteral = function (ctx) {};

// Enter a parse tree produced by CypherParser#partialComparisonExpression.
CypherListener.prototype.enterPartialComparisonExpression = function (ctx) {};

// Exit a parse tree produced by CypherParser#partialComparisonExpression.
CypherListener.prototype.exitPartialComparisonExpression = function (ctx) {};

// Enter a parse tree produced by CypherParser#parenthesizedExpression.
CypherListener.prototype.enterParenthesizedExpression = function (ctx) {};

// Exit a parse tree produced by CypherParser#parenthesizedExpression.
CypherListener.prototype.exitParenthesizedExpression = function (ctx) {};

// Enter a parse tree produced by CypherParser#relationshipsPattern.
CypherListener.prototype.enterRelationshipsPattern = function (ctx) {};

// Exit a parse tree produced by CypherParser#relationshipsPattern.
CypherListener.prototype.exitRelationshipsPattern = function (ctx) {};

// Enter a parse tree produced by CypherParser#filterExpression.
CypherListener.prototype.enterFilterExpression = function (ctx) {};

// Exit a parse tree produced by CypherParser#filterExpression.
CypherListener.prototype.exitFilterExpression = function (ctx) {};

// Enter a parse tree produced by CypherParser#idInColl.
CypherListener.prototype.enterIdInColl = function (ctx) {};

// Exit a parse tree produced by CypherParser#idInColl.
CypherListener.prototype.exitIdInColl = function (ctx) {};

// Enter a parse tree produced by CypherParser#functionInvocation.
CypherListener.prototype.enterFunctionInvocation = function (ctx) {};

// Exit a parse tree produced by CypherParser#functionInvocation.
CypherListener.prototype.exitFunctionInvocation = function (ctx) {};

// Enter a parse tree produced by CypherParser#functionInvocationBody.
CypherListener.prototype.enterFunctionInvocationBody = function (ctx) {};

// Exit a parse tree produced by CypherParser#functionInvocationBody.
CypherListener.prototype.exitFunctionInvocationBody = function (ctx) {};

// Enter a parse tree produced by CypherParser#functionName.
CypherListener.prototype.enterFunctionName = function (ctx) {};

// Exit a parse tree produced by CypherParser#functionName.
CypherListener.prototype.exitFunctionName = function (ctx) {};

// Enter a parse tree produced by CypherParser#procedureName.
CypherListener.prototype.enterProcedureName = function (ctx) {};

// Exit a parse tree produced by CypherParser#procedureName.
CypherListener.prototype.exitProcedureName = function (ctx) {};

// Enter a parse tree produced by CypherParser#listComprehension.
CypherListener.prototype.enterListComprehension = function (ctx) {};

// Exit a parse tree produced by CypherParser#listComprehension.
CypherListener.prototype.exitListComprehension = function (ctx) {};

// Enter a parse tree produced by CypherParser#patternComprehension.
CypherListener.prototype.enterPatternComprehension = function (ctx) {};

// Exit a parse tree produced by CypherParser#patternComprehension.
CypherListener.prototype.exitPatternComprehension = function (ctx) {};

// Enter a parse tree produced by CypherParser#propertyLookup.
CypherListener.prototype.enterPropertyLookup = function (ctx) {};

// Exit a parse tree produced by CypherParser#propertyLookup.
CypherListener.prototype.exitPropertyLookup = function (ctx) {};

// Enter a parse tree produced by CypherParser#caseExpression.
CypherListener.prototype.enterCaseExpression = function (ctx) {};

// Exit a parse tree produced by CypherParser#caseExpression.
CypherListener.prototype.exitCaseExpression = function (ctx) {};

// Enter a parse tree produced by CypherParser#caseAlternatives.
CypherListener.prototype.enterCaseAlternatives = function (ctx) {};

// Exit a parse tree produced by CypherParser#caseAlternatives.
CypherListener.prototype.exitCaseAlternatives = function (ctx) {};

// Enter a parse tree produced by CypherParser#variable.
CypherListener.prototype.enterVariable = function (ctx) {};

// Exit a parse tree produced by CypherParser#variable.
CypherListener.prototype.exitVariable = function (ctx) {};

// Enter a parse tree produced by CypherParser#numberLiteral.
CypherListener.prototype.enterNumberLiteral = function (ctx) {};

// Exit a parse tree produced by CypherParser#numberLiteral.
CypherListener.prototype.exitNumberLiteral = function (ctx) {};

// Enter a parse tree produced by CypherParser#mapLiteral.
CypherListener.prototype.enterMapLiteral = function (ctx) {};

// Exit a parse tree produced by CypherParser#mapLiteral.
CypherListener.prototype.exitMapLiteral = function (ctx) {};

// Enter a parse tree produced by CypherParser#mapProjection.
CypherListener.prototype.enterMapProjection = function (ctx) {};

// Exit a parse tree produced by CypherParser#mapProjection.
CypherListener.prototype.exitMapProjection = function (ctx) {};

// Enter a parse tree produced by CypherParser#mapProjectionVariants.
CypherListener.prototype.enterMapProjectionVariants = function (ctx) {};

// Exit a parse tree produced by CypherParser#mapProjectionVariants.
CypherListener.prototype.exitMapProjectionVariants = function (ctx) {};

// Enter a parse tree produced by CypherParser#literalEntry.
CypherListener.prototype.enterLiteralEntry = function (ctx) {};

// Exit a parse tree produced by CypherParser#literalEntry.
CypherListener.prototype.exitLiteralEntry = function (ctx) {};

// Enter a parse tree produced by CypherParser#propertySelector.
CypherListener.prototype.enterPropertySelector = function (ctx) {};

// Exit a parse tree produced by CypherParser#propertySelector.
CypherListener.prototype.exitPropertySelector = function (ctx) {};

// Enter a parse tree produced by CypherParser#variableSelector.
CypherListener.prototype.enterVariableSelector = function (ctx) {};

// Exit a parse tree produced by CypherParser#variableSelector.
CypherListener.prototype.exitVariableSelector = function (ctx) {};

// Enter a parse tree produced by CypherParser#allPropertiesSelector.
CypherListener.prototype.enterAllPropertiesSelector = function (ctx) {};

// Exit a parse tree produced by CypherParser#allPropertiesSelector.
CypherListener.prototype.exitAllPropertiesSelector = function (ctx) {};

// Enter a parse tree produced by CypherParser#parameter.
CypherListener.prototype.enterParameter = function (ctx) {};

// Exit a parse tree produced by CypherParser#parameter.
CypherListener.prototype.exitParameter = function (ctx) {};

// Enter a parse tree produced by CypherParser#legacyParameter.
CypherListener.prototype.enterLegacyParameter = function (ctx) {};

// Exit a parse tree produced by CypherParser#legacyParameter.
CypherListener.prototype.exitLegacyParameter = function (ctx) {};

// Enter a parse tree produced by CypherParser#newParameter.
CypherListener.prototype.enterNewParameter = function (ctx) {};

// Exit a parse tree produced by CypherParser#newParameter.
CypherListener.prototype.exitNewParameter = function (ctx) {};

// Enter a parse tree produced by CypherParser#parameterName.
CypherListener.prototype.enterParameterName = function (ctx) {};

// Exit a parse tree produced by CypherParser#parameterName.
CypherListener.prototype.exitParameterName = function (ctx) {};

// Enter a parse tree produced by CypherParser#propertyExpressions.
CypherListener.prototype.enterPropertyExpressions = function (ctx) {};

// Exit a parse tree produced by CypherParser#propertyExpressions.
CypherListener.prototype.exitPropertyExpressions = function (ctx) {};

// Enter a parse tree produced by CypherParser#propertyExpression.
CypherListener.prototype.enterPropertyExpression = function (ctx) {};

// Exit a parse tree produced by CypherParser#propertyExpression.
CypherListener.prototype.exitPropertyExpression = function (ctx) {};

// Enter a parse tree produced by CypherParser#propertyKeys.
CypherListener.prototype.enterPropertyKeys = function (ctx) {};

// Exit a parse tree produced by CypherParser#propertyKeys.
CypherListener.prototype.exitPropertyKeys = function (ctx) {};

// Enter a parse tree produced by CypherParser#propertyKeyName.
CypherListener.prototype.enterPropertyKeyName = function (ctx) {};

// Exit a parse tree produced by CypherParser#propertyKeyName.
CypherListener.prototype.exitPropertyKeyName = function (ctx) {};

// Enter a parse tree produced by CypherParser#integerLiteral.
CypherListener.prototype.enterIntegerLiteral = function (ctx) {};

// Exit a parse tree produced by CypherParser#integerLiteral.
CypherListener.prototype.exitIntegerLiteral = function (ctx) {};

// Enter a parse tree produced by CypherParser#doubleLiteral.
CypherListener.prototype.enterDoubleLiteral = function (ctx) {};

// Exit a parse tree produced by CypherParser#doubleLiteral.
CypherListener.prototype.exitDoubleLiteral = function (ctx) {};

// Enter a parse tree produced by CypherParser#namespace.
CypherListener.prototype.enterNamespace = function (ctx) {};

// Exit a parse tree produced by CypherParser#namespace.
CypherListener.prototype.exitNamespace = function (ctx) {};

// Enter a parse tree produced by CypherParser#leftArrowHead.
CypherListener.prototype.enterLeftArrowHead = function (ctx) {};

// Exit a parse tree produced by CypherParser#leftArrowHead.
CypherListener.prototype.exitLeftArrowHead = function (ctx) {};

// Enter a parse tree produced by CypherParser#rightArrowHead.
CypherListener.prototype.enterRightArrowHead = function (ctx) {};

// Exit a parse tree produced by CypherParser#rightArrowHead.
CypherListener.prototype.exitRightArrowHead = function (ctx) {};

// Enter a parse tree produced by CypherParser#dash.
CypherListener.prototype.enterDash = function (ctx) {};

// Exit a parse tree produced by CypherParser#dash.
CypherListener.prototype.exitDash = function (ctx) {};

// Enter a parse tree produced by CypherParser#symbolicName.
CypherListener.prototype.enterSymbolicName = function (ctx) {};

// Exit a parse tree produced by CypherParser#symbolicName.
CypherListener.prototype.exitSymbolicName = function (ctx) {};

// Enter a parse tree produced by CypherParser#keyword.
CypherListener.prototype.enterKeyword = function (ctx) {};

// Exit a parse tree produced by CypherParser#keyword.
CypherListener.prototype.exitKeyword = function (ctx) {};

exports.CypherListener = CypherListener;

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _codemirrorCypher = __webpack_require__(47);

Object.defineProperty(exports, 'createCypherEditor', {
  enumerable: true,
  get: function get() {
    return _codemirrorCypher.createCypherEditor;
  }
});
Object.defineProperty(exports, 'parse', {
  enumerable: true,
  get: function get() {
    return _codemirrorCypher.parse;
  }
});
Object.defineProperty(exports, 'extractStatements', {
  enumerable: true,
  get: function get() {
    return _codemirrorCypher.extractStatements;
  }
});

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extractStatements = exports.parse = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*
                                                                                                                                                                                                                                                                   * Copyright (c) 2002-2017 "Neo Technology,"
                                                                                                                                                                                                                                                                   * Network Engine for Objects in Lund AB [http://neotechnology.com]
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * This file is part of Neo4j.
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * Neo4j is free software: you can redistribute it and/or modify
                                                                                                                                                                                                                                                                   * it under the terms of the GNU General Public License as published by
                                                                                                                                                                                                                                                                   * the Free Software Foundation, either version 3 of the License, or
                                                                                                                                                                                                                                                                   * (at your option) any later version.
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * This program is distributed in the hope that it will be useful,
                                                                                                                                                                                                                                                                   * but WITHOUT ANY WARRANTY; without even the implied warranty of
                                                                                                                                                                                                                                                                   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                                                                                                                                                                                                                                                   * GNU General Public License for more details.
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * You should have received a copy of the GNU General Public License
                                                                                                                                                                                                                                                                   * along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                                                                                                                                                                                                                                                   */

exports.createCypherEditor = createCypherEditor;

var _codemirror = __webpack_require__(25);

var _codemirror2 = _interopRequireDefault(_codemirror);

var _index = __webpack_require__(26);

__webpack_require__(98);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function translatePosition(from, to) {
  return {
    from: { line: from.line - 1, ch: from.column },
    to: { line: to.line - 1, ch: to.column }
  };
}

function getPosition(element, editorSupport) {
  var _ref = _index.TreeUtils.getPosition(element) || { start: 0, stop: 0 },
      start = _ref.start,
      stop = _ref.stop;

  var from = editorSupport.positionConverter.toRelative(start);
  var to = editorSupport.positionConverter.toRelative(stop + 1);
  return translatePosition(from, to);
}

function fixColors(editor, editorSupport) {
  var markers = editor.cypherMarkers;

  markers.forEach(function (m) {
    return m.clear();
  });
  if (editorSupport.parseTree == null) {
    return;
  }

  editorSupport.applyHighlighthing(function (element, type) {
    var _getPosition = getPosition(element, editorSupport),
        from = _getPosition.from,
        to = _getPosition.to;

    markers.push(editor.markText(from, to, {
      className: 'cm-p-' + type
    }));
  });
}

_codemirror2.default.registerHelper('lint', 'cypher', function (text, options, editor) {
  var editorSupport = editor.editorSupport;
  if (!editorSupport) return [];
  var version = editor.newContentVersion();
  editorSupport.update(text, version);

  fixColors(editor, editorSupport);

  return (editorSupport.parseErrors || []).map(function (_ref2) {
    var line = _ref2.line,
        col = _ref2.col,
        msg = _ref2.msg;
    return {
      severity: 'error',
      from: { line: line - 1, ch: Math.min(editor.getLine(line - 1).length - 1, col) },
      to: { line: line, ch: 0 },
      message: msg
    };
  });
});

_codemirror2.default.registerHelper('hint', 'cypher', function (editor) {
  var editorSupport = editor.editorSupport;
  if (!editorSupport) return {};
  editorSupport.update(editor.getValue());

  var _editor$getCursor = editor.getCursor(),
      line = _editor$getCursor.line,
      ch = _editor$getCursor.ch;

  var _editorSupport$getCom = editorSupport.getCompletion(line + 1, ch),
      items = _editorSupport$getCom.items,
      from = _editorSupport$getCom.from,
      to = _editorSupport$getCom.to;

  var position = translatePosition(from, to);
  var render = function render(element, self, data) {
    // eslint-disable-next-line no-param-reassign
    element.innerHTML += '<b>' + data.displayText + '</b>' + (data.postfix ? data.postfix : '');
  };

  return _extends({
    list: items.map(function (_ref3) {
      var type = _ref3.type,
          view = _ref3.view,
          content = _ref3.content,
          postfix = _ref3.postfix;
      return {
        text: content,
        displayText: view,
        className: 'cm-hint-' + type,
        type: type,
        postfix: postfix,
        render: render
      };
    })
  }, position);
});

function createCypherEditor(input, settings) {
  var editorSupport = new _index.CypherEditorSupport();

  var editor = (0, _codemirror2.default)(input, _extends({}, settings, { value: '' }));
  editor.cypherMarkers = [];
  editor.editorSupport = editorSupport;
  editor.version = 1;
  editor.newContentVersion = function newContentVersion() {
    this.version += 1;
    return this.version;
  };
  editor.newContentVersion.bind(editor);
  editor.setValue(settings.value || '');

  return { editor: editor, editorSupport: editorSupport };
}

var parse = exports.parse = _index.parse;
var extractStatements = exports.extractStatements = _index.extractStatements;

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CypherEditorSupport = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
opyright (c) 2002-2017 "Neo Technology,"
etwork Engine for Objects in Lund AB [http://neotechnology.com]

his file is part of Neo4j.

eo4j is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
at your option) any later version.

his program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
or FITNESS FOR A PARTICULAR PURPOSE.  See the
eneral Public License for more details.

ou should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.


var _CompletionTypeResolver = __webpack_require__(49);

var _AutoCompletion = __webpack_require__(83);

var _CypherTypes = __webpack_require__(1);

var CypherTypes = _interopRequireWildcard(_CypherTypes);

var _CypherSyntaxHighlight = __webpack_require__(89);

var _TreeUtils = __webpack_require__(5);

var _PositionConverter = __webpack_require__(90);

var _retryOperation = __webpack_require__(91);

var _parse2 = __webpack_require__(42);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CypherEditorSupport = exports.CypherEditorSupport = function () {
  function CypherEditorSupport() {
    var _this = this;

    var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

    _classCallCheck(this, CypherEditorSupport);

    this.schema = {};
    this.input = null;
    this.positionConverter = new _PositionConverter.PositionConverter('');
    this.parseTree = null;
    this.parseErrors = [];
    this.referencesProviders = {};
    this.completion = new _AutoCompletion.AutoCompletion();
    this.queriesAndCommands = [];
    this.statements = [];
    this.listeners = [];
    this.version = 0;

    this.ensureVersion = function (version) {
      var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30;
      var times = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5;
      return (0, _retryOperation.retryOperation)(function () {
        return new Promise(function (resolve, reject) {
          if (version === _this.version) {
            return resolve();
          }
          return reject();
        });
      }, delay, times);
    };

    this.update(input);
  }

  _createClass(CypherEditorSupport, [{
    key: 'on',
    value: function on(eventName, cb) {
      this.listeners[eventName] = Array.isArray(this.listeners[eventName]) ? this.listeners[eventName].concat([cb]) : this.listeners[eventName] = [cb];
    }
  }, {
    key: 'off',
    value: function off(eventName, cb) {
      if (!this.listeners[eventName]) return;
      var index = this.listeners[eventName].indexOf(cb);
      if (index > -1) {
        this.listeners[eventName].splice(index, 1);
      }
    }
  }, {
    key: 'trigger',
    value: function trigger(eventName) {
      var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      if (!this.listeners[eventName]) return;
      this.listeners[eventName].forEach(function (cb) {
        return cb.apply(undefined, _toConsumableArray(args));
      });
    }
  }, {
    key: 'update',
    value: function update() {
      var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var version = arguments[1];

      this.trigger('update');
      if (input === this.input) {
        this.version = version || this.version;
        this.trigger('updated', [{
          queriesAndCommands: this.queriesAndCommands,
          referencesProviders: this.referencesProviders
        }]);
        return;
      }
      this.positionConverter = new _PositionConverter.PositionConverter(input);

      this.input = input;

      var _parse = (0, _parse2.parse)(input),
          parseTree = _parse.parseTree,
          referencesListener = _parse.referencesListener,
          errorListener = _parse.errorListener,
          referencesProviders = _parse.referencesProviders;

      this.parseTree = parseTree;

      this.parseErrors = errorListener.errors;

      var queriesAndCommands = referencesListener.queriesAndCommands,
          statements = referencesListener.statements;

      this.statements = statements;
      this.queriesAndCommands = queriesAndCommands;
      this.referencesProviders = referencesProviders;

      this.completion.updateReferenceProviders(this.referencesProviders);
      this.version = version || this.version;
      this.trigger('updated', [{
        queriesAndCommands: this.queriesAndCommands,
        referencesProviders: this.referencesProviders
      }]);
    }
  }, {
    key: 'setSchema',
    value: function setSchema(schema) {
      this.schema = schema;
      this.completion.updateSchema(this.schema);
    }
  }, {
    key: 'getElement',
    value: function getElement(line, column) {
      var abs = this.positionConverter.toAbsolute(line, column);

      function getElement(pt) {
        var pos = _TreeUtils.TreeUtils.getPosition(pt);
        if (pos != null && (abs < pos.start || abs > pos.stop)) {
          return null;
        }

        var c = pt.getChildCount();
        if (c === 0 && pos != null) {
          return pt;
        }

        for (var i = 0; i < c; i += 1) {
          var e = getElement(pt.getChild(i));
          if (e != null) {
            return e;
          }
        }

        return pos != null ? pt : null;
      }

      return getElement(this.parseTree);
    }
  }, {
    key: 'getReferences',
    value: function getReferences(line, column) {
      var e = _TreeUtils.TreeUtils.findAnyParent(this.getElement(line, column), CypherTypes.SYMBOLIC_CONTEXTS);
      if (e == null) {
        return [];
      }

      var type = e.constructor.name;
      var query = type === CypherTypes.VARIABLE_CONTEXT ? _TreeUtils.TreeUtils.findAnyParent(e, [CypherTypes.QUERY_CONTEXT]) : null;

      return this.referencesProviders[type].getReferences(e.getText(), query);
    }
  }, {
    key: 'getCompletionInfo',
    value: function getCompletionInfo(line, column) {
      var element = this.getElementForCompletion(line, column);
      var query = _TreeUtils.TreeUtils.findAnyParent(element, [CypherTypes.QUERY_CONTEXT]);

      var _CompletionTypeResolv = _CompletionTypeResolver.CompletionTypeResolver.getTypes(element),
          found = _CompletionTypeResolv.found,
          types = _CompletionTypeResolv.types;

      return { element: element, query: query, found: found, types: types };
    }
  }, {
    key: 'getElementForCompletion',
    value: function getElementForCompletion(line, column) {
      var e = this.getElement(line, column);
      return _TreeUtils.TreeUtils.findAnyParent(e, CypherTypes.COMPLETION_CANDIDATES) || e;
    }
  }, {
    key: 'getCompletion',
    value: function getCompletion(line, column) {
      var doFilter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

      var info = this.getCompletionInfo(line, column);

      // Shift by one symbol back and try again.
      if (!info.found && column > 0) {
        var prevInfo = this.getCompletionInfo(line, column - 1);
        if (prevInfo.found) {
          info = prevInfo;
        }
      }
      var _info = info,
          element = _info.element,
          query = _info.query,
          found = _info.found,
          types = _info.types;


      var replaceRange = {
        from: { line: line, column: column },
        to: { line: line, column: column }
      };
      var filter = null;

      var shouldBeReplaced = _AutoCompletion.AutoCompletion.shouldBeReplaced(element);
      if (found && shouldBeReplaced) {
        // There are number of situations where we need to be smarter than default behavior
        var _TreeUtils$getPositio = _TreeUtils.TreeUtils.getPosition(element),
            start = _TreeUtils$getPositio.start,
            stop = _TreeUtils$getPositio.stop;

        var smartReplaceRange = _AutoCompletion.AutoCompletion.calculateSmartReplaceRange(element, start, stop);
        if (smartReplaceRange) {
          replaceRange.from = this.positionConverter.toRelative(smartReplaceRange.start);
          replaceRange.to = this.positionConverter.toRelative(smartReplaceRange.stop + 1);

          if (smartReplaceRange.filterText) {
            filter = smartReplaceRange.filterText;
          }
        } else {
          replaceRange.from = this.positionConverter.toRelative(start);
          replaceRange.to = this.positionConverter.toRelative(stop + 1);
        }
      }

      if (filter === null) {
        filter = doFilter && found && shouldBeReplaced ? element.getText() : '';
      }
      return _extends({
        items: this.completion.getItems(types, {
          filter: filter,
          query: query,
          elementType: element ? element.constructor.name : 'unknown'
        })
      }, replaceRange);
    }
  }, {
    key: 'applyHighlighthing',
    value: function applyHighlighthing(callback) {
      _CypherSyntaxHighlight.CypherSyntaxHighlight.process(this.parseTree, callback);
    }
  }]);

  return CypherEditorSupport;
}();

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CompletionTypeResolver = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
opyright (c) 2002-2017 "Neo Technology,"
etwork Engine for Objects in Lund AB [http://neotechnology.com]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *
his file is part of Neo4j.

eo4j is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * the Free Software Foundation, either version 3 of the License, or
at your option) any later version.

his program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
or FITNESS FOR A PARTICULAR PURPOSE.  See the
eneral Public License for more details.

ou should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.


var _CompletionTypes = __webpack_require__(3);

var CompletionTypes = _interopRequireWildcard(_CompletionTypes);

var _rules = __webpack_require__(50);

var rules = _interopRequireWildcard(_rules);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Rules are sorted starting with specific ones, and finishing with more generic ones.
var orderedCompletionRules = [rules.ruleNoop, rules.ruleVariableInExpressionPossibleFunction, rules.ruleLiteralEntry, rules.rulePropInMapLiteral, rules.ruleParamStartsWithDollar, rules.ruleSpecificParent, rules.ruleNodePattern, rules.ruleRelationshipPattern, rules.ruleProcedureOutputsInCallClause, rules.ruleCallClauseBeginning, rules.ruleConsoleCommandSubcommands, rules.rulePropertyLookup, rules.rulePossibleKeyword];

function evaluateRules(element) {
  for (var i = 0; i < orderedCompletionRules.length; i += 1) {
    var rule = orderedCompletionRules[i];
    var types = rule(element);
    if (types.length > 0) {
      return types;
    }
  }

  return [];
}

var CompletionTypeResolver = exports.CompletionTypeResolver = function () {
  function CompletionTypeResolver() {
    _classCallCheck(this, CompletionTypeResolver);
  }

  _createClass(CompletionTypeResolver, null, [{
    key: 'getTypes',
    value: function getTypes(element) {
      // If element is null, then no types
      if (element == null) {
        return {
          found: false,
          types: CompletionTypes.ALL
        };
      }

      // Retrieve types from rules
      var types = evaluateRules(element);
      if (types.length > 0) {
        return {
          found: true,
          types: types
        };
      }

      // If no types found, then no types
      return {
        found: false,
        types: CompletionTypes.ALL
      };
    }
  }]);

  return CompletionTypeResolver;
}();

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ruleParamStartsWithDollar = exports.ruleNoop = exports.ruleConsoleCommandSubcommands = exports.ruleLiteralEntry = exports.rulePropInMapLiteral = exports.rulePropertyLookup = exports.ruleNodePattern = exports.ruleRelationshipPattern = exports.rulePossibleKeyword = exports.ruleCallClauseBeginning = exports.ruleProcedureOutputsInCallClause = exports.ruleVariableInExpressionPossibleFunction = exports.ruleSpecificParent = undefined;

var _ruleCheckParent = __webpack_require__(51);

var _ruleCheckParent2 = _interopRequireDefault(_ruleCheckParent);

var _ruleVariableInExpressionPossibleFunction = __webpack_require__(69);

var _ruleVariableInExpressionPossibleFunction2 = _interopRequireDefault(_ruleVariableInExpressionPossibleFunction);

var _ruleProcedureOutputsInCallClause = __webpack_require__(70);

var _ruleProcedureOutputsInCallClause2 = _interopRequireDefault(_ruleProcedureOutputsInCallClause);

var _ruleCallClauseBeginning = __webpack_require__(71);

var _ruleCallClauseBeginning2 = _interopRequireDefault(_ruleCallClauseBeginning);

var _rulePossibleKeyword = __webpack_require__(72);

var _rulePossibleKeyword2 = _interopRequireDefault(_rulePossibleKeyword);

var _ruleRelationshipPattern = __webpack_require__(75);

var _ruleRelationshipPattern2 = _interopRequireDefault(_ruleRelationshipPattern);

var _ruleNodePattern = __webpack_require__(76);

var _ruleNodePattern2 = _interopRequireDefault(_ruleNodePattern);

var _rulePropertyLookup = __webpack_require__(77);

var _rulePropertyLookup2 = _interopRequireDefault(_rulePropertyLookup);

var _rulePropInMapLiteral = __webpack_require__(78);

var _rulePropInMapLiteral2 = _interopRequireDefault(_rulePropInMapLiteral);

var _ruleLiteralEntry = __webpack_require__(79);

var _ruleLiteralEntry2 = _interopRequireDefault(_ruleLiteralEntry);

var _ruleConsoleCommandSubcommands = __webpack_require__(80);

var _ruleConsoleCommandSubcommands2 = _interopRequireDefault(_ruleConsoleCommandSubcommands);

var _ruleNoop = __webpack_require__(81);

var _ruleNoop2 = _interopRequireDefault(_ruleNoop);

var _ruleParamStartsWithDollar = __webpack_require__(82);

var _ruleParamStartsWithDollar2 = _interopRequireDefault(_ruleParamStartsWithDollar);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.ruleSpecificParent = _ruleCheckParent2.default;
exports.ruleVariableInExpressionPossibleFunction = _ruleVariableInExpressionPossibleFunction2.default;
exports.ruleProcedureOutputsInCallClause = _ruleProcedureOutputsInCallClause2.default;
exports.ruleCallClauseBeginning = _ruleCallClauseBeginning2.default;
exports.rulePossibleKeyword = _rulePossibleKeyword2.default;
exports.ruleRelationshipPattern = _ruleRelationshipPattern2.default;
exports.ruleNodePattern = _ruleNodePattern2.default;
exports.rulePropertyLookup = _rulePropertyLookup2.default;
exports.rulePropInMapLiteral = _rulePropInMapLiteral2.default;
exports.ruleLiteralEntry = _ruleLiteralEntry2.default;
exports.ruleConsoleCommandSubcommands = _ruleConsoleCommandSubcommands2.default;
exports.ruleNoop = _ruleNoop2.default;
exports.ruleParamStartsWithDollar = _ruleParamStartsWithDollar2.default; /*
                                                                          * Copyright (c) 2002-2017 "Neo Technology,"
                                                                          * Network Engine for Objects in Lund AB [http://neotechnology.com]
                                                                          *
                                                                          * This file is part of Neo4j.
                                                                          *
                                                                          * Neo4j is free software: you can redistribute it and/or modify
                                                                          * it under the terms of the GNU General Public License as published by
                                                                          * the Free Software Foundation, either version 3 of the License, or
                                                                          * (at your option) any later version.
                                                                          *
                                                                          * This program is distributed in the hope that it will be useful,
                                                                          * but WITHOUT ANY WARRANTY; without even the implied warranty of
                                                                          * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                                                          * GNU General Public License for more details.
                                                                          *
                                                                          * You should have received a copy of the GNU General Public License
                                                                          * along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                                                          */

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _childToParentTypeMap;

var _CypherTypes = __webpack_require__(1);

var CypherTypes = _interopRequireWildcard(_CypherTypes);

var _CompletionTypes = __webpack_require__(3);

var CompletionTypes = _interopRequireWildcard(_CompletionTypes);

var _TreeUtils = __webpack_require__(5);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /*
                                                                                                                                                                                                                   * Copyright (c) 2002-2017 "Neo Technology,"
                                                                                                                                                                                                                   * Network Engine for Objects in Lund AB [http://neotechnology.com]
                                                                                                                                                                                                                   *
                                                                                                                                                                                                                   * This file is part of Neo4j.
                                                                                                                                                                                                                   *
                                                                                                                                                                                                                   * Neo4j is free software: you can redistribute it and/or modify
                                                                                                                                                                                                                   * it under the terms of the GNU General Public License as published by
                                                                                                                                                                                                                   * the Free Software Foundation, either version 3 of the License, or
                                                                                                                                                                                                                   * (at your option) any later version.
                                                                                                                                                                                                                   *
                                                                                                                                                                                                                   * This program is distributed in the hope that it will be useful,
                                                                                                                                                                                                                   * but WITHOUT ANY WARRANTY; without even the implied warranty of
                                                                                                                                                                                                                   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                                                                                                                                                                                                   * GNU General Public License for more details.
                                                                                                                                                                                                                   *
                                                                                                                                                                                                                   * You should have received a copy of the GNU General Public License
                                                                                                                                                                                                                   * along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                                                                                                                                                                                                   */

var childToParentTypeMapping = (_childToParentTypeMap = {}, _defineProperty(_childToParentTypeMap, CypherTypes.VARIABLE_CONTEXT, [{ type: CompletionTypes.VARIABLE }]), _defineProperty(_childToParentTypeMap, CypherTypes.PARAMETER_NAME_CONTEXT, [{ type: CompletionTypes.PARAMETER }]), _defineProperty(_childToParentTypeMap, CypherTypes.PROPERTY_KEY_NAME_CONTEXT, [{ type: CompletionTypes.PROPERTY_KEY }]), _defineProperty(_childToParentTypeMap, CypherTypes.FUNCTION_NAME_CONTEXT, [{ type: CompletionTypes.FUNCTION_NAME }]), _defineProperty(_childToParentTypeMap, CypherTypes.PROCEDURE_NAME_CONTEXT, [{ type: CompletionTypes.PROCEDURE_NAME }]), _defineProperty(_childToParentTypeMap, CypherTypes.NODE_LABEL_CONTEXT, [{ type: CompletionTypes.LABEL }]), _defineProperty(_childToParentTypeMap, CypherTypes.RELATIONSHIP_TYPE_CONTEXT, [{ type: CompletionTypes.RELATIONSHIP_TYPE }]), _defineProperty(_childToParentTypeMap, CypherTypes.RELATIONSHIP_TYPE_OPTIONAL_COLON_CONTEXT, [{ type: CompletionTypes.RELATIONSHIP_TYPE }]), _defineProperty(_childToParentTypeMap, CypherTypes.CONSOLE_COMMAND_NAME_CONTEXT, [{ type: CompletionTypes.CONSOLE_COMMAND_NAME }]), _defineProperty(_childToParentTypeMap, CypherTypes.NODE_LABELS_CONTEXT, [{ type: CompletionTypes.LABEL }]), _defineProperty(_childToParentTypeMap, CypherTypes.RELATIONSHIP_TYPES_CONTEXT, [{ type: CompletionTypes.RELATIONSHIP_TYPE }]), _childToParentTypeMap);

// Check that element is inside specific parent context

exports.default = function (element) {
  var parent = _TreeUtils.TreeUtils.findAnyParent(element, Object.keys(childToParentTypeMapping));
  return parent != null ? childToParentTypeMapping[parent.constructor.name] : [];
};

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

exports.ATN = __webpack_require__(11).ATN;
exports.ATNDeserializer = __webpack_require__(29).ATNDeserializer;
exports.LexerATNSimulator = __webpack_require__(55).LexerATNSimulator;
exports.ParserATNSimulator = __webpack_require__(58).ParserATNSimulator;
exports.PredictionMode = __webpack_require__(34).PredictionMode;


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

var Set = __webpack_require__(0).Set;
var BitSet = __webpack_require__(0).BitSet;
var Token = __webpack_require__(2).Token;
var ATNConfig = __webpack_require__(16).ATNConfig;
var Interval = __webpack_require__(4).Interval;
var IntervalSet = __webpack_require__(4).IntervalSet;
var RuleStopState = __webpack_require__(6).RuleStopState;
var RuleTransition = __webpack_require__(12).RuleTransition;
var NotSetTransition = __webpack_require__(12).NotSetTransition;
var WildcardTransition = __webpack_require__(12).WildcardTransition;
var AbstractPredicateTransition = __webpack_require__(12).AbstractPredicateTransition;

var pc = __webpack_require__(10);
var predictionContextFromRuleContext = pc.predictionContextFromRuleContext;
var PredictionContext = pc.PredictionContext;
var SingletonPredictionContext = pc.SingletonPredictionContext;

function LL1Analyzer (atn) {
    this.atn = atn;
}

//* Special value added to the lookahead sets to indicate that we hit
//  a predicate during analysis if {@code seeThruPreds==false}.
///
LL1Analyzer.HIT_PRED = Token.INVALID_TYPE;


//*
// Calculates the SLL(1) expected lookahead set for each outgoing transition
// of an {@link ATNState}. The returned array has one element for each
// outgoing transition in {@code s}. If the closure from transition
// <em>i</em> leads to a semantic predicate before matching a symbol, the
// element at index <em>i</em> of the result will be {@code null}.
//
// @param s the ATN state
// @return the expected symbols for each outgoing transition of {@code s}.
///
LL1Analyzer.prototype.getDecisionLookahead = function(s) {
    if (s === null) {
        return null;
    }
    var count = s.transitions.length;
    var look = [];
    for(var alt=0; alt< count; alt++) {
        look[alt] = new IntervalSet();
        var lookBusy = new Set();
        var seeThruPreds = false; // fail to get lookahead upon pred
        this._LOOK(s.transition(alt).target, null, PredictionContext.EMPTY,
              look[alt], lookBusy, new BitSet(), seeThruPreds, false);
        // Wipe out lookahead for this alternative if we found nothing
        // or we had a predicate when we !seeThruPreds
        if (look[alt].length===0 || look[alt].contains(LL1Analyzer.HIT_PRED)) {
            look[alt] = null;
        }
    }
    return look;
};

//*
// Compute set of tokens that can follow {@code s} in the ATN in the
// specified {@code ctx}.
//
// <p>If {@code ctx} is {@code null} and the end of the rule containing
// {@code s} is reached, {@link Token//EPSILON} is added to the result set.
// If {@code ctx} is not {@code null} and the end of the outermost rule is
// reached, {@link Token//EOF} is added to the result set.</p>
//
// @param s the ATN state
// @param stopState the ATN state to stop at. This can be a
// {@link BlockEndState} to detect epsilon paths through a closure.
// @param ctx the complete parser context, or {@code null} if the context
// should be ignored
//
// @return The set of tokens that can follow {@code s} in the ATN in the
// specified {@code ctx}.
///
LL1Analyzer.prototype.LOOK = function(s, stopState, ctx) {
    var r = new IntervalSet();
    var seeThruPreds = true; // ignore preds; get all lookahead
	ctx = ctx || null;
    var lookContext = ctx!==null ? predictionContextFromRuleContext(s.atn, ctx) : null;
    this._LOOK(s, stopState, lookContext, r, new Set(), new BitSet(), seeThruPreds, true);
    return r;
};

//*
// Compute set of tokens that can follow {@code s} in the ATN in the
// specified {@code ctx}.
//
// <p>If {@code ctx} is {@code null} and {@code stopState} or the end of the
// rule containing {@code s} is reached, {@link Token//EPSILON} is added to
// the result set. If {@code ctx} is not {@code null} and {@code addEOF} is
// {@code true} and {@code stopState} or the end of the outermost rule is
// reached, {@link Token//EOF} is added to the result set.</p>
//
// @param s the ATN state.
// @param stopState the ATN state to stop at. This can be a
// {@link BlockEndState} to detect epsilon paths through a closure.
// @param ctx The outer context, or {@code null} if the outer context should
// not be used.
// @param look The result lookahead set.
// @param lookBusy A set used for preventing epsilon closures in the ATN
// from causing a stack overflow. Outside code should pass
// {@code new Set<ATNConfig>} for this argument.
// @param calledRuleStack A set used for preventing left recursion in the
// ATN from causing a stack overflow. Outside code should pass
// {@code new BitSet()} for this argument.
// @param seeThruPreds {@code true} to true semantic predicates as
// implicitly {@code true} and "see through them", otherwise {@code false}
// to treat semantic predicates as opaque and add {@link //HIT_PRED} to the
// result if one is encountered.
// @param addEOF Add {@link Token//EOF} to the result if the end of the
// outermost context is reached. This parameter has no effect if {@code ctx}
// is {@code null}.
///
LL1Analyzer.prototype._LOOK = function(s, stopState , ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF) {
    var c = new ATNConfig({state:s, alt:0, context: ctx}, null);
    if (lookBusy.contains(c)) {
        return;
    }
    lookBusy.add(c);
    if (s === stopState) {
        if (ctx ===null) {
            look.addOne(Token.EPSILON);
            return;
        } else if (ctx.isEmpty() && addEOF) {
            look.addOne(Token.EOF);
            return;
        }
    }
    if (s instanceof RuleStopState ) {
        if (ctx ===null) {
            look.addOne(Token.EPSILON);
            return;
        } else if (ctx.isEmpty() && addEOF) {
            look.addOne(Token.EOF);
            return;
        }
        if (ctx !== PredictionContext.EMPTY) {
            // run thru all possible stack tops in ctx
            for(var i=0; i<ctx.length; i++) {
                var returnState = this.atn.states[ctx.getReturnState(i)];
                var removed = calledRuleStack.contains(returnState.ruleIndex);
                try {
                    calledRuleStack.remove(returnState.ruleIndex);
                    this._LOOK(returnState, stopState, ctx.getParent(i), look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
                } finally {
                    if (removed) {
                        calledRuleStack.add(returnState.ruleIndex);
                    }
                }
            }
            return;
        }
    }
    for(var j=0; j<s.transitions.length; j++) {
        var t = s.transitions[j];
        if (t.constructor === RuleTransition) {
            if (calledRuleStack.contains(t.target.ruleIndex)) {
                continue;
            }
            var newContext = SingletonPredictionContext.create(ctx, t.followState.stateNumber);
            try {
                calledRuleStack.add(t.target.ruleIndex);
                this._LOOK(t.target, stopState, newContext, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
            } finally {
                calledRuleStack.remove(t.target.ruleIndex);
            }
        } else if (t instanceof AbstractPredicateTransition ) {
            if (seeThruPreds) {
                this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
            } else {
                look.addOne(LL1Analyzer.HIT_PRED);
            }
        } else if( t.isEpsilon) {
            this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
        } else if (t.constructor === WildcardTransition) {
            look.addRange( Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType );
        } else {
            var set = t.label;
            if (set !== null) {
                if (t instanceof NotSetTransition) {
                    set = set.complement(Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);
                }
                look.addSet(set);
            }
        }
    }
};

exports.LL1Analyzer = LL1Analyzer;



/***/ }),
/* 54 */
/***/ (function(module, exports) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// Represents the type of recognizer an ATN applies to.

function ATNType() {

}

ATNType.LEXER = 0;
ATNType.PARSER = 1;

exports.ATNType = ATNType;



/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// When we hit an accept state in either the DFA or the ATN, we
//  have to notify the character stream to start buffering characters
//  via {@link IntStream//mark} and record the current state. The current sim state
//  includes the current index into the input, the current line,
//  and current character position in that line. Note that the Lexer is
//  tracking the starting line and characterization of the token. These
//  variables track the "state" of the simulator when it hits an accept state.
//
//  <p>We track these variables separately for the DFA and ATN simulation
//  because the DFA simulation often has to fail over to the ATN
//  simulation. If the ATN simulation fails, we need the DFA to fall
//  back to its previously accepted state, if any. If the ATN succeeds,
//  then the ATN does the accept and the DFA simulator that invoked it
//  can simply return the predicted token type.</p>
///

var Token = __webpack_require__(2).Token;
var Lexer = __webpack_require__(18).Lexer;
var ATN = __webpack_require__(11).ATN;
var ATNSimulator = __webpack_require__(33).ATNSimulator;
var DFAState = __webpack_require__(15).DFAState;
var ATNConfigSet = __webpack_require__(13).ATNConfigSet;
var OrderedATNConfigSet = __webpack_require__(13).OrderedATNConfigSet;
var PredictionContext = __webpack_require__(10).PredictionContext;
var SingletonPredictionContext = __webpack_require__(10).SingletonPredictionContext;
var RuleStopState = __webpack_require__(6).RuleStopState;
var LexerATNConfig = __webpack_require__(16).LexerATNConfig;
var Transition = __webpack_require__(12).Transition;
var LexerActionExecutor = __webpack_require__(57).LexerActionExecutor;
var LexerNoViableAltException = __webpack_require__(8).LexerNoViableAltException;

function resetSimState(sim) {
	sim.index = -1;
	sim.line = 0;
	sim.column = -1;
	sim.dfaState = null;
}

function SimState() {
	resetSimState(this);
	return this;
}

SimState.prototype.reset = function() {
	resetSimState(this);
};

function LexerATNSimulator(recog, atn, decisionToDFA, sharedContextCache) {
	ATNSimulator.call(this, atn, sharedContextCache);
	this.decisionToDFA = decisionToDFA;
	this.recog = recog;
	// The current token's starting index into the character stream.
	// Shared across DFA to ATN simulation in case the ATN fails and the
	// DFA did not have a previous accept state. In this case, we use the
	// ATN-generated exception object.
	this.startIndex = -1;
	// line number 1..n within the input///
	this.line = 1;
	// The index of the character relative to the beginning of the line
	// 0..n-1///
	this.column = 0;
	this.mode = Lexer.DEFAULT_MODE;
	// Used during DFA/ATN exec to record the most recent accept configuration
	// info
	this.prevAccept = new SimState();
	// done
	return this;
}

LexerATNSimulator.prototype = Object.create(ATNSimulator.prototype);
LexerATNSimulator.prototype.constructor = LexerATNSimulator;

LexerATNSimulator.debug = false;
LexerATNSimulator.dfa_debug = false;

LexerATNSimulator.MIN_DFA_EDGE = 0;
LexerATNSimulator.MAX_DFA_EDGE = 127; // forces unicode to stay in ATN

LexerATNSimulator.match_calls = 0;

LexerATNSimulator.prototype.copyState = function(simulator) {
	this.column = simulator.column;
	this.line = simulator.line;
	this.mode = simulator.mode;
	this.startIndex = simulator.startIndex;
};

LexerATNSimulator.prototype.match = function(input, mode) {
	this.match_calls += 1;
	this.mode = mode;
	var mark = input.mark();
	try {
		this.startIndex = input.index;
		this.prevAccept.reset();
		var dfa = this.decisionToDFA[mode];
		if (dfa.s0 === null) {
			return this.matchATN(input);
		} else {
			return this.execATN(input, dfa.s0);
		}
	} finally {
		input.release(mark);
	}
};

LexerATNSimulator.prototype.reset = function() {
	this.prevAccept.reset();
	this.startIndex = -1;
	this.line = 1;
	this.column = 0;
	this.mode = Lexer.DEFAULT_MODE;
};

LexerATNSimulator.prototype.matchATN = function(input) {
	var startState = this.atn.modeToStartState[this.mode];

	if (LexerATNSimulator.debug) {
		console.log("matchATN mode " + this.mode + " start: " + startState);
	}
	var old_mode = this.mode;
	var s0_closure = this.computeStartState(input, startState);
	var suppressEdge = s0_closure.hasSemanticContext;
	s0_closure.hasSemanticContext = false;

	var next = this.addDFAState(s0_closure);
	if (!suppressEdge) {
		this.decisionToDFA[this.mode].s0 = next;
	}

	var predict = this.execATN(input, next);

	if (LexerATNSimulator.debug) {
		console.log("DFA after matchATN: " + this.decisionToDFA[old_mode].toLexerString());
	}
	return predict;
};

LexerATNSimulator.prototype.execATN = function(input, ds0) {
	if (LexerATNSimulator.debug) {
		console.log("start state closure=" + ds0.configs);
	}
	if (ds0.isAcceptState) {
		// allow zero-length tokens
		this.captureSimState(this.prevAccept, input, ds0);
	}
	var t = input.LA(1);
	var s = ds0; // s is current/from DFA state

	while (true) { // while more work
		if (LexerATNSimulator.debug) {
			console.log("execATN loop starting closure: " + s.configs);
		}

		// As we move src->trg, src->trg, we keep track of the previous trg to
		// avoid looking up the DFA state again, which is expensive.
		// If the previous target was already part of the DFA, we might
		// be able to avoid doing a reach operation upon t. If s!=null,
		// it means that semantic predicates didn't prevent us from
		// creating a DFA state. Once we know s!=null, we check to see if
		// the DFA state has an edge already for t. If so, we can just reuse
		// it's configuration set; there's no point in re-computing it.
		// This is kind of like doing DFA simulation within the ATN
		// simulation because DFA simulation is really just a way to avoid
		// computing reach/closure sets. Technically, once we know that
		// we have a previously added DFA state, we could jump over to
		// the DFA simulator. But, that would mean popping back and forth
		// a lot and making things more complicated algorithmically.
		// This optimization makes a lot of sense for loops within DFA.
		// A character will take us back to an existing DFA state
		// that already has lots of edges out of it. e.g., .* in comments.
		// print("Target for:" + str(s) + " and:" + str(t))
		var target = this.getExistingTargetState(s, t);
		// print("Existing:" + str(target))
		if (target === null) {
			target = this.computeTargetState(input, s, t);
			// print("Computed:" + str(target))
		}
		if (target === ATNSimulator.ERROR) {
			break;
		}
		// If this is a consumable input element, make sure to consume before
		// capturing the accept state so the input index, line, and char
		// position accurately reflect the state of the interpreter at the
		// end of the token.
		if (t !== Token.EOF) {
			this.consume(input);
		}
		if (target.isAcceptState) {
			this.captureSimState(this.prevAccept, input, target);
			if (t === Token.EOF) {
				break;
			}
		}
		t = input.LA(1);
		s = target; // flip; current DFA target becomes new src/from state
	}
	return this.failOrAccept(this.prevAccept, input, s.configs, t);
};

// Get an existing target state for an edge in the DFA. If the target state
// for the edge has not yet been computed or is otherwise not available,
// this method returns {@code null}.
//
// @param s The current DFA state
// @param t The next input symbol
// @return The existing target DFA state for the given input symbol
// {@code t}, or {@code null} if the target state for this edge is not
// already cached
LexerATNSimulator.prototype.getExistingTargetState = function(s, t) {
	if (s.edges === null || t < LexerATNSimulator.MIN_DFA_EDGE || t > LexerATNSimulator.MAX_DFA_EDGE) {
		return null;
	}

	var target = s.edges[t - LexerATNSimulator.MIN_DFA_EDGE];
	if(target===undefined) {
		target = null;
	}
	if (LexerATNSimulator.debug && target !== null) {
		console.log("reuse state " + s.stateNumber + " edge to " + target.stateNumber);
	}
	return target;
};

// Compute a target state for an edge in the DFA, and attempt to add the
// computed state and corresponding edge to the DFA.
//
// @param input The input stream
// @param s The current DFA state
// @param t The next input symbol
//
// @return The computed target DFA state for the given input symbol
// {@code t}. If {@code t} does not lead to a valid DFA state, this method
// returns {@link //ERROR}.
LexerATNSimulator.prototype.computeTargetState = function(input, s, t) {
	var reach = new OrderedATNConfigSet();
	// if we don't find an existing DFA state
	// Fill reach starting from closure, following t transitions
	this.getReachableConfigSet(input, s.configs, reach, t);

	if (reach.items.length === 0) { // we got nowhere on t from s
		if (!reach.hasSemanticContext) {
			// we got nowhere on t, don't throw out this knowledge; it'd
			// cause a failover from DFA later.
			this.addDFAEdge(s, t, ATNSimulator.ERROR);
		}
		// stop when we can't match any more char
		return ATNSimulator.ERROR;
	}
	// Add an edge from s to target DFA found/created for reach
	return this.addDFAEdge(s, t, null, reach);
};

LexerATNSimulator.prototype.failOrAccept = function(prevAccept, input, reach, t) {
	if (this.prevAccept.dfaState !== null) {
		var lexerActionExecutor = prevAccept.dfaState.lexerActionExecutor;
		this.accept(input, lexerActionExecutor, this.startIndex,
				prevAccept.index, prevAccept.line, prevAccept.column);
		return prevAccept.dfaState.prediction;
	} else {
		// if no accept and EOF is first char, return EOF
		if (t === Token.EOF && input.index === this.startIndex) {
			return Token.EOF;
		}
		throw new LexerNoViableAltException(this.recog, input, this.startIndex, reach);
	}
};

// Given a starting configuration set, figure out all ATN configurations
// we can reach upon input {@code t}. Parameter {@code reach} is a return
// parameter.
LexerATNSimulator.prototype.getReachableConfigSet = function(input, closure,
		reach, t) {
	// this is used to skip processing for configs which have a lower priority
	// than a config that already reached an accept state for the same rule
	var skipAlt = ATN.INVALID_ALT_NUMBER;
	for (var i = 0; i < closure.items.length; i++) {
		var cfg = closure.items[i];
		var currentAltReachedAcceptState = (cfg.alt === skipAlt);
		if (currentAltReachedAcceptState && cfg.passedThroughNonGreedyDecision) {
			continue;
		}
		if (LexerATNSimulator.debug) {
			console.log("testing %s at %s\n", this.getTokenName(t), cfg
					.toString(this.recog, true));
		}
		for (var j = 0; j < cfg.state.transitions.length; j++) {
			var trans = cfg.state.transitions[j]; // for each transition
			var target = this.getReachableTarget(trans, t);
			if (target !== null) {
				var lexerActionExecutor = cfg.lexerActionExecutor;
				if (lexerActionExecutor !== null) {
					lexerActionExecutor = lexerActionExecutor.fixOffsetBeforeMatch(input.index - this.startIndex);
				}
				var treatEofAsEpsilon = (t === Token.EOF);
				var config = new LexerATNConfig({state:target, lexerActionExecutor:lexerActionExecutor}, cfg);
				if (this.closure(input, config, reach,
						currentAltReachedAcceptState, true, treatEofAsEpsilon)) {
					// any remaining configs for this alt have a lower priority
					// than the one that just reached an accept state.
					skipAlt = cfg.alt;
				}
			}
		}
	}
};

LexerATNSimulator.prototype.accept = function(input, lexerActionExecutor,
		startIndex, index, line, charPos) {
	if (LexerATNSimulator.debug) {
		console.log("ACTION %s\n", lexerActionExecutor);
	}
	// seek to after last char in token
	input.seek(index);
	this.line = line;
	this.column = charPos;
	if (lexerActionExecutor !== null && this.recog !== null) {
		lexerActionExecutor.execute(this.recog, input, startIndex);
	}
};

LexerATNSimulator.prototype.getReachableTarget = function(trans, t) {
	if (trans.matches(t, 0, Lexer.MAX_CHAR_VALUE)) {
		return trans.target;
	} else {
		return null;
	}
};

LexerATNSimulator.prototype.computeStartState = function(input, p) {
	var initialContext = PredictionContext.EMPTY;
	var configs = new OrderedATNConfigSet();
	for (var i = 0; i < p.transitions.length; i++) {
		var target = p.transitions[i].target;
        var cfg = new LexerATNConfig({state:target, alt:i+1, context:initialContext}, null);
		this.closure(input, cfg, configs, false, false, false);
	}
	return configs;
};

// Since the alternatives within any lexer decision are ordered by
// preference, this method stops pursuing the closure as soon as an accept
// state is reached. After the first accept state is reached by depth-first
// search from {@code config}, all other (potentially reachable) states for
// this rule would have a lower priority.
//
// @return {@code true} if an accept state is reached, otherwise
// {@code false}.
LexerATNSimulator.prototype.closure = function(input, config, configs,
		currentAltReachedAcceptState, speculative, treatEofAsEpsilon) {
	var cfg = null;
	if (LexerATNSimulator.debug) {
		console.log("closure(" + config.toString(this.recog, true) + ")");
	}
	if (config.state instanceof RuleStopState) {
		if (LexerATNSimulator.debug) {
			if (this.recog !== null) {
				console.log("closure at %s rule stop %s\n", this.recog.ruleNames[config.state.ruleIndex], config);
			} else {
				console.log("closure at rule stop %s\n", config);
			}
		}
		if (config.context === null || config.context.hasEmptyPath()) {
			if (config.context === null || config.context.isEmpty()) {
				configs.add(config);
				return true;
			} else {
				configs.add(new LexerATNConfig({ state:config.state, context:PredictionContext.EMPTY}, config));
				currentAltReachedAcceptState = true;
			}
		}
		if (config.context !== null && !config.context.isEmpty()) {
			for (var i = 0; i < config.context.length; i++) {
				if (config.context.getReturnState(i) !== PredictionContext.EMPTY_RETURN_STATE) {
					var newContext = config.context.getParent(i); // "pop" return state
					var returnState = this.atn.states[config.context.getReturnState(i)];
					cfg = new LexerATNConfig({ state:returnState, context:newContext }, config);
					currentAltReachedAcceptState = this.closure(input, cfg,
							configs, currentAltReachedAcceptState, speculative,
							treatEofAsEpsilon);
				}
			}
		}
		return currentAltReachedAcceptState;
	}
	// optimization
	if (!config.state.epsilonOnlyTransitions) {
		if (!currentAltReachedAcceptState || !config.passedThroughNonGreedyDecision) {
			configs.add(config);
		}
	}
	for (var j = 0; j < config.state.transitions.length; j++) {
		var trans = config.state.transitions[j];
		cfg = this.getEpsilonTarget(input, config, trans, configs, speculative, treatEofAsEpsilon);
		if (cfg !== null) {
			currentAltReachedAcceptState = this.closure(input, cfg, configs,
					currentAltReachedAcceptState, speculative, treatEofAsEpsilon);
		}
	}
	return currentAltReachedAcceptState;
};

// side-effect: can alter configs.hasSemanticContext
LexerATNSimulator.prototype.getEpsilonTarget = function(input, config, trans,
		configs, speculative, treatEofAsEpsilon) {
	var cfg = null;
	if (trans.serializationType === Transition.RULE) {
		var newContext = SingletonPredictionContext.create(config.context, trans.followState.stateNumber);
		cfg = new LexerATNConfig( { state:trans.target, context:newContext}, config);
	} else if (trans.serializationType === Transition.PRECEDENCE) {
		throw "Precedence predicates are not supported in lexers.";
	} else if (trans.serializationType === Transition.PREDICATE) {
		// Track traversing semantic predicates. If we traverse,
		// we cannot add a DFA state for this "reach" computation
		// because the DFA would not test the predicate again in the
		// future. Rather than creating collections of semantic predicates
		// like v3 and testing them on prediction, v4 will test them on the
		// fly all the time using the ATN not the DFA. This is slower but
		// semantically it's not used that often. One of the key elements to
		// this predicate mechanism is not adding DFA states that see
		// predicates immediately afterwards in the ATN. For example,

		// a : ID {p1}? | ID {p2}? ;

		// should create the start state for rule 'a' (to save start state
		// competition), but should not create target of ID state. The
		// collection of ATN states the following ID references includes
		// states reached by traversing predicates. Since this is when we
		// test them, we cannot cash the DFA state target of ID.

		if (LexerATNSimulator.debug) {
			console.log("EVAL rule " + trans.ruleIndex + ":" + trans.predIndex);
		}
		configs.hasSemanticContext = true;
		if (this.evaluatePredicate(input, trans.ruleIndex, trans.predIndex, speculative)) {
			cfg = new LexerATNConfig({ state:trans.target}, config);
		}
	} else if (trans.serializationType === Transition.ACTION) {
		if (config.context === null || config.context.hasEmptyPath()) {
			// execute actions anywhere in the start rule for a token.
			//
			// TODO: if the entry rule is invoked recursively, some
			// actions may be executed during the recursive call. The
			// problem can appear when hasEmptyPath() is true but
			// isEmpty() is false. In this case, the config needs to be
			// split into two contexts - one with just the empty path
			// and another with everything but the empty path.
			// Unfortunately, the current algorithm does not allow
			// getEpsilonTarget to return two configurations, so
			// additional modifications are needed before we can support
			// the split operation.
			var lexerActionExecutor = LexerActionExecutor.append(config.lexerActionExecutor,
					this.atn.lexerActions[trans.actionIndex]);
			cfg = new LexerATNConfig({ state:trans.target, lexerActionExecutor:lexerActionExecutor }, config);
		} else {
			// ignore actions in referenced rules
			cfg = new LexerATNConfig( { state:trans.target}, config);
		}
	} else if (trans.serializationType === Transition.EPSILON) {
		cfg = new LexerATNConfig({ state:trans.target}, config);
	} else if (trans.serializationType === Transition.ATOM ||
				trans.serializationType === Transition.RANGE ||
				trans.serializationType === Transition.SET) {
		if (treatEofAsEpsilon) {
			if (trans.matches(Token.EOF, 0, Lexer.MAX_CHAR_VALUE)) {
				cfg = new LexerATNConfig( { state:trans.target }, config);
			}
		}
	}
	return cfg;
};

// Evaluate a predicate specified in the lexer.
//
// <p>If {@code speculative} is {@code true}, this method was called before
// {@link //consume} for the matched character. This method should call
// {@link //consume} before evaluating the predicate to ensure position
// sensitive values, including {@link Lexer//getText}, {@link Lexer//getLine},
// and {@link Lexer//getcolumn}, properly reflect the current
// lexer state. This method should restore {@code input} and the simulator
// to the original state before returning (i.e. undo the actions made by the
// call to {@link //consume}.</p>
//
// @param input The input stream.
// @param ruleIndex The rule containing the predicate.
// @param predIndex The index of the predicate within the rule.
// @param speculative {@code true} if the current index in {@code input} is
// one character before the predicate's location.
//
// @return {@code true} if the specified predicate evaluates to
// {@code true}.
// /
LexerATNSimulator.prototype.evaluatePredicate = function(input, ruleIndex,
		predIndex, speculative) {
	// assume true if no recognizer was provided
	if (this.recog === null) {
		return true;
	}
	if (!speculative) {
		return this.recog.sempred(null, ruleIndex, predIndex);
	}
	var savedcolumn = this.column;
	var savedLine = this.line;
	var index = input.index;
	var marker = input.mark();
	try {
		this.consume(input);
		return this.recog.sempred(null, ruleIndex, predIndex);
	} finally {
		this.column = savedcolumn;
		this.line = savedLine;
		input.seek(index);
		input.release(marker);
	}
};

LexerATNSimulator.prototype.captureSimState = function(settings, input, dfaState) {
	settings.index = input.index;
	settings.line = this.line;
	settings.column = this.column;
	settings.dfaState = dfaState;
};

LexerATNSimulator.prototype.addDFAEdge = function(from_, tk, to, cfgs) {
	if (to === undefined) {
		to = null;
	}
	if (cfgs === undefined) {
		cfgs = null;
	}
	if (to === null && cfgs !== null) {
		// leading to this call, ATNConfigSet.hasSemanticContext is used as a
		// marker indicating dynamic predicate evaluation makes this edge
		// dependent on the specific input sequence, so the static edge in the
		// DFA should be omitted. The target DFAState is still created since
		// execATN has the ability to resynchronize with the DFA state cache
		// following the predicate evaluation step.
		//
		// TJP notes: next time through the DFA, we see a pred again and eval.
		// If that gets us to a previously created (but dangling) DFA
		// state, we can continue in pure DFA mode from there.
		// /
		var suppressEdge = cfgs.hasSemanticContext;
		cfgs.hasSemanticContext = false;

		to = this.addDFAState(cfgs);

		if (suppressEdge) {
			return to;
		}
	}
	// add the edge
	if (tk < LexerATNSimulator.MIN_DFA_EDGE || tk > LexerATNSimulator.MAX_DFA_EDGE) {
		// Only track edges within the DFA bounds
		return to;
	}
	if (LexerATNSimulator.debug) {
		console.log("EDGE " + from_ + " -> " + to + " upon " + tk);
	}
	if (from_.edges === null) {
		// make room for tokens 1..n and -1 masquerading as index 0
		from_.edges = [];
	}
	from_.edges[tk - LexerATNSimulator.MIN_DFA_EDGE] = to; // connect

	return to;
};

// Add a new DFA state if there isn't one with this set of
// configurations already. This method also detects the first
// configuration containing an ATN rule stop state. Later, when
// traversing the DFA, we will know which rule to accept.
LexerATNSimulator.prototype.addDFAState = function(configs) {
	var proposed = new DFAState(null, configs);
	var firstConfigWithRuleStopState = null;
	for (var i = 0; i < configs.items.length; i++) {
		var cfg = configs.items[i];
		if (cfg.state instanceof RuleStopState) {
			firstConfigWithRuleStopState = cfg;
			break;
		}
	}
	if (firstConfigWithRuleStopState !== null) {
		proposed.isAcceptState = true;
		proposed.lexerActionExecutor = firstConfigWithRuleStopState.lexerActionExecutor;
		proposed.prediction = this.atn.ruleToTokenType[firstConfigWithRuleStopState.state.ruleIndex];
	}
	var dfa = this.decisionToDFA[this.mode];
	var existing = dfa.states.get(proposed);
	if (existing!==null) {
		return existing;
	}
	var newState = proposed;
	newState.stateNumber = dfa.states.length;
	configs.setReadonly(true);
	newState.configs = configs;
	dfa.states.add(newState);
	return newState;
};

LexerATNSimulator.prototype.getDFA = function(mode) {
	return this.decisionToDFA[mode];
};

// Get the text matched so far for the current token.
LexerATNSimulator.prototype.getText = function(input) {
	// index is first lookahead char, don't include.
	return input.getText(this.startIndex, input.index - 1);
};

LexerATNSimulator.prototype.consume = function(input) {
	var curChar = input.LA(1);
	if (curChar === "\n".charCodeAt(0)) {
		this.line += 1;
		this.column = 0;
	} else {
		this.column += 1;
	}
	input.consume();
};

LexerATNSimulator.prototype.getTokenName = function(tt) {
	if (tt === -1) {
		return "EOF";
	} else {
		return "'" + String.fromCharCode(tt) + "'";
	}
};

exports.LexerATNSimulator = LexerATNSimulator;


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//
// This default implementation of {@link TokenFactory} creates
// {@link CommonToken} objects.
//

var CommonToken = __webpack_require__(2).CommonToken;

function TokenFactory() {
	return this;
}

function CommonTokenFactory(copyText) {
	TokenFactory.call(this);
    // Indicates whether {@link CommonToken//setText} should be called after
    // constructing tokens to explicitly set the text. This is useful for cases
    // where the input stream might not be able to provide arbitrary substrings
    // of text from the input after the lexer creates a token (e.g. the
    // implementation of {@link CharStream//getText} in
    // {@link UnbufferedCharStream} throws an
    // {@link UnsupportedOperationException}). Explicitly setting the token text
    // allows {@link Token//getText} to be called at any time regardless of the
    // input stream implementation.
    //
    // <p>
    // The default value is {@code false} to avoid the performance and memory
    // overhead of copying text for every token unless explicitly requested.</p>
    //
    this.copyText = copyText===undefined ? false : copyText;
	return this;
}

CommonTokenFactory.prototype = Object.create(TokenFactory.prototype);
CommonTokenFactory.prototype.constructor = CommonTokenFactory;

//
// The default {@link CommonTokenFactory} instance.
//
// <p>
// This token factory does not explicitly copy token text when constructing
// tokens.</p>
//
CommonTokenFactory.DEFAULT = new CommonTokenFactory();

CommonTokenFactory.prototype.create = function(source, type, text, channel, start, stop, line, column) {
    var t = new CommonToken(source, type, channel, start, stop);
    t.line = line;
    t.column = column;
    if (text !==null) {
        t.text = text;
    } else if (this.copyText && source[1] !==null) {
        t.text = source[1].getText(start,stop);
    }
    return t;
};

CommonTokenFactory.prototype.createThin = function(type, text) {
    var t = new CommonToken(null, type);
    t.text = text;
    return t;
};

exports.CommonTokenFactory = CommonTokenFactory;


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// Represents an executor for a sequence of lexer actions which traversed during
// the matching operation of a lexer rule (token).
//
// <p>The executor tracks position information for position-dependent lexer actions
// efficiently, ensuring that actions appearing only at the end of the rule do
// not cause bloating of the {@link DFA} created for the lexer.</p>

var hashStuff = __webpack_require__(0).hashStuff;
var LexerIndexedCustomAction = __webpack_require__(31).LexerIndexedCustomAction;

function LexerActionExecutor(lexerActions) {
	this.lexerActions = lexerActions === null ? [] : lexerActions;
	// Caches the result of {@link //hashCode} since the hash code is an element
	// of the performance-critical {@link LexerATNConfig//hashCode} operation.
	this.cachedHashCode = hashStuff(lexerActions); // "".join([str(la) for la in
	// lexerActions]))
	return this;
}

// Creates a {@link LexerActionExecutor} which executes the actions for
// the input {@code lexerActionExecutor} followed by a specified
// {@code lexerAction}.
//
// @param lexerActionExecutor The executor for actions already traversed by
// the lexer while matching a token within a particular
// {@link LexerATNConfig}. If this is {@code null}, the method behaves as
// though it were an empty executor.
// @param lexerAction The lexer action to execute after the actions
// specified in {@code lexerActionExecutor}.
//
// @return A {@link LexerActionExecutor} for executing the combine actions
// of {@code lexerActionExecutor} and {@code lexerAction}.
LexerActionExecutor.append = function(lexerActionExecutor, lexerAction) {
	if (lexerActionExecutor === null) {
		return new LexerActionExecutor([ lexerAction ]);
	}
	var lexerActions = lexerActionExecutor.lexerActions.concat([ lexerAction ]);
	return new LexerActionExecutor(lexerActions);
};

// Creates a {@link LexerActionExecutor} which encodes the current offset
// for position-dependent lexer actions.
//
// <p>Normally, when the executor encounters lexer actions where
// {@link LexerAction//isPositionDependent} returns {@code true}, it calls
// {@link IntStream//seek} on the input {@link CharStream} to set the input
// position to the <em>end</em> of the current token. This behavior provides
// for efficient DFA representation of lexer actions which appear at the end
// of a lexer rule, even when the lexer rule matches a variable number of
// characters.</p>
//
// <p>Prior to traversing a match transition in the ATN, the current offset
// from the token start index is assigned to all position-dependent lexer
// actions which have not already been assigned a fixed offset. By storing
// the offsets relative to the token start index, the DFA representation of
// lexer actions which appear in the middle of tokens remains efficient due
// to sharing among tokens of the same length, regardless of their absolute
// position in the input stream.</p>
//
// <p>If the current executor already has offsets assigned to all
// position-dependent lexer actions, the method returns {@code this}.</p>
//
// @param offset The current offset to assign to all position-dependent
// lexer actions which do not already have offsets assigned.
//
// @return A {@link LexerActionExecutor} which stores input stream offsets
// for all position-dependent lexer actions.
// /
LexerActionExecutor.prototype.fixOffsetBeforeMatch = function(offset) {
	var updatedLexerActions = null;
	for (var i = 0; i < this.lexerActions.length; i++) {
		if (this.lexerActions[i].isPositionDependent &&
				!(this.lexerActions[i] instanceof LexerIndexedCustomAction)) {
			if (updatedLexerActions === null) {
				updatedLexerActions = this.lexerActions.concat([]);
			}
			updatedLexerActions[i] = new LexerIndexedCustomAction(offset,
					this.lexerActions[i]);
		}
	}
	if (updatedLexerActions === null) {
		return this;
	} else {
		return new LexerActionExecutor(updatedLexerActions);
	}
};

// Execute the actions encapsulated by this executor within the context of a
// particular {@link Lexer}.
//
// <p>This method calls {@link IntStream//seek} to set the position of the
// {@code input} {@link CharStream} prior to calling
// {@link LexerAction//execute} on a position-dependent action. Before the
// method returns, the input position will be restored to the same position
// it was in when the method was invoked.</p>
//
// @param lexer The lexer instance.
// @param input The input stream which is the source for the current token.
// When this method is called, the current {@link IntStream//index} for
// {@code input} should be the start of the following token, i.e. 1
// character past the end of the current token.
// @param startIndex The token start index. This value may be passed to
// {@link IntStream//seek} to set the {@code input} position to the beginning
// of the token.
// /
LexerActionExecutor.prototype.execute = function(lexer, input, startIndex) {
	var requiresSeek = false;
	var stopIndex = input.index;
	try {
		for (var i = 0; i < this.lexerActions.length; i++) {
			var lexerAction = this.lexerActions[i];
			if (lexerAction instanceof LexerIndexedCustomAction) {
				var offset = lexerAction.offset;
				input.seek(startIndex + offset);
				lexerAction = lexerAction.action;
				requiresSeek = (startIndex + offset) !== stopIndex;
			} else if (lexerAction.isPositionDependent) {
				input.seek(stopIndex);
				requiresSeek = false;
			}
			lexerAction.execute(lexer);
		}
	} finally {
		if (requiresSeek) {
			input.seek(stopIndex);
		}
	}
};

LexerActionExecutor.prototype.hashCode = function() {
	return this.cachedHashCode;
};

LexerActionExecutor.prototype.updateHashCode = function(hash) {
    hash.update(this.cachedHashCode);
};


LexerActionExecutor.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof LexerActionExecutor)) {
		return false;
	} else if (this.cachedHashCode != other.cachedHashCode) {
		return false;
	} else if (this.lexerActions.length != other.lexerActions.length) {
		return false;
	} else {
		var numActions = this.lexerActions.length
		for (var idx = 0; idx < numActions; ++idx) {
			if (!this.lexerActions[idx].equals(other.lexerActions[idx])) {
				return false;
			}
		}
		return true;
	}
};

exports.LexerActionExecutor = LexerActionExecutor;


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//
// The embodiment of the adaptive LL(*), ALL(*), parsing strategy.
//
// <p>
// The basic complexity of the adaptive strategy makes it harder to understand.
// We begin with ATN simulation to build paths in a DFA. Subsequent prediction
// requests go through the DFA first. If they reach a state without an edge for
// the current symbol, the algorithm fails over to the ATN simulation to
// complete the DFA path for the current input (until it finds a conflict state
// or uniquely predicting state).</p>
//
// <p>
// All of that is done without using the outer context because we want to create
// a DFA that is not dependent upon the rule invocation stack when we do a
// prediction. One DFA works in all contexts. We avoid using context not
// necessarily because it's slower, although it can be, but because of the DFA
// caching problem. The closure routine only considers the rule invocation stack
// created during prediction beginning in the decision rule. For example, if
// prediction occurs without invoking another rule's ATN, there are no context
// stacks in the configurations. When lack of context leads to a conflict, we
// don't know if it's an ambiguity or a weakness in the strong LL(*) parsing
// strategy (versus full LL(*)).</p>
//
// <p>
// When SLL yields a configuration set with conflict, we rewind the input and
// retry the ATN simulation, this time using full outer context without adding
// to the DFA. Configuration context stacks will be the full invocation stacks
// from the start rule. If we get a conflict using full context, then we can
// definitively say we have a true ambiguity for that input sequence. If we
// don't get a conflict, it implies that the decision is sensitive to the outer
// context. (It is not context-sensitive in the sense of context-sensitive
// grammars.)</p>
//
// <p>
// The next time we reach this DFA state with an SLL conflict, through DFA
// simulation, we will again retry the ATN simulation using full context mode.
// This is slow because we can't save the results and have to "interpret" the
// ATN each time we get that input.</p>
//
// <p>
// <strong>CACHING FULL CONTEXT PREDICTIONS</strong></p>
//
// <p>
// We could cache results from full context to predicted alternative easily and
// that saves a lot of time but doesn't work in presence of predicates. The set
// of visible predicates from the ATN start state changes depending on the
// context, because closure can fall off the end of a rule. I tried to cache
// tuples (stack context, semantic context, predicted alt) but it was slower
// than interpreting and much more complicated. Also required a huge amount of
// memory. The goal is not to create the world's fastest parser anyway. I'd like
// to keep this algorithm simple. By launching multiple threads, we can improve
// the speed of parsing across a large number of files.</p>
//
// <p>
// There is no strict ordering between the amount of input used by SLL vs LL,
// which makes it really hard to build a cache for full context. Let's say that
// we have input A B C that leads to an SLL conflict with full context X. That
// implies that using X we might only use A B but we could also use A B C D to
// resolve conflict. Input A B C D could predict alternative 1 in one position
// in the input and A B C E could predict alternative 2 in another position in
// input. The conflicting SLL configurations could still be non-unique in the
// full context prediction, which would lead us to requiring more input than the
// original A B C.	To make a	prediction cache work, we have to track	the exact
// input	used during the previous prediction. That amounts to a cache that maps
// X to a specific DFA for that context.</p>
//
// <p>
// Something should be done for left-recursive expression predictions. They are
// likely LL(1) + pred eval. Easier to do the whole SLL unless error and retry
// with full LL thing Sam does.</p>
//
// <p>
// <strong>AVOIDING FULL CONTEXT PREDICTION</strong></p>
//
// <p>
// We avoid doing full context retry when the outer context is empty, we did not
// dip into the outer context by falling off the end of the decision state rule,
// or when we force SLL mode.</p>
//
// <p>
// As an example of the not dip into outer context case, consider as super
// constructor calls versus function calls. One grammar might look like
// this:</p>
//
// <pre>
// ctorBody
//   : '{' superCall? stat* '}'
//   ;
// </pre>
//
// <p>
// Or, you might see something like</p>
//
// <pre>
// stat
//   : superCall ';'
//   | expression ';'
//   | ...
//   ;
// </pre>
//
// <p>
// In both cases I believe that no closure operations will dip into the outer
// context. In the first case ctorBody in the worst case will stop at the '}'.
// In the 2nd case it should stop at the ';'. Both cases should stay within the
// entry rule and not dip into the outer context.</p>
//
// <p>
// <strong>PREDICATES</strong></p>
//
// <p>
// Predicates are always evaluated if present in either SLL or LL both. SLL and
// LL simulation deals with predicates differently. SLL collects predicates as
// it performs closure operations like ANTLR v3 did. It delays predicate
// evaluation until it reaches and accept state. This allows us to cache the SLL
// ATN simulation whereas, if we had evaluated predicates on-the-fly during
// closure, the DFA state configuration sets would be different and we couldn't
// build up a suitable DFA.</p>
//
// <p>
// When building a DFA accept state during ATN simulation, we evaluate any
// predicates and return the sole semantically valid alternative. If there is
// more than 1 alternative, we report an ambiguity. If there are 0 alternatives,
// we throw an exception. Alternatives without predicates act like they have
// true predicates. The simple way to think about it is to strip away all
// alternatives with false predicates and choose the minimum alternative that
// remains.</p>
//
// <p>
// When we start in the DFA and reach an accept state that's predicated, we test
// those and return the minimum semantically viable alternative. If no
// alternatives are viable, we throw an exception.</p>
//
// <p>
// During full LL ATN simulation, closure always evaluates predicates and
// on-the-fly. This is crucial to reducing the configuration set size during
// closure. It hits a landmine when parsing with the Java grammar, for example,
// without this on-the-fly evaluation.</p>
//
// <p>
// <strong>SHARING DFA</strong></p>
//
// <p>
// All instances of the same parser share the same decision DFAs through a
// static field. Each instance gets its own ATN simulator but they share the
// same {@link //decisionToDFA} field. They also share a
// {@link PredictionContextCache} object that makes sure that all
// {@link PredictionContext} objects are shared among the DFA states. This makes
// a big size difference.</p>
//
// <p>
// <strong>THREAD SAFETY</strong></p>
//
// <p>
// The {@link ParserATNSimulator} locks on the {@link //decisionToDFA} field when
// it adds a new DFA object to that array. {@link //addDFAEdge}
// locks on the DFA for the current decision when setting the
// {@link DFAState//edges} field. {@link //addDFAState} locks on
// the DFA for the current decision when looking up a DFA state to see if it
// already exists. We must make sure that all requests to add DFA states that
// are equivalent result in the same shared DFA object. This is because lots of
// threads will be trying to update the DFA at once. The
// {@link //addDFAState} method also locks inside the DFA lock
// but this time on the shared context cache when it rebuilds the
// configurations' {@link PredictionContext} objects using cached
// subgraphs/nodes. No other locking occurs, even during DFA simulation. This is
// safe as long as we can guarantee that all threads referencing
// {@code s.edge[t]} get the same physical target {@link DFAState}, or
// {@code null}. Once into the DFA, the DFA simulation does not reference the
// {@link DFA//states} map. It follows the {@link DFAState//edges} field to new
// targets. The DFA simulator will either find {@link DFAState//edges} to be
// {@code null}, to be non-{@code null} and {@code dfa.edges[t]} null, or
// {@code dfa.edges[t]} to be non-null. The
// {@link //addDFAEdge} method could be racing to set the field
// but in either case the DFA simulator works; if {@code null}, and requests ATN
// simulation. It could also race trying to get {@code dfa.edges[t]}, but either
// way it will work because it's not doing a test and set operation.</p>
//
// <p>
// <strong>Starting with SLL then failing to combined SLL/LL (Two-Stage
// Parsing)</strong></p>
//
// <p>
// Sam pointed out that if SLL does not give a syntax error, then there is no
// point in doing full LL, which is slower. We only have to try LL if we get a
// syntax error. For maximum speed, Sam starts the parser set to pure SLL
// mode with the {@link BailErrorStrategy}:</p>
//
// <pre>
// parser.{@link Parser//getInterpreter() getInterpreter()}.{@link //setPredictionMode setPredictionMode}{@code (}{@link PredictionMode//SLL}{@code )};
// parser.{@link Parser//setErrorHandler setErrorHandler}(new {@link BailErrorStrategy}());
// </pre>
//
// <p>
// If it does not get a syntax error, then we're done. If it does get a syntax
// error, we need to retry with the combined SLL/LL strategy.</p>
//
// <p>
// The reason this works is as follows. If there are no SLL conflicts, then the
// grammar is SLL (at least for that input set). If there is an SLL conflict,
// the full LL analysis must yield a set of viable alternatives which is a
// subset of the alternatives reported by SLL. If the LL set is a singleton,
// then the grammar is LL but not SLL. If the LL set is the same size as the SLL
// set, the decision is SLL. If the LL set has size &gt; 1, then that decision
// is truly ambiguous on the current input. If the LL set is smaller, then the
// SLL conflict resolution might choose an alternative that the full LL would
// rule out as a possibility based upon better context information. If that's
// the case, then the SLL parse will definitely get an error because the full LL
// analysis says it's not viable. If SLL conflict resolution chooses an
// alternative within the LL set, them both SLL and LL would choose the same
// alternative because they both choose the minimum of multiple conflicting
// alternatives.</p>
//
// <p>
// Let's say we have a set of SLL conflicting alternatives {@code {1, 2, 3}} and
// a smaller LL set called <em>s</em>. If <em>s</em> is {@code {2, 3}}, then SLL
// parsing will get an error because SLL will pursue alternative 1. If
// <em>s</em> is {@code {1, 2}} or {@code {1, 3}} then both SLL and LL will
// choose the same alternative because alternative one is the minimum of either
// set. If <em>s</em> is {@code {2}} or {@code {3}} then SLL will get a syntax
// error. If <em>s</em> is {@code {1}} then SLL will succeed.</p>
//
// <p>
// Of course, if the input is invalid, then we will get an error for sure in
// both SLL and LL parsing. Erroneous input will therefore require 2 passes over
// the input.</p>
//

var Utils = __webpack_require__(0);
var Set = Utils.Set;
var BitSet = Utils.BitSet;
var DoubleDict = Utils.DoubleDict;
var ATN = __webpack_require__(11).ATN;
var ATNState = __webpack_require__(6).ATNState;
var ATNConfig = __webpack_require__(16).ATNConfig;
var ATNConfigSet = __webpack_require__(13).ATNConfigSet;
var Token = __webpack_require__(2).Token;
var DFAState = __webpack_require__(15).DFAState;
var PredPrediction = __webpack_require__(15).PredPrediction;
var ATNSimulator = __webpack_require__(33).ATNSimulator;
var PredictionMode = __webpack_require__(34).PredictionMode;
var RuleContext = __webpack_require__(17).RuleContext;
var ParserRuleContext = __webpack_require__(21).ParserRuleContext;
var SemanticContext = __webpack_require__(14).SemanticContext;
var StarLoopEntryState = __webpack_require__(6).StarLoopEntryState;
var RuleStopState = __webpack_require__(6).RuleStopState;
var PredictionContext = __webpack_require__(10).PredictionContext;
var Interval = __webpack_require__(4).Interval;
var Transitions = __webpack_require__(12);
var Transition = Transitions.Transition;
var SetTransition = Transitions.SetTransition;
var NotSetTransition = Transitions.NotSetTransition;
var RuleTransition = Transitions.RuleTransition;
var ActionTransition = Transitions.ActionTransition;
var NoViableAltException = __webpack_require__(8).NoViableAltException;

var SingletonPredictionContext = __webpack_require__(10).SingletonPredictionContext;
var predictionContextFromRuleContext = __webpack_require__(10).predictionContextFromRuleContext;

function ParserATNSimulator(parser, atn, decisionToDFA, sharedContextCache) {
	ATNSimulator.call(this, atn, sharedContextCache);
    this.parser = parser;
    this.decisionToDFA = decisionToDFA;
    // SLL, LL, or LL + exact ambig detection?//
    this.predictionMode = PredictionMode.LL;
    // LAME globals to avoid parameters!!!!! I need these down deep in predTransition
    this._input = null;
    this._startIndex = 0;
    this._outerContext = null;
    this._dfa = null;
    // Each prediction operation uses a cache for merge of prediction contexts.
    //  Don't keep around as it wastes huge amounts of memory. DoubleKeyMap
    //  isn't synchronized but we're ok since two threads shouldn't reuse same
    //  parser/atnsim object because it can only handle one input at a time.
    //  This maps graphs a and b to merged result c. (a,b)&rarr;c. We can avoid
    //  the merge if we ever see a and b again.  Note that (b,a)&rarr;c should
    //  also be examined during cache lookup.
    //
    this.mergeCache = null;
    return this;
}

ParserATNSimulator.prototype = Object.create(ATNSimulator.prototype);
ParserATNSimulator.prototype.constructor = ParserATNSimulator;

ParserATNSimulator.prototype.debug = false;
ParserATNSimulator.prototype.debug_closure = false;
ParserATNSimulator.prototype.debug_add = false;
ParserATNSimulator.prototype.debug_list_atn_decisions = false;
ParserATNSimulator.prototype.dfa_debug = false;
ParserATNSimulator.prototype.retry_debug = false;


ParserATNSimulator.prototype.reset = function() {
};

ParserATNSimulator.prototype.adaptivePredict = function(input, decision, outerContext) {
    if (this.debug || this.debug_list_atn_decisions) {
        console.log("adaptivePredict decision " + decision +
                               " exec LA(1)==" + this.getLookaheadName(input) +
                               " line " + input.LT(1).line + ":" +
                               input.LT(1).column);
    }
    this._input = input;
    this._startIndex = input.index;
    this._outerContext = outerContext;

    var dfa = this.decisionToDFA[decision];
    this._dfa = dfa;
    var m = input.mark();
    var index = input.index;

    // Now we are certain to have a specific decision's DFA
    // But, do we still need an initial state?
    try {
        var s0;
        if (dfa.precedenceDfa) {
            // the start state for a precedence DFA depends on the current
            // parser precedence, and is provided by a DFA method.
            s0 = dfa.getPrecedenceStartState(this.parser.getPrecedence());
        } else {
            // the start state for a "regular" DFA is just s0
            s0 = dfa.s0;
        }
        if (s0===null) {
            if (outerContext===null) {
                outerContext = RuleContext.EMPTY;
            }
            if (this.debug || this.debug_list_atn_decisions) {
                console.log("predictATN decision " + dfa.decision +
                                   " exec LA(1)==" + this.getLookaheadName(input) +
                                   ", outerContext=" + outerContext.toString(this.parser.ruleNames));
            }

            var fullCtx = false;
            var s0_closure = this.computeStartState(dfa.atnStartState, RuleContext.EMPTY, fullCtx);

            if( dfa.precedenceDfa) {
                // If this is a precedence DFA, we use applyPrecedenceFilter
                // to convert the computed start state to a precedence start
                // state. We then use DFA.setPrecedenceStartState to set the
                // appropriate start state for the precedence level rather
                // than simply setting DFA.s0.
                //
                dfa.s0.configs = s0_closure; // not used for prediction but useful to know start configs anyway
                s0_closure = this.applyPrecedenceFilter(s0_closure);
                s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));
                dfa.setPrecedenceStartState(this.parser.getPrecedence(), s0);
            } else {
                s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));
                dfa.s0 = s0;
            }
        }
        var alt = this.execATN(dfa, s0, input, index, outerContext);
        if (this.debug) {
            console.log("DFA after predictATN: " + dfa.toString(this.parser.literalNames));
        }
        return alt;
    } finally {
        this._dfa = null;
        this.mergeCache = null; // wack cache after each prediction
        input.seek(index);
        input.release(m);
    }
};
// Performs ATN simulation to compute a predicted alternative based
//  upon the remaining input, but also updates the DFA cache to avoid
//  having to traverse the ATN again for the same input sequence.

// There are some key conditions we're looking for after computing a new
// set of ATN configs (proposed DFA state):
      // if the set is empty, there is no viable alternative for current symbol
      // does the state uniquely predict an alternative?
      // does the state have a conflict that would prevent us from
      //   putting it on the work list?

// We also have some key operations to do:
      // add an edge from previous DFA state to potentially new DFA state, D,
      //   upon current symbol but only if adding to work list, which means in all
      //   cases except no viable alternative (and possibly non-greedy decisions?)
      // collecting predicates and adding semantic context to DFA accept states
      // adding rule context to context-sensitive DFA accept states
      // consuming an input symbol
      // reporting a conflict
      // reporting an ambiguity
      // reporting a context sensitivity
      // reporting insufficient predicates

// cover these cases:
//    dead end
//    single alt
//    single alt + preds
//    conflict
//    conflict + preds
//
ParserATNSimulator.prototype.execATN = function(dfa, s0, input, startIndex, outerContext ) {
    if (this.debug || this.debug_list_atn_decisions) {
        console.log("execATN decision " + dfa.decision +
                " exec LA(1)==" + this.getLookaheadName(input) +
                " line " + input.LT(1).line + ":" + input.LT(1).column);
    }
    var alt;
    var previousD = s0;

    if (this.debug) {
        console.log("s0 = " + s0);
    }
    var t = input.LA(1);
    while(true) { // while more work
        var D = this.getExistingTargetState(previousD, t);
        if(D===null) {
            D = this.computeTargetState(dfa, previousD, t);
        }
        if(D===ATNSimulator.ERROR) {
            // if any configs in previous dipped into outer context, that
            // means that input up to t actually finished entry rule
            // at least for SLL decision. Full LL doesn't dip into outer
            // so don't need special case.
            // We will get an error no matter what so delay until after
            // decision; better error message. Also, no reachable target
            // ATN states in SLL implies LL will also get nowhere.
            // If conflict in states that dip out, choose min since we
            // will get error no matter what.
            var e = this.noViableAlt(input, outerContext, previousD.configs, startIndex);
            input.seek(startIndex);
            alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previousD.configs, outerContext);
            if(alt!==ATN.INVALID_ALT_NUMBER) {
                return alt;
            } else {
                throw e;
            }
        }
        if(D.requiresFullContext && this.predictionMode !== PredictionMode.SLL) {
            // IF PREDS, MIGHT RESOLVE TO SINGLE ALT => SLL (or syntax error)
            var conflictingAlts = null;
            if (D.predicates!==null) {
                if (this.debug) {
                    console.log("DFA state has preds in DFA sim LL failover");
                }
                var conflictIndex = input.index;
                if(conflictIndex !== startIndex) {
                    input.seek(startIndex);
                }
                conflictingAlts = this.evalSemanticContext(D.predicates, outerContext, true);
                if (conflictingAlts.length===1) {
                    if(this.debug) {
                        console.log("Full LL avoided");
                    }
                    return conflictingAlts.minValue();
                }
                if (conflictIndex !== startIndex) {
                    // restore the index so reporting the fallback to full
                    // context occurs with the index at the correct spot
                    input.seek(conflictIndex);
                }
            }
            if (this.dfa_debug) {
                console.log("ctx sensitive state " + outerContext +" in " + D);
            }
            var fullCtx = true;
            var s0_closure = this.computeStartState(dfa.atnStartState, outerContext, fullCtx);
            this.reportAttemptingFullContext(dfa, conflictingAlts, D.configs, startIndex, input.index);
            alt = this.execATNWithFullContext(dfa, D, s0_closure, input, startIndex, outerContext);
            return alt;
        }
        if (D.isAcceptState) {
            if (D.predicates===null) {
                return D.prediction;
            }
            var stopIndex = input.index;
            input.seek(startIndex);
            var alts = this.evalSemanticContext(D.predicates, outerContext, true);
            if (alts.length===0) {
                throw this.noViableAlt(input, outerContext, D.configs, startIndex);
            } else if (alts.length===1) {
                return alts.minValue();
            } else {
                // report ambiguity after predicate evaluation to make sure the correct set of ambig alts is reported.
                this.reportAmbiguity(dfa, D, startIndex, stopIndex, false, alts, D.configs);
                return alts.minValue();
            }
        }
        previousD = D;

        if (t !== Token.EOF) {
            input.consume();
            t = input.LA(1);
        }
    }
};
//
// Get an existing target state for an edge in the DFA. If the target state
// for the edge has not yet been computed or is otherwise not available,
// this method returns {@code null}.
//
// @param previousD The current DFA state
// @param t The next input symbol
// @return The existing target DFA state for the given input symbol
// {@code t}, or {@code null} if the target state for this edge is not
// already cached
//
ParserATNSimulator.prototype.getExistingTargetState = function(previousD, t) {
    var edges = previousD.edges;
    if (edges===null) {
        return null;
    } else {
        return edges[t + 1] || null;
    }
};
//
// Compute a target state for an edge in the DFA, and attempt to add the
// computed state and corresponding edge to the DFA.
//
// @param dfa The DFA
// @param previousD The current DFA state
// @param t The next input symbol
//
// @return The computed target DFA state for the given input symbol
// {@code t}. If {@code t} does not lead to a valid DFA state, this method
// returns {@link //ERROR}.
//
ParserATNSimulator.prototype.computeTargetState = function(dfa, previousD, t) {
   var reach = this.computeReachSet(previousD.configs, t, false);
    if(reach===null) {
        this.addDFAEdge(dfa, previousD, t, ATNSimulator.ERROR);
        return ATNSimulator.ERROR;
    }
    // create new target state; we'll add to DFA after it's complete
    var D = new DFAState(null, reach);

    var predictedAlt = this.getUniqueAlt(reach);

    if (this.debug) {
        var altSubSets = PredictionMode.getConflictingAltSubsets(reach);
        console.log("SLL altSubSets=" + Utils.arrayToString(altSubSets) +
                    ", previous=" + previousD.configs +
                    ", configs=" + reach +
                    ", predict=" + predictedAlt +
                    ", allSubsetsConflict=" +
                    PredictionMode.allSubsetsConflict(altSubSets) + ", conflictingAlts=" +
                    this.getConflictingAlts(reach));
    }
    if (predictedAlt!==ATN.INVALID_ALT_NUMBER) {
        // NO CONFLICT, UNIQUELY PREDICTED ALT
        D.isAcceptState = true;
        D.configs.uniqueAlt = predictedAlt;
        D.prediction = predictedAlt;
    } else if (PredictionMode.hasSLLConflictTerminatingPrediction(this.predictionMode, reach)) {
        // MORE THAN ONE VIABLE ALTERNATIVE
        D.configs.conflictingAlts = this.getConflictingAlts(reach);
        D.requiresFullContext = true;
        // in SLL-only mode, we will stop at this state and return the minimum alt
        D.isAcceptState = true;
        D.prediction = D.configs.conflictingAlts.minValue();
    }
    if (D.isAcceptState && D.configs.hasSemanticContext) {
        this.predicateDFAState(D, this.atn.getDecisionState(dfa.decision));
        if( D.predicates!==null) {
            D.prediction = ATN.INVALID_ALT_NUMBER;
        }
    }
    // all adds to dfa are done after we've created full D state
    D = this.addDFAEdge(dfa, previousD, t, D);
    return D;
};

ParserATNSimulator.prototype.predicateDFAState = function(dfaState, decisionState) {
    // We need to test all predicates, even in DFA states that
    // uniquely predict alternative.
    var nalts = decisionState.transitions.length;
    // Update DFA so reach becomes accept state with (predicate,alt)
    // pairs if preds found for conflicting alts
    var altsToCollectPredsFrom = this.getConflictingAltsOrUniqueAlt(dfaState.configs);
    var altToPred = this.getPredsForAmbigAlts(altsToCollectPredsFrom, dfaState.configs, nalts);
    if (altToPred!==null) {
        dfaState.predicates = this.getPredicatePredictions(altsToCollectPredsFrom, altToPred);
        dfaState.prediction = ATN.INVALID_ALT_NUMBER; // make sure we use preds
    } else {
        // There are preds in configs but they might go away
        // when OR'd together like {p}? || NONE == NONE. If neither
        // alt has preds, resolve to min alt
        dfaState.prediction = altsToCollectPredsFrom.minValue();
    }
};

// comes back with reach.uniqueAlt set to a valid alt
ParserATNSimulator.prototype.execATNWithFullContext = function(dfa, D, // how far we got before failing over
                                     s0,
                                     input,
                                     startIndex,
                                     outerContext) {
    if (this.debug || this.debug_list_atn_decisions) {
        console.log("execATNWithFullContext "+s0);
    }
    var fullCtx = true;
    var foundExactAmbig = false;
    var reach = null;
    var previous = s0;
    input.seek(startIndex);
    var t = input.LA(1);
    var predictedAlt = -1;
    while (true) { // while more work
        reach = this.computeReachSet(previous, t, fullCtx);
        if (reach===null) {
            // if any configs in previous dipped into outer context, that
            // means that input up to t actually finished entry rule
            // at least for LL decision. Full LL doesn't dip into outer
            // so don't need special case.
            // We will get an error no matter what so delay until after
            // decision; better error message. Also, no reachable target
            // ATN states in SLL implies LL will also get nowhere.
            // If conflict in states that dip out, choose min since we
            // will get error no matter what.
            var e = this.noViableAlt(input, outerContext, previous, startIndex);
            input.seek(startIndex);
            var alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previous, outerContext);
            if(alt!==ATN.INVALID_ALT_NUMBER) {
                return alt;
            } else {
                throw e;
            }
        }
        var altSubSets = PredictionMode.getConflictingAltSubsets(reach);
        if(this.debug) {
            console.log("LL altSubSets=" + altSubSets + ", predict=" +
                  PredictionMode.getUniqueAlt(altSubSets) + ", resolvesToJustOneViableAlt=" +
                  PredictionMode.resolvesToJustOneViableAlt(altSubSets));
        }
        reach.uniqueAlt = this.getUniqueAlt(reach);
        // unique prediction?
        if(reach.uniqueAlt!==ATN.INVALID_ALT_NUMBER) {
            predictedAlt = reach.uniqueAlt;
            break;
        } else if (this.predictionMode !== PredictionMode.LL_EXACT_AMBIG_DETECTION) {
            predictedAlt = PredictionMode.resolvesToJustOneViableAlt(altSubSets);
            if(predictedAlt !== ATN.INVALID_ALT_NUMBER) {
                break;
            }
        } else {
            // In exact ambiguity mode, we never try to terminate early.
            // Just keeps scarfing until we know what the conflict is
            if (PredictionMode.allSubsetsConflict(altSubSets) && PredictionMode.allSubsetsEqual(altSubSets)) {
                foundExactAmbig = true;
                predictedAlt = PredictionMode.getSingleViableAlt(altSubSets);
                break;
            }
            // else there are multiple non-conflicting subsets or
            // we're not sure what the ambiguity is yet.
            // So, keep going.
        }
        previous = reach;
        if( t !== Token.EOF) {
            input.consume();
            t = input.LA(1);
        }
    }
    // If the configuration set uniquely predicts an alternative,
    // without conflict, then we know that it's a full LL decision
    // not SLL.
    if (reach.uniqueAlt !== ATN.INVALID_ALT_NUMBER ) {
        this.reportContextSensitivity(dfa, predictedAlt, reach, startIndex, input.index);
        return predictedAlt;
    }
    // We do not check predicates here because we have checked them
    // on-the-fly when doing full context prediction.

    //
    // In non-exact ambiguity detection mode, we might	actually be able to
    // detect an exact ambiguity, but I'm not going to spend the cycles
    // needed to check. We only emit ambiguity warnings in exact ambiguity
    // mode.
    //
    // For example, we might know that we have conflicting configurations.
    // But, that does not mean that there is no way forward without a
    // conflict. It's possible to have nonconflicting alt subsets as in:

    // altSubSets=[{1, 2}, {1, 2}, {1}, {1, 2}]

    // from
    //
    //    [(17,1,[5 $]), (13,1,[5 10 $]), (21,1,[5 10 $]), (11,1,[$]),
    //     (13,2,[5 10 $]), (21,2,[5 10 $]), (11,2,[$])]
    //
    // In this case, (17,1,[5 $]) indicates there is some next sequence that
    // would resolve this without conflict to alternative 1. Any other viable
    // next sequence, however, is associated with a conflict.  We stop
    // looking for input because no amount of further lookahead will alter
    // the fact that we should predict alternative 1.  We just can't say for
    // sure that there is an ambiguity without looking further.

    this.reportAmbiguity(dfa, D, startIndex, input.index, foundExactAmbig, null, reach);

    return predictedAlt;
};

ParserATNSimulator.prototype.computeReachSet = function(closure, t, fullCtx) {
    if (this.debug) {
        console.log("in computeReachSet, starting closure: " + closure);
    }
    if( this.mergeCache===null) {
        this.mergeCache = new DoubleDict();
    }
    var intermediate = new ATNConfigSet(fullCtx);

    // Configurations already in a rule stop state indicate reaching the end
    // of the decision rule (local context) or end of the start rule (full
    // context). Once reached, these configurations are never updated by a
    // closure operation, so they are handled separately for the performance
    // advantage of having a smaller intermediate set when calling closure.
    //
    // For full-context reach operations, separate handling is required to
    // ensure that the alternative matching the longest overall sequence is
    // chosen when multiple such configurations can match the input.

    var skippedStopStates = null;

    // First figure out where we can reach on input t
    for (var i=0; i<closure.items.length;i++) {
        var c = closure.items[i];
        if(this.debug_add) {
            console.log("testing " + this.getTokenName(t) + " at " + c);
        }
        if (c.state instanceof RuleStopState) {
            if (fullCtx || t === Token.EOF) {
                if (skippedStopStates===null) {
                    skippedStopStates = [];
                }
                skippedStopStates.push(c);
                if(this.debug_add) {
                    console.log("added " + c + " to skippedStopStates");
                }
            }
            continue;
        }
        for(var j=0;j<c.state.transitions.length;j++) {
            var trans = c.state.transitions[j];
            var target = this.getReachableTarget(trans, t);
            if (target!==null) {
                var cfg = new ATNConfig({state:target}, c);
                intermediate.add(cfg, this.mergeCache);
                if(this.debug_add) {
                    console.log("added " + cfg + " to intermediate");
                }
            }
        }
    }
    // Now figure out where the reach operation can take us...
    var reach = null;

    // This block optimizes the reach operation for intermediate sets which
    // trivially indicate a termination state for the overall
    // adaptivePredict operation.
    //
    // The conditions assume that intermediate
    // contains all configurations relevant to the reach set, but this
    // condition is not true when one or more configurations have been
    // withheld in skippedStopStates, or when the current symbol is EOF.
    //
    if (skippedStopStates===null && t!==Token.EOF) {
        if (intermediate.items.length===1) {
            // Don't pursue the closure if there is just one state.
            // It can only have one alternative; just add to result
            // Also don't pursue the closure if there is unique alternative
            // among the configurations.
            reach = intermediate;
        } else if (this.getUniqueAlt(intermediate)!==ATN.INVALID_ALT_NUMBER) {
            // Also don't pursue the closure if there is unique alternative
            // among the configurations.
            reach = intermediate;
        }
    }
    // If the reach set could not be trivially determined, perform a closure
    // operation on the intermediate set to compute its initial value.
    //
    if (reach===null) {
        reach = new ATNConfigSet(fullCtx);
        var closureBusy = new Set();
        var treatEofAsEpsilon = t === Token.EOF;
        for (var k=0; k<intermediate.items.length;k++) {
            this.closure(intermediate.items[k], reach, closureBusy, false, fullCtx, treatEofAsEpsilon);
        }
    }
    if (t === Token.EOF) {
        // After consuming EOF no additional input is possible, so we are
        // only interested in configurations which reached the end of the
        // decision rule (local context) or end of the start rule (full
        // context). Update reach to contain only these configurations. This
        // handles both explicit EOF transitions in the grammar and implicit
        // EOF transitions following the end of the decision or start rule.
        //
        // When reach==intermediate, no closure operation was performed. In
        // this case, removeAllConfigsNotInRuleStopState needs to check for
        // reachable rule stop states as well as configurations already in
        // a rule stop state.
        //
        // This is handled before the configurations in skippedStopStates,
        // because any configurations potentially added from that list are
        // already guaranteed to meet this condition whether or not it's
        // required.
        //
        reach = this.removeAllConfigsNotInRuleStopState(reach, reach === intermediate);
    }
    // If skippedStopStates!==null, then it contains at least one
    // configuration. For full-context reach operations, these
    // configurations reached the end of the start rule, in which case we
    // only add them back to reach if no configuration during the current
    // closure operation reached such a state. This ensures adaptivePredict
    // chooses an alternative matching the longest overall sequence when
    // multiple alternatives are viable.
    //
    if (skippedStopStates!==null && ( (! fullCtx) || (! PredictionMode.hasConfigInRuleStopState(reach)))) {
        for (var l=0; l<skippedStopStates.length;l++) {
            reach.add(skippedStopStates[l], this.mergeCache);
        }
    }
    if (reach.items.length===0) {
        return null;
    } else {
        return reach;
    }
};
//
// Return a configuration set containing only the configurations from
// {@code configs} which are in a {@link RuleStopState}. If all
// configurations in {@code configs} are already in a rule stop state, this
// method simply returns {@code configs}.
//
// <p>When {@code lookToEndOfRule} is true, this method uses
// {@link ATN//nextTokens} for each configuration in {@code configs} which is
// not already in a rule stop state to see if a rule stop state is reachable
// from the configuration via epsilon-only transitions.</p>
//
// @param configs the configuration set to update
// @param lookToEndOfRule when true, this method checks for rule stop states
// reachable by epsilon-only transitions from each configuration in
// {@code configs}.
//
// @return {@code configs} if all configurations in {@code configs} are in a
// rule stop state, otherwise return a new configuration set containing only
// the configurations from {@code configs} which are in a rule stop state
//
ParserATNSimulator.prototype.removeAllConfigsNotInRuleStopState = function(configs, lookToEndOfRule) {
    if (PredictionMode.allConfigsInRuleStopStates(configs)) {
        return configs;
    }
    var result = new ATNConfigSet(configs.fullCtx);
    for(var i=0; i<configs.items.length;i++) {
        var config = configs.items[i];
        if (config.state instanceof RuleStopState) {
            result.add(config, this.mergeCache);
            continue;
        }
        if (lookToEndOfRule && config.state.epsilonOnlyTransitions) {
            var nextTokens = this.atn.nextTokens(config.state);
            if (nextTokens.contains(Token.EPSILON)) {
                var endOfRuleState = this.atn.ruleToStopState[config.state.ruleIndex];
                result.add(new ATNConfig({state:endOfRuleState}, config), this.mergeCache);
            }
        }
    }
    return result;
};

ParserATNSimulator.prototype.computeStartState = function(p, ctx, fullCtx) {
    // always at least the implicit call to start rule
    var initialContext = predictionContextFromRuleContext(this.atn, ctx);
    var configs = new ATNConfigSet(fullCtx);
    for(var i=0;i<p.transitions.length;i++) {
        var target = p.transitions[i].target;
        var c = new ATNConfig({ state:target, alt:i+1, context:initialContext }, null);
        var closureBusy = new Set();
        this.closure(c, configs, closureBusy, true, fullCtx, false);
    }
    return configs;
};

//
// This method transforms the start state computed by
// {@link //computeStartState} to the special start state used by a
// precedence DFA for a particular precedence value. The transformation
// process applies the following changes to the start state's configuration
// set.
//
// <ol>
// <li>Evaluate the precedence predicates for each configuration using
// {@link SemanticContext//evalPrecedence}.</li>
// <li>Remove all configurations which predict an alternative greater than
// 1, for which another configuration that predicts alternative 1 is in the
// same ATN state with the same prediction context. This transformation is
// valid for the following reasons:
// <ul>
// <li>The closure block cannot contain any epsilon transitions which bypass
// the body of the closure, so all states reachable via alternative 1 are
// part of the precedence alternatives of the transformed left-recursive
// rule.</li>
// <li>The "primary" portion of a left recursive rule cannot contain an
// epsilon transition, so the only way an alternative other than 1 can exist
// in a state that is also reachable via alternative 1 is by nesting calls
// to the left-recursive rule, with the outer calls not being at the
// preferred precedence level.</li>
// </ul>
// </li>
// </ol>
//
// <p>
// The prediction context must be considered by this filter to address
// situations like the following.
// </p>
// <code>
// <pre>
// grammar TA;
// prog: statement* EOF;
// statement: letterA | statement letterA 'b' ;
// letterA: 'a';
// </pre>
// </code>
// <p>
// If the above grammar, the ATN state immediately before the token
// reference {@code 'a'} in {@code letterA} is reachable from the left edge
// of both the primary and closure blocks of the left-recursive rule
// {@code statement}. The prediction context associated with each of these
// configurations distinguishes between them, and prevents the alternative
// which stepped out to {@code prog} (and then back in to {@code statement}
// from being eliminated by the filter.
// </p>
//
// @param configs The configuration set computed by
// {@link //computeStartState} as the start state for the DFA.
// @return The transformed configuration set representing the start state
// for a precedence DFA at a particular precedence level (determined by
// calling {@link Parser//getPrecedence}).
//
ParserATNSimulator.prototype.applyPrecedenceFilter = function(configs) {
	var config;
	var statesFromAlt1 = [];
    var configSet = new ATNConfigSet(configs.fullCtx);
    for(var i=0; i<configs.items.length; i++) {
        config = configs.items[i];
        // handle alt 1 first
        if (config.alt !== 1) {
            continue;
        }
        var updatedContext = config.semanticContext.evalPrecedence(this.parser, this._outerContext);
        if (updatedContext===null) {
            // the configuration was eliminated
            continue;
        }
        statesFromAlt1[config.state.stateNumber] = config.context;
        if (updatedContext !== config.semanticContext) {
            configSet.add(new ATNConfig({semanticContext:updatedContext}, config), this.mergeCache);
        } else {
            configSet.add(config, this.mergeCache);
        }
    }
    for(i=0; i<configs.items.length; i++) {
        config = configs.items[i];
        if (config.alt === 1) {
            // already handled
            continue;
        }
        // In the future, this elimination step could be updated to also
        // filter the prediction context for alternatives predicting alt>1
        // (basically a graph subtraction algorithm).
		if (!config.precedenceFilterSuppressed) {
            var context = statesFromAlt1[config.state.stateNumber] || null;
            if (context!==null && context.equals(config.context)) {
                // eliminated
                continue;
            }
		}
        configSet.add(config, this.mergeCache);
    }
    return configSet;
};

ParserATNSimulator.prototype.getReachableTarget = function(trans, ttype) {
    if (trans.matches(ttype, 0, this.atn.maxTokenType)) {
        return trans.target;
    } else {
        return null;
    }
};

ParserATNSimulator.prototype.getPredsForAmbigAlts = function(ambigAlts, configs, nalts) {
    // REACH=[1|1|[]|0:0, 1|2|[]|0:1]
    // altToPred starts as an array of all null contexts. The entry at index i
    // corresponds to alternative i. altToPred[i] may have one of three values:
    //   1. null: no ATNConfig c is found such that c.alt==i
    //   2. SemanticContext.NONE: At least one ATNConfig c exists such that
    //      c.alt==i and c.semanticContext==SemanticContext.NONE. In other words,
    //      alt i has at least one unpredicated config.
    //   3. Non-NONE Semantic Context: There exists at least one, and for all
    //      ATNConfig c such that c.alt==i, c.semanticContext!=SemanticContext.NONE.
    //
    // From this, it is clear that NONE||anything==NONE.
    //
    var altToPred = [];
    for(var i=0;i<configs.items.length;i++) {
        var c = configs.items[i];
        if(ambigAlts.contains( c.alt )) {
            altToPred[c.alt] = SemanticContext.orContext(altToPred[c.alt] || null, c.semanticContext);
        }
    }
    var nPredAlts = 0;
    for (i =1;i< nalts+1;i++) {
        var pred = altToPred[i] || null;
        if (pred===null) {
            altToPred[i] = SemanticContext.NONE;
        } else if (pred !== SemanticContext.NONE) {
            nPredAlts += 1;
        }
    }
    // nonambig alts are null in altToPred
    if (nPredAlts===0) {
        altToPred = null;
    }
    if (this.debug) {
        console.log("getPredsForAmbigAlts result " + Utils.arrayToString(altToPred));
    }
    return altToPred;
};

ParserATNSimulator.prototype.getPredicatePredictions = function(ambigAlts, altToPred) {
    var pairs = [];
    var containsPredicate = false;
    for (var i=1; i<altToPred.length;i++) {
        var pred = altToPred[i];
        // unpredicated is indicated by SemanticContext.NONE
        if( ambigAlts!==null && ambigAlts.contains( i )) {
            pairs.push(new PredPrediction(pred, i));
        }
        if (pred !== SemanticContext.NONE) {
            containsPredicate = true;
        }
    }
    if (! containsPredicate) {
        return null;
    }
    return pairs;
};

//
// This method is used to improve the localization of error messages by
// choosing an alternative rather than throwing a
// {@link NoViableAltException} in particular prediction scenarios where the
// {@link //ERROR} state was reached during ATN simulation.
//
// <p>
// The default implementation of this method uses the following
// algorithm to identify an ATN configuration which successfully parsed the
// decision entry rule. Choosing such an alternative ensures that the
// {@link ParserRuleContext} returned by the calling rule will be complete
// and valid, and the syntax error will be reported later at a more
// localized location.</p>
//
// <ul>
// <li>If a syntactically valid path or paths reach the end of the decision rule and
// they are semantically valid if predicated, return the min associated alt.</li>
// <li>Else, if a semantically invalid but syntactically valid path exist
// or paths exist, return the minimum associated alt.
// </li>
// <li>Otherwise, return {@link ATN//INVALID_ALT_NUMBER}.</li>
// </ul>
//
// <p>
// In some scenarios, the algorithm described above could predict an
// alternative which will result in a {@link FailedPredicateException} in
// the parser. Specifically, this could occur if the <em>only</em> configuration
// capable of successfully parsing to the end of the decision rule is
// blocked by a semantic predicate. By choosing this alternative within
// {@link //adaptivePredict} instead of throwing a
// {@link NoViableAltException}, the resulting
// {@link FailedPredicateException} in the parser will identify the specific
// predicate which is preventing the parser from successfully parsing the
// decision rule, which helps developers identify and correct logic errors
// in semantic predicates.
// </p>
//
// @param configs The ATN configurations which were valid immediately before
// the {@link //ERROR} state was reached
// @param outerContext The is the \gamma_0 initial parser context from the paper
// or the parser stack at the instant before prediction commences.
//
// @return The value to return from {@link //adaptivePredict}, or
// {@link ATN//INVALID_ALT_NUMBER} if a suitable alternative was not
// identified and {@link //adaptivePredict} should report an error instead.
//
ParserATNSimulator.prototype.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule = function(configs, outerContext) {
    var cfgs = this.splitAccordingToSemanticValidity(configs, outerContext);
    var semValidConfigs = cfgs[0];
    var semInvalidConfigs = cfgs[1];
    var alt = this.getAltThatFinishedDecisionEntryRule(semValidConfigs);
    if (alt!==ATN.INVALID_ALT_NUMBER) { // semantically/syntactically viable path exists
        return alt;
    }
    // Is there a syntactically valid path with a failed pred?
    if (semInvalidConfigs.items.length>0) {
        alt = this.getAltThatFinishedDecisionEntryRule(semInvalidConfigs);
        if (alt!==ATN.INVALID_ALT_NUMBER) { // syntactically viable path exists
            return alt;
        }
    }
    return ATN.INVALID_ALT_NUMBER;
};

ParserATNSimulator.prototype.getAltThatFinishedDecisionEntryRule = function(configs) {
    var alts = [];
    for(var i=0;i<configs.items.length; i++) {
        var c = configs.items[i];
        if (c.reachesIntoOuterContext>0 || ((c.state instanceof RuleStopState) && c.context.hasEmptyPath())) {
            if(alts.indexOf(c.alt)<0) {
                alts.push(c.alt);
            }
        }
    }
    if (alts.length===0) {
        return ATN.INVALID_ALT_NUMBER;
    } else {
        return Math.min.apply(null, alts);
    }
};
// Walk the list of configurations and split them according to
//  those that have preds evaluating to true/false.  If no pred, assume
//  true pred and include in succeeded set.  Returns Pair of sets.
//
//  Create a new set so as not to alter the incoming parameter.
//
//  Assumption: the input stream has been restored to the starting point
//  prediction, which is where predicates need to evaluate.
//
ParserATNSimulator.prototype.splitAccordingToSemanticValidity = function( configs, outerContext) {
    var succeeded = new ATNConfigSet(configs.fullCtx);
    var failed = new ATNConfigSet(configs.fullCtx);
    for(var i=0;i<configs.items.length; i++) {
        var c = configs.items[i];
        if (c.semanticContext !== SemanticContext.NONE) {
            var predicateEvaluationResult = c.semanticContext.evaluate(this.parser, outerContext);
            if (predicateEvaluationResult) {
                succeeded.add(c);
            } else {
                failed.add(c);
            }
        } else {
            succeeded.add(c);
        }
    }
    return [succeeded, failed];
};

// Look through a list of predicate/alt pairs, returning alts for the
//  pairs that win. A {@code NONE} predicate indicates an alt containing an
//  unpredicated config which behaves as "always true." If !complete
//  then we stop at the first predicate that evaluates to true. This
//  includes pairs with null predicates.
//
ParserATNSimulator.prototype.evalSemanticContext = function(predPredictions, outerContext, complete) {
    var predictions = new BitSet();
    for(var i=0;i<predPredictions.length;i++) {
    	var pair = predPredictions[i];
        if (pair.pred === SemanticContext.NONE) {
            predictions.add(pair.alt);
            if (! complete) {
                break;
            }
            continue;
        }
        var predicateEvaluationResult = pair.pred.evaluate(this.parser, outerContext);
        if (this.debug || this.dfa_debug) {
            console.log("eval pred " + pair + "=" + predicateEvaluationResult);
        }
        if (predicateEvaluationResult) {
            if (this.debug || this.dfa_debug) {
                console.log("PREDICT " + pair.alt);
            }
            predictions.add(pair.alt);
            if (! complete) {
                break;
            }
        }
    }
    return predictions;
};

// TODO: If we are doing predicates, there is no point in pursuing
//     closure operations if we reach a DFA state that uniquely predicts
//     alternative. We will not be caching that DFA state and it is a
//     waste to pursue the closure. Might have to advance when we do
//     ambig detection thought :(
//

ParserATNSimulator.prototype.closure = function(config, configs, closureBusy, collectPredicates, fullCtx, treatEofAsEpsilon) {
    var initialDepth = 0;
    this.closureCheckingStopState(config, configs, closureBusy, collectPredicates,
                             fullCtx, initialDepth, treatEofAsEpsilon);
};


ParserATNSimulator.prototype.closureCheckingStopState = function(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {
    if (this.debug || this.debug_closure) {
        console.log("closure(" + config.toString(this.parser,true) + ")");
        // console.log("configs(" + configs.toString() + ")");
        if(config.reachesIntoOuterContext>50) {
            throw "problem";
        }
    }
    if (config.state instanceof RuleStopState) {
        // We hit rule end. If we have context info, use it
        // run thru all possible stack tops in ctx
        if (! config.context.isEmpty()) {
            for ( var i =0; i<config.context.length; i++) {
                if (config.context.getReturnState(i) === PredictionContext.EMPTY_RETURN_STATE) {
                    if (fullCtx) {
                        configs.add(new ATNConfig({state:config.state, context:PredictionContext.EMPTY}, config), this.mergeCache);
                        continue;
                    } else {
                        // we have no context info, just chase follow links (if greedy)
                        if (this.debug) {
                            console.log("FALLING off rule " + this.getRuleName(config.state.ruleIndex));
                        }
                        this.closure_(config, configs, closureBusy, collectPredicates,
                                 fullCtx, depth, treatEofAsEpsilon);
                    }
                    continue;
                }
                var returnState = this.atn.states[config.context.getReturnState(i)];
                var newContext = config.context.getParent(i); // "pop" return state
                var parms = {state:returnState, alt:config.alt, context:newContext, semanticContext:config.semanticContext};
                var c = new ATNConfig(parms, null);
                // While we have context to pop back from, we may have
                // gotten that context AFTER having falling off a rule.
                // Make sure we track that we are now out of context.
                c.reachesIntoOuterContext = config.reachesIntoOuterContext;
                this.closureCheckingStopState(c, configs, closureBusy, collectPredicates, fullCtx, depth - 1, treatEofAsEpsilon);
            }
            return;
        } else if( fullCtx) {
            // reached end of start rule
            configs.add(config, this.mergeCache);
            return;
        } else {
            // else if we have no context info, just chase follow links (if greedy)
            if (this.debug) {
                console.log("FALLING off rule " + this.getRuleName(config.state.ruleIndex));
            }
        }
    }
    this.closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon);
};


// Do the actual work of walking epsilon edges//
ParserATNSimulator.prototype.closure_ = function(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {
    var p = config.state;
    // optimization
    if (! p.epsilonOnlyTransitions) {
        configs.add(config, this.mergeCache);
        // make sure to not return here, because EOF transitions can act as
        // both epsilon transitions and non-epsilon transitions.
    }
    for(var i = 0;i<p.transitions.length; i++) {
        if(i==0 && this.canDropLoopEntryEdgeInLeftRecursiveRule(config))
            continue;

        var t = p.transitions[i];
        var continueCollecting = collectPredicates && !(t instanceof ActionTransition);
        var c = this.getEpsilonTarget(config, t, continueCollecting, depth === 0, fullCtx, treatEofAsEpsilon);
        if (c!==null) {
			if (!t.isEpsilon && closureBusy.add(c)!==c){
				// avoid infinite recursion for EOF* and EOF+
				continue;
			}
            var newDepth = depth;
            if ( config.state instanceof RuleStopState) {
                // target fell off end of rule; mark resulting c as having dipped into outer context
                // We can't get here if incoming config was rule stop and we had context
                // track how far we dip into outer context.  Might
                // come in handy and we avoid evaluating context dependent
                // preds if this is > 0.

                if (closureBusy.add(c)!==c) {
                    // avoid infinite recursion for right-recursive rules
                    continue;
                }

				if (this._dfa !== null && this._dfa.precedenceDfa) {
					if (t.outermostPrecedenceReturn === this._dfa.atnStartState.ruleIndex) {
						c.precedenceFilterSuppressed = true;
					}
				}

                c.reachesIntoOuterContext += 1;
                configs.dipsIntoOuterContext = true; // TODO: can remove? only care when we add to set per middle of this method
                newDepth -= 1;
                if (this.debug) {
                    console.log("dips into outer ctx: " + c);
                }
            } else if (t instanceof RuleTransition) {
                // latch when newDepth goes negative - once we step out of the entry context we can't return
                if (newDepth >= 0) {
                    newDepth += 1;
                }
            }
            this.closureCheckingStopState(c, configs, closureBusy, continueCollecting, fullCtx, newDepth, treatEofAsEpsilon);
        }
    }
};


ParserATNSimulator.prototype.canDropLoopEntryEdgeInLeftRecursiveRule = function(config) {
    // return False
    var p = config.state;
    // First check to see if we are in StarLoopEntryState generated during
    // left-recursion elimination. For efficiency, also check if
    // the context has an empty stack case. If so, it would mean
    // global FOLLOW so we can't perform optimization
    // Are we the special loop entry/exit state? or SLL wildcard
    if(p.stateType != ATNState.STAR_LOOP_ENTRY)
        return false;
    if(p.stateType != ATNState.STAR_LOOP_ENTRY || !p.isPrecedenceDecision ||
           config.context.isEmpty() || config.context.hasEmptyPath())
        return false;

    // Require all return states to return back to the same rule that p is in.
    var numCtxs = config.context.length;
    for(var i=0; i<numCtxs; i++) { // for each stack context
        var returnState = this.atn.states[config.context.getReturnState(i)];
        if (returnState.ruleIndex != p.ruleIndex)
            return false;
    }

    var decisionStartState = p.transitions[0].target;
    var blockEndStateNum = decisionStartState.endState.stateNumber;
    var blockEndState = this.atn.states[blockEndStateNum];

    // Verify that the top of each stack context leads to loop entry/exit
    // state through epsilon edges and w/o leaving rule.
    for(var i=0; i<numCtxs; i++) { // for each stack context
        var returnStateNumber = config.context.getReturnState(i);
        var returnState = this.atn.states[returnStateNumber];
        // all states must have single outgoing epsilon edge
        if (returnState.transitions.length != 1 || !returnState.transitions[0].isEpsilon)
            return false;

        // Look for prefix op case like 'not expr', (' type ')' expr
        var returnStateTarget = returnState.transitions[0].target;
        if ( returnState.stateType == ATNState.BLOCK_END && returnStateTarget == p )
            continue;

        // Look for 'expr op expr' or case where expr's return state is block end
        // of (...)* internal block; the block end points to loop back
        // which points to p but we don't need to check that
        if ( returnState == blockEndState )
            continue;

        // Look for ternary expr ? expr : expr. The return state points at block end,
        // which points at loop entry state
        if ( returnStateTarget == blockEndState )
            continue;

        // Look for complex prefix 'between expr and expr' case where 2nd expr's
        // return state points at block end state of (...)* internal block
        if (returnStateTarget.stateType == ATNState.BLOCK_END && returnStateTarget.transitions.length == 1
                && returnStateTarget.transitions[0].isEpsilon && returnStateTarget.transitions[0].target == p)
            continue;

        // anything else ain't conforming
        return false;
    }
    return true;
};


ParserATNSimulator.prototype.getRuleName = function( index) {
    if (this.parser!==null && index>=0) {
        return this.parser.ruleNames[index];
    } else {
        return "<rule " + index + ">";
    }
};

ParserATNSimulator.prototype.getEpsilonTarget = function(config, t, collectPredicates, inContext, fullCtx, treatEofAsEpsilon) {
    switch(t.serializationType) {
    case Transition.RULE:
        return this.ruleTransition(config, t);
    case Transition.PRECEDENCE:
        return this.precedenceTransition(config, t, collectPredicates, inContext, fullCtx);
    case Transition.PREDICATE:
        return this.predTransition(config, t, collectPredicates, inContext, fullCtx);
    case Transition.ACTION:
        return this.actionTransition(config, t);
    case Transition.EPSILON:
        return new ATNConfig({state:t.target}, config);
    case Transition.ATOM:
    case Transition.RANGE:
    case Transition.SET:
        // EOF transitions act like epsilon transitions after the first EOF
        // transition is traversed
        if (treatEofAsEpsilon) {
            if (t.matches(Token.EOF, 0, 1)) {
                return new ATNConfig({state: t.target}, config);
            }
        }
        return null;
    default:
    	return null;
    }
};

ParserATNSimulator.prototype.actionTransition = function(config, t) {
    if (this.debug) {
        var index = t.actionIndex==-1 ? 65535 : t.actionIndex;
        console.log("ACTION edge " + t.ruleIndex + ":" + index);
    }
    return new ATNConfig({state:t.target}, config);
};

ParserATNSimulator.prototype.precedenceTransition = function(config, pt,  collectPredicates, inContext, fullCtx) {
    if (this.debug) {
        console.log("PRED (collectPredicates=" + collectPredicates + ") " +
                pt.precedence + ">=_p, ctx dependent=true");
        if (this.parser!==null) {
        	console.log("context surrounding pred is " + Utils.arrayToString(this.parser.getRuleInvocationStack()));
        }
    }
    var c = null;
    if (collectPredicates && inContext) {
        if (fullCtx) {
            // In full context mode, we can evaluate predicates on-the-fly
            // during closure, which dramatically reduces the size of
            // the config sets. It also obviates the need to test predicates
            // later during conflict resolution.
            var currentPosition = this._input.index;
            this._input.seek(this._startIndex);
            var predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);
            this._input.seek(currentPosition);
            if (predSucceeds) {
                c = new ATNConfig({state:pt.target}, config); // no pred context
            }
        } else {
            var newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());
            c = new ATNConfig({state:pt.target, semanticContext:newSemCtx}, config);
        }
    } else {
        c = new ATNConfig({state:pt.target}, config);
    }
    if (this.debug) {
        console.log("config from pred transition=" + c);
    }
    return c;
};

ParserATNSimulator.prototype.predTransition = function(config, pt, collectPredicates, inContext, fullCtx) {
    if (this.debug) {
        console.log("PRED (collectPredicates=" + collectPredicates + ") " + pt.ruleIndex +
                ":" + pt.predIndex + ", ctx dependent=" + pt.isCtxDependent);
        if (this.parser!==null) {
            console.log("context surrounding pred is " + Utils.arrayToString(this.parser.getRuleInvocationStack()));
        }
    }
    var c = null;
    if (collectPredicates && ((pt.isCtxDependent && inContext) || ! pt.isCtxDependent)) {
        if (fullCtx) {
            // In full context mode, we can evaluate predicates on-the-fly
            // during closure, which dramatically reduces the size of
            // the config sets. It also obviates the need to test predicates
            // later during conflict resolution.
            var currentPosition = this._input.index;
            this._input.seek(this._startIndex);
            var predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);
            this._input.seek(currentPosition);
            if (predSucceeds) {
                c = new ATNConfig({state:pt.target}, config); // no pred context
            }
        } else {
            var newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());
            c = new ATNConfig({state:pt.target, semanticContext:newSemCtx}, config);
        }
    } else {
        c = new ATNConfig({state:pt.target}, config);
    }
    if (this.debug) {
        console.log("config from pred transition=" + c);
    }
    return c;
};

ParserATNSimulator.prototype.ruleTransition = function(config, t) {
    if (this.debug) {
        console.log("CALL rule " + this.getRuleName(t.target.ruleIndex) + ", ctx=" + config.context);
    }
    var returnState = t.followState;
    var newContext = SingletonPredictionContext.create(config.context, returnState.stateNumber);
    return new ATNConfig({state:t.target, context:newContext}, config );
};

ParserATNSimulator.prototype.getConflictingAlts = function(configs) {
    var altsets = PredictionMode.getConflictingAltSubsets(configs);
    return PredictionMode.getAlts(altsets);
};

 // Sam pointed out a problem with the previous definition, v3, of
 // ambiguous states. If we have another state associated with conflicting
 // alternatives, we should keep going. For example, the following grammar
 //
 // s : (ID | ID ID?) ';' ;
 //
 // When the ATN simulation reaches the state before ';', it has a DFA
 // state that looks like: [12|1|[], 6|2|[], 12|2|[]]. Naturally
 // 12|1|[] and 12|2|[] conflict, but we cannot stop processing this node
 // because alternative to has another way to continue, via [6|2|[]].
 // The key is that we have a single state that has config's only associated
 // with a single alternative, 2, and crucially the state transitions
 // among the configurations are all non-epsilon transitions. That means
 // we don't consider any conflicts that include alternative 2. So, we
 // ignore the conflict between alts 1 and 2. We ignore a set of
 // conflicting alts when there is an intersection with an alternative
 // associated with a single alt state in the state&rarr;config-list map.
 //
 // It's also the case that we might have two conflicting configurations but
 // also a 3rd nonconflicting configuration for a different alternative:
 // [1|1|[], 1|2|[], 8|3|[]]. This can come about from grammar:
 //
 // a : A | A | A B ;
 //
 // After matching input A, we reach the stop state for rule A, state 1.
 // State 8 is the state right before B. Clearly alternatives 1 and 2
 // conflict and no amount of further lookahead will separate the two.
 // However, alternative 3 will be able to continue and so we do not
 // stop working on this state. In the previous example, we're concerned
 // with states associated with the conflicting alternatives. Here alt
 // 3 is not associated with the conflicting configs, but since we can continue
 // looking for input reasonably, I don't declare the state done. We
 // ignore a set of conflicting alts when we have an alternative
 // that we still need to pursue.
//

ParserATNSimulator.prototype.getConflictingAltsOrUniqueAlt = function(configs) {
    var conflictingAlts = null;
    if (configs.uniqueAlt!== ATN.INVALID_ALT_NUMBER) {
        conflictingAlts = new BitSet();
        conflictingAlts.add(configs.uniqueAlt);
    } else {
        conflictingAlts = configs.conflictingAlts;
    }
    return conflictingAlts;
};

ParserATNSimulator.prototype.getTokenName = function( t) {
    if (t===Token.EOF) {
        return "EOF";
    }
    if( this.parser!==null && this.parser.literalNames!==null) {
        if (t >= this.parser.literalNames.length && t >= this.parser.symbolicNames.length) {
            console.log("" + t + " ttype out of range: " + this.parser.literalNames);
            console.log("" + this.parser.getInputStream().getTokens());
        } else {
            var name = this.parser.literalNames[t] || this.parser.symbolicNames[t];
            return name + "<" + t + ">";
        }
    }
    return "" + t;
};

ParserATNSimulator.prototype.getLookaheadName = function(input) {
    return this.getTokenName(input.LA(1));
};

// Used for debugging in adaptivePredict around execATN but I cut
//  it out for clarity now that alg. works well. We can leave this
//  "dead" code for a bit.
//
ParserATNSimulator.prototype.dumpDeadEndConfigs = function(nvae) {
    console.log("dead end configs: ");
    var decs = nvae.getDeadEndConfigs();
    for(var i=0; i<decs.length; i++) {
    	var c = decs[i];
        var trans = "no edges";
        if (c.state.transitions.length>0) {
            var t = c.state.transitions[0];
            if (t instanceof AtomTransition) {
                trans = "Atom "+ this.getTokenName(t.label);
            } else if (t instanceof SetTransition) {
                var neg = (t instanceof NotSetTransition);
                trans = (neg ? "~" : "") + "Set " + t.set;
            }
        }
        console.error(c.toString(this.parser, true) + ":" + trans);
    }
};

ParserATNSimulator.prototype.noViableAlt = function(input, outerContext, configs, startIndex) {
    return new NoViableAltException(this.parser, input, input.get(startIndex), input.LT(1), configs, outerContext);
};

ParserATNSimulator.prototype.getUniqueAlt = function(configs) {
    var alt = ATN.INVALID_ALT_NUMBER;
    for(var i=0;i<configs.items.length;i++) {
    	var c = configs.items[i];
        if (alt === ATN.INVALID_ALT_NUMBER) {
            alt = c.alt // found first alt
        } else if( c.alt!==alt) {
            return ATN.INVALID_ALT_NUMBER;
        }
    }
    return alt;
};

//
// Add an edge to the DFA, if possible. This method calls
// {@link //addDFAState} to ensure the {@code to} state is present in the
// DFA. If {@code from} is {@code null}, or if {@code t} is outside the
// range of edges that can be represented in the DFA tables, this method
// returns without adding the edge to the DFA.
//
// <p>If {@code to} is {@code null}, this method returns {@code null}.
// Otherwise, this method returns the {@link DFAState} returned by calling
// {@link //addDFAState} for the {@code to} state.</p>
//
// @param dfa The DFA
// @param from The source state for the edge
// @param t The input symbol
// @param to The target state for the edge
//
// @return If {@code to} is {@code null}, this method returns {@code null};
// otherwise this method returns the result of calling {@link //addDFAState}
// on {@code to}
//
ParserATNSimulator.prototype.addDFAEdge = function(dfa, from_, t, to) {
    if( this.debug) {
        console.log("EDGE " + from_ + " -> " + to + " upon " + this.getTokenName(t));
    }
    if (to===null) {
        return null;
    }
    to = this.addDFAState(dfa, to); // used existing if possible not incoming
    if (from_===null || t < -1 || t > this.atn.maxTokenType) {
        return to;
    }
    if (from_.edges===null) {
        from_.edges = [];
    }
    from_.edges[t+1] = to; // connect

    if (this.debug) {
        var literalNames = this.parser===null ? null : this.parser.literalNames;
        var symbolicNames = this.parser===null ? null : this.parser.symbolicNames;
        console.log("DFA=\n" + dfa.toString(literalNames, symbolicNames));
    }
    return to;
};
//
// Add state {@code D} to the DFA if it is not already present, and return
// the actual instance stored in the DFA. If a state equivalent to {@code D}
// is already in the DFA, the existing state is returned. Otherwise this
// method returns {@code D} after adding it to the DFA.
//
// <p>If {@code D} is {@link //ERROR}, this method returns {@link //ERROR} and
// does not change the DFA.</p>
//
// @param dfa The dfa
// @param D The DFA state to add
// @return The state stored in the DFA. This will be either the existing
// state if {@code D} is already in the DFA, or {@code D} itself if the
// state was not already present.
//
ParserATNSimulator.prototype.addDFAState = function(dfa, D) {
    if (D == ATNSimulator.ERROR) {
        return D;
    }
    var existing = dfa.states.get(D);
    if(existing!==null) {
        return existing;
    }
    D.stateNumber = dfa.states.length;
    if (! D.configs.readOnly) {
        D.configs.optimizeConfigs(this);
        D.configs.setReadonly(true);
    }
    dfa.states.add(D);
    if (this.debug) {
        console.log("adding new DFA state: " + D);
    }
    return D;
};

ParserATNSimulator.prototype.reportAttemptingFullContext = function(dfa, conflictingAlts, configs, startIndex, stopIndex) {
    if (this.debug || this.retry_debug) {
        var interval = new Interval(startIndex, stopIndex + 1);
        console.log("reportAttemptingFullContext decision=" + dfa.decision + ":" + configs +
                           ", input=" + this.parser.getTokenStream().getText(interval));
    }
    if (this.parser!==null) {
        this.parser.getErrorListenerDispatch().reportAttemptingFullContext(this.parser, dfa, startIndex, stopIndex, conflictingAlts, configs);
    }
};

ParserATNSimulator.prototype.reportContextSensitivity = function(dfa, prediction, configs, startIndex, stopIndex) {
    if (this.debug || this.retry_debug) {
        var interval = new Interval(startIndex, stopIndex + 1);
        console.log("reportContextSensitivity decision=" + dfa.decision + ":" + configs +
                           ", input=" + this.parser.getTokenStream().getText(interval));
    }
    if (this.parser!==null) {
        this.parser.getErrorListenerDispatch().reportContextSensitivity(this.parser, dfa, startIndex, stopIndex, prediction, configs);
    }
};

// If context sensitive parsing, we know it's ambiguity not conflict//
ParserATNSimulator.prototype.reportAmbiguity = function(dfa, D, startIndex, stopIndex,
                               exact, ambigAlts, configs ) {
    if (this.debug || this.retry_debug) {
        var interval = new Interval(startIndex, stopIndex + 1);
        console.log("reportAmbiguity " + ambigAlts + ":" + configs +
                           ", input=" + this.parser.getTokenStream().getText(interval));
    }
    if (this.parser!==null) {
        this.parser.getErrorListenerDispatch().reportAmbiguity(this.parser, dfa, startIndex, stopIndex, exact, ambigAlts, configs);
    }
};

exports.ParserATNSimulator = ParserATNSimulator;

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

exports.DFA = __webpack_require__(60).DFA;
exports.DFASerializer = __webpack_require__(20).DFASerializer;
exports.LexerDFASerializer = __webpack_require__(20).LexerDFASerializer;
exports.PredPrediction = __webpack_require__(15).PredPrediction;


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Set = __webpack_require__(0).Set;
var DFAState = __webpack_require__(15).DFAState;
var StarLoopEntryState = __webpack_require__(6).StarLoopEntryState;
var ATNConfigSet = __webpack_require__(13).ATNConfigSet;
var DFASerializer = __webpack_require__(20).DFASerializer;
var LexerDFASerializer = __webpack_require__(20).LexerDFASerializer;



function DFA(atnStartState, decision) {
	if (decision === undefined) {
		decision = 0;
	}
	// From which ATN state did we create this DFA?
	this.atnStartState = atnStartState;
	this.decision = decision;
	// A set of all DFA states. Use {@link Map} so we can get old state back
	// ({@link Set} only allows you to see if it's there).
	this._states = new Set();
	this.s0 = null;
	// {@code true} if this DFA is for a precedence decision; otherwise,
	// {@code false}. This is the backing field for {@link //isPrecedenceDfa},
	// {@link //setPrecedenceDfa}.
	this.precedenceDfa = false;
    if (atnStartState instanceof StarLoopEntryState)
    {
        if (atnStartState.isPrecedenceDecision) {
            this.precedenceDfa = true;
            var precedenceState = new DFAState(null, new ATNConfigSet());
            precedenceState.edges = [];
            precedenceState.isAcceptState = false;
            precedenceState.requiresFullContext = false;
            this.s0 = precedenceState;
        }
    }
	return this;
}

// Get the start state for a specific precedence value.
//
// @param precedence The current precedence.
// @return The start state corresponding to the specified precedence, or
// {@code null} if no start state exists for the specified precedence.
//
// @throws IllegalStateException if this is not a precedence DFA.
// @see //isPrecedenceDfa()

DFA.prototype.getPrecedenceStartState = function(precedence) {
	if (!(this.precedenceDfa)) {
		throw ("Only precedence DFAs may contain a precedence start state.");
	}
	// s0.edges is never null for a precedence DFA
	if (precedence < 0 || precedence >= this.s0.edges.length) {
		return null;
	}
	return this.s0.edges[precedence] || null;
};

// Set the start state for a specific precedence value.
//
// @param precedence The current precedence.
// @param startState The start state corresponding to the specified
// precedence.
//
// @throws IllegalStateException if this is not a precedence DFA.
// @see //isPrecedenceDfa()
//
DFA.prototype.setPrecedenceStartState = function(precedence, startState) {
	if (!(this.precedenceDfa)) {
		throw ("Only precedence DFAs may contain a precedence start state.");
	}
	if (precedence < 0) {
		return;
	}

	// synchronization on s0 here is ok. when the DFA is turned into a
	// precedence DFA, s0 will be initialized once and not updated again
	// s0.edges is never null for a precedence DFA
	this.s0.edges[precedence] = startState;
};

//
// Sets whether this is a precedence DFA. If the specified value differs
// from the current DFA configuration, the following actions are taken;
// otherwise no changes are made to the current DFA.
//
// <ul>
// <li>The {@link //states} map is cleared</li>
// <li>If {@code precedenceDfa} is {@code false}, the initial state
// {@link //s0} is set to {@code null}; otherwise, it is initialized to a new
// {@link DFAState} with an empty outgoing {@link DFAState//edges} array to
// store the start states for individual precedence values.</li>
// <li>The {@link //precedenceDfa} field is updated</li>
// </ul>
//
// @param precedenceDfa {@code true} if this is a precedence DFA; otherwise,
// {@code false}

DFA.prototype.setPrecedenceDfa = function(precedenceDfa) {
	if (this.precedenceDfa!==precedenceDfa) {
		this._states = new DFAStatesSet();
		if (precedenceDfa) {
			var precedenceState = new DFAState(null, new ATNConfigSet());
			precedenceState.edges = [];
			precedenceState.isAcceptState = false;
			precedenceState.requiresFullContext = false;
			this.s0 = precedenceState;
		} else {
			this.s0 = null;
		}
		this.precedenceDfa = precedenceDfa;
	}
};

Object.defineProperty(DFA.prototype, "states", {
	get : function() {
		return this._states;
	}
});

// Return a list of all states in this DFA, ordered by state number.
DFA.prototype.sortedStates = function() {
	var list = this._states.values();
	return list.sort(function(a, b) {
		return a.stateNumber - b.stateNumber;
	});
};

DFA.prototype.toString = function(literalNames, symbolicNames) {
	literalNames = literalNames || null;
	symbolicNames = symbolicNames || null;
	if (this.s0 === null) {
		return "";
	}
	var serializer = new DFASerializer(this, literalNames, symbolicNames);
	return serializer.toString();
};

DFA.prototype.toLexerString = function() {
	if (this.s0 === null) {
		return "";
	}
	var serializer = new LexerDFASerializer(this);
	return serializer.toString();
};

exports.DFA = DFA;


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Tree = __webpack_require__(7);
exports.Trees = __webpack_require__(28).Trees;
exports.RuleNode = Tree.RuleNode;
exports.ParseTreeListener = Tree.ParseTreeListener;
exports.ParseTreeVisitor = Tree.ParseTreeVisitor;
exports.ParseTreeWalker = Tree.ParseTreeWalker;


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

exports.RecognitionException = __webpack_require__(8).RecognitionException;
exports.NoViableAltException = __webpack_require__(8).NoViableAltException;
exports.LexerNoViableAltException = __webpack_require__(8).LexerNoViableAltException;
exports.InputMismatchException = __webpack_require__(8).InputMismatchException;
exports.FailedPredicateException = __webpack_require__(8).FailedPredicateException;
exports.DiagnosticErrorListener = __webpack_require__(63).DiagnosticErrorListener;
exports.BailErrorStrategy = __webpack_require__(37).BailErrorStrategy;
exports.ErrorListener = __webpack_require__(19).ErrorListener;


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//
// This implementation of {@link ANTLRErrorListener} can be used to identify
// certain potential correctness and performance problems in grammars. "Reports"
// are made by calling {@link Parser//notifyErrorListeners} with the appropriate
// message.
//
// <ul>
// <li><b>Ambiguities</b>: These are cases where more than one path through the
// grammar can match the input.</li>
// <li><b>Weak context sensitivity</b>: These are cases where full-context
// prediction resolved an SLL conflict to a unique alternative which equaled the
// minimum alternative of the SLL conflict.</li>
// <li><b>Strong (forced) context sensitivity</b>: These are cases where the
// full-context prediction resolved an SLL conflict to a unique alternative,
// <em>and</em> the minimum alternative of the SLL conflict was found to not be
// a truly viable alternative. Two-stage parsing cannot be used for inputs where
// this situation occurs.</li>
// </ul>

var BitSet = __webpack_require__(0).BitSet;
var ErrorListener = __webpack_require__(19).ErrorListener;
var Interval = __webpack_require__(4).Interval;

function DiagnosticErrorListener(exactOnly) {
	ErrorListener.call(this);
	exactOnly = exactOnly || true;
	// whether all ambiguities or only exact ambiguities are reported.
	this.exactOnly = exactOnly;
	return this;
}

DiagnosticErrorListener.prototype = Object.create(ErrorListener.prototype);
DiagnosticErrorListener.prototype.constructor = DiagnosticErrorListener;

DiagnosticErrorListener.prototype.reportAmbiguity = function(recognizer, dfa,
		startIndex, stopIndex, exact, ambigAlts, configs) {
	if (this.exactOnly && !exact) {
		return;
	}
	var msg = "reportAmbiguity d=" +
			this.getDecisionDescription(recognizer, dfa) +
			": ambigAlts=" +
			this.getConflictingAlts(ambigAlts, configs) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
	recognizer.notifyErrorListeners(msg);
};

DiagnosticErrorListener.prototype.reportAttemptingFullContext = function(
		recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
	var msg = "reportAttemptingFullContext d=" +
			this.getDecisionDescription(recognizer, dfa) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
	recognizer.notifyErrorListeners(msg);
};

DiagnosticErrorListener.prototype.reportContextSensitivity = function(
		recognizer, dfa, startIndex, stopIndex, prediction, configs) {
	var msg = "reportContextSensitivity d=" +
			this.getDecisionDescription(recognizer, dfa) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
	recognizer.notifyErrorListeners(msg);
};

DiagnosticErrorListener.prototype.getDecisionDescription = function(recognizer, dfa) {
	var decision = dfa.decision;
	var ruleIndex = dfa.atnStartState.ruleIndex;

	var ruleNames = recognizer.ruleNames;
	if (ruleIndex < 0 || ruleIndex >= ruleNames.length) {
		return "" + decision;
	}
	var ruleName = ruleNames[ruleIndex] || null;
	if (ruleName === null || ruleName.length === 0) {
		return "" + decision;
	}
	return "" + decision + " (" + ruleName + ")";
};

//
// Computes the set of conflicting or ambiguous alternatives from a
// configuration set, if that information was not already provided by the
// parser.
//
// @param reportedAlts The set of conflicting or ambiguous alternatives, as
// reported by the parser.
// @param configs The conflicting or ambiguous configuration set.
// @return Returns {@code reportedAlts} if it is not {@code null}, otherwise
// returns the set of alternatives represented in {@code configs}.
//
DiagnosticErrorListener.prototype.getConflictingAlts = function(reportedAlts, configs) {
	if (reportedAlts !== null) {
		return reportedAlts;
	}
	var result = new BitSet();
	for (var i = 0; i < configs.items.length; i++) {
		result.add(configs.items[i].alt);
	}
	return "{" + result.values().join(", ") + "}";
};

exports.DiagnosticErrorListener = DiagnosticErrorListener;

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

var InputStream = __webpack_require__(22).InputStream;

var isNodeJs = typeof window === 'undefined' && typeof importScripts === 'undefined';
var fs = isNodeJs ? __webpack_require__(38) : null;

// Utility functions to create InputStreams from various sources.
//
// All returned InputStreams support the full range of Unicode
// up to U+10FFFF (the default behavior of InputStream only supports
// code points up to U+FFFF).
var CharStreams = {
  // Creates an InputStream from a string.
  fromString: function(str) {
    return InputStream(str, true);
  },

  // Asynchronously creates an InputStream from a blob given the
  // encoding of the bytes in that blob (defaults to 'utf8' if
  // encoding is null).
  //
  // Invokes onLoad(result) on success, onError(error) on
  // failure.
  fromBlob: function(blob, encoding, onLoad, onError) {
    var reader = FileReader();
    reader.onload = function(e) {
      var is = InputStream(e.target.result, true);
      onLoad(is);
    };
    reader.onerror = onError;
    reader.readAsText(blob, encoding);
  },

  // Creates an InputStream from a Buffer given the
  // encoding of the bytes in that buffer (defaults to 'utf8' if
  // encoding is null).
  fromBuffer: function(buffer, encoding) {
    return InputStream(buffer.toString(encoding), true);
  },

  // Asynchronously creates an InputStream from a file on disk given
  // the encoding of the bytes in that file (defaults to 'utf8' if
  // encoding is null).
  //
  // Invokes callback(error, result) on completion.
  fromPath: function(path, encoding, callback) {
    fs.readFile(path, encoding, function(err, data) {
      var is = null;
      if (data !== null) {
        is = InputStream(data, true);
      }
      callback(err, is);
    });
  },

  // Synchronously creates an InputStream given a path to a file
  // on disk and the encoding of the bytes in that file (defaults to
  // 'utf8' if encoding is null).
  fromPathSync: function(path, encoding) {
    var data = fs.readFileSync(path, encoding);
    return InputStream(data, true);
  }
};

exports.CharStreams = CharStreams;


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//
//  This is an InputStream that is loaded from a file all at once
//  when you construct the object.
//
var InputStream = __webpack_require__(22).InputStream;
var isNodeJs = typeof window === 'undefined' && typeof importScripts === 'undefined';
var fs = isNodeJs ? __webpack_require__(38) : null;

function FileStream(fileName, decodeToUnicodeCodePoints) {
	var data = fs.readFileSync(fileName, "utf8");
	InputStream.call(this, data, decodeToUnicodeCodePoints);
	this.fileName = fileName;
	return this;
}

FileStream.prototype = Object.create(InputStream.prototype);
FileStream.prototype.constructor = FileStream;

exports.FileStream = FileStream;


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

//
// This class extends {@link BufferedTokenStream} with functionality to filter
// token streams to tokens on a particular channel (tokens where
// {@link Token//getChannel} returns a particular value).
//
// <p>
// This token stream provides access to all tokens by index or when calling
// methods like {@link //getText}. The channel filtering is only used for code
// accessing tokens via the lookahead methods {@link //LA}, {@link //LT}, and
// {@link //LB}.</p>
//
// <p>
// By default, tokens are placed on the default channel
// ({@link Token//DEFAULT_CHANNEL}), but may be reassigned by using the
// {@code ->channel(HIDDEN)} lexer command, or by using an embedded action to
// call {@link Lexer//setChannel}.
// </p>
//
// <p>
// Note: lexer rules which use the {@code ->skip} lexer command or call
// {@link Lexer//skip} do not produce tokens at all, so input text matched by
// such a rule will not be available as part of the token stream, regardless of
// channel.</p>
///

var Token = __webpack_require__(2).Token;
var BufferedTokenStream = __webpack_require__(67).BufferedTokenStream;

function CommonTokenStream(lexer, channel) {
	BufferedTokenStream.call(this, lexer);
    this.channel = channel===undefined ? Token.DEFAULT_CHANNEL : channel;
    return this;
}

CommonTokenStream.prototype = Object.create(BufferedTokenStream.prototype);
CommonTokenStream.prototype.constructor = CommonTokenStream;

CommonTokenStream.prototype.adjustSeekIndex = function(i) {
    return this.nextTokenOnChannel(i, this.channel);
};

CommonTokenStream.prototype.LB = function(k) {
    if (k===0 || this.index-k<0) {
        return null;
    }
    var i = this.index;
    var n = 1;
    // find k good tokens looking backwards
    while (n <= k) {
        // skip off-channel tokens
        i = this.previousTokenOnChannel(i - 1, this.channel);
        n += 1;
    }
    if (i < 0) {
        return null;
    }
    return this.tokens[i];
};

CommonTokenStream.prototype.LT = function(k) {
    this.lazyInit();
    if (k === 0) {
        return null;
    }
    if (k < 0) {
        return this.LB(-k);
    }
    var i = this.index;
    var n = 1; // we know tokens[pos] is a good one
    // find k good tokens
    while (n < k) {
        // skip off-channel tokens, but make sure to not look past EOF
        if (this.sync(i + 1)) {
            i = this.nextTokenOnChannel(i + 1, this.channel);
        }
        n += 1;
    }
    return this.tokens[i];
};

// Count EOF just once.///
CommonTokenStream.prototype.getNumberOfOnChannelTokens = function() {
    var n = 0;
    this.fill();
    for (var i =0; i< this.tokens.length;i++) {
        var t = this.tokens[i];
        if( t.channel===this.channel) {
            n += 1;
        }
        if( t.type===Token.EOF) {
            break;
        }
    }
    return n;
};

exports.CommonTokenStream = CommonTokenStream;

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

// This implementation of {@link TokenStream} loads tokens from a
// {@link TokenSource} on-demand, and places the tokens in a buffer to provide
// access to any previous token by index.
//
// <p>
// This token stream ignores the value of {@link Token//getChannel}. If your
// parser requires the token stream filter tokens to only those on a particular
// channel, such as {@link Token//DEFAULT_CHANNEL} or
// {@link Token//HIDDEN_CHANNEL}, use a filtering token stream such a
// {@link CommonTokenStream}.</p>

var Token = __webpack_require__(2).Token;
var Lexer = __webpack_require__(18).Lexer;
var Interval = __webpack_require__(4).Interval;

// this is just to keep meaningful parameter types to Parser
function TokenStream() {
	return this;
}

function BufferedTokenStream(tokenSource) {

	TokenStream.call(this);
	// The {@link TokenSource} from which tokens for this stream are fetched.
	this.tokenSource = tokenSource;

	// A collection of all tokens fetched from the token source. The list is
	// considered a complete view of the input once {@link //fetchedEOF} is set
	// to {@code true}.
	this.tokens = [];

	// The index into {@link //tokens} of the current token (next token to
	// {@link //consume}). {@link //tokens}{@code [}{@link //p}{@code ]} should
	// be
	// {@link //LT LT(1)}.
	//
	// <p>This field is set to -1 when the stream is first constructed or when
	// {@link //setTokenSource} is called, indicating that the first token has
	// not yet been fetched from the token source. For additional information,
	// see the documentation of {@link IntStream} for a description of
	// Initializing Methods.</p>
	this.index = -1;

	// Indicates whether the {@link Token//EOF} token has been fetched from
	// {@link //tokenSource} and added to {@link //tokens}. This field improves
	// performance for the following cases:
	//
	// <ul>
	// <li>{@link //consume}: The lookahead check in {@link //consume} to
	// prevent
	// consuming the EOF symbol is optimized by checking the values of
	// {@link //fetchedEOF} and {@link //p} instead of calling {@link
	// //LA}.</li>
	// <li>{@link //fetch}: The check to prevent adding multiple EOF symbols
	// into
	// {@link //tokens} is trivial with this field.</li>
	// <ul>
	this.fetchedEOF = false;
	return this;
}

BufferedTokenStream.prototype = Object.create(TokenStream.prototype);
BufferedTokenStream.prototype.constructor = BufferedTokenStream;

BufferedTokenStream.prototype.mark = function() {
	return 0;
};

BufferedTokenStream.prototype.release = function(marker) {
	// no resources to release
};

BufferedTokenStream.prototype.reset = function() {
	this.seek(0);
};

BufferedTokenStream.prototype.seek = function(index) {
	this.lazyInit();
	this.index = this.adjustSeekIndex(index);
};

BufferedTokenStream.prototype.get = function(index) {
	this.lazyInit();
	return this.tokens[index];
};

BufferedTokenStream.prototype.consume = function() {
	var skipEofCheck = false;
	if (this.index >= 0) {
		if (this.fetchedEOF) {
			// the last token in tokens is EOF. skip check if p indexes any
			// fetched token except the last.
			skipEofCheck = this.index < this.tokens.length - 1;
		} else {
			// no EOF token in tokens. skip check if p indexes a fetched token.
			skipEofCheck = this.index < this.tokens.length;
		}
	} else {
		// not yet initialized
		skipEofCheck = false;
	}
	if (!skipEofCheck && this.LA(1) === Token.EOF) {
		throw "cannot consume EOF";
	}
	if (this.sync(this.index + 1)) {
		this.index = this.adjustSeekIndex(this.index + 1);
	}
};

// Make sure index {@code i} in tokens has a token.
//
// @return {@code true} if a token is located at index {@code i}, otherwise
// {@code false}.
// @see //get(int i)
// /
BufferedTokenStream.prototype.sync = function(i) {
	var n = i - this.tokens.length + 1; // how many more elements we need?
	if (n > 0) {
		var fetched = this.fetch(n);
		return fetched >= n;
	}
	return true;
};

// Add {@code n} elements to buffer.
//
// @return The actual number of elements added to the buffer.
// /
BufferedTokenStream.prototype.fetch = function(n) {
	if (this.fetchedEOF) {
		return 0;
	}
	for (var i = 0; i < n; i++) {
		var t = this.tokenSource.nextToken();
		t.tokenIndex = this.tokens.length;
		this.tokens.push(t);
		if (t.type === Token.EOF) {
			this.fetchedEOF = true;
			return i + 1;
		}
	}
	return n;
};

// Get all tokens from start..stop inclusively///
BufferedTokenStream.prototype.getTokens = function(start, stop, types) {
	if (types === undefined) {
		types = null;
	}
	if (start < 0 || stop < 0) {
		return null;
	}
	this.lazyInit();
	var subset = [];
	if (stop >= this.tokens.length) {
		stop = this.tokens.length - 1;
	}
	for (var i = start; i < stop; i++) {
		var t = this.tokens[i];
		if (t.type === Token.EOF) {
			break;
		}
		if (types === null || types.contains(t.type)) {
			subset.push(t);
		}
	}
	return subset;
};

BufferedTokenStream.prototype.LA = function(i) {
	return this.LT(i).type;
};

BufferedTokenStream.prototype.LB = function(k) {
	if (this.index - k < 0) {
		return null;
	}
	return this.tokens[this.index - k];
};

BufferedTokenStream.prototype.LT = function(k) {
	this.lazyInit();
	if (k === 0) {
		return null;
	}
	if (k < 0) {
		return this.LB(-k);
	}
	var i = this.index + k - 1;
	this.sync(i);
	if (i >= this.tokens.length) { // return EOF token
		// EOF must be last token
		return this.tokens[this.tokens.length - 1];
	}
	return this.tokens[i];
};

// Allowed derived classes to modify the behavior of operations which change
// the current stream position by adjusting the target token index of a seek
// operation. The default implementation simply returns {@code i}. If an
// exception is thrown in this method, the current stream index should not be
// changed.
//
// <p>For example, {@link CommonTokenStream} overrides this method to ensure
// that
// the seek target is always an on-channel token.</p>
//
// @param i The target token index.
// @return The adjusted target token index.

BufferedTokenStream.prototype.adjustSeekIndex = function(i) {
	return i;
};

BufferedTokenStream.prototype.lazyInit = function() {
	if (this.index === -1) {
		this.setup();
	}
};

BufferedTokenStream.prototype.setup = function() {
	this.sync(0);
	this.index = this.adjustSeekIndex(0);
};

// Reset this token stream by setting its token source.///
BufferedTokenStream.prototype.setTokenSource = function(tokenSource) {
	this.tokenSource = tokenSource;
	this.tokens = [];
	this.index = -1;
	this.fetchedEOF = false;
};


// Given a starting index, return the index of the next token on channel.
// Return i if tokens[i] is on channel. Return -1 if there are no tokens
// on channel between i and EOF.
// /
BufferedTokenStream.prototype.nextTokenOnChannel = function(i, channel) {
	this.sync(i);
	if (i >= this.tokens.length) {
		return -1;
	}
	var token = this.tokens[i];
	while (token.channel !== this.channel) {
		if (token.type === Token.EOF) {
			return -1;
		}
		i += 1;
		this.sync(i);
		token = this.tokens[i];
	}
	return i;
};

// Given a starting index, return the index of the previous token on channel.
// Return i if tokens[i] is on channel. Return -1 if there are no tokens
// on channel between i and 0.
BufferedTokenStream.prototype.previousTokenOnChannel = function(i, channel) {
	while (i >= 0 && this.tokens[i].channel !== channel) {
		i -= 1;
	}
	return i;
};

// Collect all tokens on specified channel to the right of
// the current token up until we see a token on DEFAULT_TOKEN_CHANNEL or
// EOF. If channel is -1, find any non default channel token.
BufferedTokenStream.prototype.getHiddenTokensToRight = function(tokenIndex,
		channel) {
	if (channel === undefined) {
		channel = -1;
	}
	this.lazyInit();
	if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
		throw "" + tokenIndex + " not in 0.." + this.tokens.length - 1;
	}
	var nextOnChannel = this.nextTokenOnChannel(tokenIndex + 1, Lexer.DEFAULT_TOKEN_CHANNEL);
	var from_ = tokenIndex + 1;
	// if none onchannel to right, nextOnChannel=-1 so set to = last token
	var to = nextOnChannel === -1 ? this.tokens.length - 1 : nextOnChannel;
	return this.filterForChannel(from_, to, channel);
};

// Collect all tokens on specified channel to the left of
// the current token up until we see a token on DEFAULT_TOKEN_CHANNEL.
// If channel is -1, find any non default channel token.
BufferedTokenStream.prototype.getHiddenTokensToLeft = function(tokenIndex,
		channel) {
	if (channel === undefined) {
		channel = -1;
	}
	this.lazyInit();
	if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
		throw "" + tokenIndex + " not in 0.." + this.tokens.length - 1;
	}
	var prevOnChannel = this.previousTokenOnChannel(tokenIndex - 1, Lexer.DEFAULT_TOKEN_CHANNEL);
	if (prevOnChannel === tokenIndex - 1) {
		return null;
	}
	// if none on channel to left, prevOnChannel=-1 then from=0
	var from_ = prevOnChannel + 1;
	var to = tokenIndex - 1;
	return this.filterForChannel(from_, to, channel);
};

BufferedTokenStream.prototype.filterForChannel = function(left, right, channel) {
	var hidden = [];
	for (var i = left; i < right + 1; i++) {
		var t = this.tokens[i];
		if (channel === -1) {
			if (t.channel !== Lexer.DEFAULT_TOKEN_CHANNEL) {
				hidden.push(t);
			}
		} else if (t.channel === channel) {
			hidden.push(t);
		}
	}
	if (hidden.length === 0) {
		return null;
	}
	return hidden;
};

BufferedTokenStream.prototype.getSourceName = function() {
	return this.tokenSource.getSourceName();
};

// Get the text of all tokens in this buffer.///
BufferedTokenStream.prototype.getText = function(interval) {
	this.lazyInit();
	this.fill();
	if (interval === undefined || interval === null) {
		interval = new Interval(0, this.tokens.length - 1);
	}
	var start = interval.start;
	if (start instanceof Token) {
		start = start.tokenIndex;
	}
	var stop = interval.stop;
	if (stop instanceof Token) {
		stop = stop.tokenIndex;
	}
	if (start === null || stop === null || start < 0 || stop < 0) {
		return "";
	}
	if (stop >= this.tokens.length) {
		stop = this.tokens.length - 1;
	}
	var s = "";
	for (var i = start; i < stop + 1; i++) {
		var t = this.tokens[i];
		if (t.type === Token.EOF) {
			break;
		}
		s = s + t.text;
	}
	return s;
};

// Get all tokens from lexer until EOF///
BufferedTokenStream.prototype.fill = function() {
	this.lazyInit();
	while (this.fetch(1000) === 1000) {
		continue;
	}
};

exports.BufferedTokenStream = BufferedTokenStream;


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Token = __webpack_require__(2).Token;
var ParseTreeListener = __webpack_require__(7).ParseTreeListener;
var Recognizer = __webpack_require__(32).Recognizer;
var DefaultErrorStrategy = __webpack_require__(37).DefaultErrorStrategy;
var ATNDeserializer = __webpack_require__(29).ATNDeserializer;
var ATNDeserializationOptions = __webpack_require__(30).ATNDeserializationOptions;
var TerminalNode = __webpack_require__(7).TerminalNode;
var ErrorNode = __webpack_require__(7).ErrorNode;

function TraceListener(parser) {
	ParseTreeListener.call(this);
    this.parser = parser;
	return this;
}

TraceListener.prototype = Object.create(ParseTreeListener.prototype);
TraceListener.prototype.constructor = TraceListener;

TraceListener.prototype.enterEveryRule = function(ctx) {
	console.log("enter   " + this.parser.ruleNames[ctx.ruleIndex] + ", LT(1)=" + this.parser._input.LT(1).text);
};

TraceListener.prototype.visitTerminal = function( node) {
	console.log("consume " + node.symbol + " rule " + this.parser.ruleNames[this.parser._ctx.ruleIndex]);
};

TraceListener.prototype.exitEveryRule = function(ctx) {
	console.log("exit    " + this.parser.ruleNames[ctx.ruleIndex] + ", LT(1)=" + this.parser._input.LT(1).text);
};

// this is all the parsing support code essentially; most of it is error
// recovery stuff.//
function Parser(input) {
	Recognizer.call(this);
	// The input stream.
	this._input = null;
	// The error handling strategy for the parser. The default value is a new
	// instance of {@link DefaultErrorStrategy}.
	this._errHandler = new DefaultErrorStrategy();
	this._precedenceStack = [];
	this._precedenceStack.push(0);
	// The {@link ParserRuleContext} object for the currently executing rule.
	// this is always non-null during the parsing process.
	this._ctx = null;
	// Specifies whether or not the parser should construct a parse tree during
	// the parsing process. The default value is {@code true}.
	this.buildParseTrees = true;
	// When {@link //setTrace}{@code (true)} is called, a reference to the
	// {@link TraceListener} is stored here so it can be easily removed in a
	// later call to {@link //setTrace}{@code (false)}. The listener itself is
	// implemented as a parser listener so this field is not directly used by
	// other parser methods.
	this._tracer = null;
	// The list of {@link ParseTreeListener} listeners registered to receive
	// events during the parse.
	this._parseListeners = null;
	// The number of syntax errors reported during parsing. this value is
	// incremented each time {@link //notifyErrorListeners} is called.
	this._syntaxErrors = 0;
	this.setInputStream(input);
	return this;
}

Parser.prototype = Object.create(Recognizer.prototype);
Parser.prototype.contructor = Parser;

// this field maps from the serialized ATN string to the deserialized {@link
// ATN} with
// bypass alternatives.
//
// @see ATNDeserializationOptions//isGenerateRuleBypassTransitions()
//
Parser.bypassAltsAtnCache = {};

// reset the parser's state//
Parser.prototype.reset = function() {
	if (this._input !== null) {
		this._input.seek(0);
	}
	this._errHandler.reset(this);
	this._ctx = null;
	this._syntaxErrors = 0;
	this.setTrace(false);
	this._precedenceStack = [];
	this._precedenceStack.push(0);
	if (this._interp !== null) {
		this._interp.reset();
	}
};

// Match current input symbol against {@code ttype}. If the symbol type
// matches, {@link ANTLRErrorStrategy//reportMatch} and {@link //consume} are
// called to complete the match process.
//
// <p>If the symbol type does not match,
// {@link ANTLRErrorStrategy//recoverInline} is called on the current error
// strategy to attempt recovery. If {@link //getBuildParseTree} is
// {@code true} and the token index of the symbol returned by
// {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to
// the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>
//
// @param ttype the token type to match
// @return the matched symbol
// @throws RecognitionException if the current input symbol did not match
// {@code ttype} and the error strategy could not recover from the
// mismatched symbol

Parser.prototype.match = function(ttype) {
	var t = this.getCurrentToken();
	if (t.type === ttype) {
		this._errHandler.reportMatch(this);
		this.consume();
	} else {
		t = this._errHandler.recoverInline(this);
		if (this.buildParseTrees && t.tokenIndex === -1) {
			// we must have conjured up a new token during single token
			// insertion
			// if it's not the current symbol
			this._ctx.addErrorNode(t);
		}
	}
	return t;
};
// Match current input symbol as a wildcard. If the symbol type matches
// (i.e. has a value greater than 0), {@link ANTLRErrorStrategy//reportMatch}
// and {@link //consume} are called to complete the match process.
//
// <p>If the symbol type does not match,
// {@link ANTLRErrorStrategy//recoverInline} is called on the current error
// strategy to attempt recovery. If {@link //getBuildParseTree} is
// {@code true} and the token index of the symbol returned by
// {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to
// the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>
//
// @return the matched symbol
// @throws RecognitionException if the current input symbol did not match
// a wildcard and the error strategy could not recover from the mismatched
// symbol

Parser.prototype.matchWildcard = function() {
	var t = this.getCurrentToken();
	if (t.type > 0) {
		this._errHandler.reportMatch(this);
		this.consume();
	} else {
		t = this._errHandler.recoverInline(this);
		if (this._buildParseTrees && t.tokenIndex === -1) {
			// we must have conjured up a new token during single token
			// insertion
			// if it's not the current symbol
			this._ctx.addErrorNode(t);
		}
	}
	return t;
};

Parser.prototype.getParseListeners = function() {
	return this._parseListeners || [];
};

// Registers {@code listener} to receive events during the parsing process.
//
// <p>To support output-preserving grammar transformations (including but not
// limited to left-recursion removal, automated left-factoring, and
// optimized code generation), calls to listener methods during the parse
// may differ substantially from calls made by
// {@link ParseTreeWalker//DEFAULT} used after the parse is complete. In
// particular, rule entry and exit events may occur in a different order
// during the parse than after the parser. In addition, calls to certain
// rule entry methods may be omitted.</p>
//
// <p>With the following specific exceptions, calls to listener events are
// <em>deterministic</em>, i.e. for identical input the calls to listener
// methods will be the same.</p>
//
// <ul>
// <li>Alterations to the grammar used to generate code may change the
// behavior of the listener calls.</li>
// <li>Alterations to the command line options passed to ANTLR 4 when
// generating the parser may change the behavior of the listener calls.</li>
// <li>Changing the version of the ANTLR Tool used to generate the parser
// may change the behavior of the listener calls.</li>
// </ul>
//
// @param listener the listener to add
//
// @throws NullPointerException if {@code} listener is {@code null}
//
Parser.prototype.addParseListener = function(listener) {
	if (listener === null) {
		throw "listener";
	}
	if (this._parseListeners === null) {
		this._parseListeners = [];
	}
	this._parseListeners.push(listener);
};

//
// Remove {@code listener} from the list of parse listeners.
//
// <p>If {@code listener} is {@code null} or has not been added as a parse
// listener, this method does nothing.</p>
// @param listener the listener to remove
//
Parser.prototype.removeParseListener = function(listener) {
	if (this._parseListeners !== null) {
		var idx = this._parseListeners.indexOf(listener);
		if (idx >= 0) {
			this._parseListeners.splice(idx, 1);
		}
		if (this._parseListeners.length === 0) {
			this._parseListeners = null;
		}
	}
};

// Remove all parse listeners.
Parser.prototype.removeParseListeners = function() {
	this._parseListeners = null;
};

// Notify any parse listeners of an enter rule event.
Parser.prototype.triggerEnterRuleEvent = function() {
	if (this._parseListeners !== null) {
        var ctx = this._ctx;
		this._parseListeners.map(function(listener) {
			listener.enterEveryRule(ctx);
			ctx.enterRule(listener);
		});
	}
};

//
// Notify any parse listeners of an exit rule event.
//
// @see //addParseListener
//
Parser.prototype.triggerExitRuleEvent = function() {
	if (this._parseListeners !== null) {
		// reverse order walk of listeners
        var ctx = this._ctx;
		this._parseListeners.slice(0).reverse().map(function(listener) {
			ctx.exitRule(listener);
			listener.exitEveryRule(ctx);
		});
	}
};

Parser.prototype.getTokenFactory = function() {
	return this._input.tokenSource._factory;
};

// Tell our token source and error strategy about a new way to create tokens.//
Parser.prototype.setTokenFactory = function(factory) {
	this._input.tokenSource._factory = factory;
};

// The ATN with bypass alternatives is expensive to create so we create it
// lazily.
//
// @throws UnsupportedOperationException if the current parser does not
// implement the {@link //getSerializedATN()} method.
//
Parser.prototype.getATNWithBypassAlts = function() {
	var serializedAtn = this.getSerializedATN();
	if (serializedAtn === null) {
		throw "The current parser does not support an ATN with bypass alternatives.";
	}
	var result = this.bypassAltsAtnCache[serializedAtn];
	if (result === null) {
		var deserializationOptions = new ATNDeserializationOptions();
		deserializationOptions.generateRuleBypassTransitions = true;
		result = new ATNDeserializer(deserializationOptions)
				.deserialize(serializedAtn);
		this.bypassAltsAtnCache[serializedAtn] = result;
	}
	return result;
};

// The preferred method of getting a tree pattern. For example, here's a
// sample use:
//
// <pre>
// ParseTree t = parser.expr();
// ParseTreePattern p = parser.compileParseTreePattern("&lt;ID&gt;+0",
// MyParser.RULE_expr);
// ParseTreeMatch m = p.match(t);
// String id = m.get("ID");
// </pre>

var Lexer = __webpack_require__(18).Lexer;

Parser.prototype.compileParseTreePattern = function(pattern, patternRuleIndex, lexer) {
	lexer = lexer || null;
	if (lexer === null) {
		if (this.getTokenStream() !== null) {
			var tokenSource = this.getTokenStream().tokenSource;
			if (tokenSource instanceof Lexer) {
				lexer = tokenSource;
			}
		}
	}
	if (lexer === null) {
		throw "Parser can't discover a lexer to use";
	}
	var m = new ParseTreePatternMatcher(lexer, this);
	return m.compile(pattern, patternRuleIndex);
};

Parser.prototype.getInputStream = function() {
	return this.getTokenStream();
};

Parser.prototype.setInputStream = function(input) {
	this.setTokenStream(input);
};

Parser.prototype.getTokenStream = function() {
	return this._input;
};

// Set the token stream and reset the parser.//
Parser.prototype.setTokenStream = function(input) {
	this._input = null;
	this.reset();
	this._input = input;
};

// Match needs to return the current input symbol, which gets put
// into the label for the associated token ref; e.g., x=ID.
//
Parser.prototype.getCurrentToken = function() {
	return this._input.LT(1);
};

Parser.prototype.notifyErrorListeners = function(msg, offendingToken, err) {
	offendingToken = offendingToken || null;
	err = err || null;
	if (offendingToken === null) {
		offendingToken = this.getCurrentToken();
	}
	this._syntaxErrors += 1;
	var line = offendingToken.line;
	var column = offendingToken.column;
	var listener = this.getErrorListenerDispatch();
	listener.syntaxError(this, offendingToken, line, column, msg, err);
};

//
// Consume and return the {@linkplain //getCurrentToken current symbol}.
//
// <p>E.g., given the following input with {@code A} being the current
// lookahead symbol, this function moves the cursor to {@code B} and returns
// {@code A}.</p>
//
// <pre>
// A B
// ^
// </pre>
//
// If the parser is not in error recovery mode, the consumed symbol is added
// to the parse tree using {@link ParserRuleContext//addChild(Token)}, and
// {@link ParseTreeListener//visitTerminal} is called on any parse listeners.
// If the parser <em>is</em> in error recovery mode, the consumed symbol is
// added to the parse tree using
// {@link ParserRuleContext//addErrorNode(Token)}, and
// {@link ParseTreeListener//visitErrorNode} is called on any parse
// listeners.
//
Parser.prototype.consume = function() {
	var o = this.getCurrentToken();
	if (o.type !== Token.EOF) {
		this.getInputStream().consume();
	}
	var hasListener = this._parseListeners !== null && this._parseListeners.length > 0;
	if (this.buildParseTrees || hasListener) {
		var node;
		if (this._errHandler.inErrorRecoveryMode(this)) {
			node = this._ctx.addErrorNode(o);
		} else {
			node = this._ctx.addTokenNode(o);
		}
        node.invokingState = this.state;
		if (hasListener) {
			this._parseListeners.map(function(listener) {
				if (node instanceof ErrorNode || (node.isErrorNode !== undefined && node.isErrorNode())) {
					listener.visitErrorNode(node);
				} else if (node instanceof TerminalNode) {
					listener.visitTerminal(node);
				}
			});
		}
	}
	return o;
};

Parser.prototype.addContextToParseTree = function() {
	// add current context to parent if we have a parent
	if (this._ctx.parentCtx !== null) {
		this._ctx.parentCtx.addChild(this._ctx);
	}
};

// Always called by generated parsers upon entry to a rule. Access field
// {@link //_ctx} get the current context.

Parser.prototype.enterRule = function(localctx, state, ruleIndex) {
	this.state = state;
	this._ctx = localctx;
	this._ctx.start = this._input.LT(1);
	if (this.buildParseTrees) {
		this.addContextToParseTree();
	}
	if (this._parseListeners !== null) {
		this.triggerEnterRuleEvent();
	}
};

Parser.prototype.exitRule = function() {
	this._ctx.stop = this._input.LT(-1);
	// trigger event on _ctx, before it reverts to parent
	if (this._parseListeners !== null) {
		this.triggerExitRuleEvent();
	}
	this.state = this._ctx.invokingState;
	this._ctx = this._ctx.parentCtx;
};

Parser.prototype.enterOuterAlt = function(localctx, altNum) {
   	localctx.setAltNumber(altNum);
	// if we have new localctx, make sure we replace existing ctx
	// that is previous child of parse tree
	if (this.buildParseTrees && this._ctx !== localctx) {
		if (this._ctx.parentCtx !== null) {
			this._ctx.parentCtx.removeLastChild();
			this._ctx.parentCtx.addChild(localctx);
		}
	}
	this._ctx = localctx;
};

// Get the precedence level for the top-most precedence rule.
//
// @return The precedence level for the top-most precedence rule, or -1 if
// the parser context is not nested within a precedence rule.

Parser.prototype.getPrecedence = function() {
	if (this._precedenceStack.length === 0) {
		return -1;
	} else {
		return this._precedenceStack[this._precedenceStack.length-1];
	}
};

Parser.prototype.enterRecursionRule = function(localctx, state, ruleIndex,
		precedence) {
	this.state = state;
	this._precedenceStack.push(precedence);
	this._ctx = localctx;
	this._ctx.start = this._input.LT(1);
	if (this._parseListeners !== null) {
		this.triggerEnterRuleEvent(); // simulates rule entry for
										// left-recursive rules
	}
};

//
// Like {@link //enterRule} but for recursive rules.

Parser.prototype.pushNewRecursionContext = function(localctx, state, ruleIndex) {
	var previous = this._ctx;
	previous.parentCtx = localctx;
	previous.invokingState = state;
	previous.stop = this._input.LT(-1);

	this._ctx = localctx;
	this._ctx.start = previous.start;
	if (this.buildParseTrees) {
		this._ctx.addChild(previous);
	}
	if (this._parseListeners !== null) {
		this.triggerEnterRuleEvent(); // simulates rule entry for
										// left-recursive rules
	}
};

Parser.prototype.unrollRecursionContexts = function(parentCtx) {
	this._precedenceStack.pop();
	this._ctx.stop = this._input.LT(-1);
	var retCtx = this._ctx; // save current ctx (return value)
	// unroll so _ctx is as it was before call to recursive method
	if (this._parseListeners !== null) {
		while (this._ctx !== parentCtx) {
			this.triggerExitRuleEvent();
			this._ctx = this._ctx.parentCtx;
		}
	} else {
		this._ctx = parentCtx;
	}
	// hook into tree
	retCtx.parentCtx = parentCtx;
	if (this.buildParseTrees && parentCtx !== null) {
		// add return ctx into invoking rule's tree
		parentCtx.addChild(retCtx);
	}
};

Parser.prototype.getInvokingContext = function(ruleIndex) {
	var ctx = this._ctx;
	while (ctx !== null) {
		if (ctx.ruleIndex === ruleIndex) {
			return ctx;
		}
		ctx = ctx.parentCtx;
	}
	return null;
};

Parser.prototype.precpred = function(localctx, precedence) {
	return precedence >= this._precedenceStack[this._precedenceStack.length-1];
};

Parser.prototype.inContext = function(context) {
	// TODO: useful in parser?
	return false;
};

//
// Checks whether or not {@code symbol} can follow the current state in the
// ATN. The behavior of this method is equivalent to the following, but is
// implemented such that the complete context-sensitive follow set does not
// need to be explicitly constructed.
//
// <pre>
// return getExpectedTokens().contains(symbol);
// </pre>
//
// @param symbol the symbol type to check
// @return {@code true} if {@code symbol} can follow the current state in
// the ATN, otherwise {@code false}.

Parser.prototype.isExpectedToken = function(symbol) {
	var atn = this._interp.atn;
	var ctx = this._ctx;
	var s = atn.states[this.state];
	var following = atn.nextTokens(s);
	if (following.contains(symbol)) {
		return true;
	}
	if (!following.contains(Token.EPSILON)) {
		return false;
	}
	while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {
		var invokingState = atn.states[ctx.invokingState];
		var rt = invokingState.transitions[0];
		following = atn.nextTokens(rt.followState);
		if (following.contains(symbol)) {
			return true;
		}
		ctx = ctx.parentCtx;
	}
	if (following.contains(Token.EPSILON) && symbol === Token.EOF) {
		return true;
	} else {
		return false;
	}
};

// Computes the set of input symbols which could follow the current parser
// state and context, as given by {@link //getState} and {@link //getContext},
// respectively.
//
// @see ATN//getExpectedTokens(int, RuleContext)
//
Parser.prototype.getExpectedTokens = function() {
	return this._interp.atn.getExpectedTokens(this.state, this._ctx);
};

Parser.prototype.getExpectedTokensWithinCurrentRule = function() {
	var atn = this._interp.atn;
	var s = atn.states[this.state];
	return atn.nextTokens(s);
};

// Get a rule's index (i.e., {@code RULE_ruleName} field) or -1 if not found.//
Parser.prototype.getRuleIndex = function(ruleName) {
	var ruleIndex = this.getRuleIndexMap()[ruleName];
	if (ruleIndex !== null) {
		return ruleIndex;
	} else {
		return -1;
	}
};

// Return List&lt;String&gt; of the rule names in your parser instance
// leading up to a call to the current rule. You could override if
// you want more details such as the file/line info of where
// in the ATN a rule is invoked.
//
// this is very useful for error messages.
//
Parser.prototype.getRuleInvocationStack = function(p) {
	p = p || null;
	if (p === null) {
		p = this._ctx;
	}
	var stack = [];
	while (p !== null) {
		// compute what follows who invoked us
		var ruleIndex = p.ruleIndex;
		if (ruleIndex < 0) {
			stack.push("n/a");
		} else {
			stack.push(this.ruleNames[ruleIndex]);
		}
		p = p.parentCtx;
	}
	return stack;
};

// For debugging and other purposes.//
Parser.prototype.getDFAStrings = function() {
	return this._interp.decisionToDFA.toString();
};
// For debugging and other purposes.//
Parser.prototype.dumpDFA = function() {
	var seenOne = false;
	for (var i = 0; i < this._interp.decisionToDFA.length; i++) {
		var dfa = this._interp.decisionToDFA[i];
		if (dfa.states.length > 0) {
			if (seenOne) {
				console.log();
			}
			this.printer.println("Decision " + dfa.decision + ":");
			this.printer.print(dfa.toString(this.literalNames, this.symbolicNames));
			seenOne = true;
		}
	}
};

/*
"			printer = function() {\r\n" +
"				this.println = function(s) { document.getElementById('output') += s + '\\n'; }\r\n" +
"				this.print = function(s) { document.getElementById('output') += s; }\r\n" +
"			};\r\n" +
*/

Parser.prototype.getSourceName = function() {
	return this._input.sourceName;
};

// During a parse is sometimes useful to listen in on the rule entry and exit
// events as well as token matches. this is for quick and dirty debugging.
//
Parser.prototype.setTrace = function(trace) {
	if (!trace) {
		this.removeParseListener(this._tracer);
		this._tracer = null;
	} else {
		if (this._tracer !== null) {
			this.removeParseListener(this._tracer);
		}
		this._tracer = new TraceListener(this);
		this.addParseListener(this._tracer);
	}
};

exports.Parser = Parser;

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _CypherTypes = __webpack_require__(1);

var CypherTypes = _interopRequireWildcard(_CypherTypes);

var _CompletionTypes = __webpack_require__(3);

var CompletionTypes = _interopRequireWildcard(_CompletionTypes);

var _TreeUtils = __webpack_require__(5);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// If variable is inside expression context then it might be both variable and function
exports.default = function (element) {
  var variable = _TreeUtils.TreeUtils.findAnyParent(element, [CypherTypes.VARIABLE_CONTEXT]);
  var expression = _TreeUtils.TreeUtils.findAnyParent(variable, [CypherTypes.EXPRESSION_CONTEXT]);
  return variable != null && expression != null ? [{ type: CompletionTypes.VARIABLE }, { type: CompletionTypes.FUNCTION_NAME }] : [];
}; /*
    * Copyright (c) 2002-2017 "Neo Technology,"
    * Network Engine for Objects in Lund AB [http://neotechnology.com]
    *
    * This file is part of Neo4j.
    *
    * Neo4j is free software: you can redistribute it and/or modify
    * it under the terms of the GNU General Public License as published by
    * the Free Software Foundation, either version 3 of the License, or
    * (at your option) any later version.
    *
    * This program is distributed in the hope that it will be useful,
    * but WITHOUT ANY WARRANTY; without even the implied warranty of
    * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    * GNU General Public License for more details.
    *
    * You should have received a copy of the GNU General Public License
    * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    */

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _CypherTypes = __webpack_require__(1);

var CypherTypes = _interopRequireWildcard(_CypherTypes);

var _CompletionTypes = __webpack_require__(3);

var CompletionTypes = _interopRequireWildcard(_CompletionTypes);

var _TreeUtils = __webpack_require__(5);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// Return procedure output completion if we are inside procedure
exports.default = function (element) {
  var call = _TreeUtils.TreeUtils.findAnyParent(element, [CypherTypes.CALL_CONTEXT]);
  if (call != null) {
    var procedure = _TreeUtils.TreeUtils.findChild(call, CypherTypes.PROCEDURE_NAME_CONTEXT);
    var resultOutput = _TreeUtils.TreeUtils.findAnyParent(element, CypherTypes.PROCEDURE_RESULTS_CONTEXT);

    if (procedure == null || resultOutput == null) {
      return [];
    }

    return [{ type: CompletionTypes.PROCEDURE_OUTPUT, name: procedure.getText() }];
  }
  return [];
}; /*
    * Copyright (c) 2002-2017 "Neo Technology,"
    * Network Engine for Objects in Lund AB [http://neotechnology.com]
    *
    * This file is part of Neo4j.
    *
    * Neo4j is free software: you can redistribute it and/or modify
    * it under the terms of the GNU General Public License as published by
    * the Free Software Foundation, either version 3 of the License, or
    * (at your option) any later version.
    *
    * This program is distributed in the hope that it will be useful,
    * but WITHOUT ANY WARRANTY; without even the implied warranty of
    * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    * GNU General Public License for more details.
    *
    * You should have received a copy of the GNU General Public License
    * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    */

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _CypherTypes = __webpack_require__(1);

var CypherTypes = _interopRequireWildcard(_CypherTypes);

var _CompletionTypes = __webpack_require__(3);

var CompletionTypes = _interopRequireWildcard(_CompletionTypes);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// If we are in call rule, and element is second child of call return procedure types
/*
 * Copyright (c) 2002-2017 "Neo Technology,"
 * Network Engine for Objects in Lund AB [http://neotechnology.com]
 *
 * This file is part of Neo4j.
 *
 * Neo4j is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

exports.default = function (element) {
  var parent = element.parentCtx;
  if (!parent) {
    return [];
  }

  if (parent.constructor.name === CypherTypes.CALL_CONTEXT) {
    var secondChild = parent.getChild(1);
    if (secondChild === element) {
      return [{ type: CompletionTypes.PROCEDURE_NAME }];
    }
  }

  return [];
};

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _lodash = __webpack_require__(40);

var _lodash2 = _interopRequireDefault(_lodash);

var _CompletionTypes = __webpack_require__(3);

var CompletionTypes = _interopRequireWildcard(_CompletionTypes);

var _CypherKeywords = __webpack_require__(23);

var _CypherKeywords2 = _interopRequireDefault(_CypherKeywords);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// If any of the keywords contains element text, return ALL
exports.default = function (element) {
  var text = element.getText().toLowerCase();
  if (_CypherKeywords2.default.find(function (keyword) {
    return _lodash2.default.includes(keyword.toLowerCase(), text);
  })) {
    return CompletionTypes.ALL;
  }
  return [];
}; /*
    * Copyright (c) 2002-2017 "Neo Technology,"
    * Network Engine for Objects in Lund AB [http://neotechnology.com]
    *
    * This file is part of Neo4j.
    *
    * Neo4j is free software: you can redistribute it and/or modify
    * it under the terms of the GNU General Public License as published by
    * the Free Software Foundation, either version 3 of the License, or
    * (at your option) any later version.
    *
    * This program is distributed in the hope that it will be useful,
    * but WITHOUT ANY WARRANTY; without even the implied warranty of
    * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    * GNU General Public License for more details.
    *
    * You should have received a copy of the GNU General Public License
    * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    */

/***/ }),
/* 73 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 74 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _CypherTypes = __webpack_require__(1);

var CypherTypes = _interopRequireWildcard(_CypherTypes);

var _CompletionTypes = __webpack_require__(3);

var CompletionTypes = _interopRequireWildcard(_CompletionTypes);

var _TreeUtils = __webpack_require__(5);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// If we are in relationship pattern then return variables and types
exports.default = function (element) {
  var parent = _TreeUtils.TreeUtils.findParent(element, CypherTypes.RELATIONSHIP_PATTERN_CONTEXT);
  if (parent) {
    // We are at the beginning, so allow variables too
    if (element.getText() === '[') {
      return [{ type: CompletionTypes.VARIABLE }, { type: CompletionTypes.RELATIONSHIP_TYPE }];
    }
    // We are at the end, fail and allow algorithm to get back by 1 char
    if (element.getText() === ']') {
      return [];
    }
  }
  return [];
}; /*
    * Copyright (c) 2002-2017 "Neo Technology,"
    * Network Engine for Objects in Lund AB [http://neotechnology.com]
    *
    * This file is part of Neo4j.
    *
    * Neo4j is free software: you can redistribute it and/or modify
    * it under the terms of the GNU General Public License as published by
    * the Free Software Foundation, either version 3 of the License, or
    * (at your option) any later version.
    *
    * This program is distributed in the hope that it will be useful,
    * but WITHOUT ANY WARRANTY; without even the implied warranty of
    * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    * GNU General Public License for more details.
    *
    * You should have received a copy of the GNU General Public License
    * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    */

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _CypherTypes = __webpack_require__(1);

var CypherTypes = _interopRequireWildcard(_CypherTypes);

var _CompletionTypes = __webpack_require__(3);

var CompletionTypes = _interopRequireWildcard(_CompletionTypes);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// If we are in relationship pattern then return variables and types
/*
 * Copyright (c) 2002-2017 "Neo Technology,"
 * Network Engine for Objects in Lund AB [http://neotechnology.com]
 *
 * This file is part of Neo4j.
 *
 * Neo4j is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

exports.default = function (element) {
  var parent = element.getParent();
  var text = element.getText();
  // Special case. We are at the beginning of first node pattern.
  if (parent) {
    if (parent.constructor.name === CypherTypes.PATTERN_ELEMENT_CONTEXT && text === '(') {
      return [{ type: CompletionTypes.VARIABLE }, { type: CompletionTypes.LABEL }];
    }

    if (parent.constructor.name === CypherTypes.NODE_PATTERN_CONTEXT) {
      // We are at the begining of node pattern
      if (text === '(') {
        return [{ type: CompletionTypes.VARIABLE }, { type: CompletionTypes.LABEL }];
      }
      if (text === ':') {
        return [{ type: CompletionTypes.LABEL }];
      }
    }
  }

  return [];
};

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _CypherTypes = __webpack_require__(1);

var CypherTypes = _interopRequireWildcard(_CypherTypes);

var _CompletionTypes = __webpack_require__(3);

var CompletionTypes = _interopRequireWildcard(_CompletionTypes);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/*
 * Copyright (c) 2002-2017 "Neo Technology,"
 * Network Engine for Objects in Lund AB [http://neotechnology.com]
 *
 * This file is part of Neo4j.
 *
 * Neo4j is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

exports.default = function (element) {
  var lookupContext = element.getParent();
  var text = element.getText();

  if (lookupContext) {
    if (lookupContext.constructor.name === CypherTypes.PROPERTY_LOOKUP_CONTEXT && text === '.') {
      return [{ type: CompletionTypes.PROPERTY_KEY }];
    }
  }
  return [];
};

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _CypherTypes = __webpack_require__(1);

var CypherTypes = _interopRequireWildcard(_CypherTypes);

var _CompletionTypes = __webpack_require__(3);

var CompletionTypes = _interopRequireWildcard(_CompletionTypes);

var _TreeUtils = __webpack_require__(5);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

exports.default = function (element) {
  var mapLiteralContext = _TreeUtils.TreeUtils.findParent(element, CypherTypes.MAP_LITERAL_CONTEXT);
  var propertiesContext = _TreeUtils.TreeUtils.findParent(element, CypherTypes.PROPERTIES_CONTEXT);

  if (mapLiteralContext) {
    var text = element.getText();
    if (text === '}') {
      return [];
    }
    return [{ type: CompletionTypes.PROPERTY_KEY }];
  }

  if (propertiesContext) {
    var _text = element.getText();
    if (_text === '}') {
      return [];
    }
    if (/\s+/.test(_text)) {
      return [];
    }
    return [{ type: CompletionTypes.PROPERTY_KEY }, { type: CompletionTypes.PARAMETER }];
  }

  return [];
}; /*
    * Copyright (c) 2002-2017 "Neo Technology,"
    * Network Engine for Objects in Lund AB [http://neotechnology.com]
    *
    * This file is part of Neo4j.
    *
    * Neo4j is free software: you can redistribute it and/or modify
    * it under the terms of the GNU General Public License as published by
    * the Free Software Foundation, either version 3 of the License, or
    * (at your option) any later version.
    *
    * This program is distributed in the hope that it will be useful,
    * but WITHOUT ANY WARRANTY; without even the implied warranty of
    * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    * GNU General Public License for more details.
    *
    * You should have received a copy of the GNU General Public License
    * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    */

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _CypherTypes = __webpack_require__(1);

var CypherTypes = _interopRequireWildcard(_CypherTypes);

var _CompletionTypes = __webpack_require__(3);

var CompletionTypes = _interopRequireWildcard(_CompletionTypes);

var _TreeUtils = __webpack_require__(5);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

exports.default = function (element) {
  var literalEntry = _TreeUtils.TreeUtils.findParent(element, CypherTypes.MAP_LITERAL_ENTRY);
  if (!literalEntry) {
    return [];
  }
  var doubleDots = literalEntry.getChild(1);
  var space = literalEntry.getChild(2);
  if (doubleDots === element || space === element) {
    return CompletionTypes.ALL;
  }
  return [];
}; /*
    * Copyright (c) 2002-2017 "Neo Technology,"
    * Network Engine for Objects in Lund AB [http://neotechnology.com]
    *
    * This file is part of Neo4j.
    *
    * Neo4j is free software: you can redistribute it and/or modify
    * it under the terms of the GNU General Public License as published by
    * the Free Software Foundation, either version 3 of the License, or
    * (at your option) any later version.
    *
    * This program is distributed in the hope that it will be useful,
    * but WITHOUT ANY WARRANTY; without even the implied warranty of
    * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    * GNU General Public License for more details.
    *
    * You should have received a copy of the GNU General Public License
    * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    */

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _CypherTypes = __webpack_require__(1);

var CypherTypes = _interopRequireWildcard(_CypherTypes);

var _CompletionTypes = __webpack_require__(3);

var CompletionTypes = _interopRequireWildcard(_CompletionTypes);

var _TreeUtils = __webpack_require__(5);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// If we are in console command, and not in console command name, return path
exports.default = function (element) {
  var consoleCommand = _TreeUtils.TreeUtils.findParent(element.parentCtx, CypherTypes.CONSOLE_COMMAND_CONTEXT);
  var isAtTheEndOfConsoleCommand = false;
  if (!consoleCommand) {
    // We are not in console command. But maybe we are on a space at the end of console command?
    // If first child of parent contains console command
    // and second child is our current element
    // then we are at the space at the end of console command
    var parent = element.parentCtx;
    var child1 = _TreeUtils.TreeUtils.findChild(parent.children[0], CypherTypes.CONSOLE_COMMAND_CONTEXT);
    var child2 = parent.children[1];
    if (child1 && child2 && child2 === element) {
      consoleCommand = child1;
      isAtTheEndOfConsoleCommand = true;
    } else {
      return [];
    }
  }

  // Find current parameter or space
  var currentElement = _TreeUtils.TreeUtils.findParent(element, CypherTypes.CONSOLE_COMMAND_PARAMETER_CONTEXT) || element;

  var path = [];
  var currentElementInParameter = false;

  // Iterate over parameters, and stop when we found current one.
  for (var i = 0; i < consoleCommand.children.length; i += 1) {
    var child = consoleCommand.children[i];
    if (child.constructor.name === CypherTypes.CONSOLE_COMMAND_NAME_CONTEXT) {
      path.push(child.getText());
    }
    if (child.constructor.name === CypherTypes.CONSOLE_COMMAND_PARAMETERS_CONTEXT) {
      for (var j = 0; j < child.children.length; j += 1) {
        var parameterChild = child.children[j];
        if (parameterChild.constructor.name === CypherTypes.CONSOLE_COMMAND_PARAMETER_CONTEXT) {
          path.push(parameterChild.getText());
          currentElementInParameter = true;
        } else {
          currentElementInParameter = false;
        }
        if (parameterChild === currentElement) {
          break;
        }
      }
    }
  }

  // If we are at the end of console command, nothing to filter.
  var filterLastElement = void 0;
  if (isAtTheEndOfConsoleCommand) {
    filterLastElement = false;
  } else {
    // If we are in parameter, filter, otherwise not
    filterLastElement = currentElementInParameter;
  }

  return [{
    type: CompletionTypes.CONSOLE_COMMAND_SUBCOMMAND,
    path: path,
    filterLastElement: filterLastElement
  }];
}; /*
    * Copyright (c) 2002-2017 "Neo Technology,"
    * Network Engine for Objects in Lund AB [http://neotechnology.com]
    *
    * This file is part of Neo4j.
    *
    * Neo4j is free software: you can redistribute it and/or modify
    * it under the terms of the GNU General Public License as published by
    * the Free Software Foundation, either version 3 of the License, or
    * (at your option) any later version.
    *
    * This program is distributed in the hope that it will be useful,
    * but WITHOUT ANY WARRANTY; without even the implied warranty of
    * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    * GNU General Public License for more details.
    *
    * You should have received a copy of the GNU General Public License
    * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    */

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _CypherTypes = __webpack_require__(1);

var CypherTypes = _interopRequireWildcard(_CypherTypes);

var _CompletionTypes = __webpack_require__(3);

var CompletionTypes = _interopRequireWildcard(_CompletionTypes);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// Specify place where no autocompletion should be triggered
/*
 * Copyright (c) 2002-2017 "Neo Technology,"
 * Network Engine for Objects in Lund AB [http://neotechnology.com]
 *
 * This file is part of Neo4j.
 *
 * Neo4j is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

exports.default = function (element) {
  if (element.constructor.name === CypherTypes.STRING_LITERAL_CONTEXT) {
    return [{ type: CompletionTypes.NOOP }];
  }

  return [];
};

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _CompletionTypes = __webpack_require__(3);

var CompletionTypes = _interopRequireWildcard(_CompletionTypes);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

exports.default = function (element) {
  var text = element.getText();
  if (text === '$') {
    return [{ type: CompletionTypes.PARAMETER }];
  }
  return [];
};

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AutoCompletion = exports.KEYWORD_ITEMS = undefined;

var _SchemaBasedCompletio;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
opyright (c) 2002-2017 "Neo Technology,"
etwork Engine for Objects in Lund AB [http://neotechnology.com]

his file is part of Neo4j.

eo4j is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
at your option) any later version.

his program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
or FITNESS FOR A PARTICULAR PURPOSE.  See the
eneral Public License for more details.

ou should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.


var _fuzzaldrin = __webpack_require__(84);

var _lodash = __webpack_require__(40);

var _lodash2 = _interopRequireDefault(_lodash);

var _CypherTypes = __webpack_require__(1);

var CypherTypes = _interopRequireWildcard(_CypherTypes);

var _CompletionTypes = __webpack_require__(3);

var CompletionTypes = _interopRequireWildcard(_CompletionTypes);

var _CypherKeywords = __webpack_require__(23);

var _CypherKeywords2 = _interopRequireDefault(_CypherKeywords);

var _TreeUtils = __webpack_require__(5);

var _ecsapeCypher = __webpack_require__(88);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var KEYWORD_ITEMS = exports.KEYWORD_ITEMS = _CypherKeywords2.default.map(function (keyword) {
  return {
    type: CompletionTypes.KEYWORD,
    view: keyword,
    content: keyword,
    postfix: null
  };
});

var AbstractCachingCompletion = function () {
  function AbstractCachingCompletion() {
    var cache = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, AbstractCachingCompletion);

    this.cache = {};

    this.cache = cache;
  }

  // eslint-disable-next-line class-methods-use-this, no-unused-vars


  _createClass(AbstractCachingCompletion, [{
    key: 'calculateItems',
    value: function calculateItems(type) {
      var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      return [];
    }
  }, {
    key: 'complete',
    value: function complete(types, query) {
      var _this = this;

      return types.map(function (typeData) {
        var cached = _this.cache[typeData.type];
        if (cached != null) {
          return cached;
        }
        return _this.calculateItems(typeData, query);
      }).reduce(function (acc, items) {
        return [].concat(_toConsumableArray(acc), _toConsumableArray(items));
      }, []);
    }
  }]);

  return AbstractCachingCompletion;
}();

var SchemaBasedCompletion = function (_AbstractCachingCompl) {
  _inherits(SchemaBasedCompletion, _AbstractCachingCompl);

  function SchemaBasedCompletion() {
    var _call;

    var schema = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, SchemaBasedCompletion);

    var _this2 = _possibleConstructorReturn(this, (SchemaBasedCompletion.__proto__ || Object.getPrototypeOf(SchemaBasedCompletion)).call(this, (_call = {}, _defineProperty(_call, CompletionTypes.KEYWORD, KEYWORD_ITEMS), _defineProperty(_call, CompletionTypes.LABEL, (schema.labels || []).map(function (label) {
      return {
        type: CompletionTypes.LABEL,
        view: label,
        content: (0, _ecsapeCypher.ecsapeCypher)(label),
        postfix: null
      };
    })), _defineProperty(_call, CompletionTypes.RELATIONSHIP_TYPE, (schema.relationshipTypes || []).map(function (relType) {
      return {
        type: CompletionTypes.RELATIONSHIP_TYPE,
        view: relType,
        content: (0, _ecsapeCypher.ecsapeCypher)(relType),
        postfix: null
      };
    })), _defineProperty(_call, CompletionTypes.PROPERTY_KEY, (schema.propertyKeys || []).map(function (propKey) {
      return {
        type: CompletionTypes.PROPERTY_KEY,
        view: propKey,
        content: (0, _ecsapeCypher.ecsapeCypher)(propKey),
        postfix: null
      };
    })), _defineProperty(_call, CompletionTypes.FUNCTION_NAME, (schema.functions || []).map(function (_ref) {
      var name = _ref.name,
          signature = _ref.signature;
      return {
        type: CompletionTypes.FUNCTION_NAME,
        view: name,
        content: (0, _ecsapeCypher.ecsapeCypher)(name),
        postfix: signature
      };
    })), _defineProperty(_call, CompletionTypes.PROCEDURE_NAME, (schema.procedures || []).map(function (_ref2) {
      var name = _ref2.name,
          signature = _ref2.signature;
      return {
        type: CompletionTypes.PROCEDURE_NAME,
        view: name,
        content: name,
        postfix: signature
      };
    })), _defineProperty(_call, CompletionTypes.CONSOLE_COMMAND_NAME, (schema.consoleCommands || []).map(function (consoleCommandName) {
      return {
        type: CompletionTypes.CONSOLE_COMMAND_NAME,
        view: consoleCommandName.name,
        content: consoleCommandName.name,
        postfix: consoleCommandName.description || null
      };
    })), _defineProperty(_call, CompletionTypes.PARAMETER, (schema.parameters || []).map(function (parameter) {
      return {
        type: CompletionTypes.PARAMETER,
        view: parameter,
        content: parameter,
        postfix: null
      };
    })), _call)));

    _initialiseProps.call(_this2);

    _this2.schema = schema;
    return _this2;
  }

  _createClass(SchemaBasedCompletion, [{
    key: 'calculateItems',
    value: function calculateItems(typeData) {
      return (SchemaBasedCompletion.providers[typeData.type] || function () {
        return [];
      })(this.schema, typeData);
    }
  }]);

  return SchemaBasedCompletion;
}(AbstractCachingCompletion);

SchemaBasedCompletion.providers = (_SchemaBasedCompletio = {}, _defineProperty(_SchemaBasedCompletio, CompletionTypes.PROCEDURE_OUTPUT, function (schema, typeData) {
  var findByName = function findByName(e) {
    return e.name === typeData.name && e.returnItems !== [];
  };
  var procedure = _lodash2.default.find(schema.procedures, findByName);
  if (procedure) {
    return procedure.returnItems.map(function (_ref4) {
      var name = _ref4.name,
          signature = _ref4.signature;
      return {
        type: CompletionTypes.PROCEDURE_OUTPUT,
        view: name,
        content: name,
        postfix: ' :: ' + signature
      };
    });
  }
  return [];
}), _defineProperty(_SchemaBasedCompletio, CompletionTypes.CONSOLE_COMMAND_SUBCOMMAND, function (schema, typeData) {
  var filterLastElement = typeData.filterLastElement,
      path = typeData.path;


  var length = filterLastElement ? path.length - 1 : path.length;
  var currentLevel = schema.consoleCommands;
  for (var i = 0; i < length; i += 1) {
    var foundCommand = _lodash2.default.find(currentLevel, ['name', path[i]]);
    if (foundCommand) {
      currentLevel = foundCommand.commands || [];
    } else {
      return [];
    }
  }

  return currentLevel.map(function (_ref5) {
    var name = _ref5.name,
        description = _ref5.description;
    return {
      type: CompletionTypes.CONSOLE_COMMAND_SUBCOMMAND,
      view: name,
      content: name,
      postfix: description || null
    };
  });
}), _SchemaBasedCompletio);

var _initialiseProps = function _initialiseProps() {
  this.schema = {};
};

var QueryBasedCompletion = function (_AbstractCachingCompl2) {
  _inherits(QueryBasedCompletion, _AbstractCachingCompl2);

  function QueryBasedCompletion() {
    var referenceProviders = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, QueryBasedCompletion);

    var _this3 = _possibleConstructorReturn(this, (QueryBasedCompletion.__proto__ || Object.getPrototypeOf(QueryBasedCompletion)).call(this));

    _this3.providers = {};
    _this3.emptyProvider = { getNames: function getNames() {
        return [];
      } };

    _this3.providers = _defineProperty({}, CompletionTypes.VARIABLE, function (query) {
      return (referenceProviders[CypherTypes.VARIABLE_CONTEXT] || _this3.emptyProvider).getNames(query).map(function (name) {
        return {
          type: CompletionTypes.VARIABLE,
          view: name,
          content: name,
          postfix: null
        };
      });
    });
    return _this3;
  }

  _createClass(QueryBasedCompletion, [{
    key: 'calculateItems',
    value: function calculateItems(typeData, query) {
      return (this.providers[typeData.type] || function () {
        return [];
      })(query);
    }
  }]);

  return QueryBasedCompletion;
}(AbstractCachingCompletion);

var AutoCompletion = exports.AutoCompletion = function () {
  function AutoCompletion() {
    _classCallCheck(this, AutoCompletion);

    this.queryBased = null;
    this.schemaBased = null;

    this.updateSchema({});
  }

  _createClass(AutoCompletion, [{
    key: 'getItems',
    value: function getItems(types, _ref3) {
      var _ref3$query = _ref3.query,
          query = _ref3$query === undefined ? null : _ref3$query,
          _ref3$filter = _ref3.filter,
          filter = _ref3$filter === undefined ? '' : _ref3$filter;

      var text = filter.toLowerCase();
      var filteredText = AutoCompletion.filterText(text);

      var completionItemFilter = function completionItemFilter() {
        return true;
      };

      var list = [this.queryBased, this.schemaBased].filter(function (s) {
        return s != null;
      }).map(function (t) {
        return t.complete(types, query);
      }).reduce(function (acc, items) {
        return [].concat(_toConsumableArray(acc), _toConsumableArray(items));
      }, []).filter(completionItemFilter);

      if (filteredText) {
        return (0, _fuzzaldrin.filter)(list, filteredText, { key: 'view' });
      }
      if (text) {
        return (0, _fuzzaldrin.filter)(list, text, { key: 'view' });
      }
      return list;
    }
  }, {
    key: 'updateSchema',
    value: function updateSchema(schema) {
      this.schemaBased = new SchemaBasedCompletion(schema);
    }
  }, {
    key: 'updateReferenceProviders',
    value: function updateReferenceProviders(referenceProviders) {
      this.queryBased = new QueryBasedCompletion(referenceProviders);
    }

    /**
     * Define whether element should be replaced or not.
     */

  }], [{
    key: 'shouldBeReplaced',
    value: function shouldBeReplaced(element) {
      if (element == null) {
        return false;
      }

      var text = element.getText();
      var parent = element.parentCtx;

      // If element is whitespace
      if (/^\s+$/.test(text)) {
        return false;
      }
      // If element is opening bracket (e.g. start of relationship pattern)
      if (text === '[') {
        return false;
      }
      // If element is opening brace (e.g. start of node pattern)
      if (text === '(') {
        return false;
      }

      if (text === '.') {
        return false;
      }

      if (text === '{') {
        return false;
      }
      if (text === '$') {
        return false;
      }
      if (text === ':' && parent != null && parent.constructor.name === CypherTypes.MAP_LITERAL_ENTRY) {
        return false;
      }

      return true;
    }
  }, {
    key: 'filterText',
    value: function filterText(text) {
      if (text.startsWith('$')) {
        return text.slice(1);
      }
      return text;
    }

    // eslint-disable-next-line no-unused-vars

  }, {
    key: 'calculateSmartReplaceRange',
    value: function calculateSmartReplaceRange(element, start, stop) {
      // If we are in relationship type or label and we have error nodes in there.
      // This means that we typed in just ':' and Antlr consumed other tokens in element
      // In this case replace only ':'
      if (element.constructor.name === CypherTypes.RELATIONSHIP_TYPE_CONTEXT || element.constructor.name === CypherTypes.NODE_LABEL_CONTEXT) {
        if (_TreeUtils.TreeUtils.hasErrorNode(element)) {
          return { filterText: ':', start: start, stop: start };
        }
      }

      return null;
    }
  }]);

  return AutoCompletion;
}();

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

(function() {
  var PathSeparator, SpaceRegex, filter, matcher, scorer;

  scorer = __webpack_require__(41);

  filter = __webpack_require__(86);

  matcher = __webpack_require__(87);

  PathSeparator = __webpack_require__(24).sep;

  SpaceRegex = /\ /g;

  module.exports = {
    filter: function(candidates, query, options) {
      var queryHasSlashes;
      if (query) {
        queryHasSlashes = query.indexOf(PathSeparator) !== -1;
        query = query.replace(SpaceRegex, '');
      }
      return filter(candidates, query, queryHasSlashes, options);
    },
    score: function(string, query) {
      var queryHasSlashes, score;
      if (!string) {
        return 0;
      }
      if (!query) {
        return 0;
      }
      if (string === query) {
        return 2;
      }
      queryHasSlashes = query.indexOf(PathSeparator) !== -1;
      query = query.replace(SpaceRegex, '');
      score = scorer.score(string, query);
      if (!queryHasSlashes) {
        score = scorer.basenameScore(string, query, score);
      }
      return score;
    },
    match: function(string, query) {
      var baseMatches, index, matches, queryHasSlashes, seen, _i, _ref, _results;
      if (!string) {
        return [];
      }
      if (!query) {
        return [];
      }
      if (string === query) {
        return (function() {
          _results = [];
          for (var _i = 0, _ref = string.length; 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this);
      }
      queryHasSlashes = query.indexOf(PathSeparator) !== -1;
      query = query.replace(SpaceRegex, '');
      matches = matcher.match(string, query);
      if (!queryHasSlashes) {
        baseMatches = matcher.basenameMatch(string, query);
        matches = matches.concat(baseMatches).sort(function(a, b) {
          return a - b;
        });
        seen = null;
        index = 0;
        while (index < matches.length) {
          if (index && seen === matches[index]) {
            matches.splice(index, 1);
          } else {
            seen = matches[index];
            index++;
          }
        }
      }
      return matches;
    }
  };

}).call(this);


/***/ }),
/* 85 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

(function() {
  var pluckCandidates, scorer, sortCandidates;

  scorer = __webpack_require__(41);

  pluckCandidates = function(a) {
    return a.candidate;
  };

  sortCandidates = function(a, b) {
    return b.score - a.score;
  };

  module.exports = function(candidates, query, queryHasSlashes, _arg) {
    var candidate, key, maxResults, score, scoredCandidates, string, _i, _len, _ref;
    _ref = _arg != null ? _arg : {}, key = _ref.key, maxResults = _ref.maxResults;
    if (query) {
      scoredCandidates = [];
      for (_i = 0, _len = candidates.length; _i < _len; _i++) {
        candidate = candidates[_i];
        string = key != null ? candidate[key] : candidate;
        if (!string) {
          continue;
        }
        score = scorer.score(string, query, queryHasSlashes);
        if (!queryHasSlashes) {
          score = scorer.basenameScore(string, query, score);
        }
        if (score > 0) {
          scoredCandidates.push({
            candidate: candidate,
            score: score
          });
        }
      }
      scoredCandidates.sort(sortCandidates);
      candidates = scoredCandidates.map(pluckCandidates);
    }
    if (maxResults != null) {
      candidates = candidates.slice(0, maxResults);
    }
    return candidates;
  };

}).call(this);


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

(function() {
  var PathSeparator;

  PathSeparator = __webpack_require__(24).sep;

  exports.basenameMatch = function(string, query) {
    var base, index, lastCharacter, slashCount;
    index = string.length - 1;
    while (string[index] === PathSeparator) {
      index--;
    }
    slashCount = 0;
    lastCharacter = index;
    base = null;
    while (index >= 0) {
      if (string[index] === PathSeparator) {
        slashCount++;
        if (base == null) {
          base = string.substring(index + 1, lastCharacter + 1);
        }
      } else if (index === 0) {
        if (lastCharacter < string.length - 1) {
          if (base == null) {
            base = string.substring(0, lastCharacter + 1);
          }
        } else {
          if (base == null) {
            base = string;
          }
        }
      }
      index--;
    }
    return exports.match(base, query, string.length - base.length);
  };

  exports.match = function(string, query, stringOffset) {
    var character, indexInQuery, indexInString, lowerCaseIndex, matches, minIndex, queryLength, stringLength, upperCaseIndex, _i, _ref, _results;
    if (stringOffset == null) {
      stringOffset = 0;
    }
    if (string === query) {
      return (function() {
        _results = [];
        for (var _i = stringOffset, _ref = stringOffset + string.length; stringOffset <= _ref ? _i < _ref : _i > _ref; stringOffset <= _ref ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this);
    }
    queryLength = query.length;
    stringLength = string.length;
    indexInQuery = 0;
    indexInString = 0;
    matches = [];
    while (indexInQuery < queryLength) {
      character = query[indexInQuery++];
      lowerCaseIndex = string.indexOf(character.toLowerCase());
      upperCaseIndex = string.indexOf(character.toUpperCase());
      minIndex = Math.min(lowerCaseIndex, upperCaseIndex);
      if (minIndex === -1) {
        minIndex = Math.max(lowerCaseIndex, upperCaseIndex);
      }
      indexInString = minIndex;
      if (indexInString === -1) {
        return [];
      }
      matches.push(stringOffset + indexInString);
      stringOffset += indexInString + 1;
      string = string.substring(indexInString + 1, stringLength);
    }
    return matches;
  };

}).call(this);


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var ecsapeCypher = exports.ecsapeCypher = function ecsapeCypher(str) {
  var prefix = str.startsWith(':') ? ':' : '';
  var content = str;
  if (prefix.length > 0) {
    content = str.substring(1);
  }
  return (/^[A-Za-z][A-Za-z0-9_]*$/.test(content) ? prefix + content : prefix + '`' + content.replace(/`/g, '``') + '`'
  );
};

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CypherSyntaxHighlight = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
opyright (c) 2002-2017 "Neo Technology,"
etwork Engine for Objects in Lund AB [http://neotechnology.com]

his file is part of Neo4j.

eo4j is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * the Free Software Foundation, either version 3 of the License, or
at your option) any later version.

his program is distributed in the hope that it will be useful,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * but WITHOUT ANY WARRANTY; without even the implied warranty of
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
eneral Public License for more details.

ou should have received a copy of the GNU General Public License
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * along with this program.  If not, see <http://www.gnu.org/licenses/>.


var _TreeUtils = __webpack_require__(5);

var _CypherTypes = __webpack_require__(1);

var CypherTypes = _interopRequireWildcard(_CypherTypes);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function traverse(element, callback) {
  if (callback(element)) {
    // found, no need to go deeper
    return;
  }
  var c = element.getChildCount();
  if (c === 0) {
    return;
  }
  for (var i = 0; i < c; i += 1) {
    traverse(element.getChild(i), callback);
  }
}

var CypherSyntaxHighlight = exports.CypherSyntaxHighlight = function () {
  function CypherSyntaxHighlight() {
    _classCallCheck(this, CypherSyntaxHighlight);
  }

  _createClass(CypherSyntaxHighlight, null, [{
    key: 'process',
    value: function process(parseTree, callback) {
      traverse(parseTree, function (e) {
        var _ref = _TreeUtils.TreeUtils.getPosition(e) || { start: 0, stop: 0 },
            start = _ref.start,
            stop = _ref.stop;

        if (start > stop) {
          return false;
        }

        if (e.constructor.name === CypherTypes.VARIABLE_CONTEXT) {
          callback(e, 'variable');
          return true;
        }

        if (e.constructor.name === CypherTypes.NODE_LABEL_CONTEXT) {
          callback(e, 'label');
          return true;
        }

        if (e.constructor.name === CypherTypes.RELATIONSHIP_TYPE_CONTEXT || e.constructor.name === CypherTypes.RELATIONSHIP_TYPE_OPTIONAL_COLON_CONTEXT) {
          callback(e, 'relationshipType');
          return true;
        }

        if (e.constructor.name === CypherTypes.PROPERTY_KEY_NAME_CONTEXT) {
          callback(e, 'property');
          return true;
        }

        if (e.constructor.name === CypherTypes.PROCEDURE_NAME_CONTEXT) {
          callback(e, 'procedure');
          return true;
        }

        if (e.constructor.name === CypherTypes.PROCEDURE_OUTPUT_CONTEXT) {
          callback(e, 'procedureOutput');
          return true;
        }

        if (e.constructor.name === CypherTypes.FUNCTION_NAME_CONTEXT) {
          callback(e, 'function');
          return true;
        }

        if (e.constructor.name === CypherTypes.ALL_FUNCTION_NAME_CONTEXT || e.constructor.name === CypherTypes.REDUCE_FUNCTION_NAME_CONTEXT || e.constructor.name === CypherTypes.FILTER_FUNCTION_NAME_CONTEXT || e.constructor.name === CypherTypes.NONE_FUNCTION_NAME_CONTEXT || e.constructor.name === CypherTypes.EXTRACT_FUNCTION_NAME_CONTEXT || e.constructor.name === CypherTypes.SHORTEST_PATH_FUNCTION_NAME_CONTEXT || e.constructor.name === CypherTypes.ALL_SHORTEST_PATH_FUNCTION_NAME_CONTEXT || e.constructor.name === CypherTypes.SINGLE_FUNCTION_NAME_CONTEXT || e.constructor.name === CypherTypes.EXISTS_FUNCTION_NAME_CONTEXT || e.constructor.name === CypherTypes.ANY_FUNCTION_NAME_CONTEXT) {
          callback(e, 'function');
          return true;
        }

        if (e.constructor.name === CypherTypes.PARAMETER_CONTEXT) {
          callback(e, 'parameter');
          return true;
        }

        if (e.constructor.name === CypherTypes.CONSOLE_COMMAND_NAME_CONTEXT) {
          callback(e, 'consoleCommand');
          return true;
        }

        if (e.constructor.name === CypherTypes.CONSOLE_COMMAND_SUBCOMMAND_CONTEXT || e.constructor.name === CypherTypes.CONSOLE_COMMAND_PATH_CONTEXT) {
          callback(e, 'property');
          return true;
        }

        return false;
      });
    }
  }]);

  return CypherSyntaxHighlight;
}();

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 * Copyright (c) 2002-2017 "Neo Technology,"
 * Network Engine for Objects in Lund AB [http://neotechnology.com]
 *
 * This file is part of Neo4j.
 *
 * Neo4j is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var PositionConverter = exports.PositionConverter = function () {
  function PositionConverter(input) {
    _classCallCheck(this, PositionConverter);

    this.newLines = [];

    for (var i = 0; i < input.length; i += 1) {
      if (input[i] === '\n') {
        this.newLines.push(i);
      }
    }
  }

  _createClass(PositionConverter, [{
    key: 'toAbsolute',
    value: function toAbsolute(line, column) {
      return (this.newLines[line - 2] || -1) + column + 1;
    }
  }, {
    key: 'toRelative',
    value: function toRelative(abs) {
      for (var i = this.newLines.length - 1; i >= 0; i -= 1) {
        var column = abs - this.newLines[i];
        if (column >= 1) {
          return { line: i + 2, column: column - 1 };
        }
      }

      return { line: 1, column: abs };
    }
  }]);

  return PositionConverter;
}();

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var wait = function wait(ms) {
  return new Promise(function (r) {
    return setTimeout(r, ms);
  });
};

var retryOperation = exports.retryOperation = function retryOperation(operation, delay, times) {
  return new Promise(function (resolve, reject) {
    return operation().then(resolve).catch(function (reason) {
      if (times - 1 > 0) {
        return wait(delay).then(retryOperation.bind(null, operation, delay, times - 1)).then(resolve).catch(reject);
      }
      return reject(reason);
    });
  });
};

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Generated from cypher-editor-support/src/_generated/Cypher.g4 by ANTLR 4.7
// jshint ignore: start
var antlr4 = __webpack_require__(9);

var serializedATN = ["\x03\u608B\uA72A\u8133\uB9ED\u417C\u3BE7\u7786\u5964", "\x02\x9C\u050F\b\x01\x04\x02\t\x02\x04\x03\t\x03\x04", "\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07\t", "\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\x0B\t\x0B\x04", "\f\t\f\x04\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10", "\t\x10\x04\x11\t\x11\x04\x12\t\x12\x04\x13\t\x13", "\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17", "\t\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A", "\x04\x1B\t\x1B\x04\x1C\t\x1C\x04\x1D\t\x1D\x04\x1E", "\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04#", "\t#\x04$\t$\x04%\t%\x04&\t&\x04'\t'\x04(\t(\x04)\t)\x04", "*\t*\x04+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x04", "1\t1\x042\t2\x043\t3\x044\t4\x045\t5\x046\t6\x047\t7\x04", "8\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04=\t=\x04>\t>\x04", "?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04", "F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04", "M\tM\x04N\tN\x04O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04", "T\tT\x04U\tU\x04V\tV\x04W\tW\x04X\tX\x04Y\tY\x04Z\tZ\x04", "[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t`\x04a\ta\x04", "b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04", "i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04", "p\tp\x04q\tq\x04r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04", "w\tw\x04x\tx\x04y\ty\x04z\tz\x04{\t{\x04|\t|\x04}\t}\x04", "~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81\x04", "\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t", "\x85\x04\x86\t\x86\x04\x87\t\x87\x04\x88\t\x88\x04", "\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B\x04\x8C\t", "\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04", "\x90\t\x90\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t", "\x93\x04\x94\t\x94\x04\x95\t\x95\x04\x96\t\x96\x04", "\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t", "\x9A\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04", "\x9E\t\x9E\x04\x9F\t\x9F\x04\xA0\t\xA0\x04\xA1\t", "\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4\x04", "\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t", "\xA8\x04\xA9\t\xA9\x04\xAA\t\xAA\x04\xAB\t\xAB\x04", "\xAC\t\xAC\x04\xAD\t\xAD\x04\xAE\t\xAE\x04\xAF\t", "\xAF\x04\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04", "\xB3\t\xB3\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t", "\xB6\x04\xB7\t\xB7\x04\xB8\t\xB8\x04\xB9\t\xB9\x04", "\xBA\t\xBA\x04\xBB\t\xBB\x04\xBC\t\xBC\x04\xBD\t", "\xBD\x04\xBE\t\xBE\x04\xBF\t\xBF\x04\xC0\t\xC0\x04", "\xC1\t\xC1\x04\xC2\t\xC2\x03\x02\x03\x02\x03\x03", "\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05", "\x03\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07", "\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\x0B\x03\x0B", "\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F", "\x03\x0F\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12", "\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15", "\x03\x15\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17", "\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x1A", "\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1C", "\x03\x1D\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1E", "\x03\x1F\x03\x1F\x03 \x03 \x03!\x03!\x03!\x03\"", "\x03\"\x03\"\x03#\x03#\x03$\x03$\x03%\x03%\x03&\x03", "&\x03'\x03'\x03(\x03(\x03)\x03)\x03*\x03*\x03+\x03", "+\x03,\x03,\x03-\x03-\x03.\x03.\x03/\x03/\x030\x03", "0\x031\x031\x032\x032\x033\x033\x034\x034\x035\x03", "5\x036\x036\x037\x037\x037\x037\x037\x037\x037\x03", "8\x038\x038\x038\x038\x038\x038\x038\x039\x039\x03", "9\x039\x039\x039\x039\x039\x03:\x03:\x03:\x03:\x03", ":\x03:\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x03", ";\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03=\x03=\x03", "=\x03=\x03=\x03=\x03>\x03>\x03>\x03>\x03?\x03?\x03", "?\x03?\x03?\x03?\x03?\x03@\x03@\x03@\x03@\x03@\x03", "A\x03A\x03A\x03A\x03A\x03A\x03B\x03B\x03B\x03C\x03", "C\x03C\x03C\x03C\x03C\x03C\x03C\x03C\x03C\x03C\x03", "D\x03D\x03D\x03D\x03D\x03D\x03D\x03E\x03E\x03E\x03", "F\x03F\x03F\x03F\x03F\x03F\x03F\x03G\x03G\x03G\x03", "G\x03G\x03G\x03G\x03H\x03H\x03H\x03H\x03H\x03I\x03", "I\x03I\x03I\x03J\x03J\x03J\x03J\x03J\x03K\x03K\x03", "K\x03K\x03K\x03K\x03K\x03K\x03L\x03L\x03L\x03L\x03", "L\x03M\x03M\x03M\x03N\x03N\x03N\x03N\x03N\x03N\x03", "N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03", "O\x03O\x03O\x03O\x03O\x03O\x03O\x03O\x03O\x03P\x03", "P\x03P\x03P\x03P\x03P\x03Q\x03Q\x03Q\x03Q\x03Q\x03", "Q\x03Q\x03R\x03R\x03R\x03R\x03R\x03R\x03S\x03S\x03", "S\x03S\x03T\x03T\x03T\x03T\x03T\x03T\x03T\x03U\x03", "U\x03U\x03U\x03U\x03U\x03U\x03V\x03V\x03V\x03V\x03", "V\x03V\x03V\x03W\x03W\x03W\x03W\x03W\x03W\x03W\x03", "W\x03X\x03X\x03X\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x03", "Y\x03Y\x03Y\x03Z\x03Z\x03Z\x03Z\x03Z\x03Z\x03Z\x03", "[\x03[\x03[\x03[\x03[\x03[\x03\\\x03\\\x03\\\x03]", "\x03]\x03]\x03]\x03]\x03^\x03^\x03^\x03^\x03^\x03", "^\x03_\x03_\x03_\x03_\x03_\x03_\x03_\x03_\x03_\x03", "_\x03`\x03`\x03`\x03`\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03b\x03b\x03b\x03b\x03", "b\x03c\x03c\x03c\x03c\x03c\x03d\x03d\x03d\x03d\x03", "d\x03e\x03e\x03e\x03e\x03e\x03e\x03f\x03f\x03f\x03", "f\x03f\x03g\x03g\x03g\x03g\x03g\x03g\x03g\x03g\x03", "g\x03g\x03g\x03g\x03g\x03h\x03h\x03h\x03h\x03i\x03", "i\x03i\x03i\x03i\x03i\x03j\x03j\x03j\x03j\x03j\x03", "j\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x03k\x03k\x03", "k\x03k\x03k\x03k\x03k\x03k\x03k\x03k\x03k\x03k\x03", "k\x03k\x03k\x03k\x03k\x03l\x03l\x03l\x03m\x03m\x03", "m\x03m\x03n\x03n\x03n\x03n\x03o\x03o\x03o\x03o\x03", "p\x03p\x03p\x03p\x03p\x03p\x03p\x03q\x03q\x03q\x03", "q\x03q\x03r\x03r\x03r\x03r\x03r\x03r\x03r\x03r\x03", "r\x03s\x03s\x03s\x03s\x03s\x03t\x03t\x03t\x03t\x03", "t\x03t\x03u\x03u\x03u\x03u\x03u\x03u\x03u\x03v\x03", "v\x03v\x03v\x03v\x03v\x03v\x03v\x03w\x03w\x03w\x03", "w\x03x\x03x\x03x\x03x\x03x\x03y\x03y\x03y\x03y\x03", "y\x03y\x03y\x03z\x03z\x03z\x03z\x03z\x03{\x03{\x03", "{\x03{\x03{\x03{\x03|\x03|\x03|\x03|\x03|\x03|\x03", "|\x03}\x03}\x03}\x03}\x03}\x03~\x03~\x03~\x03~\x03", "~\x03\x7F\x03\x7F\x03\x7F\x03\x7F\x03\x80\x03", "\x80\x03\x80\x03\x80\x03\x80\x03\x81\x03\x81\x03", "\x81\x03\x81\x03\x81\x03\x82\x03\x82\x03\x82\x03", "\x82\x03\x82\x03\x83\x03\x83\x03\x83\x03\x83\x03", "\x83\x03\x83\x03\x84\x03\x84\x03\x84\x03\x84\x03", "\x85\x03\x85\x03\x85\x03\x85\x03\x85\x05\x85\u03EF", "\n\x85\x07\x85\u03F1\n\x85\f\x85\x0E\x85\u03F4\x0B\x85", "\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85", "\x05\x85\u03FC\n\x85\x07\x85\u03FE\n\x85\f\x85\x0E\x85", "\u0401\x0B\x85\x03\x85\x05\x85\u0404\n\x85\x03\x86", "\x03\x86\x03\x86\x06\x86\u0409\n\x86\r\x86\x0E\x86", "\u040A\x03\x87\x03\x87\x03\x87\x03\x87\x03\x87\x03", "\x87\x03\x87\x03\x87\x03\x87\x03\x87\x03\x87\x03", "\x87\x03\x87\x03\x87\x03\x87\x03\x87\x03\x87\x03", "\x87\x05\x87\u041F\n\x87\x03\x88\x03\x88\x03\x88", "\x03\x88\x06\x88\u0425\n\x88\r\x88\x0E\x88\u0426\x03", "\x89\x03\x89\x03\x89\x07\x89\u042C\n\x89\f\x89\x0E", "\x89\u042F\x0B\x89\x05\x89\u0431\n\x89\x03\x8A\x03", "\x8A\x06\x8A\u0435\n\x8A\r\x8A\x0E\x8A\u0436\x03\x8B", "\x05\x8B\u043A\n\x8B\x03\x8C\x03\x8C\x05\x8C\u043E", "\n\x8C\x03\x8D\x03\x8D\x05\x8D\u0442\n\x8D\x03\x8E", "\x03\x8E\x05\x8E\u0446\n\x8E\x03\x8F\x03\x8F\x03", "\x90\x03\x90\x05\x90\u044C\n\x90\x03\x91\x03\x91", "\x03\x92\x06\x92\u0451\n\x92\r\x92\x0E\x92\u0452\x03", "\x92\x06\x92\u0456\n\x92\r\x92\x0E\x92\u0457\x03\x92", "\x03\x92\x06\x92\u045C\n\x92\r\x92\x0E\x92\u045D\x03", "\x92\x03\x92\x06\x92\u0462\n\x92\r\x92\x0E\x92\u0463", "\x05\x92\u0466\n\x92\x03\x92\x03\x92\x05\x92\u046A", "\n\x92\x03\x92\x06\x92\u046D\n\x92\r\x92\x0E\x92\u046E", "\x03\x93\x07\x93\u0472\n\x93\f\x93\x0E\x93\u0475\x0B", "\x93\x03\x93\x03\x93\x06\x93\u0479\n\x93\r\x93\x0E", "\x93\u047A\x03\x94\x03\x94\x07\x94\u047F\n\x94\f\x94", "\x0E\x94\u0482\x0B\x94\x03\x95\x03\x95\x05\x95\u0486", "\n\x95\x03\x96\x03\x96\x05\x96\u048A\n\x96\x03\x97", "\x03\x97\x03\x97\x03\x97\x07\x97\u0490\n\x97\f\x97", "\x0E\x97\u0493\x0B\x97\x03\x97\x03\x97\x03\x98\x06", "\x98\u0498\n\x98\r\x98\x0E\x98\u0499\x03\x99\x03\x99", "\x03\x99\x03\x99\x03\x99\x03\x99\x03\x99\x03\x99", "\x03\x99\x03\x99\x03\x99\x03\x99\x05\x99\u04A8\n", "\x99\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x07\x9A\u04AE", "\n\x9A\f\x9A\x0E\x9A\u04B1\x0B\x9A\x03\x9A\x03\x9A", "\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x07\x9A\u04B9\n", "\x9A\f\x9A\x0E\x9A\u04BC\x0B\x9A\x05\x9A\u04BE\n\x9A", "\x03\x9B\x03\x9B\x03\x9C\x03\x9C\x03\x9D\x03\x9D", "\x03\x9E\x03\x9E\x03\x9F\x03\x9F\x03\xA0\x03\xA0", "\x03\xA1\x03\xA1\x03\xA2\x03\xA2\x03\xA3\x03\xA3", "\x03\xA4\x03\xA4\x03\xA5\x03\xA5\x03\xA6\x03\xA6", "\x03\xA7\x03\xA7\x03\xA8\x03\xA8\x03\xA9\x03\xA9", "\x03\xAA\x03\xAA\x03\xAB\x03\xAB\x03\xAC\x03\xAC", "\x03\xAD\x03\xAD\x03\xAE\x03\xAE\x03\xAF\x03\xAF", "\x03\xB0\x03\xB0\x03\xB1\x03\xB1\x03\xB2\x03\xB2", "\x03\xB3\x03\xB3\x03\xB4\x03\xB4\x03\xB5\x03\xB5", "\x03\xB6\x03\xB6\x03\xB7\x03\xB7\x03\xB8\x03\xB8", "\x03\xB9\x03\xB9\x03\xBA\x03\xBA\x03\xBB\x03\xBB", "\x03\xBC\x03\xBC\x03\xBD\x03\xBD\x03\xBE\x03\xBE", "\x03\xBF\x03\xBF\x03\xC0\x03\xC0\x03\xC1\x03\xC1", "\x03\xC2\x03\xC2\x03\u04AF\x02\xC3\x03\x03\x05\x04", "\x07\x05\t\x06\x0B\x07\r\b\x0F\t\x11\n\x13\x0B\x15", "\f\x17\r\x19\x0E\x1B\x0F\x1D\x10\x1F\x11!\x12#\x13", "%\x14'\x15)\x16+\x17-\x18/\x191\x1A3\x1B5\x1C7\x1D", "9\x1E;\x1F= ?!A\"C#E$G%I&K'M(O)Q*S+U,W-Y.[/]0_1a2c3e4g5i6k7m8o", "9q:s;u<w=y>{?}@\x7FA\x81B\x83C\x85D\x87E\x89F\x8BG\x8D", "H\x8FI\x91J\x93K\x95L\x97M\x99N\x9BO\x9DP\x9FQ\xA1", "R\xA3S\xA5T\xA7U\xA9V\xABW\xADX\xAFY\xB1Z\xB3[\xB5", "\\\xB7]\xB9^\xBB_\xBD`\xBFa\xC1b\xC3c\xC5d\xC7e\xC9", "f\xCBg\xCDh\xCFi\xD1j\xD3k\xD5l\xD7m\xD9n\xDBo\xDD", "p\xDFq\xE1r\xE3s\xE5t\xE7u\xE9v\xEBw\xEDx\xEFy\xF1", "z\xF3{\xF5|\xF7}\xF9~\xFB\x7F\xFD\x80\xFF\x81\u0101", "\x82\u0103\x83\u0105\x84\u0107\x85\u0109\x86\u010B\x87\u010D", "\x88\u010F\x89\u0111\x8A\u0113\x8B\u0115\x8C\u0117\x8D\u0119", "\x8E\u011B\x8F\u011D\x90\u011F\x91\u0121\x92\u0123\x93\u0125", "\x94\u0127\x95\u0129\x96\u012B\x97\u012D\x98\u012F\x99\u0131", "\x9A\u0133\x9B\u0135\x9C\u0137\x02\u0139\x02\u013B\x02\u013D", "\x02\u013F\x02\u0141\x02\u0143\x02\u0145\x02\u0147\x02\u0149", "\x02\u014B\x02\u014D\x02\u014F\x02\u0151\x02\u0153\x02\u0155", "\x02\u0157\x02\u0159\x02\u015B\x02\u015D\x02\u015F\x02\u0161", "\x02\u0163\x02\u0165\x02\u0167\x02\u0169\x02\u016B\x02\u016D", "\x02\u016F\x02\u0171\x02\u0173\x02\u0175\x02\u0177\x02\u0179", "\x02\u017B\x02\u017D\x02\u017F\x02\u0181\x02\u0183\x02\x03", "\x022\x04\x02$$^^\x04\x02))^^\x05\x022;CHch\x0F\x02", "$$))DDHHPPTTVV^^ddhhppttvv\x04\x02WWww\x04\x02CHch\x04\x02", "GGgg\b\x02aa\u2041\u2042\u2056\u2056\uFE35\uFE36\uFE4F\uFE51\uFF41", "\uFF41\x03\x02bb\n\x02\xA2\xA2\u1682\u1682\u1810\u1810\u2002", "\u200C\u202A\u202B\u2031\u2031\u2061\u2061\u3002\u3002\x04\x02\f", "\f\x0F\x0F\x03\x02\x0E\x0E\x03\x02  \u01AF\x022;C", "\\aac|\xAC\xAC\xB7\xB7\xB9\xB9\xBC\xBC\xC2\xD8\xDA", "\xF8\xFA\u02C3\u02C8\u02D3\u02E2\u02E6\u02EE\u02EE\u02F0\u02F0\u0302", "\u0376\u0378\u0379\u037C\u037F\u0388\u038C\u038E\u038E\u0390\u03A3\u03A5", "\u03F7\u03F9\u0483\u0485\u0489\u048C\u0529\u0533\u0558\u055B\u055B\u0563", "\u0589\u0593\u05BF\u05C1\u05C1\u05C3\u05C4\u05C6\u05C7\u05C9\u05C9\u05D2", "\u05EC\u05F2\u05F4\u0612\u061C\u0622\u066B\u0670\u06D5\u06D7\u06DE\u06E1", "\u06EA\u06EC\u06FE\u0701\u0701\u0712\u074C\u074F\u07B3\u07C2\u07F7\u07FC", "\u07FC\u0802\u082F\u0842\u085D\u08A2\u08A2\u08A4\u08AE\u08E6\u0900\u0902", "\u0965\u0968\u0971\u0973\u0979\u097B\u0981\u0983\u0985\u0987\u098E\u0991", "\u0992\u0995\u09AA\u09AC\u09B2\u09B4\u09B4\u09B8\u09BB\u09BE\u09C6\u09C9", "\u09CA\u09CD\u09D0\u09D9\u09D9\u09DE\u09DF\u09E1\u09E5\u09E8\u09F3\u0A03", "\u0A05\u0A07\u0A0C\u0A11\u0A12\u0A15\u0A2A\u0A2C\u0A32\u0A34\u0A35\u0A37", "\u0A38\u0A3A\u0A3B\u0A3E\u0A3E\u0A40\u0A44\u0A49\u0A4A\u0A4D\u0A4F\u0A53", "\u0A53\u0A5B\u0A5E\u0A60\u0A60\u0A68\u0A77\u0A83\u0A85\u0A87\u0A8F\u0A91", "\u0A93\u0A95\u0AAA\u0AAC\u0AB2\u0AB4\u0AB5\u0AB7\u0ABB\u0ABE\u0AC7\u0AC9", "\u0ACB\u0ACD\u0ACF\u0AD2\u0AD2\u0AE2\u0AE5\u0AE8\u0AF1\u0B03\u0B05\u0B07", "\u0B0E\u0B11\u0B12\u0B15\u0B2A\u0B2C\u0B32\u0B34\u0B35\u0B37\u0B3B\u0B3E", "\u0B46\u0B49\u0B4A\u0B4D\u0B4F\u0B58\u0B59\u0B5E\u0B5F\u0B61\u0B65\u0B68", "\u0B71\u0B73\u0B73\u0B84\u0B85\u0B87\u0B8C\u0B90\u0B92\u0B94\u0B97\u0B9B", "\u0B9C\u0B9E\u0B9E\u0BA0\u0BA1\u0BA5\u0BA6\u0BAA\u0BAC\u0BB0\u0BBB\u0BC0", "\u0BC4\u0BC8\u0BCA\u0BCC\u0BCF\u0BD2\u0BD2\u0BD9\u0BD9\u0BE8\u0BF1\u0C03", "\u0C05\u0C07\u0C0E\u0C10\u0C12\u0C14\u0C2A\u0C2C\u0C35\u0C37\u0C3B\u0C3F", "\u0C46\u0C48\u0C4A\u0C4C\u0C4F\u0C57\u0C58\u0C5A\u0C5B\u0C62\u0C65\u0C68", "\u0C71\u0C84\u0C85\u0C87\u0C8E\u0C90\u0C92\u0C94\u0CAA\u0CAC\u0CB5\u0CB7", "\u0CBB\u0CBE\u0CC6\u0CC8\u0CCA\u0CCC\u0CCF\u0CD7\u0CD8\u0CE0\u0CE0\u0CE2", "\u0CE5\u0CE8\u0CF1\u0CF3\u0CF4\u0D04\u0D05\u0D07\u0D0E\u0D10\u0D12\u0D14", "\u0D3C\u0D3F\u0D46\u0D48\u0D4A\u0D4C\u0D50\u0D59\u0D59\u0D62\u0D65\u0D68", "\u0D71\u0D7C\u0D81\u0D84\u0D85\u0D87\u0D98\u0D9C\u0DB3\u0DB5\u0DBD\u0DBF", "\u0DBF\u0DC2\u0DC8\u0DCC\u0DCC\u0DD1\u0DD6\u0DD8\u0DD8\u0DDA\u0DE1\u0DF4", "\u0DF5\u0E03\u0E3C\u0E42\u0E50\u0E52\u0E5B\u0E83\u0E84\u0E86\u0E86\u0E89", "\u0E8A\u0E8C\u0E8C\u0E8F\u0E8F\u0E96\u0E99\u0E9B\u0EA1\u0EA3\u0EA5\u0EA7", "\u0EA7\u0EA9\u0EA9\u0EAC\u0EAD\u0EAF\u0EBB\u0EBD\u0EBF\u0EC2\u0EC6\u0EC8", "\u0EC8\u0ECA\u0ECF\u0ED2\u0EDB\u0EDE\u0EE1\u0F02\u0F02\u0F1A\u0F1B\u0F22", "\u0F2B\u0F37\u0F37\u0F39\u0F39\u0F3B\u0F3B\u0F40\u0F49\u0F4B\u0F6E\u0F73", "\u0F86\u0F88\u0F99\u0F9B\u0FBE\u0FC8\u0FC8\u1002\u104B\u1052\u109F\u10A2", "\u10C7\u10C9\u10C9\u10CF\u10CF\u10D2\u10FC\u10FE\u124A\u124C\u124F\u1252", "\u1258\u125A\u125A\u125C\u125F\u1262\u128A\u128C\u128F\u1292\u12B2\u12B4", "\u12B7\u12BA\u12C0\u12C2\u12C2\u12C4\u12C7\u12CA\u12D8\u12DA\u1312\u1314", "\u1317\u131A\u135C\u135F\u1361\u136B\u1373\u1382\u1391\u13A2\u13F6\u1403", "\u166E\u1671\u1681\u1683\u169C\u16A2\u16EC\u16F0\u16F2\u1702\u170E\u1710", "\u1716\u1722\u1736\u1742\u1755\u1762\u176E\u1770\u1772\u1774\u1775\u1782", "\u17D5\u17D9\u17D9\u17DE\u17DF\u17E2\u17EB\u180D\u180F\u1812\u181B\u1822", "\u1879\u1882\u18AC\u18B2\u18F7\u1902\u191E\u1922\u192D\u1932\u193D\u1948", "\u196F\u1972\u1976\u1982\u19AD\u19B2\u19CB\u19D2\u19DC\u1A02\u1A1D\u1A22", "\u1A60\u1A62\u1A7E\u1A81\u1A8B\u1A92\u1A9B\u1AA9\u1AA9\u1B02\u1B4D\u1B52", "\u1B5B\u1B6D\u1B75\u1B82\u1BF5\u1C02\u1C39\u1C42\u1C4B\u1C4F\u1C7F\u1CD2", "\u1CD4\u1CD6\u1CF8\u1D02\u1DE8\u1DFE\u1F17\u1F1A\u1F1F\u1F22\u1F47\u1F4A", "\u1F4F\u1F52\u1F59\u1F5B\u1F5B\u1F5D\u1F5D\u1F5F\u1F5F\u1F61\u1F7F\u1F82", "\u1FB6\u1FB8\u1FBE\u1FC0\u1FC0\u1FC4\u1FC6\u1FC8\u1FCE\u1FD2\u1FD5\u1FD8", "\u1FDD\u1FE2\u1FEE\u1FF4\u1FF6\u1FF8\u1FFE\u2041\u2042\u2056\u2056\u2073", "\u2073\u2081\u2081\u2092\u209E\u20D2\u20DE\u20E3\u20E3\u20E7\u20F2\u2104", "\u2104\u2109\u2109\u210C\u2115\u2117\u2117\u211A\u211F\u2126\u2126\u2128", "\u2128\u212A\u212A\u212C\u213B\u213E\u2141\u2147\u214B\u2150\u2150\u2162", "\u218A\u2C02\u2C30\u2C32\u2C60\u2C62\u2CE6\u2CED\u2CF5\u2D02\u2D27\u2D29", "\u2D29\u2D2F\u2D2F\u2D32\u2D69\u2D71\u2D71\u2D81\u2D98\u2DA2\u2DA8\u2DAA", "\u2DB0\u2DB2\u2DB8\u2DBA\u2DC0\u2DC2\u2DC8\u2DCA\u2DD0\u2DD2\u2DD8\u2DDA", "\u2DE0\u2DE2\u2E01\u3007\u3009\u3023\u3031\u3033\u3037\u303A\u303E\u3043", "\u3098\u309B\u30A1\u30A3\u30FC\u30FE\u3101\u3107\u312F\u3133\u3190\u31A2", "\u31BC\u31F2\u3201\u3402\u4DB7\u4E02\u9FCE\uA002\uA48E\uA4D2\uA4FF\uA502", "\uA60E\uA612\uA62D\uA642\uA671\uA676\uA67F\uA681\uA699\uA6A1\uA6F3\uA719", "\uA721\uA724\uA78A\uA78D\uA790\uA792\uA795\uA7A2\uA7AC\uA7FA\uA829\uA842", "\uA875\uA882\uA8C6\uA8D2\uA8DB\uA8E2\uA8F9\uA8FD\uA8FD\uA902\uA92F\uA932", "\uA955\uA962\uA97E\uA982\uA9C2\uA9D1\uA9DB\uAA02\uAA38\uAA42\uAA4F\uAA52", "\uAA5B\uAA62\uAA78\uAA7C\uAA7D\uAA82\uAAC4\uAADD\uAADF\uAAE2\uAAF1\uAAF4", "\uAAF8\uAB03\uAB08\uAB0B\uAB10\uAB13\uAB18\uAB22\uAB28\uAB2A\uAB30\uABC2", "\uABEC\uABEE\uABEF\uABF2\uABFB\uAC02\uD7A5\uD7B2\uD7C8\uD7CD\uD7FD\uF902", "\uFA6F\uFA72\uFADB\uFB02\uFB08\uFB15\uFB19\uFB1F\uFB2A\uFB2C\uFB38\uFB3A", "\uFB3E\uFB40\uFB40\uFB42\uFB43\uFB45\uFB46\uFB48\uFBB3\uFBD5\uFD3F\uFD52", "\uFD91\uFD94\uFDC9\uFDF2\uFDFD\uFE02\uFE11\uFE22\uFE28\uFE35\uFE36\uFE4F", "\uFE51\uFE72\uFE76\uFE78\uFEFE\uFF12\uFF1B\uFF23\uFF3C\uFF41\uFF41\uFF43", "\uFF5C\uFF68\uFFC0\uFFC4\uFFC9\uFFCC\uFFD1\uFFD4\uFFD9\uFFDC\uFFDE\x03", "\x02\x1F\x1F\x03\x02\x1E\x1E\x03\x02\x0F\x0F\x13", "\x02&&\xA4\xA7\u0591\u0591\u060D\u060D\u09F4\u09F5\u09FD\u09FD", "\u0AF3\u0AF3\u0BFB\u0BFB\u0E41\u0E41\u17DD\u17DD\u20A2\u20BC\uA83A\uA83A", "\uFDFE\uFDFE\uFE6B\uFE6B\uFF06\uFF06\uFFE2\uFFE3\uFFE7\uFFE8\x03\x02", "\"\"\x03\x02\x0B\x0B\x03\x02\f\f\x03\x02\r\r\x03\x02", "!!\u0174\x02C\\c|\xAC\xAC\xB7\xB7\xBC\xBC\xC2\xD8", "\xDA\xF8\xFA\u02C3\u02C8\u02D3\u02E2\u02E6\u02EE\u02EE\u02F0\u02F0", "\u0372\u0376\u0378\u0379\u037C\u037F\u0388\u0388\u038A\u038C\u038E\u038E", "\u0390\u03A3\u03A5\u03F7\u03F9\u0483\u048C\u0529\u0533\u0558\u055B\u055B", "\u0563\u0589\u05D2\u05EC\u05F2\u05F4\u0622\u064C\u0670\u0671\u0673\u06D5", "\u06D7\u06D7\u06E7\u06E8\u06F0\u06F1\u06FC\u06FE\u0701\u0701\u0712\u0712", "\u0714\u0731\u074F\u07A7\u07B3\u07B3\u07CC\u07EC\u07F6\u07F7\u07FC\u07FC", "\u0802\u0817\u081C\u081C\u0826\u0826\u082A\u082A\u0842\u085A\u08A2\u08A2", "\u08A4\u08AE\u0906\u093B\u093F\u093F\u0952\u0952\u095A\u0963\u0973\u0979", "\u097B\u0981\u0987\u098E\u0991\u0992\u0995\u09AA\u09AC\u09B2\u09B4\u09B4", "\u09B8\u09BB\u09BF\u09BF\u09D0\u09D0\u09DE\u09DF\u09E1\u09E3\u09F2\u09F3", "\u0A07\u0A0C\u0A11\u0A12\u0A15\u0A2A\u0A2C\u0A32\u0A34\u0A35\u0A37\u0A38", "\u0A3A\u0A3B\u0A5B\u0A5E\u0A60\u0A60\u0A74\u0A76\u0A87\u0A8F\u0A91\u0A93", "\u0A95\u0AAA\u0AAC\u0AB2\u0AB4\u0AB5\u0AB7\u0ABB\u0ABF\u0ABF\u0AD2\u0AD2", "\u0AE2\u0AE3\u0B07\u0B0E\u0B11\u0B12\u0B15\u0B2A\u0B2C\u0B32\u0B34\u0B35", "\u0B37\u0B3B\u0B3F\u0B3F\u0B5E\u0B5F\u0B61\u0B63\u0B73\u0B73\u0B85\u0B85", "\u0B87\u0B8C\u0B90\u0B92\u0B94\u0B97\u0B9B\u0B9C\u0B9E\u0B9E\u0BA0\u0BA1", "\u0BA5\u0BA6\u0BAA\u0BAC\u0BB0\u0BBB\u0BD2\u0BD2\u0C07\u0C0E\u0C10\u0C12", "\u0C14\u0C2A\u0C2C\u0C35\u0C37\u0C3B\u0C3F\u0C3F\u0C5A\u0C5B\u0C62\u0C63", "\u0C87\u0C8E\u0C90\u0C92\u0C94\u0CAA\u0CAC\u0CB5\u0CB7\u0CBB\u0CBF\u0CBF", "\u0CE0\u0CE0\u0CE2\u0CE3\u0CF3\u0CF4\u0D07\u0D0E\u0D10\u0D12\u0D14\u0D3C", "\u0D3F\u0D3F\u0D50\u0D50\u0D62\u0D63\u0D7C\u0D81\u0D87\u0D98\u0D9C\u0DB3", "\u0DB5\u0DBD\u0DBF\u0DBF\u0DC2\u0DC8\u0E03\u0E32\u0E34\u0E35\u0E42\u0E48", "\u0E83\u0E84\u0E86\u0E86\u0E89\u0E8A\u0E8C\u0E8C\u0E8F\u0E8F\u0E96\u0E99", "\u0E9B\u0EA1\u0EA3\u0EA5\u0EA7\u0EA7\u0EA9\u0EA9\u0EAC\u0EAD\u0EAF\u0EB2", "\u0EB4\u0EB5\u0EBF\u0EBF\u0EC2\u0EC6\u0EC8\u0EC8\u0EDE\u0EE1\u0F02\u0F02", "\u0F42\u0F49\u0F4B\u0F6E\u0F8A\u0F8E\u1002\u102C\u1041\u1041\u1052\u1057", "\u105C\u105F\u1063\u1063\u1067\u1068\u1070\u1072\u1077\u1083\u1090\u1090", "\u10A2\u10C7\u10C9\u10C9\u10CF\u10CF\u10D2\u10FC\u10FE\u124A\u124C\u124F", "\u1252\u1258\u125A\u125A\u125C\u125F\u1262\u128A\u128C\u128F\u1292\u12B2", "\u12B4\u12B7\u12BA\u12C0\u12C2\u12C2\u12C4\u12C7\u12CA\u12D8\u12DA\u1312", "\u1314\u1317\u131A\u135C\u1382\u1391\u13A2\u13F6\u1403\u166E\u1671\u1681", "\u1683\u169C\u16A2\u16EC\u16F0\u16F2\u1702\u170E\u1710\u1713\u1722\u1733", "\u1742\u1753\u1762\u176E\u1770\u1772\u1782\u17B5\u17D9\u17D9\u17DE\u17DE", "\u1822\u1879\u1882\u18AA\u18AC\u18AC\u18B2\u18F7\u1902\u191E\u1952\u196F", "\u1972\u1976\u1982\u19AD\u19C3\u19C9\u1A02\u1A18\u1A22\u1A56\u1AA9\u1AA9", "\u1B07\u1B35\u1B47\u1B4D\u1B85\u1BA2\u1BB0\u1BB1\u1BBC\u1BE7\u1C02\u1C25", "\u1C4F\u1C51\u1C5C\u1C7F\u1CEB\u1CEE\u1CF0\u1CF3\u1CF7\u1CF8\u1D02\u1DC1", "\u1E02\u1F17\u1F1A\u1F1F\u1F22\u1F47\u1F4A\u1F4F\u1F52\u1F59\u1F5B\u1F5B", "\u1F5D\u1F5D\u1F5F\u1F5F\u1F61\u1F7F\u1F82\u1FB6\u1FB8\u1FBE\u1FC0\u1FC0", "\u1FC4\u1FC6\u1FC8\u1FCE\u1FD2\u1FD5\u1FD8\u1FDD\u1FE2\u1FEE\u1FF4\u1FF6", "\u1FF8\u1FFE\u2073\u2073\u2081\u2081\u2092\u209E\u2104\u2104\u2109\u2109", "\u210C\u2115\u2117\u2117\u211A\u211F\u2126\u2126\u2128\u2128\u212A\u212A", "\u212C\u213B\u213E\u2141\u2147\u214B\u2150\u2150\u2162\u218A\u2C02\u2C30", "\u2C32\u2C60\u2C62\u2CE6\u2CED\u2CF0\u2CF4\u2CF5\u2D02\u2D27\u2D29\u2D29", "\u2D2F\u2D2F\u2D32\u2D69\u2D71\u2D71\u2D82\u2D98\u2DA2\u2DA8\u2DAA\u2DB0", "\u2DB2\u2DB8\u2DBA\u2DC0\u2DC2\u2DC8\u2DCA\u2DD0\u2DD2\u2DD8\u2DDA\u2DE0", "\u3007\u3009\u3023\u302B\u3033\u3037\u303A\u303E\u3043\u3098\u309D\u30A1", "\u30A3\u30FC\u30FE\u3101\u3107\u312F\u3133\u3190\u31A2\u31BC\u31F2\u3201", "\u3402\u4DB7\u4E02\u9FCE\uA002\uA48E\uA4D2\uA4FF\uA502\uA60E\uA612\uA621", "\uA62C\uA62D\uA642\uA670\uA681\uA699\uA6A2\uA6F1\uA719\uA721\uA724\uA78A", "\uA78D\uA790\uA792\uA795\uA7A2\uA7AC\uA7FA\uA803\uA805\uA807\uA809\uA80C", "\uA80E\uA824\uA842\uA875\uA884\uA8B5\uA8F4\uA8F9\uA8FD\uA8FD\uA90C\uA927", "\uA932\uA948\uA962\uA97E\uA986\uA9B4\uA9D1\uA9D1\uAA02\uAA2A\uAA42\uAA44", "\uAA46\uAA4D\uAA62\uAA78\uAA7C\uAA7C\uAA82\uAAB1\uAAB3\uAAB3\uAAB7\uAAB8", "\uAABB\uAABF\uAAC2\uAAC2\uAAC4\uAAC4\uAADD\uAADF\uAAE2\uAAEC\uAAF4\uAAF6", "\uAB03\uAB08\uAB0B\uAB10\uAB13\uAB18\uAB22\uAB28\uAB2A\uAB30\uABC2\uABE4", "\uAC02\uD7A5\uD7B2\uD7C8\uD7CD\uD7FD\uF902\uFA6F\uFA72\uFADB\uFB02\uFB08", "\uFB15\uFB19\uFB1F\uFB1F\uFB21\uFB2A\uFB2C\uFB38\uFB3A\uFB3E\uFB40\uFB40", "\uFB42\uFB43\uFB45\uFB46\uFB48\uFBB3\uFBD5\uFD3F\uFD52\uFD91\uFD94\uFDC9", "\uFDF2\uFDFD\uFE72\uFE76\uFE78\uFEFE\uFF23\uFF3C\uFF43\uFF5C\uFF68\uFFC0", "\uFFC4\uFFC9\uFFCC\uFFD1\uFFD4\uFFD9\uFFDC\uFFDE\x04\x02CCcc\x04", "\x02DDdd\x04\x02EEee\x04\x02FFff\x04\x02HHhh\x04\x02", "IIii\x04\x02JJjj\x04\x02KKkk\x04\x02LLll\x04\x02MMm", "m\x04\x02NNnn\x04\x02OOoo\x04\x02PPpp\x04\x02QQqq\x04", "\x02RRrr\x04\x02SSss\x04\x02TTtt\x04\x02UUuu\x04\x02", "VVvv\x04\x02XXxx\x04\x02YYyy\x04\x02ZZzz\x04\x02[[{", "{\x04\x02\\\\||\x02\u0517\x02\x03\x03\x02\x02\x02", "\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02", "\x02\t\x03\x02\x02\x02\x02\x0B\x03\x02\x02\x02", "\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02", "\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02", "\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02", "\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02", "\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02", "\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02", "%\x03\x02\x02\x02\x02'\x03\x02\x02\x02\x02)\x03", "\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02", "\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02", "\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02", "\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02", ";\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03", "\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02", "\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02", "\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02\x02", "\x02M\x03\x02\x02\x02\x02O\x03\x02\x02\x02\x02", "Q\x03\x02\x02\x02\x02S\x03\x02\x02\x02\x02U\x03", "\x02\x02\x02\x02W\x03\x02\x02\x02\x02Y\x03\x02", "\x02\x02\x02[\x03\x02\x02\x02\x02]\x03\x02\x02", "\x02\x02_\x03\x02\x02\x02\x02a\x03\x02\x02\x02", "\x02c\x03\x02\x02\x02\x02e\x03\x02\x02\x02\x02", "g\x03\x02\x02\x02\x02i\x03\x02\x02\x02\x02k\x03", "\x02\x02\x02\x02m\x03\x02\x02\x02\x02o\x03\x02", "\x02\x02\x02q\x03\x02\x02\x02\x02s\x03\x02\x02", "\x02\x02u\x03\x02\x02\x02\x02w\x03\x02\x02\x02", "\x02y\x03\x02\x02\x02\x02{\x03\x02\x02\x02\x02", "}\x03\x02\x02\x02\x02\x7F\x03\x02\x02\x02\x02", "\x81\x03\x02\x02\x02\x02\x83\x03\x02\x02\x02\x02", "\x85\x03\x02\x02\x02\x02\x87\x03\x02\x02\x02\x02", "\x89\x03\x02\x02\x02\x02\x8B\x03\x02\x02\x02\x02", "\x8D\x03\x02\x02\x02\x02\x8F\x03\x02\x02\x02\x02", "\x91\x03\x02\x02\x02\x02\x93\x03\x02\x02\x02\x02", "\x95\x03\x02\x02\x02\x02\x97\x03\x02\x02\x02\x02", "\x99\x03\x02\x02\x02\x02\x9B\x03\x02\x02\x02\x02", "\x9D\x03\x02\x02\x02\x02\x9F\x03\x02\x02\x02\x02", "\xA1\x03\x02\x02\x02\x02\xA3\x03\x02\x02\x02\x02", "\xA5\x03\x02\x02\x02\x02\xA7\x03\x02\x02\x02\x02", "\xA9\x03\x02\x02\x02\x02\xAB\x03\x02\x02\x02\x02", "\xAD\x03\x02\x02\x02\x02\xAF\x03\x02\x02\x02\x02", "\xB1\x03\x02\x02\x02\x02\xB3\x03\x02\x02\x02\x02", "\xB5\x03\x02\x02\x02\x02\xB7\x03\x02\x02\x02\x02", "\xB9\x03\x02\x02\x02\x02\xBB\x03\x02\x02\x02\x02", "\xBD\x03\x02\x02\x02\x02\xBF\x03\x02\x02\x02\x02", "\xC1\x03\x02\x02\x02\x02\xC3\x03\x02\x02\x02\x02", "\xC5\x03\x02\x02\x02\x02\xC7\x03\x02\x02\x02\x02", "\xC9\x03\x02\x02\x02\x02\xCB\x03\x02\x02\x02\x02", "\xCD\x03\x02\x02\x02\x02\xCF\x03\x02\x02\x02\x02", "\xD1\x03\x02\x02\x02\x02\xD3\x03\x02\x02\x02\x02", "\xD5\x03\x02\x02\x02\x02\xD7\x03\x02\x02\x02\x02", "\xD9\x03\x02\x02\x02\x02\xDB\x03\x02\x02\x02\x02", "\xDD\x03\x02\x02\x02\x02\xDF\x03\x02\x02\x02\x02", "\xE1\x03\x02\x02\x02\x02\xE3\x03\x02\x02\x02\x02", "\xE5\x03\x02\x02\x02\x02\xE7\x03\x02\x02\x02\x02", "\xE9\x03\x02\x02\x02\x02\xEB\x03\x02\x02\x02\x02", "\xED\x03\x02\x02\x02\x02\xEF\x03\x02\x02\x02\x02", "\xF1\x03\x02\x02\x02\x02\xF3\x03\x02\x02\x02\x02", "\xF5\x03\x02\x02\x02\x02\xF7\x03\x02\x02\x02\x02", "\xF9\x03\x02\x02\x02\x02\xFB\x03\x02\x02\x02\x02", "\xFD\x03\x02\x02\x02\x02\xFF\x03\x02\x02\x02\x02", "\u0101\x03\x02\x02\x02\x02\u0103\x03\x02\x02\x02\x02", "\u0105\x03\x02\x02\x02\x02\u0107\x03\x02\x02\x02\x02", "\u0109\x03\x02\x02\x02\x02\u010B\x03\x02\x02\x02\x02", "\u010D\x03\x02\x02\x02\x02\u010F\x03\x02\x02\x02\x02", "\u0111\x03\x02\x02\x02\x02\u0113\x03\x02\x02\x02\x02", "\u0115\x03\x02\x02\x02\x02\u0117\x03\x02\x02\x02\x02", "\u0119\x03\x02\x02\x02\x02\u011B\x03\x02\x02\x02\x02", "\u011D\x03\x02\x02\x02\x02\u011F\x03\x02\x02\x02\x02", "\u0121\x03\x02\x02\x02\x02\u0123\x03\x02\x02\x02\x02", "\u0125\x03\x02\x02\x02\x02\u0127\x03\x02\x02\x02\x02", "\u0129\x03\x02\x02\x02\x02\u012B\x03\x02\x02\x02\x02", "\u012D\x03\x02\x02\x02\x02\u012F\x03\x02\x02\x02\x02", "\u0131\x03\x02\x02\x02\x02\u0133\x03\x02\x02\x02\x02", "\u0135\x03\x02\x02\x02\x03\u0185\x03\x02\x02\x02\x05", "\u0187\x03\x02\x02\x02\x07\u0189\x03\x02\x02\x02\t", "\u018B\x03\x02\x02\x02\x0B\u018E\x03\x02\x02\x02\r", "\u0192\x03\x02\x02\x02\x0F\u0194\x03\x02\x02\x02\x11", "\u0196\x03\x02\x02\x02\x13\u0198\x03\x02\x02\x02\x15", "\u019A\x03\x02\x02\x02\x17\u019C\x03\x02\x02\x02\x19", "\u019E\x03\x02\x02\x02\x1B\u01A0\x03\x02\x02\x02\x1D", "\u01A2\x03\x02\x02\x02\x1F\u01A4\x03\x02\x02\x02!", "\u01A6\x03\x02\x02\x02#\u01A8\x03\x02\x02\x02%\u01AA", "\x03\x02\x02\x02'\u01AC\x03\x02\x02\x02)\u01AE\x03", "\x02\x02\x02+\u01B0\x03\x02\x02\x02-\u01B3\x03\x02", "\x02\x02/\u01B5\x03\x02\x02\x021\u01B7\x03\x02\x02", "\x023\u01BA\x03\x02\x02\x025\u01BC\x03\x02\x02\x02", "7\u01BE\x03\x02\x02\x029\u01C1\x03\x02\x02\x02;\u01C4", "\x03\x02\x02\x02=\u01C7\x03\x02\x02\x02?\u01C9\x03", "\x02\x02\x02A\u01CB\x03\x02\x02\x02C\u01CE\x03\x02", "\x02\x02E\u01D1\x03\x02\x02\x02G\u01D3\x03\x02\x02", "\x02I\u01D5\x03\x02\x02\x02K\u01D7\x03\x02\x02\x02", "M\u01D9\x03\x02\x02\x02O\u01DB\x03\x02\x02\x02Q\u01DD", "\x03\x02\x02\x02S\u01DF\x03\x02\x02\x02U\u01E1\x03", "\x02\x02\x02W\u01E3\x03\x02\x02\x02Y\u01E5\x03\x02", "\x02\x02[\u01E7\x03\x02\x02\x02]\u01E9\x03\x02\x02", "\x02_\u01EB\x03\x02\x02\x02a\u01ED\x03\x02\x02\x02", "c\u01EF\x03\x02\x02\x02e\u01F1\x03\x02\x02\x02g\u01F3", "\x03\x02\x02\x02i\u01F5\x03\x02\x02\x02k\u01F7\x03", "\x02\x02\x02m\u01F9\x03\x02\x02\x02o\u0200\x03\x02", "\x02\x02q\u0208\x03\x02\x02\x02s\u0210\x03\x02\x02", "\x02u\u0216\x03\x02\x02\x02w\u021F\x03\x02\x02\x02", "y\u0226\x03\x02\x02\x02{\u022C\x03\x02\x02\x02}\u0230", "\x03\x02\x02\x02\x7F\u0237\x03\x02\x02\x02\x81\u023C", "\x03\x02\x02\x02\x83\u0242\x03\x02\x02\x02\x85\u0245", "\x03\x02\x02\x02\x87\u0250\x03\x02\x02\x02\x89\u0257", "\x03\x02\x02\x02\x8B\u025A\x03\x02\x02\x02\x8D\u0261", "\x03\x02\x02\x02\x8F\u0268\x03\x02\x02\x02\x91\u026D", "\x03\x02\x02\x02\x93\u0271\x03\x02\x02\x02\x95\u0276", "\x03\x02\x02\x02\x97\u027E\x03\x02\x02\x02\x99\u0283", "\x03\x02\x02\x02\x9B\u0286\x03\x02\x02\x02\x9D\u0296", "\x03\x02\x02\x02\x9F\u029F\x03\x02\x02\x02\xA1\u02A5", "\x03\x02\x02\x02\xA3\u02AC\x03\x02\x02\x02\xA5\u02B2", "\x03\x02\x02\x02\xA7\u02B6\x03\x02\x02\x02\xA9\u02BD", "\x03\x02\x02\x02\xAB\u02C4\x03\x02\x02\x02\xAD\u02CB", "\x03\x02\x02\x02\xAF\u02D3\x03\x02\x02\x02\xB1\u02D6", "\x03\x02\x02\x02\xB3\u02DF\x03\x02\x02\x02\xB5\u02E6", "\x03\x02\x02\x02\xB7\u02EC\x03\x02\x02\x02\xB9\u02EF", "\x03\x02\x02\x02\xBB\u02F4\x03\x02\x02\x02\xBD\u02FA", "\x03\x02\x02\x02\xBF\u0304\x03\x02\x02\x02\xC1\u0308", "\x03\x02\x02\x02\xC3\u0313\x03\x02\x02\x02\xC5\u0318", "\x03\x02\x02\x02\xC7\u031D\x03\x02\x02\x02\xC9\u0322", "\x03\x02\x02\x02\xCB\u0328\x03\x02\x02\x02\xCD\u032D", "\x03\x02\x02\x02\xCF\u033A\x03\x02\x02\x02\xD1\u033E", "\x03\x02\x02\x02\xD3\u0344\x03\x02\x02\x02\xD5\u0351", "\x03\x02\x02\x02\xD7\u0362\x03\x02\x02\x02\xD9\u0365", "\x03\x02\x02\x02\xDB\u0369\x03\x02\x02\x02\xDD\u036D", "\x03\x02\x02\x02\xDF\u0371\x03\x02\x02\x02\xE1\u0378", "\x03\x02\x02\x02\xE3\u037D\x03\x02\x02\x02\xE5\u0386", "\x03\x02\x02\x02\xE7\u038B\x03\x02\x02\x02\xE9\u0391", "\x03\x02\x02\x02\xEB\u0398\x03\x02\x02\x02\xED\u03A0", "\x03\x02\x02\x02\xEF\u03A4\x03\x02\x02\x02\xF1\u03A9", "\x03\x02\x02\x02\xF3\u03B0\x03\x02\x02\x02\xF5\u03B5", "\x03\x02\x02\x02\xF7\u03BB\x03\x02\x02\x02\xF9\u03C2", "\x03\x02\x02\x02\xFB\u03C7\x03\x02\x02\x02\xFD\u03CC", "\x03\x02\x02\x02\xFF\u03D0\x03\x02\x02\x02\u0101\u03D5", "\x03\x02\x02\x02\u0103\u03DA\x03\x02\x02\x02\u0105\u03DF", "\x03\x02\x02\x02\u0107\u03E5\x03\x02\x02\x02\u0109\u0403", "\x03\x02\x02\x02\u010B\u0408\x03\x02\x02\x02\u010D\u040C", "\x03\x02\x02\x02\u010F\u0420\x03\x02\x02\x02\u0111\u0430", "\x03\x02\x02\x02\u0113\u0432\x03\x02\x02\x02\u0115\u0439", "\x03\x02\x02\x02\u0117\u043D\x03\x02\x02\x02\u0119\u0441", "\x03\x02\x02\x02\u011B\u0445\x03\x02\x02\x02\u011D\u0447", "\x03\x02\x02\x02\u011F\u044B\x03\x02\x02\x02\u0121\u044D", "\x03\x02\x02\x02\u0123\u0465\x03\x02\x02\x02\u0125\u0473", "\x03\x02\x02\x02\u0127\u047C\x03\x02\x02\x02\u0129\u0485", "\x03\x02\x02\x02\u012B\u0489\x03\x02\x02\x02\u012D\u048B", "\x03\x02\x02\x02\u012F\u0497\x03\x02\x02\x02\u0131\u04A7", "\x03\x02\x02\x02\u0133\u04BD\x03\x02\x02\x02\u0135\u04BF", "\x03\x02\x02\x02\u0137\u04C1\x03\x02\x02\x02\u0139\u04C3", "\x03\x02\x02\x02\u013B\u04C5\x03\x02\x02\x02\u013D\u04C7", "\x03\x02\x02\x02\u013F\u04C9\x03\x02\x02\x02\u0141\u04CB", "\x03\x02\x02\x02\u0143\u04CD\x03\x02\x02\x02\u0145\u04CF", "\x03\x02\x02\x02\u0147\u04D1\x03\x02\x02\x02\u0149\u04D3", "\x03\x02\x02\x02\u014B\u04D5\x03\x02\x02\x02\u014D\u04D7", "\x03\x02\x02\x02\u014F\u04D9\x03\x02\x02\x02\u0151\u04DB", "\x03\x02\x02\x02\u0153\u04DD\x03\x02\x02\x02\u0155\u04DF", "\x03\x02\x02\x02\u0157\u04E1\x03\x02\x02\x02\u0159\u04E3", "\x03\x02\x02\x02\u015B\u04E5\x03\x02\x02\x02\u015D\u04E7", "\x03\x02\x02\x02\u015F\u04E9\x03\x02\x02\x02\u0161\u04EB", "\x03\x02\x02\x02\u0163\u04ED\x03\x02\x02\x02\u0165\u04EF", "\x03\x02\x02\x02\u0167\u04F1\x03\x02\x02\x02\u0169\u04F3", "\x03\x02\x02\x02\u016B\u04F5\x03\x02\x02\x02\u016D\u04F7", "\x03\x02\x02\x02\u016F\u04F9\x03\x02\x02\x02\u0171\u04FB", "\x03\x02\x02\x02\u0173\u04FD\x03\x02\x02\x02\u0175\u04FF", "\x03\x02\x02\x02\u0177\u0501\x03\x02\x02\x02\u0179\u0503", "\x03\x02\x02\x02\u017B\u0505\x03\x02\x02\x02\u017D\u0507", "\x03\x02\x02\x02\u017F\u0509\x03\x02\x02\x02\u0181\u050B", "\x03\x02\x02\x02\u0183\u050D\x03\x02\x02\x02\u0185\u0186", "\x07=\x02\x02\u0186\x04\x03\x02\x02\x02\u0187\u0188", "\x07<\x02\x02\u0188\x06\x03\x02\x02\x02\u0189\u018A", "\x07/\x02\x02\u018A\b\x03\x02\x02\x02\u018B\u018C\x07", "?\x02\x02\u018C\u018D\x07@\x02\x02\u018D\n\x03\x02\x02", "\x02\u018E\u018F\x07<\x02\x02\u018F\u0190\x071\x02\x02", "\u0190\u0191\x071\x02\x02\u0191\f\x03\x02\x02\x02\u0192", "\u0193\x071\x02\x02\u0193\x0E\x03\x02\x02\x02\u0194", "\u0195\x070\x02\x02\u0195\x10\x03\x02\x02\x02\u0196", "\u0197\x07B\x02\x02\u0197\x12\x03\x02\x02\x02\u0198", "\u0199\x07%\x02\x02\u0199\x14\x03\x02\x02\x02\u019A", "\u019B\x07A\x02\x02\u019B\x16\x03\x02\x02\x02\u019C", "\u019D\x07(\x02\x02\u019D\x18\x03\x02\x02\x02\u019E", "\u019F\x07?\x02\x02\u019F\x1A\x03\x02\x02\x02\u01A0", "\u01A1\x07-\x02\x02\u01A1\x1C\x03\x02\x02\x02\u01A2", "\u01A3\x07}\x02\x02\u01A3\x1E\x03\x02\x02\x02\u01A4", "\u01A5\x07.\x02\x02\u01A5 \x03\x02\x02\x02\u01A6\u01A7", "\x07\x7F\x02\x02\u01A7\"\x03\x02\x02\x02\u01A8\u01A9", "\x07]\x02\x02\u01A9$\x03\x02\x02\x02\u01AA\u01AB\x07", "_\x02\x02\u01AB&\x03\x02\x02\x02\u01AC\u01AD\x07*\x02", "\x02\u01AD(\x03\x02\x02\x02\u01AE\u01AF\x07+\x02\x02", "\u01AF*\x03\x02\x02\x02\u01B0\u01B1\x07-\x02\x02\u01B1", "\u01B2\x07?\x02\x02\u01B2,\x03\x02\x02\x02\u01B3\u01B4", "\x07~\x02\x02\u01B4.\x03\x02\x02\x02\u01B5\u01B6\x07", ",\x02\x02\u01B60\x03\x02\x02\x02\u01B7\u01B8\x070\x02", "\x02\u01B8\u01B9\x070\x02\x02\u01B92\x03\x02\x02\x02", "\u01BA\u01BB\x07'\x02\x02\u01BB4\x03\x02\x02\x02\u01BC", "\u01BD\x07`\x02\x02\u01BD6\x03\x02\x02\x02\u01BE\u01BF", "\x07?\x02\x02\u01BF\u01C0\x07\x80\x02\x02\u01C08\x03", "\x02\x02\x02\u01C1\u01C2\x07>\x02\x02\u01C2\u01C3\x07", "@\x02\x02\u01C3:\x03\x02\x02\x02\u01C4\u01C5\x07#\x02", "\x02\u01C5\u01C6\x07?\x02\x02\u01C6<\x03\x02\x02\x02", "\u01C7\u01C8\x07>\x02\x02\u01C8>\x03\x02\x02\x02\u01C9", "\u01CA\x07@\x02\x02\u01CA@\x03\x02\x02\x02\u01CB\u01CC", "\x07>\x02\x02\u01CC\u01CD\x07?\x02\x02\u01CDB\x03\x02", "\x02\x02\u01CE\u01CF\x07@\x02\x02\u01CF\u01D0\x07?\x02", "\x02\u01D0D\x03\x02\x02\x02\u01D1\u01D2\x07&\x02\x02", "\u01D2F\x03\x02\x02\x02\u01D3\u01D4\x07\u27EA\x02\x02", "\u01D4H\x03\x02\x02\x02\u01D5\u01D6\x07\u300A\x02\x02", "\u01D6J\x03\x02\x02\x02\u01D7\u01D8\x07\uFE66\x02\x02", "\u01D8L\x03\x02\x02\x02\u01D9\u01DA\x07\uFF1E\x02\x02", "\u01DAN\x03\x02\x02\x02\u01DB\u01DC\x07\u27EB\x02\x02", "\u01DCP\x03\x02\x02\x02\u01DD\u01DE\x07\u300B\x02\x02", "\u01DER\x03\x02\x02\x02\u01DF\u01E0\x07\uFE67\x02\x02", "\u01E0T\x03\x02\x02\x02\u01E1\u01E2\x07\uFF20\x02\x02", "\u01E2V\x03\x02\x02\x02\u01E3\u01E4\x07\xAF\x02\x02", "\u01E4X\x03\x02\x02\x02\u01E5\u01E6\x07\u2012\x02\x02", "\u01E6Z\x03\x02\x02\x02\u01E7\u01E8\x07\u2013\x02\x02", "\u01E8\\\x03\x02\x02\x02\u01E9\u01EA\x07\u2014\x02\x02", "\u01EA^\x03\x02\x02\x02\u01EB\u01EC\x07\u2015\x02\x02", "\u01EC`\x03\x02\x02\x02\u01ED\u01EE\x07\u2016\x02\x02", "\u01EEb\x03\x02\x02\x02\u01EF\u01F0\x07\u2017\x02\x02", "\u01F0d\x03\x02\x02\x02\u01F1\u01F2\x07\u2214\x02\x02", "\u01F2f\x03\x02\x02\x02\u01F3\u01F4\x07\uFE5A\x02\x02", "\u01F4h\x03\x02\x02\x02\u01F5\u01F6\x07\uFE65\x02\x02", "\u01F6j\x03\x02\x02\x02\u01F7\u01F8\x07\uFF0F\x02\x02", "\u01F8l\x03\x02\x02\x02\u01F9\u01FA\x05\u0155\xAB\x02", "\u01FA\u01FB\x05\u0181\xC1\x02\u01FB\u01FC\x05\u016F\xB8\x02", "\u01FC\u01FD\x05\u015F\xB0\x02\u01FD\u01FE\x05\u0159\xAD\x02", "\u01FE\u01FF\x05\u0173\xBA\x02\u01FFn\x03\x02\x02\x02", "\u0200\u0201\x05\u0159\xAD\x02\u0201\u0202\x05\u017F\xC0\x02", "\u0202\u0203\x05\u016F\xB8\x02\u0203\u0204\x05\u0167\xB4\x02", "\u0204\u0205\x05\u0151\xA9\x02\u0205\u0206\x05\u0161\xB1\x02", "\u0206\u0207\x05\u016B\xB6\x02\u0207p\x03\x02\x02\x02", "\u0208\u0209\x05\u016F\xB8\x02\u0209\u020A\x05\u0173\xBA\x02", "\u020A\u020B\x05\u016D\xB7\x02\u020B\u020C\x05\u015B\xAE\x02", "\u020C\u020D\x05\u0161\xB1\x02\u020D\u020E\x05\u0167\xB4\x02", "\u020E\u020F\x05\u0159\xAD\x02\u020Fr\x03\x02\x02\x02", "\u0210\u0211\x05\u0179\xBD\x02\u0211\u0212\x05\u0175\xBB\x02", "\u0212\u0213\x05\u0161\xB1\x02\u0213\u0214\x05\u016B\xB6\x02", "\u0214\u0215\x05\u015D\xAF\x02\u0215t\x03\x02\x02\x02", "\u0216\u0217\x05\u016F\xB8\x02\u0217\u0218\x05\u0159\xAD\x02", "\u0218\u0219\x05\u0173\xBA\x02\u0219\u021A\x05\u0161\xB1\x02", "\u021A\u021B\x05\u016D\xB7\x02\u021B\u021C\x05\u0157\xAC\x02", "\u021C\u021D\x05\u0161\xB1\x02\u021D\u021E\x05\u0155\xAB\x02", "\u021Ev\x03\x02\x02\x02\u021F\u0220\x05\u0155\xAB\x02", "\u0220\u0221\x05\u016D\xB7\x02\u0221\u0222\x05\u0169\xB5\x02", "\u0222\u0223\x05\u0169\xB5\x02\u0223\u0224\x05\u0161\xB1\x02", "\u0224\u0225\x05\u0177\xBC\x02\u0225x\x03\x02\x02\x02", "\u0226\u0227\x05\u0179\xBD\x02\u0227\u0228\x05\u016B\xB6\x02", "\u0228\u0229\x05\u0161\xB1\x02\u0229\u022A\x05\u016D\xB7\x02", "\u022A\u022B\x05\u016B\xB6\x02\u022Bz\x03\x02\x02\x02", "\u022C\u022D\x05\u0151\xA9\x02\u022D\u022E\x05\u0167\xB4\x02", "\u022E\u022F\x05\u0167\xB4\x02\u022F|\x03\x02\x02\x02", "\u0230\u0231\x05\u0155\xAB\x02\u0231\u0232\x05\u0173\xBA\x02", "\u0232\u0233\x05\u0159\xAD\x02\u0233\u0234\x05\u0151\xA9\x02", "\u0234\u0235\x05\u0177\xBC\x02\u0235\u0236\x05\u0159\xAD\x02", "\u0236~\x03\x02\x02\x02\u0237\u0238\x05\u0157\xAC\x02", "\u0238\u0239\x05\u0173\xBA\x02\u0239\u023A\x05\u016D\xB7\x02", "\u023A\u023B\x05\u016F\xB8\x02\u023B\x80\x03\x02\x02\x02", "\u023C\u023D\x05\u0161\xB1\x02\u023D\u023E\x05\u016B\xB6\x02", "\u023E\u023F\x05\u0157\xAC\x02\u023F\u0240\x05\u0159\xAD\x02", "\u0240\u0241\x05\u017F\xC0\x02\u0241\x82\x03\x02\x02\x02", "\u0242\u0243\x05\u016D\xB7\x02\u0243\u0244\x05\u016B\xB6\x02", "\u0244\x84\x03\x02\x02\x02\u0245\u0246\x05\u0155\xAB\x02", "\u0246\u0247\x05\u016D\xB7\x02\u0247\u0248\x05\u016B\xB6\x02", "\u0248\u0249\x05\u0175\xBB\x02\u0249\u024A\x05\u0177\xBC\x02", "\u024A\u024B\x05\u0173\xBA\x02\u024B\u024C\x05\u0151\xA9\x02", "\u024C\u024D\x05\u0161\xB1\x02\u024D\u024E\x05\u016B\xB6\x02", "\u024E\u024F\x05\u0177\xBC\x02\u024F\x86\x03\x02\x02\x02", "\u0250\u0251\x05\u0151\xA9\x02\u0251\u0252\x05\u0175\xBB\x02", "\u0252\u0253\x05\u0175\xBB\x02\u0253\u0254\x05\u0159\xAD\x02", "\u0254\u0255\x05\u0173\xBA\x02\u0255\u0256\x05\u0177\xBC\x02", "\u0256\x88\x03\x02\x02\x02\u0257\u0258\x05\u0161\xB1\x02", "\u0258\u0259\x05\u0175\xBB\x02\u0259\x8A\x03\x02\x02\x02", "\u025A\u025B\x05\u0179\xBD\x02\u025B\u025C\x05\u016B\xB6\x02", "\u025C\u025D\x05\u0161\xB1\x02\u025D\u025E\x05\u0171\xB9\x02", "\u025E\u025F\x05\u0179\xBD\x02\u025F\u0260\x05\u0159\xAD\x02", "\u0260\x8C\x03\x02\x02\x02\u0261\u0262\x05\u0159\xAD\x02", "\u0262\u0263\x05\u017F\xC0\x02\u0263\u0264\x05\u0161\xB1\x02", "\u0264\u0265\x05\u0175\xBB\x02\u0265\u0266\x05\u0177\xBC\x02", "\u0266\u0267\x05\u0175\xBB\x02\u0267\x8E\x03\x02\x02\x02", "\u0268\u0269\x05\u0167\xB4\x02\u0269\u026A\x05\u016D\xB7\x02", "\u026A\u026B\x05\u0151\xA9\x02\u026B\u026C\x05\u0157\xAC\x02", "\u026C\x90\x03\x02\x02\x02\u026D\u026E\x05\u0155\xAB\x02", "\u026E\u026F\x05\u0175\xBB\x02\u026F\u0270\x05\u017B\xBE\x02", "\u0270\x92\x03\x02\x02\x02\u0271\u0272\x05\u017D\xBF\x02", "\u0272\u0273\x05\u0161\xB1\x02\u0273\u0274\x05\u0177\xBC\x02", "\u0274\u0275\x05\u015F\xB0\x02\u0275\x94\x03\x02\x02\x02", "\u0276\u0277\x05\u015F\xB0\x02\u0277\u0278\x05\u0159\xAD\x02", "\u0278\u0279\x05\u0151\xA9\x02\u0279\u027A\x05\u0157\xAC\x02", "\u027A\u027B\x05\u0159\xAD\x02\u027B\u027C\x05\u0173\xBA\x02", "\u027C\u027D\x05\u0175\xBB\x02\u027D\x96\x03\x02\x02\x02", "\u027E\u027F\x05\u015B\xAE\x02\u027F\u0280\x05\u0173\xBA\x02", "\u0280\u0281\x05\u016D\xB7\x02\u0281\u0282\x05\u0169\xB5\x02", "\u0282\x98\x03\x02\x02\x02\u0283\u0284\x05\u0151\xA9\x02", "\u0284\u0285\x05\u0175\xBB\x02\u0285\x9A\x03\x02\x02\x02", "\u0286\u0287\x05\u015B\xAE\x02\u0287\u0288\x05\u0161\xB1\x02", "\u0288\u0289\x05\u0159\xAD\x02\u0289\u028A\x05\u0167\xB4\x02", "\u028A\u028B\x05\u0157\xAC\x02\u028B\u028C\x05\u0177\xBC\x02", "\u028C\u028D\x05\u0159\xAD\x02\u028D\u028E\x05\u0173\xBA\x02", "\u028E\u028F\x05\u0169\xB5\x02\u028F\u0290\x05\u0161\xB1\x02", "\u0290\u0291\x05\u016B\xB6\x02\u0291\u0292\x05\u0151\xA9\x02", "\u0292\u0293\x05\u0177\xBC\x02\u0293\u0294\x05\u016D\xB7\x02", "\u0294\u0295\x05\u0173\xBA\x02\u0295\x9C\x03\x02\x02\x02", "\u0296\u0297\x05\u016D\xB7\x02\u0297\u0298\x05\u016F\xB8\x02", "\u0298\u0299\x05\u0177\xBC\x02\u0299\u029A\x05\u0161\xB1\x02", "\u029A\u029B\x05\u016D\xB7\x02\u029B\u029C\x05\u016B\xB6\x02", "\u029C\u029D\x05\u0151\xA9\x02\u029D\u029E\x05\u0167\xB4\x02", "\u029E\x9E\x03\x02\x02\x02\u029F\u02A0\x05\u0169\xB5\x02", "\u02A0\u02A1\x05\u0151\xA9\x02\u02A1\u02A2\x05\u0177\xBC\x02", "\u02A2\u02A3\x05\u0155\xAB\x02\u02A3\u02A4\x05\u015F\xB0\x02", "\u02A4\xA0\x03\x02\x02\x02\u02A5\u02A6\x05\u0179\xBD\x02", "\u02A6\u02A7\x05\u016B\xB6\x02\u02A7\u02A8\x05\u017D\xBF\x02", "\u02A8\u02A9\x05\u0161\xB1\x02\u02A9\u02AA\x05\u016B\xB6\x02", "\u02AA\u02AB\x05\u0157\xAC\x02\u02AB\xA2\x03\x02\x02\x02", "\u02AC\u02AD\x05\u0169\xB5\x02\u02AD\u02AE\x05\u0159\xAD\x02", "\u02AE\u02AF\x05\u0173\xBA\x02\u02AF\u02B0\x05\u015D\xAF\x02", "\u02B0\u02B1\x05\u0159\xAD\x02\u02B1\xA4\x03\x02\x02\x02", "\u02B2\u02B3\x05\u0175\xBB\x02\u02B3\u02B4\x05\u0159\xAD\x02", "\u02B4\u02B5\x05\u0177\xBC\x02\u02B5\xA6\x03\x02\x02\x02", "\u02B6\u02B7\x05\u0157\xAC\x02\u02B7\u02B8\x05\u0159\xAD\x02", "\u02B8\u02B9\x05\u0177\xBC\x02\u02B9\u02BA\x05\u0151\xA9\x02", "\u02BA\u02BB\x05\u0155\xAB\x02\u02BB\u02BC\x05\u015F\xB0\x02", "\u02BC\xA8\x03\x02\x02\x02\u02BD\u02BE\x05\u0157\xAC\x02", "\u02BE\u02BF\x05\u0159\xAD\x02\u02BF\u02C0\x05\u0167\xB4\x02", "\u02C0\u02C1\x05\u0159\xAD\x02\u02C1\u02C2\x05\u0177\xBC\x02", "\u02C2\u02C3\x05\u0159\xAD\x02\u02C3\xAA\x03\x02\x02\x02", "\u02C4\u02C5\x05\u0173\xBA\x02\u02C5\u02C6\x05\u0159\xAD\x02", "\u02C6\u02C7\x05\u0169\xB5\x02\u02C7\u02C8\x05\u016D\xB7\x02", "\u02C8\u02C9\x05\u017B\xBE\x02\u02C9\u02CA\x05\u0159\xAD\x02", "\u02CA\xAC\x03\x02\x02\x02\u02CB\u02CC\x05\u015B\xAE\x02", "\u02CC\u02CD\x05\u016D\xB7\x02\u02CD\u02CE\x05\u0173\xBA\x02", "\u02CE\u02CF\x05\u0159\xAD\x02\u02CF\u02D0\x05\u0151\xA9\x02", "\u02D0\u02D1\x05\u0155\xAB\x02\u02D1\u02D2\x05\u015F\xB0\x02", "\u02D2\xAE\x03\x02\x02\x02\u02D3\u02D4\x05\u0161\xB1\x02", "\u02D4\u02D5\x05\u016B\xB6\x02\u02D5\xB0\x03\x02\x02\x02", "\u02D6\u02D7\x05\u0157\xAC\x02\u02D7\u02D8\x05\u0161\xB1\x02", "\u02D8\u02D9\x05\u0175\xBB\x02\u02D9\u02DA\x05\u0177\xBC\x02", "\u02DA\u02DB\x05\u0161\xB1\x02\u02DB\u02DC\x05\u016B\xB6\x02", "\u02DC\u02DD\x05\u0155\xAB\x02\u02DD\u02DE\x05\u0177\xBC\x02", "\u02DE\xB2\x03\x02\x02\x02\u02DF\u02E0\x05\u0173\xBA\x02", "\u02E0\u02E1\x05\u0159\xAD\x02\u02E1\u02E2\x05\u0177\xBC\x02", "\u02E2\u02E3\x05\u0179\xBD\x02\u02E3\u02E4\x05\u0173\xBA\x02", "\u02E4\u02E5\x05\u016B\xB6\x02\u02E5\xB4\x03\x02\x02\x02", "\u02E6\u02E7\x05\u016D\xB7\x02\u02E7\u02E8\x05\u0173\xBA\x02", "\u02E8\u02E9\x05\u0157\xAC\x02\u02E9\u02EA\x05\u0159\xAD\x02", "\u02EA\u02EB\x05\u0173\xBA\x02\u02EB\xB6\x03\x02\x02\x02", "\u02EC\u02ED\x05\u0153\xAA\x02\u02ED\u02EE\x05\u0181\xC1\x02", "\u02EE\xB8\x03\x02\x02\x02\u02EF\u02F0\x05\u0175\xBB\x02", "\u02F0\u02F1\x05\u0165\xB3\x02\u02F1\u02F2\x05\u0161\xB1\x02", "\u02F2\u02F3\x05\u016F\xB8\x02\u02F3\xBA\x03\x02\x02\x02", "\u02F4\u02F5\x05\u0167\xB4\x02\u02F5\u02F6\x05\u0161\xB1\x02", "\u02F6\u02F7\x05\u0169\xB5\x02\u02F7\u02F8\x05\u0161\xB1\x02", "\u02F8\u02F9\x05\u0177\xBC\x02\u02F9\xBC\x03\x02\x02\x02", "\u02FA\u02FB\x05\u0151\xA9\x02\u02FB\u02FC\x05\u0175\xBB\x02", "\u02FC\u02FD\x05\u0155\xAB\x02\u02FD\u02FE\x05\u0159\xAD\x02", "\u02FE\u02FF\x05\u016B\xB6\x02\u02FF\u0300\x05\u0157\xAC\x02", "\u0300\u0301\x05\u0161\xB1\x02\u0301\u0302\x05\u016B\xB6\x02", "\u0302\u0303\x05\u015D\xAF\x02\u0303\xBE\x03\x02\x02\x02", "\u0304\u0305\x05\u0151\xA9\x02\u0305\u0306\x05\u0175\xBB\x02", "\u0306\u0307\x05\u0155\xAB\x02\u0307\xC0\x03\x02\x02\x02", "\u0308\u0309\x05\u0157\xAC\x02\u0309\u030A\x05\u0159\xAD\x02", "\u030A\u030B\x05\u0175\xBB\x02\u030B\u030C\x05\u0155\xAB\x02", "\u030C\u030D\x05\u0159\xAD\x02\u030D\u030E\x05\u016B\xB6\x02", "\u030E\u030F\x05\u0157\xAC\x02\u030F\u0310\x05\u0161\xB1\x02", "\u0310\u0311\x05\u016B\xB6\x02\u0311\u0312\x05\u015D\xAF\x02", "\u0312\xC2\x03\x02\x02\x02\u0313\u0314\x05\u0157\xAC\x02", "\u0314\u0315\x05\u0159\xAD\x02\u0315\u0316\x05\u0175\xBB\x02", "\u0316\u0317\x05\u0155\xAB\x02\u0317\xC4\x03\x02\x02\x02", "\u0318\u0319\x05\u0163\xB2\x02\u0319\u031A\x05\u016D\xB7\x02", "\u031A\u031B\x05\u0161\xB1\x02\u031B\u031C\x05\u016B\xB6\x02", "\u031C\xC6\x03\x02\x02\x02\u031D\u031E\x05\u0175\xBB\x02", "\u031E\u031F\x05\u0155\xAB\x02\u031F\u0320\x05\u0151\xA9\x02", "\u0320\u0321\x05\u016B\xB6\x02\u0321\xC8\x03\x02\x02\x02", "\u0322\u0323\x05\u0175\xBB\x02\u0323\u0324\x05\u0177\xBC\x02", "\u0324\u0325\x05\u0151\xA9\x02\u0325\u0326\x05\u0173\xBA\x02", "\u0326\u0327\x05\u0177\xBC\x02\u0327\xCA\x03\x02\x02\x02", "\u0328\u0329\x05\u016B\xB6\x02\u0329\u032A\x05\u016D\xB7\x02", "\u032A\u032B\x05\u0157\xAC\x02\u032B\u032C\x05\u0159\xAD\x02", "\u032C\xCC\x03\x02\x02\x02\u032D\u032E\x05\u0173\xBA\x02", "\u032E\u032F\x05\u0159\xAD\x02\u032F\u0330\x05\u0167\xB4\x02", "\u0330\u0331\x05\u0151\xA9\x02\u0331\u0332\x05\u0177\xBC\x02", "\u0332\u0333\x05\u0161\xB1\x02\u0333\u0334\x05\u016D\xB7\x02", "\u0334\u0335\x05\u016B\xB6\x02\u0335\u0336\x05\u0175\xBB\x02", "\u0336\u0337\x05\u015F\xB0\x02\u0337\u0338\x05\u0161\xB1\x02", "\u0338\u0339\x05\u016F\xB8\x02\u0339\xCE\x03\x02\x02\x02", "\u033A\u033B\x05\u0173\xBA\x02\u033B\u033C\x05\u0159\xAD\x02", "\u033C\u033D\x05\u0167\xB4\x02\u033D\xD0\x03\x02\x02\x02", "\u033E\u033F\x05\u017D\xBF\x02\u033F\u0340\x05\u015F\xB0\x02", "\u0340\u0341\x05\u0159\xAD\x02\u0341\u0342\x05\u0173\xBA\x02", "\u0342\u0343\x05\u0159\xAD\x02\u0343\xD2\x03\x02\x02\x02", "\u0344\u0345\x05\u0175\xBB\x02\u0345\u0346\x05\u015F\xB0\x02", "\u0346\u0347\x05\u016D\xB7\x02\u0347\u0348\x05\u0173\xBA\x02", "\u0348\u0349\x05\u0177\xBC\x02\u0349\u034A\x05\u0159\xAD\x02", "\u034A\u034B\x05\u0175\xBB\x02\u034B\u034C\x05\u0177\xBC\x02", "\u034C\u034D\x05\u016F\xB8\x02\u034D\u034E\x05\u0151\xA9\x02", "\u034E\u034F\x05\u0177\xBC\x02\u034F\u0350\x05\u015F\xB0\x02", "\u0350\xD4\x03\x02\x02\x02\u0351\u0352\x05\u0151\xA9\x02", "\u0352\u0353\x05\u0167\xB4\x02\u0353\u0354\x05\u0167\xB4\x02", "\u0354\u0355\x05\u0175\xBB\x02\u0355\u0356\x05\u015F\xB0\x02", "\u0356\u0357\x05\u016D\xB7\x02\u0357\u0358\x05\u0173\xBA\x02", "\u0358\u0359\x05\u0177\xBC\x02\u0359\u035A\x05\u0159\xAD\x02", "\u035A\u035B\x05\u0175\xBB\x02\u035B\u035C\x05\u0177\xBC\x02", "\u035C\u035D\x05\u016F\xB8\x02\u035D\u035E\x05\u0151\xA9\x02", "\u035E\u035F\x05\u0177\xBC\x02\u035F\u0360\x05\u015F\xB0\x02", "\u0360\u0361\x05\u0175\xBB\x02\u0361\xD6\x03\x02\x02\x02", "\u0362\u0363\x05\u016D\xB7\x02\u0363\u0364\x05\u0173\xBA\x02", "\u0364\xD8\x03\x02\x02\x02\u0365\u0366\x05\u017F\xC0\x02", "\u0366\u0367\x05\u016D\xB7\x02\u0367\u0368\x05\u0173\xBA\x02", "\u0368\xDA\x03\x02\x02\x02\u0369\u036A\x05\u0151\xA9\x02", "\u036A\u036B\x05\u016B\xB6\x02\u036B\u036C\x05\u0157\xAC\x02", "\u036C\xDC\x03\x02\x02\x02\u036D\u036E\x05\u016B\xB6\x02", "\u036E\u036F\x05\u016D\xB7\x02\u036F\u0370\x05\u0177\xBC\x02", "\u0370\xDE\x03\x02\x02\x02\u0371\u0372\x05\u0175\xBB\x02", "\u0372\u0373\x05\u0177\xBC\x02\u0373\u0374\x05\u0151\xA9\x02", "\u0374\u0375\x05\u0173\xBA\x02\u0375\u0376\x05\u0177\xBC\x02", "\u0376\u0377\x05\u0175\xBB\x02\u0377\xE0\x03\x02\x02\x02", "\u0378\u0379\x05\u0159\xAD\x02\u0379\u037A\x05\u016B\xB6\x02", "\u037A\u037B\x05\u0157\xAC\x02\u037B\u037C\x05\u0175\xBB\x02", "\u037C\xE2\x03\x02\x02\x02\u037D\u037E\x05\u0155\xAB\x02", "\u037E\u037F\x05\u016D\xB7\x02\u037F\u0380\x05\u016B\xB6\x02", "\u0380\u0381\x05\u0177\xBC\x02\u0381\u0382\x05\u0151\xA9\x02", "\u0382\u0383\x05\u0161\xB1\x02\u0383\u0384\x05\u016B\xB6\x02", "\u0384\u0385\x05\u0175\xBB\x02\u0385\xE4\x03\x02\x02\x02", "\u0386\u0387\x05\u016B\xB6\x02\u0387\u0388\x05\u0179\xBD\x02", "\u0388\u0389\x05\u0167\xB4\x02\u0389\u038A\x05\u0167\xB4\x02", "\u038A\xE6\x03\x02\x02\x02\u038B\u038C\x05\u0155\xAB\x02", "\u038C\u038D\x05\u016D\xB7\x02\u038D\u038E\x05\u0179\xBD\x02", "\u038E\u038F\x05\u016B\xB6\x02\u038F\u0390\x05\u0177\xBC\x02", "\u0390\xE8\x03\x02\x02\x02\u0391\u0392\x05\u015B\xAE\x02", "\u0392\u0393\x05\u0161\xB1\x02\u0393\u0394\x05\u0167\xB4\x02", "\u0394\u0395\x05\u0177\xBC\x02\u0395\u0396\x05\u0159\xAD\x02", "\u0396\u0397\x05\u0173\xBA\x02\u0397\xEA\x03\x02\x02\x02", "\u0398\u0399\x05\u0159\xAD\x02\u0399\u039A\x05\u017F\xC0\x02", "\u039A\u039B\x05\u0177\xBC\x02\u039B\u039C\x05\u0173\xBA\x02", "\u039C\u039D\x05\u0151\xA9\x02\u039D\u039E\x05\u0155\xAB\x02", "\u039E\u039F\x05\u0177\xBC\x02\u039F\xEC\x03\x02\x02\x02", "\u03A0\u03A1\x05\u0151\xA9\x02\u03A1\u03A2\x05\u016B\xB6\x02", "\u03A2\u03A3\x05\u0181\xC1\x02\u03A3\xEE\x03\x02\x02\x02", "\u03A4\u03A5\x05\u016B\xB6\x02\u03A5\u03A6\x05\u016D\xB7\x02", "\u03A6\u03A7\x05\u016B\xB6\x02\u03A7\u03A8\x05\u0159\xAD\x02", "\u03A8\xF0\x03\x02\x02\x02\u03A9\u03AA\x05\u0175\xBB\x02", "\u03AA\u03AB\x05\u0161\xB1\x02\u03AB\u03AC\x05\u016B\xB6\x02", "\u03AC\u03AD\x05\u015D\xAF\x02\u03AD\u03AE\x05\u0167\xB4\x02", "\u03AE\u03AF\x05\u0159\xAD\x02\u03AF\xF2\x03\x02\x02\x02", "\u03B0\u03B1\x05\u0177\xBC\x02\u03B1\u03B2\x05\u0173\xBA\x02", "\u03B2\u03B3\x05\u0179\xBD\x02\u03B3\u03B4\x05\u0159\xAD\x02", "\u03B4\xF4\x03\x02\x02\x02\u03B5\u03B6\x05\u015B\xAE\x02", "\u03B6\u03B7\x05\u0151\xA9\x02\u03B7\u03B8\x05\u0167\xB4\x02", "\u03B8\u03B9\x05\u0175\xBB\x02\u03B9\u03BA\x05\u0159\xAD\x02", "\u03BA\xF6\x03\x02\x02\x02\u03BB\u03BC\x05\u0173\xBA\x02", "\u03BC\u03BD\x05\u0159\xAD\x02\u03BD\u03BE\x05\u0157\xAC\x02", "\u03BE\u03BF\x05\u0179\xBD\x02\u03BF\u03C0\x05\u0155\xAB\x02", "\u03C0\u03C1\x05\u0159\xAD\x02\u03C1\xF8\x03\x02\x02\x02", "\u03C2\u03C3\x05\u0155\xAB\x02\u03C3\u03C4\x05\u0151\xA9\x02", "\u03C4\u03C5\x05\u0175\xBB\x02\u03C5\u03C6\x05\u0159\xAD\x02", "\u03C6\xFA\x03\x02\x02\x02\u03C7\u03C8\x05\u0159\xAD\x02", "\u03C8\u03C9\x05\u0167\xB4\x02\u03C9\u03CA\x05\u0175\xBB\x02", "\u03CA\u03CB\x05\u0159\xAD\x02\u03CB\xFC\x03\x02\x02\x02", "\u03CC\u03CD\x05\u0159\xAD\x02\u03CD\u03CE\x05\u016B\xB6\x02", "\u03CE\u03CF\x05\u0157\xAC\x02\u03CF\xFE\x03\x02\x02\x02", "\u03D0\u03D1\x05\u017D\xBF\x02\u03D1\u03D2\x05\u015F\xB0\x02", "\u03D2\u03D3\x05\u0159\xAD\x02\u03D3\u03D4\x05\u016B\xB6\x02", "\u03D4\u0100\x03\x02\x02\x02\u03D5\u03D6\x05\u0177\xBC\x02", "\u03D6\u03D7\x05\u015F\xB0\x02\u03D7\u03D8\x05\u0159\xAD\x02", "\u03D8\u03D9\x05\u016B\xB6\x02\u03D9\u0102\x03\x02\x02\x02", "\u03DA\u03DB\x05\u0155\xAB\x02\u03DB\u03DC\x05\u0151\xA9\x02", "\u03DC\u03DD\x05\u0167\xB4\x02\u03DD\u03DE\x05\u0167\xB4\x02", "\u03DE\u0104\x03\x02\x02\x02\u03DF\u03E0\x05\u0181\xC1\x02", "\u03E0\u03E1\x05\u0161\xB1\x02\u03E1\u03E2\x05\u0159\xAD\x02", "\u03E2\u03E3\x05\u0167\xB4\x02\u03E3\u03E4\x05\u0157\xAC\x02", "\u03E4\u0106\x03\x02\x02\x02\u03E5\u03E6\x05\u0165\xB3\x02", "\u03E6\u03E7\x05\u0159\xAD\x02\u03E7\u03E8\x05\u0181\xC1\x02", "\u03E8\u0108\x03\x02\x02\x02\u03E9\u03F2\x07$\x02\x02", "\u03EA\u03F1\n\x02\x02\x02\u03EB\u03EE\x07^\x02\x02\u03EC", "\u03EF\x0B\x02\x02\x02\u03ED\u03EF\x07\x02\x02\x03\u03EE", "\u03EC\x03\x02\x02\x02\u03EE\u03ED\x03\x02\x02\x02\u03EF", "\u03F1\x03\x02\x02\x02\u03F0\u03EA\x03\x02\x02\x02\u03F0", "\u03EB\x03\x02\x02\x02\u03F1\u03F4\x03\x02\x02\x02\u03F2", "\u03F0\x03\x02\x02\x02\u03F2\u03F3\x03\x02\x02\x02\u03F3", "\u03F5\x03\x02\x02\x02\u03F4\u03F2\x03\x02\x02\x02\u03F5", "\u0404\x07$\x02\x02\u03F6\u03FF\x07)\x02\x02\u03F7\u03FE", "\n\x03\x02\x02\u03F8\u03FB\x07^\x02\x02\u03F9\u03FC\x0B", "\x02\x02\x02\u03FA\u03FC\x07\x02\x02\x03\u03FB\u03F9\x03", "\x02\x02\x02\u03FB\u03FA\x03\x02\x02\x02\u03FC\u03FE\x03", "\x02\x02\x02\u03FD\u03F7\x03\x02\x02\x02\u03FD\u03F8\x03", "\x02\x02\x02\u03FE\u0401\x03\x02\x02\x02\u03FF\u03FD\x03", "\x02\x02\x02\u03FF\u0400\x03\x02\x02\x02\u0400\u0402\x03", "\x02\x02\x02\u0401\u03FF\x03\x02\x02\x02\u0402\u0404\x07", ")\x02\x02\u0403\u03E9\x03\x02\x02\x02\u0403\u03F6\x03", "\x02\x02\x02\u0404\u010A\x03\x02\x02\x02\u0405\u0406\x07", "'\x02\x02\u0406\u0407\t\x04\x02\x02\u0407\u0409\t\x04\x02", "\x02\u0408\u0405\x03\x02\x02\x02\u0409\u040A\x03\x02\x02", "\x02\u040A\u0408\x03\x02\x02\x02\u040A\u040B\x03\x02\x02", "\x02\u040B\u010C\x03\x02\x02\x02\u040C\u041E\x07^\x02", "\x02\u040D\u041F\t\x05\x02\x02\u040E\u040F\t\x06\x02\x02", "\u040F\u0410\x05\u0117\x8C\x02\u0410\u0411\x05\u0117\x8C\x02", "\u0411\u0412\x05\u0117\x8C\x02\u0412\u0413\x05\u0117\x8C\x02", "\u0413\u041F\x03\x02\x02\x02\u0414\u0415\t\x06\x02\x02", "\u0415\u0416\x05\u0117\x8C\x02\u0416\u0417\x05\u0117\x8C\x02", "\u0417\u0418\x05\u0117\x8C\x02\u0418\u0419\x05\u0117\x8C\x02", "\u0419\u041A\x05\u0117\x8C\x02\u041A\u041B\x05\u0117\x8C\x02", "\u041B\u041C\x05\u0117\x8C\x02\u041C\u041D\x05\u0117\x8C\x02", "\u041D\u041F\x03\x02\x02\x02\u041E\u040D\x03\x02\x02\x02", "\u041E\u040E\x03\x02\x02\x02\u041E\u0414\x03\x02\x02\x02", "\u041F\u010E\x03\x02\x02\x02\u0420\u0421\x072\x02\x02", "\u0421\u0422\x07z\x02\x02\u0422\u0424\x03\x02\x02\x02", "\u0423\u0425\x05\u0117\x8C\x02\u0424\u0423\x03\x02\x02\x02", "\u0425\u0426\x03\x02\x02\x02\u0426\u0424\x03\x02\x02\x02", "\u0426\u0427\x03\x02\x02\x02\u0427\u0110\x03\x02\x02\x02", "\u0428\u0431\x05\u0121\x91\x02\u0429\u042D\x05\u011B\x8E\x02", "\u042A\u042C\x05\u0119\x8D\x02\u042B\u042A\x03\x02\x02\x02", "\u042C\u042F\x03\x02\x02\x02\u042D\u042B\x03\x02\x02\x02", "\u042D\u042E\x03\x02\x02\x02\u042E\u0431\x03\x02\x02\x02", "\u042F\u042D\x03\x02\x02\x02\u0430\u0428\x03\x02\x02\x02", "\u0430\u0429\x03\x02\x02\x02\u0431\u0112\x03\x02\x02\x02", "\u0432\u0434\x05\u0121\x91\x02\u0433\u0435\x05\u011F\x90\x02", "\u0434\u0433\x03\x02\x02\x02\u0435\u0436\x03\x02\x02\x02", "\u0436\u0434\x03\x02\x02\x02\u0436\u0437\x03\x02\x02\x02", "\u0437\u0114\x03\x02\x02\x02\u0438\u043A\t\x07\x02\x02", "\u0439\u0438\x03\x02\x02\x02\u043A\u0116\x03\x02\x02\x02", "\u043B\u043E\x05\u0119\x8D\x02\u043C\u043E\x05\u0115\x8B\x02", "\u043D\u043B\x03\x02\x02\x02\u043D\u043C\x03\x02\x02\x02", "\u043E\u0118\x03\x02\x02\x02\u043F\u0442\x05\u0121\x91\x02", "\u0440\u0442\x05\u011B\x8E\x02\u0441\u043F\x03\x02\x02\x02", "\u0441\u0440\x03\x02\x02\x02\u0442\u011A\x03\x02\x02\x02", "\u0443\u0446\x05\u011D\x8F\x02\u0444\u0446\x04:;\x02\u0445", "\u0443\x03\x02\x02\x02\u0445\u0444\x03\x02\x02\x02\u0446", "\u011C\x03\x02\x02\x02\u0447\u0448\x0439\x02\u0448\u011E", "\x03\x02\x02\x02\u0449\u044C\x05\u0121\x91\x02\u044A\u044C", "\x05\u011D\x8F\x02\u044B\u0449\x03\x02\x02\x02\u044B\u044A", "\x03\x02\x02\x02\u044C\u0120\x03\x02\x02\x02\u044D\u044E", "\x072\x02\x02\u044E\u0122\x03\x02\x02\x02\u044F\u0451", "\x05\u0119\x8D\x02\u0450\u044F\x03\x02\x02\x02\u0451\u0452", "\x03\x02\x02\x02\u0452\u0450\x03\x02\x02\x02\u0452\u0453", "\x03\x02\x02\x02\u0453\u0466\x03\x02\x02\x02\u0454\u0456", "\x05\u0119\x8D\x02\u0455\u0454\x03\x02\x02\x02\u0456\u0457", "\x03\x02\x02\x02\u0457\u0455\x03\x02\x02\x02\u0457\u0458", "\x03\x02\x02\x02\u0458\u0459\x03\x02\x02\x02\u0459\u045B", "\x070\x02\x02\u045A\u045C\x05\u0119\x8D\x02\u045B\u045A", "\x03\x02\x02\x02\u045C\u045D\x03\x02\x02\x02\u045D\u045B", "\x03\x02\x02\x02\u045D\u045E\x03\x02\x02\x02\u045E\u0466", "\x03\x02\x02\x02\u045F\u0461\x070\x02\x02\u0460\u0462", "\x05\u0119\x8D\x02\u0461\u0460\x03\x02\x02\x02\u0462\u0463", "\x03\x02\x02\x02\u0463\u0461\x03\x02\x02\x02\u0463\u0464", "\x03\x02\x02\x02\u0464\u0466\x03\x02\x02\x02\u0465\u0450", "\x03\x02\x02\x02\u0465\u0455\x03\x02\x02\x02\u0465\u045F", "\x03\x02\x02\x02\u0466\u0467\x03\x02\x02\x02\u0467\u0469", "\t\b\x02\x02\u0468\u046A\x07/\x02\x02\u0469\u0468\x03\x02", "\x02\x02\u0469\u046A\x03\x02\x02\x02\u046A\u046C\x03\x02", "\x02\x02\u046B\u046D\x05\u0119\x8D\x02\u046C\u046B\x03\x02", "\x02\x02\u046D\u046E\x03\x02\x02\x02\u046E\u046C\x03\x02", "\x02\x02\u046E\u046F\x03\x02\x02\x02\u046F\u0124\x03\x02", "\x02\x02\u0470\u0472\x05\u0119\x8D\x02\u0471\u0470\x03\x02", "\x02\x02\u0472\u0475\x03\x02\x02\x02\u0473\u0471\x03\x02", "\x02\x02\u0473\u0474\x03\x02\x02\x02\u0474\u0476\x03\x02", "\x02\x02\u0475\u0473\x03\x02\x02\x02\u0476\u0478\x070", "\x02\x02\u0477\u0479\x05\u0119\x8D\x02\u0478\u0477\x03\x02", "\x02\x02\u0479\u047A\x03\x02\x02\x02\u047A\u0478\x03\x02", "\x02\x02\u047A\u047B\x03\x02\x02\x02\u047B\u0126\x03\x02", "\x02\x02\u047C\u0480\x05\u0129\x95\x02\u047D\u047F\x05\u012B", "\x96\x02\u047E\u047D\x03\x02\x02\x02\u047F\u0482\x03\x02", "\x02\x02\u0480\u047E\x03\x02\x02\x02\u0480\u0481\x03\x02", "\x02\x02\u0481\u0128\x03\x02\x02\x02\u0482\u0480\x03\x02", "\x02\x02\u0483\u0486\x05\u014F\xA8\x02\u0484\u0486\t\t\x02", "\x02\u0485\u0483\x03\x02\x02\x02\u0485\u0484\x03\x02\x02", "\x02\u0486\u012A\x03\x02\x02\x02\u0487\u048A\x05\u013B\x9E", "\x02\u0488\u048A\x05\u0143\xA2\x02\u0489\u0487\x03\x02\x02", "\x02\u0489\u0488\x03\x02\x02\x02\u048A\u012C\x03\x02\x02", "\x02\u048B\u0491\x07b\x02\x02\u048C\u0490\n\n\x02\x02\u048D", "\u048E\x07b\x02\x02\u048E\u0490\x07b\x02\x02\u048F\u048C", "\x03\x02\x02\x02\u048F\u048D\x03\x02\x02\x02\u0490\u0493", "\x03\x02\x02\x02\u0491\u048F\x03\x02\x02\x02\u0491\u0492", "\x03\x02\x02\x02\u0492\u0494\x03\x02\x02\x02\u0493\u0491", "\x03\x02\x02\x02\u0494\u0495\x07b\x02\x02\u0495\u012E", "\x03\x02\x02\x02\u0496\u0498\x05\u0131\x99\x02\u0497\u0496", "\x03\x02\x02\x02\u0498\u0499\x03\x02\x02\x02\u0499\u0497", "\x03\x02\x02\x02\u0499\u049A\x03\x02\x02\x02\u049A\u0130", "\x03\x02\x02\x02\u049B\u04A8\x05\u0145\xA3\x02\u049C\u04A8", "\x05\u0147\xA4\x02\u049D\u04A8\x05\u0149\xA5\x02\u049E\u04A8", "\x05\u014B\xA6\x02\u049F\u04A8\x05\u0137\x9C\x02\u04A0\u04A8", "\x05\u0141\xA1\x02\u04A1\u04A8\x05\u013F\xA0\x02\u04A2\u04A8", "\x05\u013D\x9F\x02\u04A3\u04A8\x05\u0139\x9D\x02\u04A4\u04A8", "\x05\u014D\xA7\x02\u04A5\u04A8\t\x0B\x02\x02\u04A6\u04A8", "\x05\u0133\x9A\x02\u04A7\u049B\x03\x02\x02\x02\u04A7\u049C", "\x03\x02\x02\x02\u04A7\u049D\x03\x02\x02\x02\u04A7\u049E", "\x03\x02\x02\x02\u04A7\u049F\x03\x02\x02\x02\u04A7\u04A0", "\x03\x02\x02\x02\u04A7\u04A1\x03\x02\x02\x02\u04A7\u04A2", "\x03\x02\x02\x02\u04A7\u04A3\x03\x02\x02\x02\u04A7\u04A4", "\x03\x02\x02\x02\u04A7\u04A5\x03\x02\x02\x02\u04A7\u04A6", "\x03\x02\x02\x02\u04A8\u0132\x03\x02\x02\x02\u04A9\u04AA", "\x071\x02\x02\u04AA\u04AB\x07,\x02\x02\u04AB\u04AF\x03", "\x02\x02\x02\u04AC\u04AE\x0B\x02\x02\x02\u04AD\u04AC\x03", "\x02\x02\x02\u04AE\u04B1\x03\x02\x02\x02\u04AF\u04B0\x03", "\x02\x02\x02\u04AF\u04AD\x03\x02\x02\x02\u04B0\u04B2\x03", "\x02\x02\x02\u04B1\u04AF\x03\x02\x02\x02\u04B2\u04B3\x07", ",\x02\x02\u04B3\u04BE\x071\x02\x02\u04B4\u04B5\x071\x02", "\x02\u04B5\u04B6\x071\x02\x02\u04B6\u04BA\x03\x02\x02", "\x02\u04B7\u04B9\n\f\x02\x02\u04B8\u04B7\x03\x02\x02\x02", "\u04B9\u04BC\x03\x02\x02\x02\u04BA\u04B8\x03\x02\x02\x02", "\u04BA\u04BB\x03\x02\x02\x02\u04BB\u04BE\x03\x02\x02\x02", "\u04BC\u04BA\x03\x02\x02\x02\u04BD\u04A9\x03\x02\x02\x02", "\u04BD\u04B4\x03\x02\x02\x02\u04BE\u0134\x03\x02\x02\x02", "\u04BF\u04C0\x0B\x02\x02\x02\u04C0\u0136\x03\x02\x02\x02", "\u04C1\u04C2\t\r\x02\x02\u04C2\u0138\x03\x02\x02\x02\u04C3", "\u04C4\t\x0E\x02\x02\u04C4\u013A\x03\x02\x02\x02\u04C5", "\u04C6\t\x0F\x02\x02\u04C6\u013C\x03\x02\x02\x02\u04C7", "\u04C8\t\x10\x02\x02\u04C8\u013E\x03\x02\x02\x02\u04C9", "\u04CA\t\x11\x02\x02\u04CA\u0140\x03\x02\x02\x02\u04CB", "\u04CC\t\x12\x02\x02\u04CC\u0142\x03\x02\x02\x02\u04CD", "\u04CE\t\x13\x02\x02\u04CE\u0144\x03\x02\x02\x02\u04CF", "\u04D0\t\x14\x02\x02\u04D0\u0146\x03\x02\x02\x02\u04D1", "\u04D2\t\x15\x02\x02\u04D2\u0148\x03\x02\x02\x02\u04D3", "\u04D4\t\x16\x02\x02\u04D4\u014A\x03\x02\x02\x02\u04D5", "\u04D6\t\x17\x02\x02\u04D6\u014C\x03\x02\x02\x02\u04D7", "\u04D8\t\x18\x02\x02\u04D8\u014E\x03\x02\x02\x02\u04D9", "\u04DA\t\x19\x02\x02\u04DA\u0150\x03\x02\x02\x02\u04DB", "\u04DC\t\x1A\x02\x02\u04DC\u0152\x03\x02\x02\x02\u04DD", "\u04DE\t\x1B\x02\x02\u04DE\u0154\x03\x02\x02\x02\u04DF", "\u04E0\t\x1C\x02\x02\u04E0\u0156\x03\x02\x02\x02\u04E1", "\u04E2\t\x1D\x02\x02\u04E2\u0158\x03\x02\x02\x02\u04E3", "\u04E4\t\b\x02\x02\u04E4\u015A\x03\x02\x02\x02\u04E5\u04E6", "\t\x1E\x02\x02\u04E6\u015C\x03\x02\x02\x02\u04E7\u04E8", "\t\x1F\x02\x02\u04E8\u015E\x03\x02\x02\x02\u04E9\u04EA", "\t \x02\x02\u04EA\u0160\x03\x02\x02\x02\u04EB\u04EC\t!\x02", "\x02\u04EC\u0162\x03\x02\x02\x02\u04ED\u04EE\t\"\x02\x02", "\u04EE\u0164\x03\x02\x02\x02\u04EF\u04F0\t#\x02\x02\u04F0", "\u0166\x03\x02\x02\x02\u04F1\u04F2\t$\x02\x02\u04F2\u0168", "\x03\x02\x02\x02\u04F3\u04F4\t%\x02\x02\u04F4\u016A\x03", "\x02\x02\x02\u04F5\u04F6\t&\x02\x02\u04F6\u016C\x03\x02", "\x02\x02\u04F7\u04F8\t'\x02\x02\u04F8\u016E\x03\x02\x02", "\x02\u04F9\u04FA\t(\x02\x02\u04FA\u0170\x03\x02\x02\x02", "\u04FB\u04FC\t)\x02\x02\u04FC\u0172\x03\x02\x02\x02\u04FD", "\u04FE\t*\x02\x02\u04FE\u0174\x03\x02\x02\x02\u04FF\u0500", "\t+\x02\x02\u0500\u0176\x03\x02\x02\x02\u0501\u0502\t,\x02", "\x02\u0502\u0178\x03\x02\x02\x02\u0503\u0504\t\x06\x02", "\x02\u0504\u017A\x03\x02\x02\x02\u0505\u0506\t-\x02\x02", "\u0506\u017C\x03\x02\x02\x02\u0507\u0508\t.\x02\x02\u0508", "\u017E\x03\x02\x02\x02\u0509\u050A\t/\x02\x02\u050A\u0180", "\x03\x02\x02\x02\u050B\u050C\t0\x02\x02\u050C\u0182\x03", "\x02\x02\x02\u050D\u050E\t1\x02\x02\u050E\u0184\x03\x02", "\x02\x02(\x02\u03EE\u03F0\u03F2\u03FB\u03FD\u03FF\u0403\u040A", "\u041E\u0426\u042D\u0430\u0436\u0439\u043D\u0441\u0445\u044B\u0452\u0457", "\u045D\u0463\u0465\u0469\u046E\u0473\u047A\u0480\u0485\u0489\u048F\u0491", "\u0499\u04A7\u04AF\u04BA\u04BD\x02"].join("");

var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map(function (ds, index) {
    return new antlr4.dfa.DFA(ds, index);
});

function CypherLexer(input) {
    antlr4.Lexer.call(this, input);
    this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    return this;
}

CypherLexer.prototype = Object.create(antlr4.Lexer.prototype);
CypherLexer.prototype.constructor = CypherLexer;

CypherLexer.EOF = antlr4.Token.EOF;
CypherLexer.T__0 = 1;
CypherLexer.T__1 = 2;
CypherLexer.T__2 = 3;
CypherLexer.T__3 = 4;
CypherLexer.T__4 = 5;
CypherLexer.T__5 = 6;
CypherLexer.T__6 = 7;
CypherLexer.T__7 = 8;
CypherLexer.T__8 = 9;
CypherLexer.T__9 = 10;
CypherLexer.T__10 = 11;
CypherLexer.T__11 = 12;
CypherLexer.T__12 = 13;
CypherLexer.T__13 = 14;
CypherLexer.T__14 = 15;
CypherLexer.T__15 = 16;
CypherLexer.T__16 = 17;
CypherLexer.T__17 = 18;
CypherLexer.T__18 = 19;
CypherLexer.T__19 = 20;
CypherLexer.T__20 = 21;
CypherLexer.T__21 = 22;
CypherLexer.T__22 = 23;
CypherLexer.T__23 = 24;
CypherLexer.T__24 = 25;
CypherLexer.T__25 = 26;
CypherLexer.T__26 = 27;
CypherLexer.T__27 = 28;
CypherLexer.T__28 = 29;
CypherLexer.T__29 = 30;
CypherLexer.T__30 = 31;
CypherLexer.T__31 = 32;
CypherLexer.T__32 = 33;
CypherLexer.T__33 = 34;
CypherLexer.T__34 = 35;
CypherLexer.T__35 = 36;
CypherLexer.T__36 = 37;
CypherLexer.T__37 = 38;
CypherLexer.T__38 = 39;
CypherLexer.T__39 = 40;
CypherLexer.T__40 = 41;
CypherLexer.T__41 = 42;
CypherLexer.T__42 = 43;
CypherLexer.T__43 = 44;
CypherLexer.T__44 = 45;
CypherLexer.T__45 = 46;
CypherLexer.T__46 = 47;
CypherLexer.T__47 = 48;
CypherLexer.T__48 = 49;
CypherLexer.T__49 = 50;
CypherLexer.T__50 = 51;
CypherLexer.T__51 = 52;
CypherLexer.T__52 = 53;
CypherLexer.CYPHER = 54;
CypherLexer.EXPLAIN = 55;
CypherLexer.PROFILE = 56;
CypherLexer.USING = 57;
CypherLexer.PERIODIC = 58;
CypherLexer.COMMIT = 59;
CypherLexer.UNION = 60;
CypherLexer.ALL = 61;
CypherLexer.CREATE = 62;
CypherLexer.DROP = 63;
CypherLexer.INDEX = 64;
CypherLexer.ON = 65;
CypherLexer.CONSTRAINT = 66;
CypherLexer.ASSERT = 67;
CypherLexer.IS = 68;
CypherLexer.UNIQUE = 69;
CypherLexer.EXISTS = 70;
CypherLexer.LOAD = 71;
CypherLexer.CSV = 72;
CypherLexer.WITH = 73;
CypherLexer.HEADERS = 74;
CypherLexer.FROM = 75;
CypherLexer.AS = 76;
CypherLexer.FIELDTERMINATOR = 77;
CypherLexer.OPTIONAL = 78;
CypherLexer.MATCH = 79;
CypherLexer.UNWIND = 80;
CypherLexer.MERGE = 81;
CypherLexer.SET = 82;
CypherLexer.DETACH = 83;
CypherLexer.DELETE = 84;
CypherLexer.REMOVE = 85;
CypherLexer.FOREACH = 86;
CypherLexer.IN = 87;
CypherLexer.DISTINCT = 88;
CypherLexer.RETURN = 89;
CypherLexer.ORDER = 90;
CypherLexer.BY = 91;
CypherLexer.L_SKIP = 92;
CypherLexer.LIMIT = 93;
CypherLexer.ASCENDING = 94;
CypherLexer.ASC = 95;
CypherLexer.DESCENDING = 96;
CypherLexer.DESC = 97;
CypherLexer.JOIN = 98;
CypherLexer.SCAN = 99;
CypherLexer.START = 100;
CypherLexer.NODE = 101;
CypherLexer.RELATIONSHIP = 102;
CypherLexer.REL = 103;
CypherLexer.WHERE = 104;
CypherLexer.SHORTESTPATH = 105;
CypherLexer.ALLSHORTESTPATHS = 106;
CypherLexer.OR = 107;
CypherLexer.XOR = 108;
CypherLexer.AND = 109;
CypherLexer.NOT = 110;
CypherLexer.STARTS = 111;
CypherLexer.ENDS = 112;
CypherLexer.CONTAINS = 113;
CypherLexer.NULL = 114;
CypherLexer.COUNT = 115;
CypherLexer.FILTER = 116;
CypherLexer.EXTRACT = 117;
CypherLexer.ANY = 118;
CypherLexer.NONE = 119;
CypherLexer.SINGLE = 120;
CypherLexer.TRUE = 121;
CypherLexer.FALSE = 122;
CypherLexer.REDUCE = 123;
CypherLexer.CASE = 124;
CypherLexer.ELSE = 125;
CypherLexer.END = 126;
CypherLexer.WHEN = 127;
CypherLexer.THEN = 128;
CypherLexer.CALL = 129;
CypherLexer.YIELD = 130;
CypherLexer.KEY = 131;
CypherLexer.StringLiteral = 132;
CypherLexer.UrlHex = 133;
CypherLexer.EscapedChar = 134;
CypherLexer.HexInteger = 135;
CypherLexer.DecimalInteger = 136;
CypherLexer.OctalInteger = 137;
CypherLexer.HexLetter = 138;
CypherLexer.HexDigit = 139;
CypherLexer.Digit = 140;
CypherLexer.NonZeroDigit = 141;
CypherLexer.NonZeroOctDigit = 142;
CypherLexer.OctDigit = 143;
CypherLexer.ZeroDigit = 144;
CypherLexer.ExponentDecimalReal = 145;
CypherLexer.RegularDecimalReal = 146;
CypherLexer.UnescapedSymbolicName = 147;
CypherLexer.IdentifierStart = 148;
CypherLexer.IdentifierPart = 149;
CypherLexer.EscapedSymbolicName = 150;
CypherLexer.SP = 151;
CypherLexer.WHITESPACE = 152;
CypherLexer.Comment = 153;
CypherLexer.ERROR_TOKEN = 154;

CypherLexer.prototype.channelNames = ["DEFAULT_TOKEN_CHANNEL", "HIDDEN"];

CypherLexer.prototype.modeNames = ["DEFAULT_MODE"];

CypherLexer.prototype.literalNames = [null, "';'", "':'", "'-'", "'=>'", "'://'", "'/'", "'.'", "'@'", "'#'", "'?'", "'&'", "'='", "'+'", "'{'", "','", "'}'", "'['", "']'", "'('", "')'", "'+='", "'|'", "'*'", "'..'", "'%'", "'^'", "'=~'", "'<>'", "'!='", "'<'", "'>'", "'<='", "'>='", "'$'", "'\u27E8'", "'\u3008'", "'\uFE64'", "'\uFF1C'", "'\u27E9'", "'\u3009'", "'\uFE65'", "'\uFF1E'", "'\xAD'", "'\u2010'", "'\u2011'", "'\u2012'", "'\u2013'", "'\u2014'", "'\u2015'", "'\u2212'", "'\uFE58'", "'\uFE63'", "'\uFF0D'", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "'0'"];

CypherLexer.prototype.symbolicNames = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "CYPHER", "EXPLAIN", "PROFILE", "USING", "PERIODIC", "COMMIT", "UNION", "ALL", "CREATE", "DROP", "INDEX", "ON", "CONSTRAINT", "ASSERT", "IS", "UNIQUE", "EXISTS", "LOAD", "CSV", "WITH", "HEADERS", "FROM", "AS", "FIELDTERMINATOR", "OPTIONAL", "MATCH", "UNWIND", "MERGE", "SET", "DETACH", "DELETE", "REMOVE", "FOREACH", "IN", "DISTINCT", "RETURN", "ORDER", "BY", "L_SKIP", "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", "JOIN", "SCAN", "START", "NODE", "RELATIONSHIP", "REL", "WHERE", "SHORTESTPATH", "ALLSHORTESTPATHS", "OR", "XOR", "AND", "NOT", "STARTS", "ENDS", "CONTAINS", "NULL", "COUNT", "FILTER", "EXTRACT", "ANY", "NONE", "SINGLE", "TRUE", "FALSE", "REDUCE", "CASE", "ELSE", "END", "WHEN", "THEN", "CALL", "YIELD", "KEY", "StringLiteral", "UrlHex", "EscapedChar", "HexInteger", "DecimalInteger", "OctalInteger", "HexLetter", "HexDigit", "Digit", "NonZeroDigit", "NonZeroOctDigit", "OctDigit", "ZeroDigit", "ExponentDecimalReal", "RegularDecimalReal", "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", "EscapedSymbolicName", "SP", "WHITESPACE", "Comment", "ERROR_TOKEN"];

CypherLexer.prototype.ruleNames = ["T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "T__40", "T__41", "T__42", "T__43", "T__44", "T__45", "T__46", "T__47", "T__48", "T__49", "T__50", "T__51", "T__52", "CYPHER", "EXPLAIN", "PROFILE", "USING", "PERIODIC", "COMMIT", "UNION", "ALL", "CREATE", "DROP", "INDEX", "ON", "CONSTRAINT", "ASSERT", "IS", "UNIQUE", "EXISTS", "LOAD", "CSV", "WITH", "HEADERS", "FROM", "AS", "FIELDTERMINATOR", "OPTIONAL", "MATCH", "UNWIND", "MERGE", "SET", "DETACH", "DELETE", "REMOVE", "FOREACH", "IN", "DISTINCT", "RETURN", "ORDER", "BY", "L_SKIP", "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", "JOIN", "SCAN", "START", "NODE", "RELATIONSHIP", "REL", "WHERE", "SHORTESTPATH", "ALLSHORTESTPATHS", "OR", "XOR", "AND", "NOT", "STARTS", "ENDS", "CONTAINS", "NULL", "COUNT", "FILTER", "EXTRACT", "ANY", "NONE", "SINGLE", "TRUE", "FALSE", "REDUCE", "CASE", "ELSE", "END", "WHEN", "THEN", "CALL", "YIELD", "KEY", "StringLiteral", "UrlHex", "EscapedChar", "HexInteger", "DecimalInteger", "OctalInteger", "HexLetter", "HexDigit", "Digit", "NonZeroDigit", "NonZeroOctDigit", "OctDigit", "ZeroDigit", "ExponentDecimalReal", "RegularDecimalReal", "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", "EscapedSymbolicName", "SP", "WHITESPACE", "Comment", "ERROR_TOKEN", "FF", "RS", "ID_Continue", "GS", "FS", "CR", "Sc", "SPACE", "TAB", "LF", "VT", "US", "ID_Start", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"];

CypherLexer.prototype.grammarFileName = "Cypher.g4";

exports.CypherLexer = CypherLexer;

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReferencesListener = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
opyright (c) 2002-2017 "Neo Technology,"
etwork Engine for Objects in Lund AB [http://neotechnology.com]

his file is part of Neo4j.

eo4j is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
at your option) any later version.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *
his program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
or FITNESS FOR A PARTICULAR PURPOSE.  See the
eneral Public License for more details.

ou should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.


var _CypherListener2 = __webpack_require__(39);

var _CypherTypes = __webpack_require__(1);

var CypherTypes = _interopRequireWildcard(_CypherTypes);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Index = function () {
  function Index() {
    _classCallCheck(this, Index);

    this.names = {};
    this.namesByQuery = [];
    this.referencesByName = {};
    this.referencesByQueryAndName = [];
  }

  _createClass(Index, [{
    key: 'addQuery',
    value: function addQuery() {
      this.namesByQuery.push([]);
      this.referencesByQueryAndName.push({});
    }
  }, {
    key: 'add',
    value: function add(ctx) {
      var addName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      var queryIndex = this.namesByQuery.length - 1;
      var text = ctx.getText();
      if (addName) {
        this.names[text] = true;
        this.namesByQuery[queryIndex][text] = true;
      }
      this.referencesByName[text] = [].concat(_toConsumableArray(this.referencesByName[text] || []), [ctx]);
      var index = this.referencesByQueryAndName[queryIndex];
      index[text] = [].concat(_toConsumableArray(index[text] || []), [ctx]);
    }

    /**
     * Variables have specific rules, because they participate in autocompletion.
     * We should not add to the names list variables that are in expression.
     */

  }, {
    key: 'addVariable',
    value: function addVariable(ctx) {
      var addName = true;

      // If variable is inside atom, then variable is inside expression.
      // Therefore, variables is node defined here.
      var parent = ctx.parentCtx;
      if (parent && parent.constructor.name === CypherTypes.ATOM_CONTEXT) {
        addName = false;
      }
      this.add(ctx, addName);
    }
  }]);

  return Index;
}();

var ReferencesListener = exports.ReferencesListener = function (_CypherListener) {
  _inherits(ReferencesListener, _CypherListener);

  function ReferencesListener() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ReferencesListener);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ReferencesListener.__proto__ || Object.getPrototypeOf(ReferencesListener)).call.apply(_ref, [this].concat(args))), _this), _this.queries = [], _this.queriesAndCommands = [], _this.statements = [], _this.raw = [], _this.indexes = CypherTypes.SYMBOLIC_CONTEXTS.reduce(function (acc, t) {
      return _extends({}, acc, _defineProperty({}, t, new Index(t)));
    }, {}), _this.inConsoleCommand = false, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ReferencesListener, [{
    key: 'enterRaw',
    value: function enterRaw(ctx) {
      this.raw.push(ctx);
    }
  }, {
    key: 'exitRaw',
    value: function exitRaw(ctx) {
      if (this.raw.length === 0) {
        this.raw.push(ctx);
      }
    }
  }, {
    key: 'enterCypherPart',
    value: function enterCypherPart(ctx) {
      this.statements.push(ctx);
    }
  }, {
    key: 'exitCypher',
    value: function exitCypher(ctx) {
      if (this.statements.length === 0) {
        this.statements.push(ctx);
      }
    }
  }, {
    key: 'enterCypherConsoleCommand',
    value: function enterCypherConsoleCommand(ctx) {
      var _this2 = this;

      this.queriesAndCommands.push(ctx);
      Object.keys(this.indexes).forEach(function (k) {
        return _this2.indexes[k].addQuery();
      });
      this.inConsoleCommand = true;
    }
  }, {
    key: 'exitCypherConsoleCommand',
    value: function exitCypherConsoleCommand() {
      this.inConsoleCommand = false;
    }
  }, {
    key: 'enterCypherQuery',
    value: function enterCypherQuery(ctx) {
      var _this3 = this;

      this.queries.push(ctx);
      this.queriesAndCommands.push(ctx);
      Object.keys(this.indexes).forEach(function (k) {
        return _this3.indexes[k].addQuery();
      });
    }
  }, {
    key: 'exitVariable',
    value: function exitVariable(ctx) {
      if (this.inConsoleCommand) {
        return;
      }
      this.indexes[CypherTypes.VARIABLE_CONTEXT].addVariable(ctx);
    }
  }, {
    key: 'exitLabelName',
    value: function exitLabelName(ctx) {
      if (this.inConsoleCommand) {
        return;
      }
      this.indexes[CypherTypes.LABEL_NAME_CONTEXT].add(ctx);
    }
  }, {
    key: 'exitRelTypeName',
    value: function exitRelTypeName(ctx) {
      if (this.inConsoleCommand) {
        return;
      }
      this.indexes[CypherTypes.RELATIONSHIP_TYPE_NAME_CONTEXT].add(ctx);
    }
  }, {
    key: 'exitPropertyKeyName',
    value: function exitPropertyKeyName(ctx) {
      if (this.inConsoleCommand) {
        return;
      }
      this.indexes[CypherTypes.PROPERTY_KEY_NAME_CONTEXT].add(ctx);
    }
  }, {
    key: 'exitParameterName',
    value: function exitParameterName(ctx) {
      if (this.inConsoleCommand) {
        return;
      }
      this.indexes[CypherTypes.PARAMETER_NAME_CONTEXT].add(ctx);
    }
  }]);

  return ReferencesListener;
}(_CypherListener2.CypherListener);

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extractStatements = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _antlr = __webpack_require__(9);

var _antlr2 = _interopRequireDefault(_antlr);

var _ReferencesProvider = __webpack_require__(43);

var _CypherTypes = __webpack_require__(1);

var CypherTypes = _interopRequireWildcard(_CypherTypes);

var _CypherParser = __webpack_require__(95);

var _CypherLexer = __webpack_require__(96);

var _ErrorListener = __webpack_require__(44);

var _ReferencesListener = __webpack_require__(97);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var extractStatements = exports.extractStatements = function extractStatements(input) {
  var referencesListener = new _ReferencesListener.ReferencesListener();
  var errorListener = new _ErrorListener.ErrorListener();
  var chars = new _antlr2.default.InputStream(input);
  var lexer = new _CypherLexer.CypherLexer(chars);
  lexer.removeErrorListeners();
  lexer.addErrorListener(errorListener);
  var tokens = new _antlr2.default.CommonTokenStream(lexer);
  var parser = new _CypherParser.CypherParser(tokens);
  parser.buildParseTrees = true;
  parser.removeErrorListeners();
  parser.addErrorListener(errorListener);
  parser.addParseListener(referencesListener);
  var parseTree = parser.cypher();
  var queries = referencesListener.queries,
      indexes = referencesListener.indexes;


  var referencesProviders = CypherTypes.SYMBOLIC_CONTEXTS.reduce(function (acc, t) {
    return _extends({}, acc, _defineProperty({}, t, new _ReferencesProvider.ReferencesProvider(queries, indexes[t])));
  }, {});
  return { parseTree: parseTree, referencesListener: referencesListener, errorListener: errorListener, referencesProviders: referencesProviders };
};

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Generated from cypher-editor-support/src/_generated.simple/Cypher.g4 by ANTLR 4.7
// jshint ignore: start
var antlr4=__webpack_require__(9);var CypherListener=__webpack_require__(45).CypherListener;var grammarFileName="Cypher.g4";var serializedATN=['\x03\u608B\uA72A\u8133\uB9ED\u417C\u3BE7\u7786\u5964','\x03\x9C\u0A89\x04\x02\t\x02\x04\x03\t\x03\x04\x04','\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07\t\x07','\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\x0B\t\x0B\x04\f\t\f','\x04\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10','\x04\x11\t\x11\x04\x12\t\x12\x04\x13\t\x13\x04\x14','\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17','\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B','\t\x1B\x04\x1C\t\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E','\x04\x1F\t\x1F\x04 \t \x04!\t!\x04"\t"\x04#\t#\x04','$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04','+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x04','2\t2\x043\t3\x044\t4\x045\t5\x046\t6\x047\t7\x048\t8\x04','9\t9\x04:\t:\x04;\t;\x04<\t<\x04=\t=\x04>\t>\x04?\t?\x04','@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04F\tF\x04','G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04','N\tN\x04O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04','U\tU\x04V\tV\x04W\tW\x04X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04','\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t`\x04a\ta\x04b\tb\x04','c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04i\ti\x04','j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04','q\tq\x04r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04','x\tx\x04y\ty\x04z\tz\x04{\t{\x04|\t|\x04}\t}\x04~\t~\x04','\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81\x04\x82\t','\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04','\x86\t\x86\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t','\x89\x04\x8A\t\x8A\x04\x8B\t\x8B\x04\x8C\t\x8C\x04','\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t','\x90\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04','\x94\t\x94\x04\x95\t\x95\x04\x96\t\x96\x04\x97\t','\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t\x9A\x04','\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t','\x9E\x04\x9F\t\x9F\x04\xA0\t\xA0\x04\xA1\t\xA1\x04','\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4\x04\xA5\t','\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04','\xA9\t\xA9\x04\xAA\t\xAA\x04\xAB\t\xAB\x04\xAC\t','\xAC\x04\xAD\t\xAD\x04\xAE\t\xAE\x04\xAF\t\xAF\x04','\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04\xB3\t','\xB3\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t\xB6\x04','\xB7\t\xB7\x04\xB8\t\xB8\x04\xB9\t\xB9\x04\xBA\t','\xBA\x04\xBB\t\xBB\x04\xBC\t\xBC\x04\xBD\t\xBD\x04','\xBE\t\xBE\x04\xBF\t\xBF\x04\xC0\t\xC0\x04\xC1\t','\xC1\x04\xC2\t\xC2\x04\xC3\t\xC3\x04\xC4\t\xC4\x04','\xC5\t\xC5\x04\xC6\t\xC6\x04\xC7\t\xC7\x04\xC8\t','\xC8\x04\xC9\t\xC9\x04\xCA\t\xCA\x04\xCB\t\xCB\x04','\xCC\t\xCC\x04\xCD\t\xCD\x04\xCE\t\xCE\x03\x02\x07','\x02\u019E\n\x02\f\x02\x0E\x02\u01A1\x0B\x02\x03\x02','\x05\x02\u01A4\n\x02\x03\x03\x03\x03\x03\x03\x07','\x03\u01A9\n\x03\f\x03\x0E\x03\u01AC\x0B\x03\x03\x03','\x05\x03\u01AF\n\x03\x03\x03\x03\x03\x03\x04\x05','\x04\u01B4\n\x04\x03\x04\x03\x04\x05\x04\u01B8\n\x04','\x03\x04\x05\x04\u01BB\n\x04\x03\x05\x03\x05\x03','\x05\x05\x05\u01C0\n\x05\x03\x06\x03\x06\x03\x06','\x03\x06\x07\x06\u01C6\n\x06\f\x06\x0E\x06\u01C9\x0B','\x06\x03\x07\x03\x07\x03\x07\x07\x07\u01CE\n\x07','\f\x07\x0E\x07\u01D1\x0B\x07\x03\b\x03\b\x03\b\x03','\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x05\b\u01DD\n\b','\x03\t\x03\t\x05\t\u01E1\n\t\x03\t\x03\t\x05\t\u01E5\n\t','\x03\t\x03\t\x03\n\x03\n\x03\x0B\x03\x0B\x03\x0B','\x05\x0B\u01EE\n\x0B\x03\x0B\x03\x0B\x03\x0B\x05','\x0B\u01F3\n\x0B\x03\x0B\x03\x0B\x05\x0B\u01F7\n\x0B','\x03\x0B\x05\x0B\u01FA\n\x0B\x03\x0B\x05\x0B\u01FD','\n\x0B\x03\f\x03\f\x03\r\x05\r\u0202\n\r\x03\r\x03\r\x05','\r\u0206\n\r\x03\x0E\x03\x0E\x03\x0E\x07\x0E\u020B\n','\x0E\f\x0E\x0E\x0E\u020E\x0B\x0E\x03\x0F\x03\x0F','\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F','\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x07\x11','\u021D\n\x11\f\x11\x0E\x11\u0220\x0B\x11\x03\x12\x03','\x12\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03','\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x16\x03','\x16\x03\x16\x03\x17\x03\x17\x03\x17\x07\x17\u0234','\n\x17\f\x17\x0E\x17\u0237\x0B\x17\x03\x18\x03\x18','\x03\x18\x03\x18\x03\x18\x05\x18\u023E\n\x18\x05','\x18\u0240\n\x18\x03\x19\x03\x19\x05\x19\u0244\n\x19','\x03\x19\x07\x19\u0247\n\x19\f\x19\x0E\x19\u024A\x0B','\x19\x03\x1A\x06\x1A\u024D\n\x1A\r\x1A\x0E\x1A\u024E','\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x05\x1C\u0255\n','\x1C\x03\x1C\x03\x1C\x05\x1C\u0259\n\x1C\x03\x1C','\x03\x1C\x05\x1C\u025D\n\x1C\x03\x1C\x03\x1C\x05','\x1C\u0261\n\x1C\x07\x1C\u0263\n\x1C\f\x1C\x0E\x1C\u0266','\x0B\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x05\x1C','\u026C\n\x1C\x03\x1C\x05\x1C\u026F\n\x1C\x03\x1D\x03','\x1D\x05\x1D\u0273\n\x1D\x03\x1D\x03\x1D\x05\x1D','\u0277\n\x1D\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x05','\x1E\u027D\n\x1E\x03\x1E\x03\x1E\x05\x1E\u0281\n\x1E','\x03\x1E\x03\x1E\x05\x1E\u0285\n\x1E\x03\x1E\x03','\x1E\x05\x1E\u0289\n\x1E\x07\x1E\u028B\n\x1E\f\x1E\x0E','\x1E\u028E\x0B\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E','\x05\x1E\u0294\n\x1E\x03\x1E\x05\x1E\u0297\n\x1E\x03','\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x05','\x1F\u029F\n\x1F\x03 \x03 \x03 \x03 \x03 \x03 \x03',' \x05 \u02A8\n \x03!\x03!\x03!\x05!\u02AD\n!\x06!\u02AF','\n!\r!\x0E!\u02B0\x03!\x05!\u02B4\n!\x03"\x03"\x03"\x07','"\u02B9\n"\f"\x0E"\u02BC\x0B"\x03#\x03#\x03#\x03$\x03','$\x05$\u02C3\n$\x07$\u02C5\n$\f$\x0E$\u02C8\x0B$\x03%\x03','%\x03%\x05%\u02CD\n%\x03&\x03&\x03&\x05&\u02D2\n&\x03','&\x03&\x07&\u02D6\n&\f&\x0E&\u02D9\x0B&\x03\'\x03\'\x03','(\x03(\x03)\x03)\x03*\x03*\x05*\u02E3\n*\x03*\x03*\x05','*\u02E7\n*\x03*\x03*\x03+\x03+\x05+\u02ED\n+\x03,\x03',',\x05,\u02F1\n,\x03-\x03-\x05-\u02F5\n-\x03-\x07-\u02F8','\n-\f-\x0E-\u02FB\x0B-\x03.\x03.\x05.\u02FF\n.\x03.\x03','.\x03/\x03/\x05/\u0305\n/\x03/\x07/\u0308\n/\f/\x0E/\u030B','\x0B/\x030\x030\x030\x030\x030\x030\x030\x050\u0314','\n0\x031\x031\x051\u0318\n1\x031\x071\u031B\n1\f1\x0E1\u031E','\x0B1\x032\x032\x032\x032\x052\u0324\n2\x032\x032\x03','2\x052\u0329\n2\x032\x052\u032C\n2\x033\x033\x033\x03','3\x033\x033\x033\x033\x033\x033\x033\x033\x033\x03','3\x053\u033C\n3\x034\x034\x034\x034\x034\x034\x034\x03','4\x034\x034\x054\u0348\n4\x035\x035\x035\x035\x036\x03','6\x036\x036\x037\x037\x037\x037\x038\x038\x038\x03','8\x039\x039\x039\x039\x03:\x03:\x03:\x03:\x03;\x03',';\x03;\x03;\x03<\x03<\x03<\x03<\x03=\x03=\x03=\x03','=\x03>\x03>\x03>\x03>\x03?\x03?\x03?\x03?\x05?\u0376','\n?\x03?\x03?\x05?\u037A\n?\x03?\x03?\x05?\u037E\n?\x03','?\x03?\x05?\u0382\n?\x03?\x03?\x03@\x03@\x03@\x03@\x05','@\u038A\n@\x03@\x03@\x05@\u038E\n@\x03@\x03@\x03@\x05','@\u0393\n@\x03@\x03@\x05@\u0397\n@\x03@\x03@\x03@\x03','@\x03@\x03@\x03@\x03@\x03A\x03A\x03A\x03A\x05A\u03A5','\nA\x03A\x03A\x05A\u03A9\nA\x03A\x03A\x03A\x05A\u03AE','\nA\x03A\x03A\x05A\u03B2\nA\x03A\x03A\x03A\x03A\x05','A\u03B8\nA\x03A\x03A\x05A\u03BC\nA\x03A\x03A\x03A\x03','A\x03A\x03A\x03A\x03A\x03B\x03B\x03B\x03B\x05B\u03CA','\nB\x03B\x03B\x03B\x03B\x03B\x05B\u03D1\nB\x03B\x03','B\x03B\x03B\x05B\u03D7\nB\x03B\x03B\x03B\x03B\x03C\x03','C\x03C\x03C\x05C\u03E1\nC\x03C\x03C\x05C\u03E5\nC\x03','C\x03C\x03C\x03C\x05C\u03EB\nC\x03C\x03C\x03C\x03C\x03','D\x03D\x05D\u03F3\nD\x03D\x03D\x03D\x03D\x03D\x03D\x03','D\x03D\x03D\x05D\u03FE\nD\x03D\x03D\x03D\x03D\x05D\u0404','\nD\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x03','D\x05D\u0410\nD\x03D\x03D\x03D\x03D\x05D\u0416\nD\x03','D\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x05','D\u0422\nD\x03D\x03D\x05D\u0426\nD\x03E\x03E\x03E\x03','E\x03E\x03E\x03E\x03E\x05E\u0430\nE\x03E\x03E\x03E\x03','E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x05E\u043D\nE\x03','F\x03F\x05F\u0441\nF\x03F\x03F\x05F\u0445\nF\x03F\x03','F\x07F\u0449\nF\fF\x0EF\u044C\x0BF\x03F\x05F\u044F\nF\x03','F\x05F\u0452\nF\x03G\x03G\x05G\u0456\nG\x03G\x03G\x03','G\x03G\x03G\x03G\x03H\x03H\x05H\u0460\nH\x03H\x03H\x03','H\x07H\u0465\nH\fH\x0EH\u0468\x0BH\x03I\x03I\x03I\x03','I\x03I\x03I\x03I\x03I\x03I\x03I\x05I\u0474\nI\x03J\x03','J\x05J\u0478\nJ\x03J\x03J\x03K\x03K\x03K\x03K\x05K\u0480','\nK\x03K\x03K\x03L\x03L\x05L\u0486\nL\x03L\x03L\x05','L\u048A\nL\x03L\x03L\x05L\u048E\nL\x03L\x07L\u0491\nL\fL\x0E','L\u0494\x0BL\x03M\x03M\x05M\u0498\nM\x03M\x03M\x05M\u049C','\nM\x03M\x03M\x03M\x03M\x05M\u04A2\nM\x03M\x03M\x05','M\u04A6\nM\x03M\x03M\x03M\x03M\x05M\u04AC\nM\x03M\x03','M\x05M\u04B0\nM\x03M\x03M\x03M\x03M\x05M\u04B6\nM\x03','M\x03M\x05M\u04BA\nM\x03N\x03N\x05N\u04BE\nN\x03N\x03','N\x05N\u04C2\nN\x03N\x03N\x05N\u04C6\nN\x03N\x03N\x05','N\u04CA\nN\x03N\x07N\u04CD\nN\fN\x0EN\u04D0\x0BN\x03O\x03','O\x03O\x03O\x05O\u04D6\nO\x03O\x03O\x05O\u04DA\nO\x03','O\x07O\u04DD\nO\fO\x0EO\u04E0\x0BO\x03P\x03P\x03P\x03','P\x05P\u04E6\nP\x03Q\x03Q\x05Q\u04EA\nQ\x03Q\x03Q\x05','Q\u04EE\nQ\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x05Q\u04F6\n','Q\x03Q\x03Q\x03Q\x06Q\u04FB\nQ\rQ\x0EQ\u04FC\x03Q\x05','Q\u0500\nQ\x03Q\x03Q\x03R\x03R\x05R\u0506\nR\x03R\x05','R\u0509\nR\x03R\x03R\x03R\x05R\u050E\nR\x03R\x05R\u0511','\nR\x03S\x03S\x05S\u0515\nS\x03S\x05S\u0518\nS\x03S\x05','S\u051B\nS\x03S\x03S\x03T\x03T\x03T\x05T\u0522\nT\x03','T\x03T\x05T\u0526\nT\x03T\x03T\x05T\u052A\nT\x03U\x03','U\x05U\u052E\nU\x03U\x05U\u0531\nU\x03V\x03V\x05V\u0535','\nV\x03V\x03V\x05V\u0539\nV\x03V\x07V\u053C\nV\fV\x0EV\u053F','\x0BV\x03V\x03V\x05V\u0543\nV\x03V\x03V\x05V\u0547\nV','\x03V\x07V\u054A\nV\fV\x0EV\u054D\x0BV\x03V\x05V\u0550\n','V\x03W\x03W\x03W\x03W\x03W\x03W\x03W\x05W\u0559\nW\x03','X\x03X\x03X\x03X\x05X\u055F\nX\x03X\x05X\u0562\nX\x03','Y\x03Y\x05Y\u0566\nY\x03Y\x05Y\u0569\nY\x03Z\x03Z\x03','Z\x03[\x03[\x05[\u0570\n[\x03[\x05[\u0573\n[\x03[\x05','[\u0576\n[\x03[\x03[\x05[\u057A\n[\x03[\x07[\u057D\n[\f[\x0E','[\u0580\x0B[\x03[\x05[\u0583\n[\x03[\x03[\x03\\\x03\\','\x03\\\x03\\\x05\\\u058B\n\\\x03\\\x03\\\x05\\\u058F\n\\','\x03\\\x07\\\u0592\n\\\f\\\x0E\\\u0595\x0B\\\x03\\\x03\\','\x05\\\u0599\n\\\x03]\x03]\x05]\u059D\n]\x03^\x03^\x03','^\x03^\x03^\x03^\x03_\x03_\x03`\x03`\x03a\x03a\x03','a\x03a\x03a\x03a\x05a\u05AF\na\x03a\x03a\x05a\u05B3\n','a\x03a\x07a\u05B6\na\fa\x0Ea\u05B9\x0Ba\x03b\x03b\x03','b\x03b\x03c\x03c\x03c\x03c\x03d\x03d\x05d\u05C5\nd\x03','d\x03d\x05d\u05C9\nd\x05d\u05CB\nd\x03e\x05e\u05CE\ne\x03','e\x03e\x03e\x03e\x03e\x03e\x03e\x05e\u05D7\ne\x03e\x03','e\x05e\u05DB\ne\x03e\x03e\x05e\u05DF\ne\x03e\x03e\x03','e\x03e\x03e\x03e\x03e\x03e\x03e\x03e\x05e\u05EB\ne\x03','e\x03e\x05e\u05EF\ne\x03e\x07e\u05F2\ne\fe\x0Ee\u05F5\x0B','e\x03e\x03e\x03e\x03e\x03e\x03e\x03e\x05e\u05FE\ne\x03','f\x03f\x03f\x03f\x05f\u0604\nf\x03f\x03f\x05f\u0608\n','f\x03f\x07f\u060B\nf\ff\x0Ef\u060E\x0Bf\x03f\x05f\u0611','\nf\x03g\x03g\x05g\u0615\ng\x03g\x03g\x05g\u0619\ng\x03','g\x03g\x03h\x03h\x05h\u061F\nh\x03i\x03i\x05i\u0623\n','i\x03i\x03i\x03i\x05i\u0628\ni\x03j\x03j\x03j\x03j\x05','j\u062E\nj\x03k\x03k\x03k\x03k\x03k\x03k\x03k\x05k\u0637','\nk\x03k\x03k\x03l\x03l\x03l\x03l\x03l\x05l\u0640\n','l\x03l\x03l\x03m\x03m\x03m\x03m\x05m\u0648\nm\x03m\x03','m\x03n\x03n\x05n\u064E\nn\x03n\x03n\x05n\u0652\nn\x03','n\x07n\u0655\nn\fn\x0En\u0658\x0Bn\x03o\x03o\x03o\x03','o\x03p\x03p\x05p\u0660\np\x03p\x03p\x05p\u0664\np\x03','p\x07p\u0667\np\fp\x0Ep\u066A\x0Bp\x03q\x03q\x05q\u066E','\nq\x03q\x03q\x05q\u0672\nq\x03q\x03q\x03q\x05q\u0677','\nq\x03r\x03r\x05r\u067B\nr\x03s\x03s\x05s\u067F\ns\x03','s\x07s\u0682\ns\fs\x0Es\u0685\x0Bs\x03s\x03s\x03s\x03','s\x05s\u068B\ns\x03t\x03t\x05t\u068F\nt\x03t\x03t\x05','t\u0693\nt\x05t\u0695\nt\x03t\x03t\x05t\u0699\nt\x05t\u069B','\nt\x03t\x03t\x05t\u069F\nt\x05t\u06A1\nt\x03t\x03t\x03','u\x03u\x05u\u06A7\nu\x03u\x03u\x03v\x03v\x05v\u06AD\n','v\x03v\x05v\u06B0\nv\x03v\x05v\u06B3\nv\x03v\x03v\x03','w\x03w\x05w\u06B9\nw\x03w\x03w\x03w\x05w\u06BE\nw\x03','x\x03x\x05x\u06C2\nx\x03x\x03x\x03x\x05x\u06C7\nx\x03','y\x03y\x05y\u06CB\ny\x03y\x03y\x05y\u06CF\ny\x05y\u06D1','\ny\x03y\x03y\x05y\u06D5\ny\x05y\u06D7\ny\x03y\x05y\u06DA','\ny\x03y\x03y\x05y\u06DE\ny\x05y\u06E0\ny\x03y\x03y\x03','z\x03z\x05z\u06E6\nz\x03{\x03{\x05{\u06EA\n{\x03{\x03','{\x03|\x03|\x05|\u06F0\n|\x03|\x03|\x07|\u06F4\n|\f|\x0E','|\u06F7\x0B|\x03}\x03}\x03}\x03~\x05~\u06FD\n~\x03~\x03','~\x03\x7F\x03\x7F\x05\x7F\u0703\n\x7F\x03\x7F\x07','\x7F\u0706\n\x7F\f\x7F\x0E\x7F\u0709\x0B\x7F\x03\x80','\x03\x80\x03\x80\x03\x81\x03\x81\x05\x81\u0710\n','\x81\x03\x81\x03\x81\x05\x81\u0714\n\x81\x05\x81','\u0716\n\x81\x03\x81\x03\x81\x05\x81\u071A\n\x81\x03','\x81\x03\x81\x05\x81\u071E\n\x81\x05\x81\u0720\n\x81','\x05\x81\u0722\n\x81\x03\x82\x03\x82\x03\x83\x03','\x83\x03\x84\x03\x84\x03\x85\x03\x85\x03\x85\x03','\x85\x03\x85\x07\x85\u072F\n\x85\f\x85\x0E\x85\u0732','\x0B\x85\x03\x86\x03\x86\x03\x86\x03\x86\x03\x86','\x07\x86\u0739\n\x86\f\x86\x0E\x86\u073C\x0B\x86\x03','\x87\x03\x87\x03\x87\x03\x87\x03\x87\x07\x87\u0743','\n\x87\f\x87\x0E\x87\u0746\x0B\x87\x03\x88\x03\x88','\x05\x88\u074A\n\x88\x07\x88\u074C\n\x88\f\x88\x0E\x88','\u074F\x0B\x88\x03\x88\x03\x88\x03\x89\x03\x89\x05','\x89\u0755\n\x89\x03\x89\x07\x89\u0758\n\x89\f\x89\x0E','\x89\u075B\x0B\x89\x03\x8A\x03\x8A\x05\x8A\u075F\n','\x8A\x03\x8A\x03\x8A\x05\x8A\u0763\n\x8A\x03\x8A','\x03\x8A\x05\x8A\u0767\n\x8A\x03\x8A\x03\x8A\x05','\x8A\u076B\n\x8A\x03\x8A\x07\x8A\u076E\n\x8A\f\x8A\x0E','\x8A\u0771\x0B\x8A\x03\x8B\x03\x8B\x05\x8B\u0775\n','\x8B\x03\x8B\x03\x8B\x05\x8B\u0779\n\x8B\x03\x8B','\x03\x8B\x05\x8B\u077D\n\x8B\x03\x8B\x03\x8B\x05','\x8B\u0781\n\x8B\x03\x8B\x03\x8B\x05\x8B\u0785\n\x8B','\x03\x8B\x03\x8B\x05\x8B\u0789\n\x8B\x03\x8B\x07','\x8B\u078C\n\x8B\f\x8B\x0E\x8B\u078F\x0B\x8B\x03\x8C','\x03\x8C\x05\x8C\u0793\n\x8C\x03\x8C\x03\x8C\x05','\x8C\u0797\n\x8C\x03\x8C\x07\x8C\u079A\n\x8C\f\x8C\x0E','\x8C\u079D\x0B\x8C\x03\x8D\x03\x8D\x05\x8D\u07A1\n','\x8D\x07\x8D\u07A3\n\x8D\f\x8D\x0E\x8D\u07A6\x0B\x8D','\x03\x8D\x03\x8D\x03\x8E\x03\x8E\x05\x8E\u07AC\n','\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x05','\x8E\u07B3\n\x8E\x03\x8E\x03\x8E\x05\x8E\u07B7\n\x8E','\x03\x8E\x03\x8E\x05\x8E\u07BB\n\x8E\x03\x8E\x03','\x8E\x05\x8E\u07BF\n\x8E\x03\x8E\x03\x8E\x03\x8E','\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E','\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x05\x8E\u07CE\n','\x8E\x03\x8E\x05\x8E\u07D1\n\x8E\x03\x8E\x03\x8E','\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E','\x03\x8E\x03\x8E\x03\x8E\x07\x8E\u07DE\n\x8E\f\x8E','\x0E\x8E\u07E1\x0B\x8E\x03\x8F\x03\x8F\x05\x8F\u07E5','\n\x8F\x03\x8F\x03\x8F\x05\x8F\u07E9\n\x8F\x07\x8F','\u07EB\n\x8F\f\x8F\x0E\x8F\u07EE\x0B\x8F\x03\x90\x03','\x90\x05\x90\u07F2\n\x90\x03\x90\x03\x90\x05\x90','\u07F6\n\x90\x03\x90\x03\x90\x05\x90\u07FA\n\x90\x03','\x90\x03\x90\x03\x91\x03\x91\x03\x92\x03\x92\x05','\x92\u0802\n\x92\x03\x92\x03\x92\x05\x92\u0806\n\x92','\x03\x92\x03\x92\x05\x92\u080A\n\x92\x03\x92\x03','\x92\x03\x93\x03\x93\x03\x94\x03\x94\x05\x94\u0812','\n\x94\x03\x94\x03\x94\x05\x94\u0816\n\x94\x03\x94','\x03\x94\x05\x94\u081A\n\x94\x03\x94\x03\x94\x03','\x95\x03\x95\x03\x96\x03\x96\x05\x96\u0822\n\x96','\x03\x96\x03\x96\x05\x96\u0826\n\x96\x03\x96\x03','\x96\x05\x96\u082A\n\x96\x03\x96\x03\x96\x03\x97','\x03\x97\x03\x98\x03\x98\x05\x98\u0832\n\x98\x03','\x98\x03\x98\x05\x98\u0836\n\x98\x03\x98\x03\x98','\x05\x98\u083A\n\x98\x03\x98\x03\x98\x03\x99\x03','\x99\x03\x9A\x03\x9A\x05\x9A\u0842\n\x9A\x03\x9A','\x03\x9A\x05\x9A\u0846\n\x9A\x03\x9A\x03\x9A\x05','\x9A\u084A\n\x9A\x03\x9A\x03\x9A\x03\x9B\x03\x9B','\x03\x9C\x03\x9C\x05\x9C\u0852\n\x9C\x03\x9C\x03','\x9C\x05\x9C\u0856\n\x9C\x03\x9C\x03\x9C\x05\x9C','\u085A\n\x9C\x03\x9C\x03\x9C\x05\x9C\u085E\n\x9C\x03','\x9C\x05\x9C\u0861\n\x9C\x03\x9C\x05\x9C\u0864\n\x9C','\x03\x9C\x03\x9C\x03\x9D\x03\x9D\x03\x9E\x03\x9E','\x05\x9E\u086C\n\x9E\x03\x9E\x03\x9E\x05\x9E\u0870','\n\x9E\x03\x9E\x03\x9E\x05\x9E\u0874\n\x9E\x03\x9E','\x03\x9E\x05\x9E\u0878\n\x9E\x03\x9E\x03\x9E\x05','\x9E\u087C\n\x9E\x03\x9E\x03\x9E\x05\x9E\u0880\n\x9E','\x03\x9E\x03\x9E\x05\x9E\u0884\n\x9E\x03\x9E\x03','\x9E\x05\x9E\u0888\n\x9E\x03\x9E\x03\x9E\x05\x9E','\u088C\n\x9E\x03\x9E\x03\x9E\x03\x9F\x03\x9F\x03','\xA0\x03\xA0\x05\xA0\u0894\n\xA0\x03\xA0\x03\xA0','\x05\xA0\u0898\n\xA0\x03\xA0\x03\xA0\x05\xA0\u089C','\n\xA0\x03\xA0\x03\xA0\x03\xA0\x03\xA0\x05\xA0','\u08A2\n\xA0\x03\xA0\x03\xA0\x05\xA0\u08A6\n\xA0\x03','\xA0\x03\xA0\x05\xA0\u08AA\n\xA0\x03\xA0\x03\xA0','\x05\xA0\u08AE\n\xA0\x03\xA1\x03\xA1\x03\xA2\x03','\xA2\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x05','\xA3\u08B9\n\xA3\x03\xA3\x03\xA3\x05\xA3\u08BD\n\xA3','\x03\xA3\x03\xA3\x05\xA3\u08C1\n\xA3\x03\xA3\x03','\xA3\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x03','\xA3\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x03','\xA3\x03\xA3\x03\xA3\x05\xA3\u08D3\n\xA3\x03\xA4','\x03\xA4\x03\xA4\x03\xA4\x03\xA4\x03\xA4\x03\xA4','\x05\xA4\u08DC\n\xA4\x03\xA5\x03\xA5\x03\xA6\x03','\xA6\x03\xA7\x03\xA7\x05\xA7\u08E4\n\xA7\x03\xA7','\x03\xA7\x05\xA7\u08E8\n\xA7\x03\xA7\x03\xA7\x05','\xA7\u08EC\n\xA7\x03\xA7\x03\xA7\x05\xA7\u08F0\n\xA7','\x07\xA7\u08F2\n\xA7\f\xA7\x0E\xA7\u08F5\x0B\xA7\x05','\xA7\u08F7\n\xA7\x03\xA7\x03\xA7\x03\xA8\x03\xA8','\x05\xA8\u08FD\n\xA8\x03\xA8\x03\xA8\x03\xA8\x05','\xA8\u0902\n\xA8\x03\xA8\x03\xA8\x03\xA8\x05\xA8','\u0907\n\xA8\x03\xA8\x03\xA8\x03\xA8\x05\xA8\u090C','\n\xA8\x03\xA8\x03\xA8\x03\xA8\x05\xA8\u0911\n\xA8','\x03\xA8\x03\xA8\x03\xA8\x05\xA8\u0916\n\xA8\x03','\xA8\x03\xA8\x03\xA8\x05\xA8\u091B\n\xA8\x03\xA8','\x05\xA8\u091E\n\xA8\x03\xA9\x03\xA9\x05\xA9\u0922','\n\xA9\x03\xA9\x03\xA9\x05\xA9\u0926\n\xA9\x03\xA9','\x03\xA9\x03\xAA\x03\xAA\x05\xAA\u092C\n\xAA\x03','\xAA\x06\xAA\u092F\n\xAA\r\xAA\x0E\xAA\u0930\x03\xAB','\x03\xAB\x05\xAB\u0935\n\xAB\x03\xAB\x05\xAB\u0938','\n\xAB\x03\xAC\x03\xAC\x03\xAC\x03\xAC\x03\xAC','\x03\xAC\x03\xAD\x03\xAD\x05\xAD\u0942\n\xAD\x03','\xAD\x03\xAD\x05\xAD\u0946\n\xAD\x03\xAD\x03\xAD','\x05\xAD\u094A\n\xAD\x05\xAD\u094C\n\xAD\x03\xAD\x03','\xAD\x05\xAD\u0950\n\xAD\x03\xAD\x03\xAD\x05\xAD','\u0954\n\xAD\x03\xAD\x03\xAD\x05\xAD\u0958\n\xAD\x07','\xAD\u095A\n\xAD\f\xAD\x0E\xAD\u095D\x0B\xAD\x05\xAD','\u095F\n\xAD\x03\xAD\x03\xAD\x03\xAE\x03\xAE\x03','\xAE\x03\xAF\x03\xAF\x03\xB0\x03\xB0\x03\xB1\x03','\xB1\x05\xB1\u096C\n\xB1\x03\xB1\x03\xB1\x05\xB1','\u0970\n\xB1\x03\xB1\x03\xB1\x05\xB1\u0974\n\xB1\x03','\xB1\x05\xB1\u0977\n\xB1\x03\xB1\x05\xB1\u097A\n\xB1','\x03\xB1\x03\xB1\x03\xB2\x03\xB2\x05\xB2\u0980\n','\xB2\x03\xB2\x03\xB2\x05\xB2\u0984\n\xB2\x03\xB2','\x03\xB2\x05\xB2\u0988\n\xB2\x05\xB2\u098A\n\xB2\x03','\xB2\x03\xB2\x05\xB2\u098E\n\xB2\x03\xB2\x03\xB2','\x05\xB2\u0992\n\xB2\x03\xB2\x03\xB2\x05\xB2\u0996','\n\xB2\x05\xB2\u0998\n\xB2\x03\xB2\x03\xB2\x05\xB2','\u099C\n\xB2\x03\xB2\x03\xB2\x05\xB2\u09A0\n\xB2\x03','\xB2\x03\xB2\x03\xB3\x03\xB3\x05\xB3\u09A6\n\xB3','\x03\xB3\x03\xB3\x03\xB4\x03\xB4\x05\xB4\u09AC\n','\xB4\x03\xB4\x06\xB4\u09AF\n\xB4\r\xB4\x0E\xB4\u09B0','\x03\xB4\x03\xB4\x05\xB4\u09B5\n\xB4\x03\xB4\x03','\xB4\x05\xB4\u09B9\n\xB4\x03\xB4\x06\xB4\u09BC\n\xB4','\r\xB4\x0E\xB4\u09BD\x05\xB4\u09C0\n\xB4\x03\xB4\x05','\xB4\u09C3\n\xB4\x03\xB4\x03\xB4\x05\xB4\u09C7\n\xB4','\x03\xB4\x05\xB4\u09CA\n\xB4\x03\xB4\x05\xB4\u09CD','\n\xB4\x03\xB4\x03\xB4\x03\xB5\x03\xB5\x05\xB5','\u09D3\n\xB5\x03\xB5\x03\xB5\x05\xB5\u09D7\n\xB5\x03','\xB5\x03\xB5\x05\xB5\u09DB\n\xB5\x03\xB5\x03\xB5','\x03\xB6\x03\xB6\x03\xB7\x03\xB7\x05\xB7\u09E3\n','\xB7\x03\xB8\x03\xB8\x05\xB8\u09E7\n\xB8\x03\xB8','\x03\xB8\x05\xB8\u09EB\n\xB8\x03\xB8\x03\xB8\x05','\xB8\u09EF\n\xB8\x03\xB8\x03\xB8\x05\xB8\u09F3\n\xB8','\x07\xB8\u09F5\n\xB8\f\xB8\x0E\xB8\u09F8\x0B\xB8\x05','\xB8\u09FA\n\xB8\x03\xB8\x03\xB8\x03\xB9\x03\xB9','\x05\xB9\u0A00\n\xB9\x03\xB9\x03\xB9\x05\xB9\u0A04','\n\xB9\x03\xB9\x05\xB9\u0A07\n\xB9\x03\xB9\x05\xB9','\u0A0A\n\xB9\x03\xB9\x03\xB9\x05\xB9\u0A0E\n\xB9\x03','\xB9\x07\xB9\u0A11\n\xB9\f\xB9\x0E\xB9\u0A14\x0B\xB9','\x03\xB9\x05\xB9\u0A17\n\xB9\x03\xB9\x03\xB9\x03','\xBA\x03\xBA\x03\xBA\x03\xBA\x05\xBA\u0A1F\n\xBA','\x03\xBB\x03\xBB\x05\xBB\u0A23\n\xBB\x03\xBB\x03','\xBB\x05\xBB\u0A27\n\xBB\x03\xBB\x03\xBB\x03\xBC','\x03\xBC\x03\xBC\x03\xBD\x03\xBD\x03\xBE\x03\xBE','\x03\xBE\x03\xBF\x03\xBF\x05\xBF\u0A35\n\xBF\x03','\xC0\x03\xC0\x05\xC0\u0A39\n\xC0\x03\xC0\x03\xC0','\x05\xC0\u0A3D\n\xC0\x03\xC0\x03\xC0\x03\xC1\x03','\xC1\x03\xC1\x03\xC2\x03\xC2\x05\xC2\u0A46\n\xC2','\x03\xC3\x03\xC3\x05\xC3\u0A4A\n\xC3\x03\xC3\x03','\xC3\x05\xC3\u0A4E\n\xC3\x03\xC3\x07\xC3\u0A51\n\xC3','\f\xC3\x0E\xC3\u0A54\x0B\xC3\x03\xC4\x03\xC4\x05','\xC4\u0A58\n\xC4\x03\xC4\x06\xC4\u0A5B\n\xC4\r\xC4\x0E','\xC4\u0A5C\x03\xC5\x03\xC5\x05\xC5\u0A61\n\xC5\x03','\xC5\x03\xC5\x05\xC5\u0A65\n\xC5\x03\xC5\x07\xC5','\u0A68\n\xC5\f\xC5\x0E\xC5\u0A6B\x0B\xC5\x03\xC6\x03','\xC6\x03\xC7\x03\xC7\x03\xC8\x03\xC8\x03\xC9\x03','\xC9\x03\xC9\x07\xC9\u0A76\n\xC9\f\xC9\x0E\xC9\u0A79','\x0B\xC9\x03\xCA\x03\xCA\x03\xCB\x03\xCB\x03\xCC','\x03\xCC\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x05\xCD','\u0A85\n\xCD\x03\xCE\x03\xCE\x03\xCE\x04\u019F\u0248','\x02\xCF\x02\x04\x06\b\n\f\x0E\x10\x12\x14\x16\x18','\x1A\x1C\x1E "$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|','~\x80\x82\x84\x86\x88\x8A\x8C\x8E\x90\x92\x94','\x96\x98\x9A\x9C\x9E\xA0\xA2\xA4\xA6\xA8\xAA\xAC','\xAE\xB0\xB2\xB4\xB6\xB8\xBA\xBC\xBE\xC0\xC2\xC4','\xC6\xC8\xCA\xCC\xCE\xD0\xD2\xD4\xD6\xD8\xDA\xDC','\xDE\xE0\xE2\xE4\xE6\xE8\xEA\xEC\xEE\xF0\xF2\xF4','\xF6\xF8\xFA\xFC\xFE\u0100\u0102\u0104\u0106\u0108\u010A\u010C','\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124','\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0138\u013A\u013C','\u013E\u0140\u0142\u0144\u0146\u0148\u014A\u014C\u014E\u0150\u0152\u0154','\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C','\u016E\u0170\u0172\u0174\u0176\u0178\u017A\u017C\u017E\u0180\u0182\u0184','\u0186\u0188\u018A\u018C\u018E\u0190\u0192\u0194\u0196\u0198\u019A\x02','\x0E\x04\x02\t\t\x0F\x0F\x03\x02`c\x03\x02hi\x04','\x02\x05\x05\x0F\x0F\x03\x02{|\x05\x02uu\x95\x95','\x98\x98\x03\x02\x89\x8B\x03\x02\x93\x94\x04\x02','  %(\x04\x02!!),\x04\x02\x05\x05-7\x03\x028\x85\x02','\u0BB3\x02\u01A3\x03\x02\x02\x02\x04\u01A5\x03\x02\x02','\x02\x06\u01B3\x03\x02\x02\x02\b\u01BC\x03\x02\x02','\x02\n\u01C1\x03\x02\x02\x02\f\u01CA\x03\x02\x02\x02','\x0E\u01DC\x03\x02\x02\x02\x10\u01DE\x03\x02\x02\x02','\x12\u01E8\x03\x02\x02\x02\x14\u01EA\x03\x02\x02\x02','\x16\u01FE\x03\x02\x02\x02\x18\u0201\x03\x02\x02\x02','\x1A\u0207\x03\x02\x02\x02\x1C\u020F\x03\x02\x02\x02','\x1E\u0217\x03\x02\x02\x02 \u0219\x03\x02\x02\x02','"\u0221\x03\x02\x02\x02$\u0223\x03\x02\x02\x02&\u0228','\x03\x02\x02\x02(\u022A\x03\x02\x02\x02*\u022D\x03','\x02\x02\x02,\u0230\x03\x02\x02\x02.\u0238\x03\x02','\x02\x020\u0241\x03\x02\x02\x022\u024C\x03\x02\x02','\x024\u0250\x03\x02\x02\x026\u026E\x03\x02\x02\x02','8\u0270\x03\x02\x02\x02:\u0296\x03\x02\x02\x02<\u029E','\x03\x02\x02\x02>\u02A0\x03\x02\x02\x02@\u02AE\x03','\x02\x02\x02B\u02B5\x03\x02\x02\x02D\u02BD\x03\x02','\x02\x02F\u02C6\x03\x02\x02\x02H\u02CC\x03\x02\x02','\x02J\u02CE\x03\x02\x02\x02L\u02DA\x03\x02\x02\x02','N\u02DC\x03\x02\x02\x02P\u02DE\x03\x02\x02\x02R\u02E0','\x03\x02\x02\x02T\u02EC\x03\x02\x02\x02V\u02F0\x03','\x02\x02\x02X\u02F2\x03\x02\x02\x02Z\u02FC\x03\x02','\x02\x02\\\u0302\x03\x02\x02\x02^\u030C\x03\x02\x02','\x02`\u0315\x03\x02\x02\x02b\u032B\x03\x02\x02\x02','d\u033B\x03\x02\x02\x02f\u0347\x03\x02\x02\x02h\u0349','\x03\x02\x02\x02j\u034D\x03\x02\x02\x02l\u0351\x03','\x02\x02\x02n\u0355\x03\x02\x02\x02p\u0359\x03\x02','\x02\x02r\u035D\x03\x02\x02\x02t\u0361\x03\x02\x02','\x02v\u0365\x03\x02\x02\x02x\u0369\x03\x02\x02\x02','z\u036D\x03\x02\x02\x02|\u0371\x03\x02\x02\x02~\u0385','\x03\x02\x02\x02\x80\u03A0\x03\x02\x02\x02\x82\u03C5','\x03\x02\x02\x02\x84\u03DC\x03\x02\x02\x02\x86\u0425','\x03\x02\x02\x02\x88\u0427\x03\x02\x02\x02\x8A\u0440','\x03\x02\x02\x02\x8C\u0453\x03\x02\x02\x02\x8E\u045D','\x03\x02\x02\x02\x90\u0473\x03\x02\x02\x02\x92\u0475','\x03\x02\x02\x02\x94\u047B\x03\x02\x02\x02\x96\u0483','\x03\x02\x02\x02\x98\u04B9\x03\x02\x02\x02\x9A\u04BD','\x03\x02\x02\x02\x9C\u04D1\x03\x02\x02\x02\x9E\u04E5','\x03\x02\x02\x02\xA0\u04E7\x03\x02\x02\x02\xA2\u0503','\x03\x02\x02\x02\xA4\u0512\x03\x02\x02\x02\xA6\u051E','\x03\x02\x02\x02\xA8\u052B\x03\x02\x02\x02\xAA\u054F','\x03\x02\x02\x02\xAC\u0558\x03\x02\x02\x02\xAE\u055A','\x03\x02\x02\x02\xB0\u0563\x03\x02\x02\x02\xB2\u056A','\x03\x02\x02\x02\xB4\u056D\x03\x02\x02\x02\xB6\u0586','\x03\x02\x02\x02\xB8\u059C\x03\x02\x02\x02\xBA\u059E','\x03\x02\x02\x02\xBC\u05A4\x03\x02\x02\x02\xBE\u05A6','\x03\x02\x02\x02\xC0\u05A8\x03\x02\x02\x02\xC2\u05BA','\x03\x02\x02\x02\xC4\u05BE\x03\x02\x02\x02\xC6\u05C2','\x03\x02\x02\x02\xC8\u05CD\x03\x02\x02\x02\xCA\u05FF','\x03\x02\x02\x02\xCC\u0612\x03\x02\x02\x02\xCE\u061E','\x03\x02\x02\x02\xD0\u0620\x03\x02\x02\x02\xD2\u0629','\x03\x02\x02\x02\xD4\u062F\x03\x02\x02\x02\xD6\u063A','\x03\x02\x02\x02\xD8\u0643\x03\x02\x02\x02\xDA\u064B','\x03\x02\x02\x02\xDC\u0659\x03\x02\x02\x02\xDE\u065D','\x03\x02\x02\x02\xE0\u0676\x03\x02\x02\x02\xE2\u067A','\x03\x02\x02\x02\xE4\u068A\x03\x02\x02\x02\xE6\u068C','\x03\x02\x02\x02\xE8\u06A4\x03\x02\x02\x02\xEA\u06AA','\x03\x02\x02\x02\xEC\u06BD\x03\x02\x02\x02\xEE\u06C6','\x03\x02\x02\x02\xF0\u06C8\x03\x02\x02\x02\xF2\u06E5','\x03\x02\x02\x02\xF4\u06E7\x03\x02\x02\x02\xF6\u06ED','\x03\x02\x02\x02\xF8\u06F8\x03\x02\x02\x02\xFA\u06FC','\x03\x02\x02\x02\xFC\u0700\x03\x02\x02\x02\xFE\u070A','\x03\x02\x02\x02\u0100\u070D\x03\x02\x02\x02\u0102\u0723','\x03\x02\x02\x02\u0104\u0725\x03\x02\x02\x02\u0106\u0727','\x03\x02\x02\x02\u0108\u0729\x03\x02\x02\x02\u010A\u0733','\x03\x02\x02\x02\u010C\u073D\x03\x02\x02\x02\u010E\u074D','\x03\x02\x02\x02\u0110\u0752\x03\x02\x02\x02\u0112\u075C','\x03\x02\x02\x02\u0114\u0772\x03\x02\x02\x02\u0116\u0790','\x03\x02\x02\x02\u0118\u07A4\x03\x02\x02\x02\u011A\u07A9','\x03\x02\x02\x02\u011C\u07E2\x03\x02\x02\x02\u011E\u07EF','\x03\x02\x02\x02\u0120\u07FD\x03\x02\x02\x02\u0122\u07FF','\x03\x02\x02\x02\u0124\u080D\x03\x02\x02\x02\u0126\u080F','\x03\x02\x02\x02\u0128\u081D\x03\x02\x02\x02\u012A\u081F','\x03\x02\x02\x02\u012C\u082D\x03\x02\x02\x02\u012E\u082F','\x03\x02\x02\x02\u0130\u083D\x03\x02\x02\x02\u0132\u083F','\x03\x02\x02\x02\u0134\u084D\x03\x02\x02\x02\u0136\u084F','\x03\x02\x02\x02\u0138\u0867\x03\x02\x02\x02\u013A\u0869','\x03\x02\x02\x02\u013C\u088F\x03\x02\x02\x02\u013E\u08AD','\x03\x02\x02\x02\u0140\u08AF\x03\x02\x02\x02\u0142\u08B1','\x03\x02\x02\x02\u0144\u08D2\x03\x02\x02\x02\u0146\u08DB','\x03\x02\x02\x02\u0148\u08DD\x03\x02\x02\x02\u014A\u08DF','\x03\x02\x02\x02\u014C\u08E1\x03\x02\x02\x02\u014E\u091D','\x03\x02\x02\x02\u0150\u091F\x03\x02\x02\x02\u0152\u0929','\x03\x02\x02\x02\u0154\u0932\x03\x02\x02\x02\u0156\u0939','\x03\x02\x02\x02\u0158\u093F\x03\x02\x02\x02\u015A\u0962','\x03\x02\x02\x02\u015C\u0965\x03\x02\x02\x02\u015E\u0967','\x03\x02\x02\x02\u0160\u0969\x03\x02\x02\x02\u0162\u097D','\x03\x02\x02\x02\u0164\u09A3\x03\x02\x02\x02\u0166\u09BF','\x03\x02\x02\x02\u0168\u09D0\x03\x02\x02\x02\u016A\u09DE','\x03\x02\x02\x02\u016C\u09E2\x03\x02\x02\x02\u016E\u09E4','\x03\x02\x02\x02\u0170\u09FD\x03\x02\x02\x02\u0172\u0A1E','\x03\x02\x02\x02\u0174\u0A20\x03\x02\x02\x02\u0176\u0A2A','\x03\x02\x02\x02\u0178\u0A2D\x03\x02\x02\x02\u017A\u0A2F','\x03\x02\x02\x02\u017C\u0A34\x03\x02\x02\x02\u017E\u0A36','\x03\x02\x02\x02\u0180\u0A40\x03\x02\x02\x02\u0182\u0A45','\x03\x02\x02\x02\u0184\u0A47\x03\x02\x02\x02\u0186\u0A55','\x03\x02\x02\x02\u0188\u0A5E\x03\x02\x02\x02\u018A\u0A6C','\x03\x02\x02\x02\u018C\u0A6E\x03\x02\x02\x02\u018E\u0A70','\x03\x02\x02\x02\u0190\u0A77\x03\x02\x02\x02\u0192\u0A7A','\x03\x02\x02\x02\u0194\u0A7C\x03\x02\x02\x02\u0196\u0A7E','\x03\x02\x02\x02\u0198\u0A84\x03\x02\x02\x02\u019A\u0A86','\x03\x02\x02\x02\u019C\u019E\x0B\x02\x02\x02\u019D\u019C','\x03\x02\x02\x02\u019E\u01A1\x03\x02\x02\x02\u019F\u01A0','\x03\x02\x02\x02\u019F\u019D\x03\x02\x02\x02\u01A0\u01A4','\x03\x02\x02\x02\u01A1\u019F\x03\x02\x02\x02\u01A2\u01A4','\x05\x06\x04\x02\u01A3\u019F\x03\x02\x02\x02\u01A3\u01A2','\x03\x02\x02\x02\u01A4\x03\x03\x02\x02\x02\u01A5\u01AA','\x05\x02\x02\x02\u01A6\u01A7\x07\x03\x02\x02\u01A7\u01A9','\x05\x02\x02\x02\u01A8\u01A6\x03\x02\x02\x02\u01A9\u01AC','\x03\x02\x02\x02\u01AA\u01A8\x03\x02\x02\x02\u01AA\u01AB','\x03\x02\x02\x02\u01AB\u01AE\x03\x02\x02\x02\u01AC\u01AA','\x03\x02\x02\x02\u01AD\u01AF\x07\x03\x02\x02\u01AE\u01AD','\x03\x02\x02\x02\u01AE\u01AF\x03\x02\x02\x02\u01AF\u01B0','\x03\x02\x02\x02\u01B0\u01B1\x07\x02\x02\x03\u01B1\x05','\x03\x02\x02\x02\u01B2\u01B4\x07\x99\x02\x02\u01B3\u01B2','\x03\x02\x02\x02\u01B3\u01B4\x03\x02\x02\x02\u01B4\u01B7','\x03\x02\x02\x02\u01B5\u01B8\x05D#\x02\u01B6\u01B8\x05','\b\x05\x02\u01B7\u01B5\x03\x02\x02\x02\u01B7\u01B6\x03','\x02\x02\x02\u01B8\u01BA\x03\x02\x02\x02\u01B9\u01BB\x07','\x99\x02\x02\u01BA\u01B9\x03\x02\x02\x02\u01BA\u01BB\x03','\x02\x02\x02\u01BB\x07\x03\x02\x02\x02\u01BC\u01BF\x05','\n\x06\x02\u01BD\u01BE\x07\x99\x02\x02\u01BE\u01C0\x05','\f\x07\x02\u01BF\u01BD\x03\x02\x02\x02\u01BF\u01C0\x03','\x02\x02\x02\u01C0\t\x03\x02\x02\x02\u01C1\u01C2\x07','\x04\x02\x02\u01C2\u01C7\x05\u0198\xCD\x02\u01C3\u01C4\x07','\x05\x02\x02\u01C4\u01C6\x05\u0198\xCD\x02\u01C5\u01C3\x03','\x02\x02\x02\u01C6\u01C9\x03\x02\x02\x02\u01C7\u01C5\x03','\x02\x02\x02\u01C7\u01C8\x03\x02\x02\x02\u01C8\x0B\x03','\x02\x02\x02\u01C9\u01C7\x03\x02\x02\x02\u01CA\u01CF\x05','\x0E\b\x02\u01CB\u01CC\x07\x99\x02\x02\u01CC\u01CE\x05','\x0E\b\x02\u01CD\u01CB\x03\x02\x02\x02\u01CE\u01D1\x03','\x02\x02\x02\u01CF\u01CD\x03\x02\x02\x02\u01CF\u01D0\x03','\x02\x02\x02\u01D0\r\x03\x02\x02\x02\u01D1\u01CF\x03','\x02\x02\x02\u01D2\u01DD\x05\x12\n\x02\u01D3\u01DD\x05','4\x1B\x02\u01D4\u01DD\x05\x10\t\x02\u01D5\u01DD\x05\u016E','\xB8\x02\u01D6\u01DD\x05> \x02\u01D7\u01DD\x05\u0148\xA5','\x02\u01D8\u01DD\x05\u016C\xB7\x02\u01D9\u01DD\x05\u014A\xA6','\x02\u01DA\u01DD\x05B"\x02\u01DB\u01DD\x05@!\x02\u01DC\u01D2','\x03\x02\x02\x02\u01DC\u01D3\x03\x02\x02\x02\u01DC\u01D4','\x03\x02\x02\x02\u01DC\u01D5\x03\x02\x02\x02\u01DC\u01D6','\x03\x02\x02\x02\u01DC\u01D7\x03\x02\x02\x02\u01DC\u01D8','\x03\x02\x02\x02\u01DC\u01D9\x03\x02\x02\x02\u01DC\u01DA','\x03\x02\x02\x02\u01DC\u01DB\x03\x02\x02\x02\u01DD\x0F','\x03\x02\x02\x02\u01DE\u01E0\x05\u0198\xCD\x02\u01DF\u01E1','\x07\x99\x02\x02\u01E0\u01DF\x03\x02\x02\x02\u01E0\u01E1','\x03\x02\x02\x02\u01E1\u01E2\x03\x02\x02\x02\u01E2\u01E4','\x07\x06\x02\x02\u01E3\u01E5\x07\x99\x02\x02\u01E4\u01E3','\x03\x02\x02\x02\u01E4\u01E5\x03\x02\x02\x02\u01E5\u01E6','\x03\x02\x02\x02\u01E6\u01E7\x05\u0106\x84\x02\u01E7\x11','\x03\x02\x02\x02\u01E8\u01E9\x05\x14\x0B\x02\u01E9\x13','\x03\x02\x02\x02\u01EA\u01EB\x05\x16\f\x02\u01EB\u01ED','\x07\x07\x02\x02\u01EC\u01EE\x05$\x13\x02\u01ED\u01EC','\x03\x02\x02\x02\u01ED\u01EE\x03\x02\x02\x02\u01EE\u01EF','\x03\x02\x02\x02\u01EF\u01F2\x05\x18\r\x02\u01F0\u01F1','\x07\x04\x02\x02\u01F1\u01F3\x05\x1E\x10\x02\u01F2\u01F0','\x03\x02\x02\x02\u01F2\u01F3\x03\x02\x02\x02\u01F3\u01F6','\x03\x02\x02\x02\u01F4\u01F5\x07\b\x02\x02\u01F5\u01F7','\x05 \x11\x02\u01F6\u01F4\x03\x02\x02\x02\u01F6\u01F7','\x03\x02\x02\x02\u01F7\u01F9\x03\x02\x02\x02\u01F8\u01FA','\x05*\x16\x02\u01F9\u01F8\x03\x02\x02\x02\u01F9\u01FA','\x03\x02\x02\x02\u01FA\u01FC\x03\x02\x02\x02\u01FB\u01FD','\x05(\x15\x02\u01FC\u01FB\x03\x02\x02\x02\u01FC\u01FD','\x03\x02\x02\x02\u01FD\x15\x03\x02\x02\x02\u01FE\u01FF','\x050\x19\x02\u01FF\x17\x03\x02\x02\x02\u0200\u0202','\x07\b\x02\x02\u0201\u0200\x03\x02\x02\x02\u0201\u0202','\x03\x02\x02\x02\u0202\u0205\x03\x02\x02\x02\u0203\u0206','\x05\x1A\x0E\x02\u0204\u0206\x05\x1C\x0F\x02\u0205\u0203','\x03\x02\x02\x02\u0205\u0204\x03\x02\x02\x02\u0206\x19','\x03\x02\x02\x02\u0207\u020C\x050\x19\x02\u0208\u0209','\x07\t\x02\x02\u0209\u020B\x050\x19\x02\u020A\u0208\x03','\x02\x02\x02\u020B\u020E\x03\x02\x02\x02\u020C\u020A\x03','\x02\x02\x02\u020C\u020D\x03\x02\x02\x02\u020D\x1B\x03','\x02\x02\x02\u020E\u020C\x03\x02\x02\x02\u020F\u0210\x05','2\x1A\x02\u0210\u0211\x07\t\x02\x02\u0211\u0212\x052\x1A','\x02\u0212\u0213\x07\t\x02\x02\u0213\u0214\x052\x1A\x02','\u0214\u0215\x07\t\x02\x02\u0215\u0216\x052\x1A\x02\u0216','\x1D\x03\x02\x02\x02\u0217\u0218\x052\x1A\x02\u0218','\x1F\x03\x02\x02\x02\u0219\u021E\x050\x19\x02\u021A','\u021B\x07\b\x02\x02\u021B\u021D\x050\x19\x02\u021C\u021A','\x03\x02\x02\x02\u021D\u0220\x03\x02\x02\x02\u021E\u021C','\x03\x02\x02\x02\u021E\u021F\x03\x02\x02\x02\u021F!','\x03\x02\x02\x02\u0220\u021E\x03\x02\x02\x02\u0221\u0222','\x050\x19\x02\u0222#\x03\x02\x02\x02\u0223\u0224\x05','"\x12\x02\u0224\u0225\x07\x04\x02\x02\u0225\u0226\x05','&\x14\x02\u0226\u0227\x07\n\x02\x02\u0227%\x03\x02\x02','\x02\u0228\u0229\x050\x19\x02\u0229\'\x03\x02\x02\x02','\u022A\u022B\x07\x0B\x02\x02\u022B\u022C\x050\x19\x02','\u022C)\x03\x02\x02\x02\u022D\u022E\x07\f\x02\x02\u022E','\u022F\x05,\x17\x02\u022F+\x03\x02\x02\x02\u0230\u0235','\x05.\x18\x02\u0231\u0232\x07\r\x02\x02\u0232\u0234\x05','.\x18\x02\u0233\u0231\x03\x02\x02\x02\u0234\u0237\x03','\x02\x02\x02\u0235\u0233\x03\x02\x02\x02\u0235\u0236\x03','\x02\x02\x02\u0236-\x03\x02\x02\x02\u0237\u0235\x03','\x02\x02\x02\u0238\u023F\x050\x19\x02\u0239\u023D\x07','\x0E\x02\x02\u023A\u023E\x050\x19\x02\u023B\u023E\x05','2\x1A\x02\u023C\u023E\x07\x87\x02\x02\u023D\u023A\x03','\x02\x02\x02\u023D\u023B\x03\x02\x02\x02\u023D\u023C\x03','\x02\x02\x02\u023E\u0240\x03\x02\x02\x02\u023F\u0239\x03','\x02\x02\x02\u023F\u0240\x03\x02\x02\x02\u0240/\x03','\x02\x02\x02\u0241\u0248\x05\u0198\xCD\x02\u0242\u0244\t','\x02\x02\x02\u0243\u0242\x03\x02\x02\x02\u0243\u0244\x03','\x02\x02\x02\u0244\u0245\x03\x02\x02\x02\u0245\u0247\x05','\u0198\xCD\x02\u0246\u0243\x03\x02\x02\x02\u0247\u024A\x03','\x02\x02\x02\u0248\u0249\x03\x02\x02\x02\u0248\u0246\x03','\x02\x02\x02\u02491\x03\x02\x02\x02\u024A\u0248\x03','\x02\x02\x02\u024B\u024D\x05\u018C\xC7\x02\u024C\u024B\x03','\x02\x02\x02\u024D\u024E\x03\x02\x02\x02\u024E\u024C\x03','\x02\x02\x02\u024E\u024F\x03\x02\x02\x02\u024F3\x03','\x02\x02\x02\u0250\u0251\x05<\x1F\x02\u02515\x03\x02','\x02\x02\u0252\u0254\x07\x10\x02\x02\u0253\u0255\x07\x99','\x02\x02\u0254\u0253\x03\x02\x02\x02\u0254\u0255\x03\x02','\x02\x02\u0255\u0256\x03\x02\x02\x02\u0256\u0258\x058','\x1D\x02\u0257\u0259\x07\x99\x02\x02\u0258\u0257\x03\x02','\x02\x02\u0258\u0259\x03\x02\x02\x02\u0259\u0264\x03\x02','\x02\x02\u025A\u025C\x07\x11\x02\x02\u025B\u025D\x07\x99','\x02\x02\u025C\u025B\x03\x02\x02\x02\u025C\u025D\x03\x02','\x02\x02\u025D\u025E\x03\x02\x02\x02\u025E\u0260\x058','\x1D\x02\u025F\u0261\x07\x99\x02\x02\u0260\u025F\x03\x02','\x02\x02\u0260\u0261\x03\x02\x02\x02\u0261\u0263\x03\x02','\x02\x02\u0262\u025A\x03\x02\x02\x02\u0263\u0266\x03\x02','\x02\x02\u0264\u0262\x03\x02\x02\x02\u0264\u0265\x03\x02','\x02\x02\u0265\u0267\x03\x02\x02\x02\u0266\u0264\x03\x02','\x02\x02\u0267\u0268\x07\x12\x02\x02\u0268\u026F\x03\x02','\x02\x02\u0269\u026B\x07\x10\x02\x02\u026A\u026C\x07\x99','\x02\x02\u026B\u026A\x03\x02\x02\x02\u026B\u026C\x03\x02','\x02\x02\u026C\u026D\x03\x02\x02\x02\u026D\u026F\x07\x12','\x02\x02\u026E\u0252\x03\x02\x02\x02\u026E\u0269\x03\x02','\x02\x02\u026F7\x03\x02\x02\x02\u0270\u0272\x05\u0148','\xA5\x02\u0271\u0273\x07\x99\x02\x02\u0272\u0271\x03\x02','\x02\x02\u0272\u0273\x03\x02\x02\x02\u0273\u0274\x03\x02','\x02\x02\u0274\u0276\x07\x04\x02\x02\u0275\u0277\x07\x99','\x02\x02\u0276\u0275\x03\x02\x02\x02\u0276\u0277\x03\x02','\x02\x02\u0277\u0278\x03\x02\x02\x02\u0278\u0279\x05<','\x1F\x02\u02799\x03\x02\x02\x02\u027A\u027C\x07\x13','\x02\x02\u027B\u027D\x07\x99\x02\x02\u027C\u027B\x03\x02','\x02\x02\u027C\u027D\x03\x02\x02\x02\u027D\u027E\x03\x02','\x02\x02\u027E\u0280\x05<\x1F\x02\u027F\u0281\x07\x99','\x02\x02\u0280\u027F\x03\x02\x02\x02\u0280\u0281\x03\x02','\x02\x02\u0281\u028C\x03\x02\x02\x02\u0282\u0284\x07\x11','\x02\x02\u0283\u0285\x07\x99\x02\x02\u0284\u0283\x03\x02','\x02\x02\u0284\u0285\x03\x02\x02\x02\u0285\u0286\x03\x02','\x02\x02\u0286\u0288\x05<\x1F\x02\u0287\u0289\x07\x99','\x02\x02\u0288\u0287\x03\x02\x02\x02\u0288\u0289\x03\x02','\x02\x02\u0289\u028B\x03\x02\x02\x02\u028A\u0282\x03\x02','\x02\x02\u028B\u028E\x03\x02\x02\x02\u028C\u028A\x03\x02','\x02\x02\u028C\u028D\x03\x02\x02\x02\u028D\u028F\x03\x02','\x02\x02\u028E\u028C\x03\x02\x02\x02\u028F\u0290\x07\x14','\x02\x02\u0290\u0297\x03\x02\x02\x02\u0291\u0293\x07\x13','\x02\x02\u0292\u0294\x07\x99\x02\x02\u0293\u0292\x03\x02','\x02\x02\u0293\u0294\x03\x02\x02\x02\u0294\u0295\x03\x02','\x02\x02\u0295\u0297\x07\x14\x02\x02\u0296\u027A\x03\x02','\x02\x02\u0296\u0291\x03\x02\x02\x02\u0297;\x03\x02','\x02\x02\u0298\u029F\x05\u0148\xA5\x02\u0299\u029F\x05\u016C','\xB7\x02\u029A\u029F\x056\x1C\x02\u029B\u029F\x05:\x1E','\x02\u029C\u029F\x05\u014A\xA6\x02\u029D\u029F\x07t\x02','\x02\u029E\u0298\x03\x02\x02\x02\u029E\u0299\x03\x02\x02','\x02\u029E\u029A\x03\x02\x02\x02\u029E\u029B\x03\x02\x02','\x02\u029E\u029C\x03\x02\x02\x02\u029E\u029D\x03\x02\x02','\x02\u029F=\x03\x02\x02\x02\u02A0\u02A1\x05\u016A\xB6','\x02\u02A1\u02A2\x07\x04\x02\x02\u02A2\u02A7\x07\x99\x02','\x02\u02A3\u02A8\x07\x86\x02\x02\u02A4\u02A8\x05\u016C\xB7','\x02\u02A5\u02A8\x05\u014A\xA6\x02\u02A6\u02A8\x05\u0198\xCD','\x02\u02A7\u02A3\x03\x02\x02\x02\u02A7\u02A4\x03\x02\x02','\x02\u02A7\u02A5\x03\x02\x02\x02\u02A7\u02A6\x03\x02\x02','\x02\u02A8?\x03\x02\x02\x02\u02A9\u02AC\x07\b\x02\x02','\u02AA\u02AD\x05\u0198\xCD\x02\u02AB\u02AD\x05\u016C\xB7\x02','\u02AC\u02AA\x03\x02\x02\x02\u02AC\u02AB\x03\x02\x02\x02','\u02AD\u02AF\x03\x02\x02\x02\u02AE\u02A9\x03\x02\x02\x02','\u02AF\u02B0\x03\x02\x02\x02\u02B0\u02AE\x03\x02\x02\x02','\u02B0\u02B1\x03\x02\x02\x02\u02B1\u02B3\x03\x02\x02\x02','\u02B2\u02B4\x07\b\x02\x02\u02B3\u02B2\x03\x02\x02\x02','\u02B3\u02B4\x03\x02\x02\x02\u02B4A\x03\x02\x02\x02','\u02B5\u02BA\x05\u0198\xCD\x02\u02B6\u02B7\x07\x05\x02\x02','\u02B7\u02B9\x05\u0198\xCD\x02\u02B8\u02B6\x03\x02\x02\x02','\u02B9\u02BC\x03\x02\x02\x02\u02BA\u02B8\x03\x02\x02\x02','\u02BA\u02BB\x03\x02\x02\x02\u02BBC\x03\x02\x02\x02','\u02BC\u02BA\x03\x02\x02\x02\u02BD\u02BE\x05F$\x02\u02BE','\u02BF\x05T+\x02\u02BFE\x03\x02\x02\x02\u02C0\u02C2\x05','H%\x02\u02C1\u02C3\x07\x99\x02\x02\u02C2\u02C1\x03\x02','\x02\x02\u02C2\u02C3\x03\x02\x02\x02\u02C3\u02C5\x03\x02','\x02\x02\u02C4\u02C0\x03\x02\x02\x02\u02C5\u02C8\x03\x02','\x02\x02\u02C6\u02C4\x03\x02\x02\x02\u02C6\u02C7\x03\x02','\x02\x02\u02C7G\x03\x02\x02\x02\u02C8\u02C6\x03\x02','\x02\x02\u02C9\u02CD\x05J&\x02\u02CA\u02CD\x05N(\x02\u02CB','\u02CD\x05P)\x02\u02CC\u02C9\x03\x02\x02\x02\u02CC\u02CA','\x03\x02\x02\x02\u02CC\u02CB\x03\x02\x02\x02\u02CDI','\x03\x02\x02\x02\u02CE\u02D1\x078\x02\x02\u02CF\u02D0','\x07\x99\x02\x02\u02D0\u02D2\x05L\'\x02\u02D1\u02CF\x03','\x02\x02\x02\u02D1\u02D2\x03\x02\x02\x02\u02D2\u02D7\x03','\x02\x02\x02\u02D3\u02D4\x07\x99\x02\x02\u02D4\u02D6\x05','R*\x02\u02D5\u02D3\x03\x02\x02\x02\u02D6\u02D9\x03\x02','\x02\x02\u02D7\u02D5\x03\x02\x02\x02\u02D7\u02D8\x03\x02','\x02\x02\u02D8K\x03\x02\x02\x02\u02D9\u02D7\x03\x02','\x02\x02\u02DA\u02DB\x07\x94\x02\x02\u02DBM\x03\x02','\x02\x02\u02DC\u02DD\x079\x02\x02\u02DDO\x03\x02\x02','\x02\u02DE\u02DF\x07:\x02\x02\u02DFQ\x03\x02\x02\x02','\u02E0\u02E2\x05\u0198\xCD\x02\u02E1\u02E3\x07\x99\x02\x02','\u02E2\u02E1\x03\x02\x02\x02\u02E2\u02E3\x03\x02\x02\x02','\u02E3\u02E4\x03\x02\x02\x02\u02E4\u02E6\x07\x0E\x02\x02','\u02E5\u02E7\x07\x99\x02\x02\u02E6\u02E5\x03\x02\x02\x02','\u02E6\u02E7\x03\x02\x02\x02\u02E7\u02E8\x03\x02\x02\x02','\u02E8\u02E9\x05\u0198\xCD\x02\u02E9S\x03\x02\x02\x02','\u02EA\u02ED\x05f4\x02\u02EB\u02ED\x05V,\x02\u02EC\u02EA\x03','\x02\x02\x02\u02EC\u02EB\x03\x02\x02\x02\u02EDU\x03','\x02\x02\x02\u02EE\u02F1\x05X-\x02\u02EF\u02F1\x05Z.\x02','\u02F0\u02EE\x03\x02\x02\x02\u02F0\u02EF\x03\x02\x02\x02','\u02F1W\x03\x02\x02\x02\u02F2\u02F9\x05\\/\x02\u02F3\u02F5','\x07\x99\x02\x02\u02F4\u02F3\x03\x02\x02\x02\u02F4\u02F5','\x03\x02\x02\x02\u02F5\u02F6\x03\x02\x02\x02\u02F6\u02F8','\x05b2\x02\u02F7\u02F4\x03\x02\x02\x02\u02F8\u02FB\x03','\x02\x02\x02\u02F9\u02F7\x03\x02\x02\x02\u02F9\u02FA\x03','\x02\x02\x02\u02FAY\x03\x02\x02\x02\u02FB\u02F9\x03','\x02\x02\x02\u02FC\u02FE\x05^0\x02\u02FD\u02FF\x07\x99','\x02\x02\u02FE\u02FD\x03\x02\x02\x02\u02FE\u02FF\x03\x02','\x02\x02\u02FF\u0300\x03\x02\x02\x02\u0300\u0301\x05`','1\x02\u0301[\x03\x02\x02\x02\u0302\u0309\x05d3\x02\u0303','\u0305\x07\x99\x02\x02\u0304\u0303\x03\x02\x02\x02\u0304','\u0305\x03\x02\x02\x02\u0305\u0306\x03\x02\x02\x02\u0306','\u0308\x05d3\x02\u0307\u0304\x03\x02\x02\x02\u0308\u030B','\x03\x02\x02\x02\u0309\u0307\x03\x02\x02\x02\u0309\u030A','\x03\x02\x02\x02\u030A]\x03\x02\x02\x02\u030B\u0309','\x03\x02\x02\x02\u030C\u030D\x07;\x02\x02\u030D\u030E','\x07\x99\x02\x02\u030E\u030F\x07<\x02\x02\u030F\u0310','\x07\x99\x02\x02\u0310\u0313\x07=\x02\x02\u0311\u0312','\x07\x99\x02\x02\u0312\u0314\x05\u018C\xC7\x02\u0313\u0311','\x03\x02\x02\x02\u0313\u0314\x03\x02\x02\x02\u0314_','\x03\x02\x02\x02\u0315\u031C\x05\x88E\x02\u0316\u0318','\x07\x99\x02\x02\u0317\u0316\x03\x02\x02\x02\u0317\u0318','\x03\x02\x02\x02\u0318\u0319\x03\x02\x02\x02\u0319\u031B','\x05d3\x02\u031A\u0317\x03\x02\x02\x02\u031B\u031E\x03','\x02\x02\x02\u031C\u031A\x03\x02\x02\x02\u031C\u031D\x03','\x02\x02\x02\u031Da\x03\x02\x02\x02\u031E\u031C\x03','\x02\x02\x02\u031F\u0320\x07>\x02\x02\u0320\u0321\x07','\x99\x02\x02\u0321\u0323\x07?\x02\x02\u0322\u0324\x07','\x99\x02\x02\u0323\u0322\x03\x02\x02\x02\u0323\u0324\x03','\x02\x02\x02\u0324\u0325\x03\x02\x02\x02\u0325\u032C\x05','\\/\x02\u0326\u0328\x07>\x02\x02\u0327\u0329\x07\x99\x02','\x02\u0328\u0327\x03\x02\x02\x02\u0328\u0329\x03\x02\x02','\x02\u0329\u032A\x03\x02\x02\x02\u032A\u032C\x05\\/\x02','\u032B\u031F\x03\x02\x02\x02\u032B\u0326\x03\x02\x02\x02','\u032Cc\x03\x02\x02\x02\u032D\u033C\x05\x88E\x02\u032E','\u033C\x05\xCAf\x02\u032F\u033C\x05\x8AF\x02\u0330\u033C','\x05\x8CG\x02\u0331\u033C\x05\x8EH\x02\u0332\u033C\x05','\x92J\x02\u0333\u033C\x05\x94K\x02\u0334\u033C\x05\x96','L\x02\u0335\u033C\x05\x9AN\x02\u0336\u033C\x05\x9CO\x02','\u0337\u033C\x05\xA0Q\x02\u0338\u033C\x05\xA2R\x02\u0339','\u033C\x05\xA4S\x02\u033A\u033C\x05\xAEX\x02\u033B\u032D','\x03\x02\x02\x02\u033B\u032E\x03\x02\x02\x02\u033B\u032F','\x03\x02\x02\x02\u033B\u0330\x03\x02\x02\x02\u033B\u0331','\x03\x02\x02\x02\u033B\u0332\x03\x02\x02\x02\u033B\u0333','\x03\x02\x02\x02\u033B\u0334\x03\x02\x02\x02\u033B\u0335','\x03\x02\x02\x02\u033B\u0336\x03\x02\x02\x02\u033B\u0337','\x03\x02\x02\x02\u033B\u0338\x03\x02\x02\x02\u033B\u0339','\x03\x02\x02\x02\u033B\u033A\x03\x02\x02\x02\u033Ce','\x03\x02\x02\x02\u033D\u0348\x05p9\x02\u033E\u0348\x05','z>\x02\u033F\u0348\x05h5\x02\u0340\u0348\x05r:\x02\u0341\u0348','\x05j6\x02\u0342\u0348\x05t;\x02\u0343\u0348\x05l7\x02\u0344','\u0348\x05v<\x02\u0345\u0348\x05n8\x02\u0346\u0348\x05x=\x02','\u0347\u033D\x03\x02\x02\x02\u0347\u033E\x03\x02\x02\x02','\u0347\u033F\x03\x02\x02\x02\u0347\u0340\x03\x02\x02\x02','\u0347\u0341\x03\x02\x02\x02\u0347\u0342\x03\x02\x02\x02','\u0347\u0343\x03\x02\x02\x02\u0347\u0344\x03\x02\x02\x02','\u0347\u0345\x03\x02\x02\x02\u0347\u0346\x03\x02\x02\x02','\u0348g\x03\x02\x02\x02\u0349\u034A\x07@\x02\x02\u034A','\u034B\x07\x99\x02\x02\u034B\u034C\x05~@\x02\u034Ci\x03','\x02\x02\x02\u034D\u034E\x07@\x02\x02\u034E\u034F\x07','\x99\x02\x02\u034F\u0350\x05\x80A\x02\u0350k\x03\x02','\x02\x02\u0351\u0352\x07@\x02\x02\u0352\u0353\x07\x99','\x02\x02\u0353\u0354\x05\x82B\x02\u0354m\x03\x02\x02','\x02\u0355\u0356\x07@\x02\x02\u0356\u0357\x07\x99\x02','\x02\u0357\u0358\x05\x84C\x02\u0358o\x03\x02\x02\x02','\u0359\u035A\x07@\x02\x02\u035A\u035B\x07\x99\x02\x02','\u035B\u035C\x05|?\x02\u035Cq\x03\x02\x02\x02\u035D\u035E','\x07A\x02\x02\u035E\u035F\x07\x99\x02\x02\u035F\u0360','\x05~@\x02\u0360s\x03\x02\x02\x02\u0361\u0362\x07A\x02','\x02\u0362\u0363\x07\x99\x02\x02\u0363\u0364\x05\x80A','\x02\u0364u\x03\x02\x02\x02\u0365\u0366\x07A\x02\x02','\u0366\u0367\x07\x99\x02\x02\u0367\u0368\x05\x82B\x02','\u0368w\x03\x02\x02\x02\u0369\u036A\x07A\x02\x02\u036A','\u036B\x07\x99\x02\x02\u036B\u036C\x05\x84C\x02\u036C','y\x03\x02\x02\x02\u036D\u036E\x07A\x02\x02\u036E\u036F','\x07\x99\x02\x02\u036F\u0370\x05|?\x02\u0370{\x03\x02','\x02\x02\u0371\u0372\x07B\x02\x02\u0372\u0373\x07\x99','\x02\x02\u0373\u0375\x07C\x02\x02\u0374\u0376\x07\x99','\x02\x02\u0375\u0374\x03\x02\x02\x02\u0375\u0376\x03\x02','\x02\x02\u0376\u0377\x03\x02\x02\x02\u0377\u0379\x05\xFE','\x80\x02\u0378\u037A\x07\x99\x02\x02\u0379\u0378\x03\x02','\x02\x02\u0379\u037A\x03\x02\x02\x02\u037A\u037B\x03\x02','\x02\x02\u037B\u037D\x07\x15\x02\x02\u037C\u037E\x07\x99','\x02\x02\u037D\u037C\x03\x02\x02\x02\u037D\u037E\x03\x02','\x02\x02\u037E\u037F\x03\x02\x02\x02\u037F\u0381\x05\u0188','\xC5\x02\u0380\u0382\x07\x99\x02\x02\u0381\u0380\x03\x02','\x02\x02\u0381\u0382\x03\x02\x02\x02\u0382\u0383\x03\x02','\x02\x02\u0383\u0384\x07\x16\x02\x02\u0384}\x03\x02','\x02\x02\u0385\u0386\x07D\x02\x02\u0386\u0387\x07\x99','\x02\x02\u0387\u0389\x07C\x02\x02\u0388\u038A\x07\x99','\x02\x02\u0389\u0388\x03\x02\x02\x02\u0389\u038A\x03\x02','\x02\x02\u038A\u038B\x03\x02\x02\x02\u038B\u038D\x07\x15','\x02\x02\u038C\u038E\x07\x99\x02\x02\u038D\u038C\x03\x02','\x02\x02\u038D\u038E\x03\x02\x02\x02\u038E\u038F\x03\x02','\x02\x02\u038F\u0390\x05\u016A\xB6\x02\u0390\u0392\x05\xFE','\x80\x02\u0391\u0393\x07\x99\x02\x02\u0392\u0391\x03\x02','\x02\x02\u0392\u0393\x03\x02\x02\x02\u0393\u0394\x03\x02','\x02\x02\u0394\u0396\x07\x16\x02\x02\u0395\u0397\x07\x99','\x02\x02\u0396\u0395\x03\x02\x02\x02\u0396\u0397\x03\x02','\x02\x02\u0397\u0398\x03\x02\x02\x02\u0398\u0399\x07E','\x02\x02\u0399\u039A\x07\x99\x02\x02\u039A\u039B\x05\u0186','\xC4\x02\u039B\u039C\x07\x99\x02\x02\u039C\u039D\x07F','\x02\x02\u039D\u039E\x07\x99\x02\x02\u039E\u039F\x07G','\x02\x02\u039F\x7F\x03\x02\x02\x02\u03A0\u03A1\x07D','\x02\x02\u03A1\u03A2\x07\x99\x02\x02\u03A2\u03A4\x07C','\x02\x02\u03A3\u03A5\x07\x99\x02\x02\u03A4\u03A3\x03\x02','\x02\x02\u03A4\u03A5\x03\x02\x02\x02\u03A5\u03A6\x03\x02','\x02\x02\u03A6\u03A8\x07\x15\x02\x02\u03A7\u03A9\x07\x99','\x02\x02\u03A8\u03A7\x03\x02\x02\x02\u03A8\u03A9\x03\x02','\x02\x02\u03A9\u03AA\x03\x02\x02\x02\u03AA\u03AB\x05\u016A','\xB6\x02\u03AB\u03AD\x05\xFE\x80\x02\u03AC\u03AE\x07\x99','\x02\x02\u03AD\u03AC\x03\x02\x02\x02\u03AD\u03AE\x03\x02','\x02\x02\u03AE\u03AF\x03\x02\x02\x02\u03AF\u03B1\x07\x16','\x02\x02\u03B0\u03B2\x07\x99\x02\x02\u03B1\u03B0\x03\x02','\x02\x02\u03B1\u03B2\x03\x02\x02\x02\u03B2\u03B3\x03\x02','\x02\x02\u03B3\u03B4\x07E\x02\x02\u03B4\u03B5\x07\x99','\x02\x02\u03B5\u03B7\x07\x15\x02\x02\u03B6\u03B8\x07\x99','\x02\x02\u03B7\u03B6\x03\x02\x02\x02\u03B7\u03B8\x03\x02','\x02\x02\u03B8\u03B9\x03\x02\x02\x02\u03B9\u03BB\x05\u0184','\xC3\x02\u03BA\u03BC\x07\x99\x02\x02\u03BB\u03BA\x03\x02','\x02\x02\u03BB\u03BC\x03\x02\x02\x02\u03BC\u03BD\x03\x02','\x02\x02\u03BD\u03BE\x07\x16\x02\x02\u03BE\u03BF\x07\x99','\x02\x02\u03BF\u03C0\x07F\x02\x02\u03C0\u03C1\x07\x99','\x02\x02\u03C1\u03C2\x07g\x02\x02\u03C2\u03C3\x07\x99','\x02\x02\u03C3\u03C4\x07\x85\x02\x02\u03C4\x81\x03\x02','\x02\x02\u03C5\u03C6\x07D\x02\x02\u03C6\u03C7\x07\x99','\x02\x02\u03C7\u03C9\x07C\x02\x02\u03C8\u03CA\x07\x99','\x02\x02\u03C9\u03C8\x03\x02\x02\x02\u03C9\u03CA\x03\x02','\x02\x02\u03CA\u03CB\x03\x02\x02\x02\u03CB\u03CC\x07\x15','\x02\x02\u03CC\u03CD\x05\u016A\xB6\x02\u03CD\u03CE\x05\xFE','\x80\x02\u03CE\u03D0\x07\x16\x02\x02\u03CF\u03D1\x07\x99','\x02\x02\u03D0\u03CF\x03\x02\x02\x02\u03D0\u03D1\x03\x02','\x02\x02\u03D1\u03D2\x03\x02\x02\x02\u03D2\u03D3\x07E','\x02\x02\u03D3\u03D4\x07\x99\x02\x02\u03D4\u03D6\x07H','\x02\x02\u03D5\u03D7\x07\x99\x02\x02\u03D6\u03D5\x03\x02','\x02\x02\u03D6\u03D7\x03\x02\x02\x02\u03D7\u03D8\x03\x02','\x02\x02\u03D8\u03D9\x07\x15\x02\x02\u03D9\u03DA\x05\u0186','\xC4\x02\u03DA\u03DB\x07\x16\x02\x02\u03DB\x83\x03\x02','\x02\x02\u03DC\u03DD\x07D\x02\x02\u03DD\u03DE\x07\x99','\x02\x02\u03DE\u03E0\x07C\x02\x02\u03DF\u03E1\x07\x99','\x02\x02\u03E0\u03DF\x03\x02\x02\x02\u03E0\u03E1\x03\x02','\x02\x02\u03E1\u03E2\x03\x02\x02\x02\u03E2\u03E4\x05\x86','D\x02\u03E3\u03E5\x07\x99\x02\x02\u03E4\u03E3\x03\x02','\x02\x02\u03E4\u03E5\x03\x02\x02\x02\u03E5\u03E6\x03\x02','\x02\x02\u03E6\u03E7\x07E\x02\x02\u03E7\u03E8\x07\x99','\x02\x02\u03E8\u03EA\x07H\x02\x02\u03E9\u03EB\x07\x99','\x02\x02\u03EA\u03E9\x03\x02\x02\x02\u03EA\u03EB\x03\x02','\x02\x02\u03EB\u03EC\x03\x02\x02\x02\u03EC\u03ED\x07\x15','\x02\x02\u03ED\u03EE\x05\u0186\xC4\x02\u03EE\u03EF\x07\x16','\x02\x02\u03EF\x85\x03\x02\x02\x02\u03F0\u03F2\x07\x15','\x02\x02\u03F1\u03F3\x07\x99\x02\x02\u03F2\u03F1\x03\x02','\x02\x02\u03F2\u03F3\x03\x02\x02\x02\u03F3\u03F4\x03\x02','\x02\x02\u03F4\u03F5\x07\x16\x02\x02\u03F5\u03F6\x05\u0196','\xCC\x02\u03F6\u03F7\x07\x13\x02\x02\u03F7\u03F8\x05\u016A','\xB6\x02\u03F8\u03F9\x05\xF4{\x02\u03F9\u03FA\x07\x14','\x02\x02\u03FA\u03FB\x05\u0196\xCC\x02\u03FB\u03FD\x07\x15','\x02\x02\u03FC\u03FE\x07\x99\x02\x02\u03FD\u03FC\x03\x02','\x02\x02\u03FD\u03FE\x03\x02\x02\x02\u03FE\u03FF\x03\x02','\x02\x02\u03FF\u0400\x07\x16\x02\x02\u0400\u0426\x03\x02','\x02\x02\u0401\u0403\x07\x15\x02\x02\u0402\u0404\x07\x99','\x02\x02\u0403\u0402\x03\x02\x02\x02\u0403\u0404\x03\x02','\x02\x02\u0404\u0405\x03\x02\x02\x02\u0405\u0406\x07\x16','\x02\x02\u0406\u0407\x05\u0196\xCC\x02\u0407\u0408\x07\x13','\x02\x02\u0408\u0409\x05\u016A\xB6\x02\u0409\u040A\x05\xF4','{\x02\u040A\u040B\x07\x14\x02\x02\u040B\u040C\x05\u0196','\xCC\x02\u040C\u040D\x05\u0194\xCB\x02\u040D\u040F\x07\x15','\x02\x02\u040E\u0410\x07\x99\x02\x02\u040F\u040E\x03\x02','\x02\x02\u040F\u0410\x03\x02\x02\x02\u0410\u0411\x03\x02','\x02\x02\u0411\u0412\x07\x16\x02\x02\u0412\u0426\x03\x02','\x02\x02\u0413\u0415\x07\x15\x02\x02\u0414\u0416\x07\x99','\x02\x02\u0415\u0414\x03\x02\x02\x02\u0415\u0416\x03\x02','\x02\x02\u0416\u0417\x03\x02\x02\x02\u0417\u0418\x07\x16','\x02\x02\u0418\u0419\x05\u0192\xCA\x02\u0419\u041A\x05\u0196','\xCC\x02\u041A\u041B\x07\x13\x02\x02\u041B\u041C\x05\u016A','\xB6\x02\u041C\u041D\x05\xF4{\x02\u041D\u041E\x07\x14','\x02\x02\u041E\u041F\x05\u0196\xCC\x02\u041F\u0421\x07\x15','\x02\x02\u0420\u0422\x07\x99\x02\x02\u0421\u0420\x03\x02','\x02\x02\u0421\u0422\x03\x02\x02\x02\u0422\u0423\x03\x02','\x02\x02\u0423\u0424\x07\x16\x02\x02\u0424\u0426\x03\x02','\x02\x02\u0425\u03F0\x03\x02\x02\x02\u0425\u0401\x03\x02','\x02\x02\u0425\u0413\x03\x02\x02\x02\u0426\x87\x03\x02','\x02\x02\u0427\u0428\x07I\x02\x02\u0428\u0429\x07\x99','\x02\x02\u0429\u042A\x07J\x02\x02\u042A\u042F\x07\x99','\x02\x02\u042B\u042C\x07K\x02\x02\u042C\u042D\x07\x99','\x02\x02\u042D\u042E\x07L\x02\x02\u042E\u0430\x07\x99','\x02\x02\u042F\u042B\x03\x02\x02\x02\u042F\u0430\x03\x02','\x02\x02\u0430\u0431\x03\x02\x02\x02\u0431\u0432\x07M','\x02\x02\u0432\u0433\x07\x99\x02\x02\u0433\u0434\x05\u0106','\x84\x02\u0434\u0435\x07\x99\x02\x02\u0435\u0436\x07N','\x02\x02\u0436\u0437\x07\x99\x02\x02\u0437\u0438\x05\u016A','\xB6\x02\u0438\u043C\x07\x99\x02\x02\u0439\u043A\x07O','\x02\x02\u043A\u043B\x07\x99\x02\x02\u043B\u043D\x07\x86','\x02\x02\u043C\u0439\x03\x02\x02\x02\u043C\u043D\x03\x02','\x02\x02\u043D\x89\x03\x02\x02\x02\u043E\u043F\x07P','\x02\x02\u043F\u0441\x07\x99\x02\x02\u0440\u043E\x03\x02','\x02\x02\u0440\u0441\x03\x02\x02\x02\u0441\u0442\x03\x02','\x02\x02\u0442\u0444\x07Q\x02\x02\u0443\u0445\x07\x99','\x02\x02\u0444\u0443\x03\x02\x02\x02\u0444\u0445\x03\x02','\x02\x02\u0445\u0446\x03\x02\x02\x02\u0446\u044A\x05\xDE','p\x02\u0447\u0449\x05\xC8e\x02\u0448\u0447\x03\x02\x02','\x02\u0449\u044C\x03\x02\x02\x02\u044A\u0448\x03\x02\x02','\x02\u044A\u044B\x03\x02\x02\x02\u044B\u0451\x03\x02\x02','\x02\u044C\u044A\x03\x02\x02\x02\u044D\u044F\x07\x99\x02','\x02\u044E\u044D\x03\x02\x02\x02\u044E\u044F\x03\x02\x02','\x02\u044F\u0450\x03\x02\x02\x02\u0450\u0452\x05\xDCo','\x02\u0451\u044E\x03\x02\x02\x02\u0451\u0452\x03\x02\x02','\x02\u0452\x8B\x03\x02\x02\x02\u0453\u0455\x07R\x02','\x02\u0454\u0456\x07\x99\x02\x02\u0455\u0454\x03\x02\x02','\x02\u0455\u0456\x03\x02\x02\x02\u0456\u0457\x03\x02\x02','\x02\u0457\u0458\x05\u0106\x84\x02\u0458\u0459\x07\x99\x02','\x02\u0459\u045A\x07N\x02\x02\u045A\u045B\x07\x99\x02','\x02\u045B\u045C\x05\u016A\xB6\x02\u045C\x8D\x03\x02\x02','\x02\u045D\u045F\x07S\x02\x02\u045E\u0460\x07\x99\x02','\x02\u045F\u045E\x03\x02\x02\x02\u045F\u0460\x03\x02\x02','\x02\u0460\u0461\x03\x02\x02\x02\u0461\u0466\x05\xE0q','\x02\u0462\u0463\x07\x99\x02\x02\u0463\u0465\x05\x90I','\x02\u0464\u0462\x03\x02\x02\x02\u0465\u0468\x03\x02\x02','\x02\u0466\u0464\x03\x02\x02\x02\u0466\u0467\x03\x02\x02','\x02\u0467\x8F\x03\x02\x02\x02\u0468\u0466\x03\x02\x02','\x02\u0469\u046A\x07C\x02\x02\u046A\u046B\x07\x99\x02','\x02\u046B\u046C\x07Q\x02\x02\u046C\u046D\x07\x99\x02','\x02\u046D\u0474\x05\x96L\x02\u046E\u046F\x07C\x02\x02','\u046F\u0470\x07\x99\x02\x02\u0470\u0471\x07@\x02\x02','\u0471\u0472\x07\x99\x02\x02\u0472\u0474\x05\x96L\x02','\u0473\u0469\x03\x02\x02\x02\u0473\u046E\x03\x02\x02\x02','\u0474\x91\x03\x02\x02\x02\u0475\u0477\x07@\x02\x02','\u0476\u0478\x07\x99\x02\x02\u0477\u0476\x03\x02\x02\x02','\u0477\u0478\x03\x02\x02\x02\u0478\u0479\x03\x02\x02\x02','\u0479\u047A\x05\xDEp\x02\u047A\x93\x03\x02\x02\x02','\u047B\u047C\x07@\x02\x02\u047C\u047D\x07\x99\x02\x02','\u047D\u047F\x07G\x02\x02\u047E\u0480\x07\x99\x02\x02','\u047F\u047E\x03\x02\x02\x02\u047F\u0480\x03\x02\x02\x02','\u0480\u0481\x03\x02\x02\x02\u0481\u0482\x05\xDEp\x02','\u0482\x95\x03\x02\x02\x02\u0483\u0485\x07T\x02\x02','\u0484\u0486\x07\x99\x02\x02\u0485\u0484\x03\x02\x02\x02','\u0485\u0486\x03\x02\x02\x02\u0486\u0487\x03\x02\x02\x02','\u0487\u0492\x05\x98M\x02\u0488\u048A\x07\x99\x02\x02','\u0489\u0488\x03\x02\x02\x02\u0489\u048A\x03\x02\x02\x02','\u048A\u048B\x03\x02\x02\x02\u048B\u048D\x07\x11\x02\x02','\u048C\u048E\x07\x99\x02\x02\u048D\u048C\x03\x02\x02\x02','\u048D\u048E\x03\x02\x02\x02\u048E\u048F\x03\x02\x02\x02','\u048F\u0491\x05\x98M\x02\u0490\u0489\x03\x02\x02\x02','\u0491\u0494\x03\x02\x02\x02\u0492\u0490\x03\x02\x02\x02','\u0492\u0493\x03\x02\x02\x02\u0493\x97\x03\x02\x02\x02','\u0494\u0492\x03\x02\x02\x02\u0495\u0497\x05\u0186\xC4\x02','\u0496\u0498\x07\x99\x02\x02\u0497\u0496\x03\x02\x02\x02','\u0497\u0498\x03\x02\x02\x02\u0498\u0499\x03\x02\x02\x02','\u0499\u049B\x07\x0E\x02\x02\u049A\u049C\x07\x99\x02\x02','\u049B\u049A\x03\x02\x02\x02\u049B\u049C\x03\x02\x02\x02','\u049C\u049D\x03\x02\x02\x02\u049D\u049E\x05\u0106\x84\x02','\u049E\u04BA\x03\x02\x02\x02\u049F\u04A1\x05\u016A\xB6\x02','\u04A0\u04A2\x07\x99\x02\x02\u04A1\u04A0\x03\x02\x02\x02','\u04A1\u04A2\x03\x02\x02\x02\u04A2\u04A3\x03\x02\x02\x02','\u04A3\u04A5\x07\x0E\x02\x02\u04A4\u04A6\x07\x99\x02\x02','\u04A5\u04A4\x03\x02\x02\x02\u04A5\u04A6\x03\x02\x02\x02','\u04A6\u04A7\x03\x02\x02\x02\u04A7\u04A8\x05\u0106\x84\x02','\u04A8\u04BA\x03\x02\x02\x02\u04A9\u04AB\x05\u016A\xB6\x02','\u04AA\u04AC\x07\x99\x02\x02\u04AB\u04AA\x03\x02\x02\x02','\u04AB\u04AC\x03\x02\x02\x02\u04AC\u04AD\x03\x02\x02\x02','\u04AD\u04AF\x07\x17\x02\x02\u04AE\u04B0\x07\x99\x02\x02','\u04AF\u04AE\x03\x02\x02\x02\u04AF\u04B0\x03\x02\x02\x02','\u04B0\u04B1\x03\x02\x02\x02\u04B1\u04B2\x05\u0106\x84\x02','\u04B2\u04BA\x03\x02\x02\x02\u04B3\u04B5\x05\u016A\xB6\x02','\u04B4\u04B6\x07\x99\x02\x02\u04B5\u04B4\x03\x02\x02\x02','\u04B5\u04B6\x03\x02\x02\x02\u04B6\u04B7\x03\x02\x02\x02','\u04B7\u04B8\x05\xFC\x7F\x02\u04B8\u04BA\x03\x02\x02\x02','\u04B9\u0495\x03\x02\x02\x02\u04B9\u049F\x03\x02\x02\x02','\u04B9\u04A9\x03\x02\x02\x02\u04B9\u04B3\x03\x02\x02\x02','\u04BA\x99\x03\x02\x02\x02\u04BB\u04BC\x07U\x02\x02','\u04BC\u04BE\x07\x99\x02\x02\u04BD\u04BB\x03\x02\x02\x02','\u04BD\u04BE\x03\x02\x02\x02\u04BE\u04BF\x03\x02\x02\x02','\u04BF\u04C1\x07V\x02\x02\u04C0\u04C2\x07\x99\x02\x02','\u04C1\u04C0\x03\x02\x02\x02\u04C1\u04C2\x03\x02\x02\x02','\u04C2\u04C3\x03\x02\x02\x02\u04C3\u04CE\x05\u0106\x84\x02','\u04C4\u04C6\x07\x99\x02\x02\u04C5\u04C4\x03\x02\x02\x02','\u04C5\u04C6\x03\x02\x02\x02\u04C6\u04C7\x03\x02\x02\x02','\u04C7\u04C9\x07\x11\x02\x02\u04C8\u04CA\x07\x99\x02\x02','\u04C9\u04C8\x03\x02\x02\x02\u04C9\u04CA\x03\x02\x02\x02','\u04CA\u04CB\x03\x02\x02\x02\u04CB\u04CD\x05\u0106\x84\x02','\u04CC\u04C5\x03\x02\x02\x02\u04CD\u04D0\x03\x02\x02\x02','\u04CE\u04CC\x03\x02\x02\x02\u04CE\u04CF\x03\x02\x02\x02','\u04CF\x9B\x03\x02\x02\x02\u04D0\u04CE\x03\x02\x02\x02','\u04D1\u04D2\x07W\x02\x02\u04D2\u04D3\x07\x99\x02\x02','\u04D3\u04DE\x05\x9EP\x02\u04D4\u04D6\x07\x99\x02\x02','\u04D5\u04D4\x03\x02\x02\x02\u04D5\u04D6\x03\x02\x02\x02','\u04D6\u04D7\x03\x02\x02\x02\u04D7\u04D9\x07\x11\x02\x02','\u04D8\u04DA\x07\x99\x02\x02\u04D9\u04D8\x03\x02\x02\x02','\u04D9\u04DA\x03\x02\x02\x02\u04DA\u04DB\x03\x02\x02\x02','\u04DB\u04DD\x05\x9EP\x02\u04DC\u04D5\x03\x02\x02\x02','\u04DD\u04E0\x03\x02\x02\x02\u04DE\u04DC\x03\x02\x02\x02','\u04DE\u04DF\x03\x02\x02\x02\u04DF\x9D\x03\x02\x02\x02','\u04E0\u04DE\x03\x02\x02\x02\u04E1\u04E2\x05\u016A\xB6\x02','\u04E2\u04E3\x05\xFC\x7F\x02\u04E3\u04E6\x03\x02\x02\x02','\u04E4\u04E6\x05\u0186\xC4\x02\u04E5\u04E1\x03\x02\x02\x02','\u04E5\u04E4\x03\x02\x02\x02\u04E6\x9F\x03\x02\x02\x02','\u04E7\u04E9\x07X\x02\x02\u04E8\u04EA\x07\x99\x02\x02','\u04E9\u04E8\x03\x02\x02\x02\u04E9\u04EA\x03\x02\x02\x02','\u04EA\u04EB\x03\x02\x02\x02\u04EB\u04ED\x07\x15\x02\x02','\u04EC\u04EE\x07\x99\x02\x02\u04ED\u04EC\x03\x02\x02\x02','\u04ED\u04EE\x03\x02\x02\x02\u04EE\u04EF\x03\x02\x02\x02','\u04EF\u04F0\x05\u016A\xB6\x02\u04F0\u04F1\x07\x99\x02\x02','\u04F1\u04F2\x07Y\x02\x02\u04F2\u04F3\x07\x99\x02\x02','\u04F3\u04F5\x05\u0106\x84\x02\u04F4\u04F6\x07\x99\x02\x02','\u04F5\u04F4\x03\x02\x02\x02\u04F5\u04F6\x03\x02\x02\x02','\u04F6\u04F7\x03\x02\x02\x02\u04F7\u04FA\x07\x18\x02\x02','\u04F8\u04F9\x07\x99\x02\x02\u04F9\u04FB\x05d3\x02\u04FA','\u04F8\x03\x02\x02\x02\u04FB\u04FC\x03\x02\x02\x02\u04FC','\u04FA\x03\x02\x02\x02\u04FC\u04FD\x03\x02\x02\x02\u04FD','\u04FF\x03\x02\x02\x02\u04FE\u0500\x07\x99\x02\x02\u04FF','\u04FE\x03\x02\x02\x02\u04FF\u0500\x03\x02\x02\x02\u0500','\u0501\x03\x02\x02\x02\u0501\u0502\x07\x16\x02\x02\u0502','\xA1\x03\x02\x02\x02\u0503\u0508\x07K\x02\x02\u0504','\u0506\x07\x99\x02\x02\u0505\u0504\x03\x02\x02\x02\u0505','\u0506\x03\x02\x02\x02\u0506\u0507\x03\x02\x02\x02\u0507','\u0509\x07Z\x02\x02\u0508\u0505\x03\x02\x02\x02\u0508','\u0509\x03\x02\x02\x02\u0509\u050A\x03\x02\x02\x02\u050A','\u050B\x07\x99\x02\x02\u050B\u0510\x05\xA6T\x02\u050C','\u050E\x07\x99\x02\x02\u050D\u050C\x03\x02\x02\x02\u050D','\u050E\x03\x02\x02\x02\u050E\u050F\x03\x02\x02\x02\u050F','\u0511\x05\xDCo\x02\u0510\u050D\x03\x02\x02\x02\u0510','\u0511\x03\x02\x02\x02\u0511\xA3\x03\x02\x02\x02\u0512','\u0517\x07[\x02\x02\u0513\u0515\x07\x99\x02\x02\u0514','\u0513\x03\x02\x02\x02\u0514\u0515\x03\x02\x02\x02\u0515','\u0516\x03\x02\x02\x02\u0516\u0518\x07Z\x02\x02\u0517','\u0514\x03\x02\x02\x02\u0517\u0518\x03\x02\x02\x02\u0518','\u051A\x03\x02\x02\x02\u0519\u051B\x07\x99\x02\x02\u051A','\u0519\x03\x02\x02\x02\u051A\u051B\x03\x02\x02\x02\u051B','\u051C\x03\x02\x02\x02\u051C\u051D\x05\xA6T\x02\u051D','\xA5\x03\x02\x02\x02\u051E\u0521\x05\xAAV\x02\u051F','\u0520\x07\x99\x02\x02\u0520\u0522\x05\xC0a\x02\u0521','\u051F\x03\x02\x02\x02\u0521\u0522\x03\x02\x02\x02\u0522','\u0525\x03\x02\x02\x02\u0523\u0524\x07\x99\x02\x02\u0524','\u0526\x05\xC2b\x02\u0525\u0523\x03\x02\x02\x02\u0525','\u0526\x03\x02\x02\x02\u0526\u0529\x03\x02\x02\x02\u0527','\u0528\x07\x99\x02\x02\u0528\u052A\x05\xC4c\x02\u0529','\u0527\x03\x02\x02\x02\u0529\u052A\x03\x02\x02\x02\u052A','\xA7\x03\x02\x02\x02\u052B\u052D\x05\xB0Y\x02\u052C','\u052E\x07\x99\x02\x02\u052D\u052C\x03\x02\x02\x02\u052D','\u052E\x03\x02\x02\x02\u052E\u0530\x03\x02\x02\x02\u052F','\u0531\x05\xB6\\\x02\u0530\u052F\x03\x02\x02\x02\u0530','\u0531\x03\x02\x02\x02\u0531\xA9\x03\x02\x02\x02\u0532','\u053D\x07\x19\x02\x02\u0533\u0535\x07\x99\x02\x02\u0534','\u0533\x03\x02\x02\x02\u0534\u0535\x03\x02\x02\x02\u0535','\u0536\x03\x02\x02\x02\u0536\u0538\x07\x11\x02\x02\u0537','\u0539\x07\x99\x02\x02\u0538\u0537\x03\x02\x02\x02\u0538','\u0539\x03\x02\x02\x02\u0539\u053A\x03\x02\x02\x02\u053A','\u053C\x05\xACW\x02\u053B\u0534\x03\x02\x02\x02\u053C','\u053F\x03\x02\x02\x02\u053D\u053B\x03\x02\x02\x02\u053D','\u053E\x03\x02\x02\x02\u053E\u0550\x03\x02\x02\x02\u053F','\u053D\x03\x02\x02\x02\u0540\u054B\x05\xACW\x02\u0541','\u0543\x07\x99\x02\x02\u0542\u0541\x03\x02\x02\x02\u0542','\u0543\x03\x02\x02\x02\u0543\u0544\x03\x02\x02\x02\u0544','\u0546\x07\x11\x02\x02\u0545\u0547\x07\x99\x02\x02\u0546','\u0545\x03\x02\x02\x02\u0546\u0547\x03\x02\x02\x02\u0547','\u0548\x03\x02\x02\x02\u0548\u054A\x05\xACW\x02\u0549','\u0542\x03\x02\x02\x02\u054A\u054D\x03\x02\x02\x02\u054B','\u0549\x03\x02\x02\x02\u054B\u054C\x03\x02\x02\x02\u054C','\u0550\x03\x02\x02\x02\u054D\u054B\x03\x02\x02\x02\u054E','\u0550\x05\xA8U\x02\u054F\u0532\x03\x02\x02\x02\u054F','\u0540\x03\x02\x02\x02\u054F\u054E\x03\x02\x02\x02\u0550','\xAB\x03\x02\x02\x02\u0551\u0552\x05\u0106\x84\x02\u0552','\u0553\x07\x99\x02\x02\u0553\u0554\x07N\x02\x02\u0554','\u0555\x07\x99\x02\x02\u0555\u0556\x05\u016A\xB6\x02\u0556','\u0559\x03\x02\x02\x02\u0557\u0559\x05\u0106\x84\x02\u0558','\u0551\x03\x02\x02\x02\u0558\u0557\x03\x02\x02\x02\u0559','\xAD\x03\x02\x02\x02\u055A\u055B\x07\x83\x02\x02\u055B','\u055C\x07\x99\x02\x02\u055C\u055E\x05\xB0Y\x02\u055D','\u055F\x07\x99\x02\x02\u055E\u055D\x03\x02\x02\x02\u055E','\u055F\x03\x02\x02\x02\u055F\u0561\x03\x02\x02\x02\u0560','\u0562\x05\xB6\\\x02\u0561\u0560\x03\x02\x02\x02\u0561','\u0562\x03\x02\x02\x02\u0562\xAF\x03\x02\x02\x02\u0563','\u0565\x05\xB2Z\x02\u0564\u0566\x07\x99\x02\x02\u0565','\u0564\x03\x02\x02\x02\u0565\u0566\x03\x02\x02\x02\u0566','\u0568\x03\x02\x02\x02\u0567\u0569\x05\xB4[\x02\u0568','\u0567\x03\x02\x02\x02\u0568\u0569\x03\x02\x02\x02\u0569','\xB1\x03\x02\x02\x02\u056A\u056B\x05\u0190\xC9\x02\u056B','\u056C\x05\u015E\xB0\x02\u056C\xB3\x03\x02\x02\x02\u056D','\u056F\x07\x15\x02\x02\u056E\u0570\x07\x99\x02\x02\u056F','\u056E\x03\x02\x02\x02\u056F\u0570\x03\x02\x02\x02\u0570','\u0572\x03\x02\x02\x02\u0571\u0573\x05\u0106\x84\x02\u0572','\u0571\x03\x02\x02\x02\u0572\u0573\x03\x02\x02\x02\u0573','\u057E\x03\x02\x02\x02\u0574\u0576\x07\x99\x02\x02\u0575','\u0574\x03\x02\x02\x02\u0575\u0576\x03\x02\x02\x02\u0576','\u0577\x03\x02\x02\x02\u0577\u0579\x07\x11\x02\x02\u0578','\u057A\x07\x99\x02\x02\u0579\u0578\x03\x02\x02\x02\u0579','\u057A\x03\x02\x02\x02\u057A\u057B\x03\x02\x02\x02\u057B','\u057D\x05\u0106\x84\x02\u057C\u0575\x03\x02\x02\x02\u057D','\u0580\x03\x02\x02\x02\u057E\u057C\x03\x02\x02\x02\u057E','\u057F\x03\x02\x02\x02\u057F\u0582\x03\x02\x02\x02\u0580','\u057E\x03\x02\x02\x02\u0581\u0583\x07\x99\x02\x02\u0582','\u0581\x03\x02\x02\x02\u0582\u0583\x03\x02\x02\x02\u0583','\u0584\x03\x02\x02\x02\u0584\u0585\x07\x16\x02\x02\u0585','\xB5\x03\x02\x02\x02\u0586\u0587\x07\x84\x02\x02\u0587','\u0588\x07\x99\x02\x02\u0588\u0593\x05\xB8]\x02\u0589','\u058B\x07\x99\x02\x02\u058A\u0589\x03\x02\x02\x02\u058A','\u058B\x03\x02\x02\x02\u058B\u058C\x03\x02\x02\x02\u058C','\u058E\x07\x11\x02\x02\u058D\u058F\x07\x99\x02\x02\u058E','\u058D\x03\x02\x02\x02\u058E\u058F\x03\x02\x02\x02\u058F','\u0590\x03\x02\x02\x02\u0590\u0592\x05\xB8]\x02\u0591','\u058A\x03\x02\x02\x02\u0592\u0595\x03\x02\x02\x02\u0593','\u0591\x03\x02\x02\x02\u0593\u0594\x03\x02\x02\x02\u0594','\u0598\x03\x02\x02\x02\u0595\u0593\x03\x02\x02\x02\u0596','\u0597\x07\x99\x02\x02\u0597\u0599\x05\xDCo\x02\u0598','\u0596\x03\x02\x02\x02\u0598\u0599\x03\x02\x02\x02\u0599','\xB7\x03\x02\x02\x02\u059A\u059D\x05\xBA^\x02\u059B','\u059D\x05\xBC_\x02\u059C\u059A\x03\x02\x02\x02\u059C','\u059B\x03\x02\x02\x02\u059D\xB9\x03\x02\x02\x02\u059E','\u059F\x05\xBE`\x02\u059F\u05A0\x07\x99\x02\x02\u05A0','\u05A1\x07N\x02\x02\u05A1\u05A2\x07\x99\x02\x02\u05A2','\u05A3\x05\u016A\xB6\x02\u05A3\xBB\x03\x02\x02\x02\u05A4','\u05A5\x05\xBE`\x02\u05A5\xBD\x03\x02\x02\x02\u05A6','\u05A7\x05\u0198\xCD\x02\u05A7\xBF\x03\x02\x02\x02\u05A8','\u05A9\x07\\\x02\x02\u05A9\u05AA\x07\x99\x02\x02\u05AA','\u05AB\x07]\x02\x02\u05AB\u05AC\x07\x99\x02\x02\u05AC','\u05B7\x05\xC6d\x02\u05AD\u05AF\x07\x99\x02\x02\u05AE','\u05AD\x03\x02\x02\x02\u05AE\u05AF\x03\x02\x02\x02\u05AF','\u05B0\x03\x02\x02\x02\u05B0\u05B2\x07\x11\x02\x02\u05B1','\u05B3\x07\x99\x02\x02\u05B2\u05B1\x03\x02\x02\x02\u05B2','\u05B3\x03\x02\x02\x02\u05B3\u05B4\x03\x02\x02\x02\u05B4','\u05B6\x05\xC6d\x02\u05B5\u05AE\x03\x02\x02\x02\u05B6','\u05B9\x03\x02\x02\x02\u05B7\u05B5\x03\x02\x02\x02\u05B7','\u05B8\x03\x02\x02\x02\u05B8\xC1\x03\x02\x02\x02\u05B9','\u05B7\x03\x02\x02\x02\u05BA\u05BB\x07^\x02\x02\u05BB','\u05BC\x07\x99\x02\x02\u05BC\u05BD\x05\u0106\x84\x02\u05BD','\xC3\x03\x02\x02\x02\u05BE\u05BF\x07_\x02\x02\u05BF','\u05C0\x07\x99\x02\x02\u05C0\u05C1\x05\u0106\x84\x02\u05C1','\xC5\x03\x02\x02\x02\u05C2\u05CA\x05\u0106\x84\x02\u05C3','\u05C5\x07\x99\x02\x02\u05C4\u05C3\x03\x02\x02\x02\u05C4','\u05C5\x03\x02\x02\x02\u05C5\u05C6\x03\x02\x02\x02\u05C6','\u05C8\t\x03\x02\x02\u05C7\u05C9\x07\x99\x02\x02\u05C8','\u05C7\x03\x02\x02\x02\u05C8\u05C9\x03\x02\x02\x02\u05C9','\u05CB\x03\x02\x02\x02\u05CA\u05C4\x03\x02\x02\x02\u05CA','\u05CB\x03\x02\x02\x02\u05CB\xC7\x03\x02\x02\x02\u05CC','\u05CE\x07\x99\x02\x02\u05CD\u05CC\x03\x02\x02\x02\u05CD','\u05CE\x03\x02\x02\x02\u05CE\u05FD\x03\x02\x02\x02\u05CF','\u05D0\x07;\x02\x02\u05D0\u05D1\x07\x99\x02\x02\u05D1','\u05D2\x07B\x02\x02\u05D2\u05D3\x07\x99\x02\x02\u05D3','\u05D4\x05\u016A\xB6\x02\u05D4\u05D6\x05\xFE\x80\x02\u05D5','\u05D7\x07\x99\x02\x02\u05D6\u05D5\x03\x02\x02\x02\u05D6','\u05D7\x03\x02\x02\x02\u05D7\u05D8\x03\x02\x02\x02\u05D8','\u05DA\x07\x15\x02\x02\u05D9\u05DB\x07\x99\x02\x02\u05DA','\u05D9\x03\x02\x02\x02\u05DA\u05DB\x03\x02\x02\x02\u05DB','\u05DC\x03\x02\x02\x02\u05DC\u05DE\x05\u0188\xC5\x02\u05DD','\u05DF\x07\x99\x02\x02\u05DE\u05DD\x03\x02\x02\x02\u05DE','\u05DF\x03\x02\x02\x02\u05DF\u05E0\x03\x02\x02\x02\u05E0','\u05E1\x07\x16\x02\x02\u05E1\u05FE\x03\x02\x02\x02\u05E2','\u05E3\x07;\x02\x02\u05E3\u05E4\x07\x99\x02\x02\u05E4','\u05E5\x07d\x02\x02\u05E5\u05E6\x07\x99\x02\x02\u05E6','\u05E7\x07C\x02\x02\u05E7\u05E8\x07\x99\x02\x02\u05E8','\u05F3\x05\u016A\xB6\x02\u05E9\u05EB\x07\x99\x02\x02\u05EA','\u05E9\x03\x02\x02\x02\u05EA\u05EB\x03\x02\x02\x02\u05EB','\u05EC\x03\x02\x02\x02\u05EC\u05EE\x07\x11\x02\x02\u05ED','\u05EF\x07\x99\x02\x02\u05EE\u05ED\x03\x02\x02\x02\u05EE','\u05EF\x03\x02\x02\x02\u05EF\u05F0\x03\x02\x02\x02\u05F0','\u05F2\x05\u016A\xB6\x02\u05F1\u05EA\x03\x02\x02\x02\u05F2','\u05F5\x03\x02\x02\x02\u05F3\u05F1\x03\x02\x02\x02\u05F3','\u05F4\x03\x02\x02\x02\u05F4\u05FE\x03\x02\x02\x02\u05F5','\u05F3\x03\x02\x02\x02\u05F6\u05F7\x07;\x02\x02\u05F7','\u05F8\x07\x99\x02\x02\u05F8\u05F9\x07e\x02\x02\u05F9','\u05FA\x07\x99\x02\x02\u05FA\u05FB\x05\u016A\xB6\x02\u05FB','\u05FC\x05\xFE\x80\x02\u05FC\u05FE\x03\x02\x02\x02\u05FD','\u05CF\x03\x02\x02\x02\u05FD\u05E2\x03\x02\x02\x02\u05FD','\u05F6\x03\x02\x02\x02\u05FE\xC9\x03\x02\x02\x02\u05FF','\u0600\x07f\x02\x02\u0600\u0601\x07\x99\x02\x02\u0601','\u060C\x05\xCCg\x02\u0602\u0604\x07\x99\x02\x02\u0603','\u0602\x03\x02\x02\x02\u0603\u0604\x03\x02\x02\x02\u0604','\u0605\x03\x02\x02\x02\u0605\u0607\x07\x11\x02\x02\u0606','\u0608\x07\x99\x02\x02\u0607\u0606\x03\x02\x02\x02\u0607','\u0608\x03\x02\x02\x02\u0608\u0609\x03\x02\x02\x02\u0609','\u060B\x05\xCCg\x02\u060A\u0603\x03\x02\x02\x02\u060B','\u060E\x03\x02\x02\x02\u060C\u060A\x03\x02\x02\x02\u060C','\u060D\x03\x02\x02\x02\u060D\u0610\x03\x02\x02\x02\u060E','\u060C\x03\x02\x02\x02\u060F\u0611\x05\xDCo\x02\u0610','\u060F\x03\x02\x02\x02\u0610\u0611\x03\x02\x02\x02\u0611','\xCB\x03\x02\x02\x02\u0612\u0614\x05\u016A\xB6\x02\u0613','\u0615\x07\x99\x02\x02\u0614\u0613\x03\x02\x02\x02\u0614','\u0615\x03\x02\x02\x02\u0615\u0616\x03\x02\x02\x02\u0616','\u0618\x07\x0E\x02\x02\u0617\u0619\x07\x99\x02\x02\u0618','\u0617\x03\x02\x02\x02\u0618\u0619\x03\x02\x02\x02\u0619','\u061A\x03\x02\x02\x02\u061A\u061B\x05\xCEh\x02\u061B','\xCD\x03\x02\x02\x02\u061C\u061F\x05\xD0i\x02\u061D','\u061F\x05\xD2j\x02\u061E\u061C\x03\x02\x02\x02\u061E','\u061D\x03\x02\x02\x02\u061F\xCF\x03\x02\x02\x02\u0620','\u0622\x07g\x02\x02\u0621\u0623\x07\x99\x02\x02\u0622','\u0621\x03\x02\x02\x02\u0622\u0623\x03\x02\x02\x02\u0623','\u0627\x03\x02\x02\x02\u0624\u0628\x05\xD4k\x02\u0625','\u0628\x05\xD6l\x02\u0626\u0628\x05\xD8m\x02\u0627\u0624','\x03\x02\x02\x02\u0627\u0625\x03\x02\x02\x02\u0627\u0626','\x03\x02\x02\x02\u0628\xD1\x03\x02\x02\x02\u0629\u062D','\t\x04\x02\x02\u062A\u062E\x05\xD4k\x02\u062B\u062E\x05','\xD6l\x02\u062C\u062E\x05\xD8m\x02\u062D\u062A\x03\x02','\x02\x02\u062D\u062B\x03\x02\x02\x02\u062D\u062C\x03\x02','\x02\x02\u062E\xD3\x03\x02\x02\x02\u062F\u0630\x07\x04','\x02\x02\u0630\u0631\x05\u0198\xCD\x02\u0631\u0632\x07\x15','\x02\x02\u0632\u0633\x05\u0198\xCD\x02\u0633\u0636\x07\x0E','\x02\x02\u0634\u0637\x07\x86\x02\x02\u0635\u0637\x05\u017C','\xBF\x02\u0636\u0634\x03\x02\x02\x02\u0636\u0635\x03\x02','\x02\x02\u0637\u0638\x03\x02\x02\x02\u0638\u0639\x07\x16','\x02\x02\u0639\xD5\x03\x02\x02\x02\u063A\u063B\x07\x04','\x02\x02\u063B\u063C\x05\u0198\xCD\x02\u063C\u063F\x07\x15','\x02\x02\u063D\u0640\x07\x86\x02\x02\u063E\u0640\x05\u017C','\xBF\x02\u063F\u063D\x03\x02\x02\x02\u063F\u063E\x03\x02','\x02\x02\u0640\u0641\x03\x02\x02\x02\u0641\u0642\x07\x16','\x02\x02\u0642\xD7\x03\x02\x02\x02\u0643\u0647\x07\x15','\x02\x02\u0644\u0648\x05\xDAn\x02\u0645\u0648\x05\u017C','\xBF\x02\u0646\u0648\x07\x19\x02\x02\u0647\u0644\x03\x02','\x02\x02\u0647\u0645\x03\x02\x02\x02\u0647\u0646\x03\x02','\x02\x02\u0648\u0649\x03\x02\x02\x02\u0649\u064A\x07\x16','\x02\x02\u064A\xD9\x03\x02\x02\x02\u064B\u0656\x05\u018C','\xC7\x02\u064C\u064E\x07\x99\x02\x02\u064D\u064C\x03\x02','\x02\x02\u064D\u064E\x03\x02\x02\x02\u064E\u064F\x03\x02','\x02\x02\u064F\u0651\x07\x11\x02\x02\u0650\u0652\x07\x99','\x02\x02\u0651\u0650\x03\x02\x02\x02\u0651\u0652\x03\x02','\x02\x02\u0652\u0653\x03\x02\x02\x02\u0653\u0655\x05\u018C','\xC7\x02\u0654\u064D\x03\x02\x02\x02\u0655\u0658\x03\x02','\x02\x02\u0656\u0654\x03\x02\x02\x02\u0656\u0657\x03\x02','\x02\x02\u0657\xDB\x03\x02\x02\x02\u0658\u0656\x03\x02','\x02\x02\u0659\u065A\x07j\x02\x02\u065A\u065B\x07\x99','\x02\x02\u065B\u065C\x05\u0106\x84\x02\u065C\xDD\x03\x02','\x02\x02\u065D\u0668\x05\xE0q\x02\u065E\u0660\x07\x99','\x02\x02\u065F\u065E\x03\x02\x02\x02\u065F\u0660\x03\x02','\x02\x02\u0660\u0661\x03\x02\x02\x02\u0661\u0663\x07\x11','\x02\x02\u0662\u0664\x07\x99\x02\x02\u0663\u0662\x03\x02','\x02\x02\u0663\u0664\x03\x02\x02\x02\u0664\u0665\x03\x02','\x02\x02\u0665\u0667\x05\xE0q\x02\u0666\u065F\x03\x02','\x02\x02\u0667\u066A\x03\x02\x02\x02\u0668\u0666\x03\x02','\x02\x02\u0668\u0669\x03\x02\x02\x02\u0669\xDF\x03\x02','\x02\x02\u066A\u0668\x03\x02\x02\x02\u066B\u066D\x05\u016A','\xB6\x02\u066C\u066E\x07\x99\x02\x02\u066D\u066C\x03\x02','\x02\x02\u066D\u066E\x03\x02\x02\x02\u066E\u066F\x03\x02','\x02\x02\u066F\u0671\x07\x0E\x02\x02\u0670\u0672\x07\x99','\x02\x02\u0671\u0670\x03\x02\x02\x02\u0671\u0672\x03\x02','\x02\x02\u0672\u0673\x03\x02\x02\x02\u0673\u0674\x05\xE2','r\x02\u0674\u0677\x03\x02\x02\x02\u0675\u0677\x05\xE2','r\x02\u0676\u066B\x03\x02\x02\x02\u0676\u0675\x03\x02','\x02\x02\u0677\xE1\x03\x02\x02\x02\u0678\u067B\x05\u013E','\xA0\x02\u0679\u067B\x05\xE4s\x02\u067A\u0678\x03\x02','\x02\x02\u067A\u0679\x03\x02\x02\x02\u067B\xE3\x03\x02','\x02\x02\u067C\u0683\x05\xE6t\x02\u067D\u067F\x07\x99','\x02\x02\u067E\u067D\x03\x02\x02\x02\u067E\u067F\x03\x02','\x02\x02\u067F\u0680\x03\x02\x02\x02\u0680\u0682\x05\xE8','u\x02\u0681\u067E\x03\x02\x02\x02\u0682\u0685\x03\x02','\x02\x02\u0683\u0681\x03\x02\x02\x02\u0683\u0684\x03\x02','\x02\x02\u0684\u068B\x03\x02\x02\x02\u0685\u0683\x03\x02','\x02\x02\u0686\u0687\x07\x15\x02\x02\u0687\u0688\x05\xE4','s\x02\u0688\u0689\x07\x16\x02\x02\u0689\u068B\x03\x02','\x02\x02\u068A\u067C\x03\x02\x02\x02\u068A\u0686\x03\x02','\x02\x02\u068B\xE5\x03\x02\x02\x02\u068C\u068E\x07\x15','\x02\x02\u068D\u068F\x07\x99\x02\x02\u068E\u068D\x03\x02','\x02\x02\u068E\u068F\x03\x02\x02\x02\u068F\u0694\x03\x02','\x02\x02\u0690\u0692\x05\u016A\xB6\x02\u0691\u0693\x07\x99','\x02\x02\u0692\u0691\x03\x02\x02\x02\u0692\u0693\x03\x02','\x02\x02\u0693\u0695\x03\x02\x02\x02\u0694\u0690\x03\x02','\x02\x02\u0694\u0695\x03\x02\x02\x02\u0695\u069A\x03\x02','\x02\x02\u0696\u0698\x05\xFC\x7F\x02\u0697\u0699\x07\x99','\x02\x02\u0698\u0697\x03\x02\x02\x02\u0698\u0699\x03\x02','\x02\x02\u0699\u069B\x03\x02\x02\x02\u069A\u0696\x03\x02','\x02\x02\u069A\u069B\x03\x02\x02\x02\u069B\u06A0\x03\x02','\x02\x02\u069C\u069E\x05\xF2z\x02\u069D\u069F\x07\x99','\x02\x02\u069E\u069D\x03\x02\x02\x02\u069E\u069F\x03\x02','\x02\x02\u069F\u06A1\x03\x02\x02\x02\u06A0\u069C\x03\x02','\x02\x02\u06A0\u06A1\x03\x02\x02\x02\u06A1\u06A2\x03\x02','\x02\x02\u06A2\u06A3\x07\x16\x02\x02\u06A3\xE7\x03\x02','\x02\x02\u06A4\u06A6\x05\xEAv\x02\u06A5\u06A7\x07\x99','\x02\x02\u06A6\u06A5\x03\x02\x02\x02\u06A6\u06A7\x03\x02','\x02\x02\u06A7\u06A8\x03\x02\x02\x02\u06A8\u06A9\x05\xE6','t\x02\u06A9\xE9\x03\x02\x02\x02\u06AA\u06AC\x05\xEC','w\x02\u06AB\u06AD\x07\x99\x02\x02\u06AC\u06AB\x03\x02','\x02\x02\u06AC\u06AD\x03\x02\x02\x02\u06AD\u06AF\x03\x02','\x02\x02\u06AE\u06B0\x05\xF0y\x02\u06AF\u06AE\x03\x02','\x02\x02\u06AF\u06B0\x03\x02\x02\x02\u06B0\u06B2\x03\x02','\x02\x02\u06B1\u06B3\x07\x99\x02\x02\u06B2\u06B1\x03\x02','\x02\x02\u06B2\u06B3\x03\x02\x02\x02\u06B3\u06B4\x03\x02','\x02\x02\u06B4\u06B5\x05\xEEx\x02\u06B5\xEB\x03\x02','\x02\x02\u06B6\u06B8\x05\u0192\xCA\x02\u06B7\u06B9\x07\x99','\x02\x02\u06B8\u06B7\x03\x02\x02\x02\u06B8\u06B9\x03\x02','\x02\x02\u06B9\u06BA\x03\x02\x02\x02\u06BA\u06BB\x05\u0196','\xCC\x02\u06BB\u06BE\x03\x02\x02\x02\u06BC\u06BE\x05\u0196','\xCC\x02\u06BD\u06B6\x03\x02\x02\x02\u06BD\u06BC\x03\x02','\x02\x02\u06BE\xED\x03\x02\x02\x02\u06BF\u06C1\x05\u0196','\xCC\x02\u06C0\u06C2\x07\x99\x02\x02\u06C1\u06C0\x03\x02','\x02\x02\u06C1\u06C2\x03\x02\x02\x02\u06C2\u06C3\x03\x02','\x02\x02\u06C3\u06C4\x05\u0194\xCB\x02\u06C4\u06C7\x03\x02','\x02\x02\u06C5\u06C7\x05\u0196\xCC\x02\u06C6\u06BF\x03\x02','\x02\x02\u06C6\u06C5\x03\x02\x02\x02\u06C7\xEF\x03\x02','\x02\x02\u06C8\u06CA\x07\x13\x02\x02\u06C9\u06CB\x07\x99','\x02\x02\u06CA\u06C9\x03\x02\x02\x02\u06CA\u06CB\x03\x02','\x02\x02\u06CB\u06D0\x03\x02\x02\x02\u06CC\u06CE\x05\u016A','\xB6\x02\u06CD\u06CF\x07\x99\x02\x02\u06CE\u06CD\x03\x02','\x02\x02\u06CE\u06CF\x03\x02\x02\x02\u06CF\u06D1\x03\x02','\x02\x02\u06D0\u06CC\x03\x02\x02\x02\u06D0\u06D1\x03\x02','\x02\x02\u06D1\u06D6\x03\x02\x02\x02\u06D2\u06D4\x05\xF6','|\x02\u06D3\u06D5\x07\x99\x02\x02\u06D4\u06D3\x03\x02','\x02\x02\u06D4\u06D5\x03\x02\x02\x02\u06D5\u06D7\x03\x02','\x02\x02\u06D6\u06D2\x03\x02\x02\x02\u06D6\u06D7\x03\x02','\x02\x02\u06D7\u06D9\x03\x02\x02\x02\u06D8\u06DA\x05\u0100','\x81\x02\u06D9\u06D8\x03\x02\x02\x02\u06D9\u06DA\x03\x02','\x02\x02\u06DA\u06DF\x03\x02\x02\x02\u06DB\u06DD\x05\xF2','z\x02\u06DC\u06DE\x07\x99\x02\x02\u06DD\u06DC\x03\x02','\x02\x02\u06DD\u06DE\x03\x02\x02\x02\u06DE\u06E0\x03\x02','\x02\x02\u06DF\u06DB\x03\x02\x02\x02\u06DF\u06E0\x03\x02','\x02\x02\u06E0\u06E1\x03\x02\x02\x02\u06E1\u06E2\x07\x14','\x02\x02\u06E2\xF1\x03\x02\x02\x02\u06E3\u06E6\x05\u016E','\xB8\x02\u06E4\u06E6\x05\u017C\xBF\x02\u06E5\u06E3\x03\x02','\x02\x02\u06E5\u06E4\x03\x02\x02\x02\u06E6\xF3\x03\x02','\x02\x02\u06E7\u06E9\x07\x04\x02\x02\u06E8\u06EA\x07\x99','\x02\x02\u06E9\u06E8\x03\x02\x02\x02\u06E9\u06EA\x03\x02','\x02\x02\u06EA\u06EB\x03\x02\x02\x02\u06EB\u06EC\x05\u0104','\x83\x02\u06EC\xF5\x03\x02\x02\x02\u06ED\u06F5\x05\xF8','}\x02\u06EE\u06F0\x07\x99\x02\x02\u06EF\u06EE\x03\x02','\x02\x02\u06EF\u06F0\x03\x02\x02\x02\u06F0\u06F1\x03\x02','\x02\x02\u06F1\u06F2\x07\x18\x02\x02\u06F2\u06F4\x05\xFA','~\x02\u06F3\u06EF\x03\x02\x02\x02\u06F4\u06F7\x03\x02','\x02\x02\u06F5\u06F3\x03\x02\x02\x02\u06F5\u06F6\x03\x02','\x02\x02\u06F6\xF7\x03\x02\x02\x02\u06F7\u06F5\x03\x02','\x02\x02\u06F8\u06F9\x07\x04\x02\x02\u06F9\u06FA\x05\u0104','\x83\x02\u06FA\xF9\x03\x02\x02\x02\u06FB\u06FD\x07\x04','\x02\x02\u06FC\u06FB\x03\x02\x02\x02\u06FC\u06FD\x03\x02','\x02\x02\u06FD\u06FE\x03\x02\x02\x02\u06FE\u06FF\x05\u0104','\x83\x02\u06FF\xFB\x03\x02\x02\x02\u0700\u0707\x05\xFE','\x80\x02\u0701\u0703\x07\x99\x02\x02\u0702\u0701\x03\x02','\x02\x02\u0702\u0703\x03\x02\x02\x02\u0703\u0704\x03\x02','\x02\x02\u0704\u0706\x05\xFE\x80\x02\u0705\u0702\x03\x02','\x02\x02\u0706\u0709\x03\x02\x02\x02\u0707\u0705\x03\x02','\x02\x02\u0707\u0708\x03\x02\x02\x02\u0708\xFD\x03\x02','\x02\x02\u0709\u0707\x03\x02\x02\x02\u070A\u070B\x07\x04','\x02\x02\u070B\u070C\x05\u0102\x82\x02\u070C\xFF\x03\x02','\x02\x02\u070D\u070F\x07\x19\x02\x02\u070E\u0710\x07\x99','\x02\x02\u070F\u070E\x03\x02\x02\x02\u070F\u0710\x03\x02','\x02\x02\u0710\u0715\x03\x02\x02\x02\u0711\u0713\x05\u018C','\xC7\x02\u0712\u0714\x07\x99\x02\x02\u0713\u0712\x03\x02','\x02\x02\u0713\u0714\x03\x02\x02\x02\u0714\u0716\x03\x02','\x02\x02\u0715\u0711\x03\x02\x02\x02\u0715\u0716\x03\x02','\x02\x02\u0716\u0721\x03\x02\x02\x02\u0717\u0719\x07\x1A','\x02\x02\u0718\u071A\x07\x99\x02\x02\u0719\u0718\x03\x02','\x02\x02\u0719\u071A\x03\x02\x02\x02\u071A\u071F\x03\x02','\x02\x02\u071B\u071D\x05\u018C\xC7\x02\u071C\u071E\x07\x99','\x02\x02\u071D\u071C\x03\x02\x02\x02\u071D\u071E\x03\x02','\x02\x02\u071E\u0720\x03\x02\x02\x02\u071F\u071B\x03\x02','\x02\x02\u071F\u0720\x03\x02\x02\x02\u0720\u0722\x03\x02','\x02\x02\u0721\u0717\x03\x02\x02\x02\u0721\u0722\x03\x02','\x02\x02\u0722\u0101\x03\x02\x02\x02\u0723\u0724\x05\u0198','\xCD\x02\u0724\u0103\x03\x02\x02\x02\u0725\u0726\x05\u0198','\xCD\x02\u0726\u0105\x03\x02\x02\x02\u0727\u0728\x05\u0108','\x85\x02\u0728\u0107\x03\x02\x02\x02\u0729\u0730\x05\u010A','\x86\x02\u072A\u072B\x07\x99\x02\x02\u072B\u072C\x07m','\x02\x02\u072C\u072D\x07\x99\x02\x02\u072D\u072F\x05\u010A','\x86\x02\u072E\u072A\x03\x02\x02\x02\u072F\u0732\x03\x02','\x02\x02\u0730\u072E\x03\x02\x02\x02\u0730\u0731\x03\x02','\x02\x02\u0731\u0109\x03\x02\x02\x02\u0732\u0730\x03\x02','\x02\x02\u0733\u073A\x05\u010C\x87\x02\u0734\u0735\x07\x99','\x02\x02\u0735\u0736\x07n\x02\x02\u0736\u0737\x07\x99','\x02\x02\u0737\u0739\x05\u010C\x87\x02\u0738\u0734\x03\x02','\x02\x02\u0739\u073C\x03\x02\x02\x02\u073A\u0738\x03\x02','\x02\x02\u073A\u073B\x03\x02\x02\x02\u073B\u010B\x03\x02','\x02\x02\u073C\u073A\x03\x02\x02\x02\u073D\u0744\x05\u010E','\x88\x02\u073E\u073F\x07\x99\x02\x02\u073F\u0740\x07o','\x02\x02\u0740\u0741\x07\x99\x02\x02\u0741\u0743\x05\u010E','\x88\x02\u0742\u073E\x03\x02\x02\x02\u0743\u0746\x03\x02','\x02\x02\u0744\u0742\x03\x02\x02\x02\u0744\u0745\x03\x02','\x02\x02\u0745\u010D\x03\x02\x02\x02\u0746\u0744\x03\x02','\x02\x02\u0747\u0749\x07p\x02\x02\u0748\u074A\x07\x99','\x02\x02\u0749\u0748\x03\x02\x02\x02\u0749\u074A\x03\x02','\x02\x02\u074A\u074C\x03\x02\x02\x02\u074B\u0747\x03\x02','\x02\x02\u074C\u074F\x03\x02\x02\x02\u074D\u074B\x03\x02','\x02\x02\u074D\u074E\x03\x02\x02\x02\u074E\u0750\x03\x02','\x02\x02\u074F\u074D\x03\x02\x02\x02\u0750\u0751\x05\u0110','\x89\x02\u0751\u010F\x03\x02\x02\x02\u0752\u0759\x05\u0112','\x8A\x02\u0753\u0755\x07\x99\x02\x02\u0754\u0753\x03\x02','\x02\x02\u0754\u0755\x03\x02\x02\x02\u0755\u0756\x03\x02','\x02\x02\u0756\u0758\x05\u014E\xA8\x02\u0757\u0754\x03\x02','\x02\x02\u0758\u075B\x03\x02\x02\x02\u0759\u0757\x03\x02','\x02\x02\u0759\u075A\x03\x02\x02\x02\u075A\u0111\x03\x02','\x02\x02\u075B\u0759\x03\x02\x02\x02\u075C\u076F\x05\u0114','\x8B\x02\u075D\u075F\x07\x99\x02\x02\u075E\u075D\x03\x02','\x02\x02\u075E\u075F\x03\x02\x02\x02\u075F\u0760\x03\x02','\x02\x02\u0760\u0762\x07\x0F\x02\x02\u0761\u0763\x07\x99','\x02\x02\u0762\u0761\x03\x02\x02\x02\u0762\u0763\x03\x02','\x02\x02\u0763\u0764\x03\x02\x02\x02\u0764\u076E\x05\u0114','\x8B\x02\u0765\u0767\x07\x99\x02\x02\u0766\u0765\x03\x02','\x02\x02\u0766\u0767\x03\x02\x02\x02\u0767\u0768\x03\x02','\x02\x02\u0768\u076A\x07\x05\x02\x02\u0769\u076B\x07\x99','\x02\x02\u076A\u0769\x03\x02\x02\x02\u076A\u076B\x03\x02','\x02\x02\u076B\u076C\x03\x02\x02\x02\u076C\u076E\x05\u0114','\x8B\x02\u076D\u075E\x03\x02\x02\x02\u076D\u0766\x03\x02','\x02\x02\u076E\u0771\x03\x02\x02\x02\u076F\u076D\x03\x02','\x02\x02\u076F\u0770\x03\x02\x02\x02\u0770\u0113\x03\x02','\x02\x02\u0771\u076F\x03\x02\x02\x02\u0772\u078D\x05\u0116','\x8C\x02\u0773\u0775\x07\x99\x02\x02\u0774\u0773\x03\x02','\x02\x02\u0774\u0775\x03\x02\x02\x02\u0775\u0776\x03\x02','\x02\x02\u0776\u0778\x07\x19\x02\x02\u0777\u0779\x07\x99','\x02\x02\u0778\u0777\x03\x02\x02\x02\u0778\u0779\x03\x02','\x02\x02\u0779\u077A\x03\x02\x02\x02\u077A\u078C\x05\u0116','\x8C\x02\u077B\u077D\x07\x99\x02\x02\u077C\u077B\x03\x02','\x02\x02\u077C\u077D\x03\x02\x02\x02\u077D\u077E\x03\x02','\x02\x02\u077E\u0780\x07\b\x02\x02\u077F\u0781\x07\x99','\x02\x02\u0780\u077F\x03\x02\x02\x02\u0780\u0781\x03\x02','\x02\x02\u0781\u0782\x03\x02\x02\x02\u0782\u078C\x05\u0116','\x8C\x02\u0783\u0785\x07\x99\x02\x02\u0784\u0783\x03\x02','\x02\x02\u0784\u0785\x03\x02\x02\x02\u0785\u0786\x03\x02','\x02\x02\u0786\u0788\x07\x1B\x02\x02\u0787\u0789\x07\x99','\x02\x02\u0788\u0787\x03\x02\x02\x02\u0788\u0789\x03\x02','\x02\x02\u0789\u078A\x03\x02\x02\x02\u078A\u078C\x05\u0116','\x8C\x02\u078B\u0774\x03\x02\x02\x02\u078B\u077C\x03\x02','\x02\x02\u078B\u0784\x03\x02\x02\x02\u078C\u078F\x03\x02','\x02\x02\u078D\u078B\x03\x02\x02\x02\u078D\u078E\x03\x02','\x02\x02\u078E\u0115\x03\x02\x02\x02\u078F\u078D\x03\x02','\x02\x02\u0790\u079B\x05\u0118\x8D\x02\u0791\u0793\x07\x99','\x02\x02\u0792\u0791\x03\x02\x02\x02\u0792\u0793\x03\x02','\x02\x02\u0793\u0794\x03\x02\x02\x02\u0794\u0796\x07\x1C','\x02\x02\u0795\u0797\x07\x99\x02\x02\u0796\u0795\x03\x02','\x02\x02\u0796\u0797\x03\x02\x02\x02\u0797\u0798\x03\x02','\x02\x02\u0798\u079A\x05\u0118\x8D\x02\u0799\u0792\x03\x02','\x02\x02\u079A\u079D\x03\x02\x02\x02\u079B\u0799\x03\x02','\x02\x02\u079B\u079C\x03\x02\x02\x02\u079C\u0117\x03\x02','\x02\x02\u079D\u079B\x03\x02\x02\x02\u079E\u07A0\t\x05','\x02\x02\u079F\u07A1\x07\x99\x02\x02\u07A0\u079F\x03\x02','\x02\x02\u07A0\u07A1\x03\x02\x02\x02\u07A1\u07A3\x03\x02','\x02\x02\u07A2\u079E\x03\x02\x02\x02\u07A3\u07A6\x03\x02','\x02\x02\u07A4\u07A2\x03\x02\x02\x02\u07A4\u07A5\x03\x02','\x02\x02\u07A5\u07A7\x03\x02\x02\x02\u07A6\u07A4\x03\x02','\x02\x02\u07A7\u07A8\x05\u011A\x8E\x02\u07A8\u0119\x03\x02','\x02\x02\u07A9\u07DF\x05\u011C\x8F\x02\u07AA\u07AC\x07\x99','\x02\x02\u07AB\u07AA\x03\x02\x02\x02\u07AB\u07AC\x03\x02','\x02\x02\u07AC\u07AD\x03\x02\x02\x02\u07AD\u07AE\x07\x13','\x02\x02\u07AE\u07AF\x05\u0106\x84\x02\u07AF\u07B0\x07\x14','\x02\x02\u07B0\u07DE\x03\x02\x02\x02\u07B1\u07B3\x07\x99','\x02\x02\u07B2\u07B1\x03\x02\x02\x02\u07B2\u07B3\x03\x02','\x02\x02\u07B3\u07B4\x03\x02\x02\x02\u07B4\u07B6\x07\x13','\x02\x02\u07B5\u07B7\x05\u0106\x84\x02\u07B6\u07B5\x03\x02','\x02\x02\u07B6\u07B7\x03\x02\x02\x02\u07B7\u07B8\x03\x02','\x02\x02\u07B8\u07BA\x07\x1A\x02\x02\u07B9\u07BB\x05\u0106','\x84\x02\u07BA\u07B9\x03\x02\x02\x02\u07BA\u07BB\x03\x02','\x02\x02\u07BB\u07BC\x03\x02\x02\x02\u07BC\u07DE\x07\x14','\x02\x02\u07BD\u07BF\x07\x99\x02\x02\u07BE\u07BD\x03\x02','\x02\x02\u07BE\u07BF\x03\x02\x02\x02\u07BF\u07C0\x03\x02','\x02\x02\u07C0\u07CE\x07\x1D\x02\x02\u07C1\u07C2\x07\x99','\x02\x02\u07C2\u07CE\x07Y\x02\x02\u07C3\u07C4\x07\x99','\x02\x02\u07C4\u07C5\x07q\x02\x02\u07C5\u07C6\x07\x99','\x02\x02\u07C6\u07CE\x07K\x02\x02\u07C7\u07C8\x07\x99','\x02\x02\u07C8\u07C9\x07r\x02\x02\u07C9\u07CA\x07\x99','\x02\x02\u07CA\u07CE\x07K\x02\x02\u07CB\u07CC\x07\x99','\x02\x02\u07CC\u07CE\x07s\x02\x02\u07CD\u07BE\x03\x02','\x02\x02\u07CD\u07C1\x03\x02\x02\x02\u07CD\u07C3\x03\x02','\x02\x02\u07CD\u07C7\x03\x02\x02\x02\u07CD\u07CB\x03\x02','\x02\x02\u07CE\u07D0\x03\x02\x02\x02\u07CF\u07D1\x07\x99','\x02\x02\u07D0\u07CF\x03\x02\x02\x02\u07D0\u07D1\x03\x02','\x02\x02\u07D1\u07D2\x03\x02\x02\x02\u07D2\u07DE\x05\u011C','\x8F\x02\u07D3\u07D4\x07\x99\x02\x02\u07D4\u07D5\x07F','\x02\x02\u07D5\u07D6\x07\x99\x02\x02\u07D6\u07DE\x07t','\x02\x02\u07D7\u07D8\x07\x99\x02\x02\u07D8\u07D9\x07F','\x02\x02\u07D9\u07DA\x07\x99\x02\x02\u07DA\u07DB\x07p','\x02\x02\u07DB\u07DC\x07\x99\x02\x02\u07DC\u07DE\x07t','\x02\x02\u07DD\u07AB\x03\x02\x02\x02\u07DD\u07B2\x03\x02','\x02\x02\u07DD\u07CD\x03\x02\x02\x02\u07DD\u07D3\x03\x02','\x02\x02\u07DD\u07D7\x03\x02\x02\x02\u07DE\u07E1\x03\x02','\x02\x02\u07DF\u07DD\x03\x02\x02\x02\u07DF\u07E0\x03\x02','\x02\x02\u07E0\u011B\x03\x02\x02\x02\u07E1\u07DF\x03\x02','\x02\x02\u07E2\u07EC\x05\u0144\xA3\x02\u07E3\u07E5\x07\x99','\x02\x02\u07E4\u07E3\x03\x02\x02\x02\u07E4\u07E5\x03\x02','\x02\x02\u07E5\u07E8\x03\x02\x02\x02\u07E6\u07E9\x05\u0164','\xB3\x02\u07E7\u07E9\x05\xFC\x7F\x02\u07E8\u07E6\x03\x02','\x02\x02\u07E8\u07E7\x03\x02\x02\x02\u07E9\u07EB\x03\x02','\x02\x02\u07EA\u07E4\x03\x02\x02\x02\u07EB\u07EE\x03\x02','\x02\x02\u07EC\u07EA\x03\x02\x02\x02\u07EC\u07ED\x03\x02','\x02\x02\u07ED\u011D\x03\x02\x02\x02\u07EE\u07EC\x03\x02','\x02\x02\u07EF\u07F1\x05\u0120\x91\x02\u07F0\u07F2\x07\x99','\x02\x02\u07F1\u07F0\x03\x02\x02\x02\u07F1\u07F2\x03\x02','\x02\x02\u07F2\u07F3\x03\x02\x02\x02\u07F3\u07F5\x07\x15','\x02\x02\u07F4\u07F6\x07\x99\x02\x02\u07F5\u07F4\x03\x02','\x02\x02\u07F5\u07F6\x03\x02\x02\x02\u07F6\u07F7\x03\x02','\x02\x02\u07F7\u07F9\x05\u0154\xAB\x02\u07F8\u07FA\x07\x99','\x02\x02\u07F9\u07F8\x03\x02\x02\x02\u07F9\u07FA\x03\x02','\x02\x02\u07FA\u07FB\x03\x02\x02\x02\u07FB\u07FC\x07\x16','\x02\x02\u07FC\u011F\x03\x02\x02\x02\u07FD\u07FE\x07v','\x02\x02\u07FE\u0121\x03\x02\x02\x02\u07FF\u0801\x05\u0124','\x93\x02\u0800\u0802\x07\x99\x02\x02\u0801\u0800\x03\x02','\x02\x02\u0801\u0802\x03\x02\x02\x02\u0802\u0803\x03\x02','\x02\x02\u0803\u0805\x07\x15\x02\x02\u0804\u0806\x07\x99','\x02\x02\u0805\u0804\x03\x02\x02\x02\u0805\u0806\x03\x02','\x02\x02\u0806\u0807\x03\x02\x02\x02\u0807\u0809\x05\u0106','\x84\x02\u0808\u080A\x07\x99\x02\x02\u0809\u0808\x03\x02','\x02\x02\u0809\u080A\x03\x02\x02\x02\u080A\u080B\x03\x02','\x02\x02\u080B\u080C\x07\x16\x02\x02\u080C\u0123\x03\x02','\x02\x02\u080D\u080E\x07H\x02\x02\u080E\u0125\x03\x02','\x02\x02\u080F\u0811\x05\u0128\x95\x02\u0810\u0812\x07\x99','\x02\x02\u0811\u0810\x03\x02\x02\x02\u0811\u0812\x03\x02','\x02\x02\u0812\u0813\x03\x02\x02\x02\u0813\u0815\x07\x15','\x02\x02\u0814\u0816\x07\x99\x02\x02\u0815\u0814\x03\x02','\x02\x02\u0815\u0816\x03\x02\x02\x02\u0816\u0817\x03\x02','\x02\x02\u0817\u0819\x05\u0154\xAB\x02\u0818\u081A\x07\x99','\x02\x02\u0819\u0818\x03\x02\x02\x02\u0819\u081A\x03\x02','\x02\x02\u081A\u081B\x03\x02\x02\x02\u081B\u081C\x07\x16','\x02\x02\u081C\u0127\x03\x02\x02\x02\u081D\u081E\x07?','\x02\x02\u081E\u0129\x03\x02\x02\x02\u081F\u0821\x05\u012C','\x97\x02\u0820\u0822\x07\x99\x02\x02\u0821\u0820\x03\x02','\x02\x02\u0821\u0822\x03\x02\x02\x02\u0822\u0823\x03\x02','\x02\x02\u0823\u0825\x07\x15\x02\x02\u0824\u0826\x07\x99','\x02\x02\u0825\u0824\x03\x02\x02\x02\u0825\u0826\x03\x02','\x02\x02\u0826\u0827\x03\x02\x02\x02\u0827\u0829\x05\u0154','\xAB\x02\u0828\u082A\x07\x99\x02\x02\u0829\u0828\x03\x02','\x02\x02\u0829\u082A\x03\x02\x02\x02\u082A\u082B\x03\x02','\x02\x02\u082B\u082C\x07\x16\x02\x02\u082C\u012B\x03\x02','\x02\x02\u082D\u082E\x07x\x02\x02\u082E\u012D\x03\x02','\x02\x02\u082F\u0831\x05\u0130\x99\x02\u0830\u0832\x07\x99','\x02\x02\u0831\u0830\x03\x02\x02\x02\u0831\u0832\x03\x02','\x02\x02\u0832\u0833\x03\x02\x02\x02\u0833\u0835\x07\x15','\x02\x02\u0834\u0836\x07\x99\x02\x02\u0835\u0834\x03\x02','\x02\x02\u0835\u0836\x03\x02\x02\x02\u0836\u0837\x03\x02','\x02\x02\u0837\u0839\x05\u0154\xAB\x02\u0838\u083A\x07\x99','\x02\x02\u0839\u0838\x03\x02\x02\x02\u0839\u083A\x03\x02','\x02\x02\u083A\u083B\x03\x02\x02\x02\u083B\u083C\x07\x16','\x02\x02\u083C\u012F\x03\x02\x02\x02\u083D\u083E\x07y','\x02\x02\u083E\u0131\x03\x02\x02\x02\u083F\u0841\x05\u0134','\x9B\x02\u0840\u0842\x07\x99\x02\x02\u0841\u0840\x03\x02','\x02\x02\u0841\u0842\x03\x02\x02\x02\u0842\u0843\x03\x02','\x02\x02\u0843\u0845\x07\x15\x02\x02\u0844\u0846\x07\x99','\x02\x02\u0845\u0844\x03\x02\x02\x02\u0845\u0846\x03\x02','\x02\x02\u0846\u0847\x03\x02\x02\x02\u0847\u0849\x05\u0154','\xAB\x02\u0848\u084A\x07\x99\x02\x02\u0849\u0848\x03\x02','\x02\x02\u0849\u084A\x03\x02\x02\x02\u084A\u084B\x03\x02','\x02\x02\u084B\u084C\x07\x16\x02\x02\u084C\u0133\x03\x02','\x02\x02\u084D\u084E\x07z\x02\x02\u084E\u0135\x03\x02','\x02\x02\u084F\u0851\x05\u0138\x9D\x02\u0850\u0852\x07\x99','\x02\x02\u0851\u0850\x03\x02\x02\x02\u0851\u0852\x03\x02','\x02\x02\u0852\u0853\x03\x02\x02\x02\u0853\u0855\x07\x15','\x02\x02\u0854\u0856\x07\x99\x02\x02\u0855\u0854\x03\x02','\x02\x02\u0855\u0856\x03\x02\x02\x02\u0856\u0857\x03\x02','\x02\x02\u0857\u0860\x05\u0154\xAB\x02\u0858\u085A\x07\x99','\x02\x02\u0859\u0858\x03\x02\x02\x02\u0859\u085A\x03\x02','\x02\x02\u085A\u085B\x03\x02\x02\x02\u085B\u085D\x07\x18','\x02\x02\u085C\u085E\x07\x99\x02\x02\u085D\u085C\x03\x02','\x02\x02\u085D\u085E\x03\x02\x02\x02\u085E\u085F\x03\x02','\x02\x02\u085F\u0861\x05\u0106\x84\x02\u0860\u0859\x03\x02','\x02\x02\u0860\u0861\x03\x02\x02\x02\u0861\u0863\x03\x02','\x02\x02\u0862\u0864\x07\x99\x02\x02\u0863\u0862\x03\x02','\x02\x02\u0863\u0864\x03\x02\x02\x02\u0864\u0865\x03\x02','\x02\x02\u0865\u0866\x07\x16\x02\x02\u0866\u0137\x03\x02','\x02\x02\u0867\u0868\x07w\x02\x02\u0868\u0139\x03\x02','\x02\x02\u0869\u086B\x05\u013C\x9F\x02\u086A\u086C\x07\x99','\x02\x02\u086B\u086A\x03\x02\x02\x02\u086B\u086C\x03\x02','\x02\x02\u086C\u086D\x03\x02\x02\x02\u086D\u086F\x07\x15','\x02\x02\u086E\u0870\x07\x99\x02\x02\u086F\u086E\x03\x02','\x02\x02\u086F\u0870\x03\x02\x02\x02\u0870\u0871\x03\x02','\x02\x02\u0871\u0873\x05\u016A\xB6\x02\u0872\u0874\x07\x99','\x02\x02\u0873\u0872\x03\x02\x02\x02\u0873\u0874\x03\x02','\x02\x02\u0874\u0875\x03\x02\x02\x02\u0875\u0877\x07\x0E','\x02\x02\u0876\u0878\x07\x99\x02\x02\u0877\u0876\x03\x02','\x02\x02\u0877\u0878\x03\x02\x02\x02\u0878\u0879\x03\x02','\x02\x02\u0879\u087B\x05\u0106\x84\x02\u087A\u087C\x07\x99','\x02\x02\u087B\u087A\x03\x02\x02\x02\u087B\u087C\x03\x02','\x02\x02\u087C\u087D\x03\x02\x02\x02\u087D\u087F\x07\x11','\x02\x02\u087E\u0880\x07\x99\x02\x02\u087F\u087E\x03\x02','\x02\x02\u087F\u0880\x03\x02\x02\x02\u0880\u0881\x03\x02','\x02\x02\u0881\u0883\x05\u0156\xAC\x02\u0882\u0884\x07\x99','\x02\x02\u0883\u0882\x03\x02\x02\x02\u0883\u0884\x03\x02','\x02\x02\u0884\u0885\x03\x02\x02\x02\u0885\u0887\x07\x18','\x02\x02\u0886\u0888\x07\x99\x02\x02\u0887\u0886\x03\x02','\x02\x02\u0887\u0888\x03\x02\x02\x02\u0888\u0889\x03\x02','\x02\x02\u0889\u088B\x05\u0106\x84\x02\u088A\u088C\x07\x99','\x02\x02\u088B\u088A\x03\x02\x02\x02\u088B\u088C\x03\x02','\x02\x02\u088C\u088D\x03\x02\x02\x02\u088D\u088E\x07\x16','\x02\x02\u088E\u013B\x03\x02\x02\x02\u088F\u0890\x07}','\x02\x02\u0890\u013D\x03\x02\x02\x02\u0891\u0893\x05\u0140','\xA1\x02\u0892\u0894\x07\x99\x02\x02\u0893\u0892\x03\x02','\x02\x02\u0893\u0894\x03\x02\x02\x02\u0894\u0895\x03\x02','\x02\x02\u0895\u0897\x07\x15\x02\x02\u0896\u0898\x07\x99','\x02\x02\u0897\u0896\x03\x02\x02\x02\u0897\u0898\x03\x02','\x02\x02\u0898\u0899\x03\x02\x02\x02\u0899\u089B\x05\xE4','s\x02\u089A\u089C\x07\x99\x02\x02\u089B\u089A\x03\x02','\x02\x02\u089B\u089C\x03\x02\x02\x02\u089C\u089D\x03\x02','\x02\x02\u089D\u089E\x07\x16\x02\x02\u089E\u08AE\x03\x02','\x02\x02\u089F\u08A1\x05\u0142\xA2\x02\u08A0\u08A2\x07\x99','\x02\x02\u08A1\u08A0\x03\x02\x02\x02\u08A1\u08A2\x03\x02','\x02\x02\u08A2\u08A3\x03\x02\x02\x02\u08A3\u08A5\x07\x15','\x02\x02\u08A4\u08A6\x07\x99\x02\x02\u08A5\u08A4\x03\x02','\x02\x02\u08A5\u08A6\x03\x02\x02\x02\u08A6\u08A7\x03\x02','\x02\x02\u08A7\u08A9\x05\xE4s\x02\u08A8\u08AA\x07\x99','\x02\x02\u08A9\u08A8\x03\x02\x02\x02\u08A9\u08AA\x03\x02','\x02\x02\u08AA\u08AB\x03\x02\x02\x02\u08AB\u08AC\x07\x16','\x02\x02\u08AC\u08AE\x03\x02\x02\x02\u08AD\u0891\x03\x02','\x02\x02\u08AD\u089F\x03\x02\x02\x02\u08AE\u013F\x03\x02','\x02\x02\u08AF\u08B0\x07k\x02\x02\u08B0\u0141\x03\x02','\x02\x02\u08B1\u08B2\x07l\x02\x02\u08B2\u0143\x03\x02','\x02\x02\u08B3\u08D3\x05\u0146\xA4\x02\u08B4\u08D3\x05\u017C','\xBF\x02\u08B5\u08D3\x05\u0166\xB4\x02\u08B6\u08B8\x07u','\x02\x02\u08B7\u08B9\x07\x99\x02\x02\u08B8\u08B7\x03\x02','\x02\x02\u08B8\u08B9\x03\x02\x02\x02\u08B9\u08BA\x03\x02','\x02\x02\u08BA\u08BC\x07\x15\x02\x02\u08BB\u08BD\x07\x99','\x02\x02\u08BC\u08BB\x03\x02\x02\x02\u08BC\u08BD\x03\x02','\x02\x02\u08BD\u08BE\x03\x02\x02\x02\u08BE\u08C0\x07\x19','\x02\x02\u08BF\u08C1\x07\x99\x02\x02\u08C0\u08BF\x03\x02','\x02\x02\u08C0\u08C1\x03\x02\x02\x02\u08C1\u08C2\x03\x02','\x02\x02\u08C2\u08D3\x07\x16\x02\x02\u08C3\u08D3\x05\u0160','\xB1\x02\u08C4\u08D3\x05\u0162\xB2\x02\u08C5\u08D3\x05\u011E','\x90\x02\u08C6\u08D3\x05\u0136\x9C\x02\u08C7\u08D3\x05\u013A','\x9E\x02\u08C8\u08D3\x05\u0126\x94\x02\u08C9\u08D3\x05\u012A','\x96\x02\u08CA\u08D3\x05\u012E\x98\x02\u08CB\u08D3\x05\u0132','\x9A\x02\u08CC\u08D3\x05\u0122\x92\x02\u08CD\u08D3\x05\u013E','\xA0\x02\u08CE\u08D3\x05\u0152\xAA\x02\u08CF\u08D3\x05\u0150','\xA9\x02\u08D0\u08D3\x05\u0158\xAD\x02\u08D1\u08D3\x05\u016A','\xB6\x02\u08D2\u08B3\x03\x02\x02\x02\u08D2\u08B4\x03\x02','\x02\x02\u08D2\u08B5\x03\x02\x02\x02\u08D2\u08B6\x03\x02','\x02\x02\u08D2\u08C3\x03\x02\x02\x02\u08D2\u08C4\x03\x02','\x02\x02\u08D2\u08C5\x03\x02\x02\x02\u08D2\u08C6\x03\x02','\x02\x02\u08D2\u08C7\x03\x02\x02\x02\u08D2\u08C8\x03\x02','\x02\x02\u08D2\u08C9\x03\x02\x02\x02\u08D2\u08CA\x03\x02','\x02\x02\u08D2\u08CB\x03\x02\x02\x02\u08D2\u08CC\x03\x02','\x02\x02\u08D2\u08CD\x03\x02\x02\x02\u08D2\u08CE\x03\x02','\x02\x02\u08D2\u08CF\x03\x02\x02\x02\u08D2\u08D0\x03\x02','\x02\x02\u08D2\u08D1\x03\x02\x02\x02\u08D3\u0145\x03\x02','\x02\x02\u08D4\u08DC\x05\u016C\xB7\x02\u08D5\u08DC\x05\u0148','\xA5\x02\u08D6\u08DC\x05\u014A\xA6\x02\u08D7\u08DC\x07t','\x02\x02\u08D8\u08DC\x05\u016E\xB8\x02\u08D9\u08DC\x05\u014C','\xA7\x02\u08DA\u08DC\x05\u0170\xB9\x02\u08DB\u08D4\x03\x02','\x02\x02\u08DB\u08D5\x03\x02\x02\x02\u08DB\u08D6\x03\x02','\x02\x02\u08DB\u08D7\x03\x02\x02\x02\u08DB\u08D8\x03\x02','\x02\x02\u08DB\u08D9\x03\x02\x02\x02\u08DB\u08DA\x03\x02','\x02\x02\u08DC\u0147\x03\x02\x02\x02\u08DD\u08DE\x07\x86','\x02\x02\u08DE\u0149\x03\x02\x02\x02\u08DF\u08E0\t\x06','\x02\x02\u08E0\u014B\x03\x02\x02\x02\u08E1\u08E3\x07\x13','\x02\x02\u08E2\u08E4\x07\x99\x02\x02\u08E3\u08E2\x03\x02','\x02\x02\u08E3\u08E4\x03\x02\x02\x02\u08E4\u08F6\x03\x02','\x02\x02\u08E5\u08E7\x05\u0106\x84\x02\u08E6\u08E8\x07\x99','\x02\x02\u08E7\u08E6\x03\x02\x02\x02\u08E7\u08E8\x03\x02','\x02\x02\u08E8\u08F3\x03\x02\x02\x02\u08E9\u08EB\x07\x11','\x02\x02\u08EA\u08EC\x07\x99\x02\x02\u08EB\u08EA\x03\x02','\x02\x02\u08EB\u08EC\x03\x02\x02\x02\u08EC\u08ED\x03\x02','\x02\x02\u08ED\u08EF\x05\u0106\x84\x02\u08EE\u08F0\x07\x99','\x02\x02\u08EF\u08EE\x03\x02\x02\x02\u08EF\u08F0\x03\x02','\x02\x02\u08F0\u08F2\x03\x02\x02\x02\u08F1\u08E9\x03\x02','\x02\x02\u08F2\u08F5\x03\x02\x02\x02\u08F3\u08F1\x03\x02','\x02\x02\u08F3\u08F4\x03\x02\x02\x02\u08F4\u08F7\x03\x02','\x02\x02\u08F5\u08F3\x03\x02\x02\x02\u08F6\u08E5\x03\x02','\x02\x02\u08F6\u08F7\x03\x02\x02\x02\u08F7\u08F8\x03\x02','\x02\x02\u08F8\u08F9\x07\x14\x02\x02\u08F9\u014D\x03\x02','\x02\x02\u08FA\u08FC\x07\x0E\x02\x02\u08FB\u08FD\x07\x99','\x02\x02\u08FC\u08FB\x03\x02\x02\x02\u08FC\u08FD\x03\x02','\x02\x02\u08FD\u08FE\x03\x02\x02\x02\u08FE\u091E\x05\u0112','\x8A\x02\u08FF\u0901\x07\x1E\x02\x02\u0900\u0902\x07\x99','\x02\x02\u0901\u0900\x03\x02\x02\x02\u0901\u0902\x03\x02','\x02\x02\u0902\u0903\x03\x02\x02\x02\u0903\u091E\x05\u0112','\x8A\x02\u0904\u0906\x07\x1F\x02\x02\u0905\u0907\x07\x99','\x02\x02\u0906\u0905\x03\x02\x02\x02\u0906\u0907\x03\x02','\x02\x02\u0907\u0908\x03\x02\x02\x02\u0908\u091E\x05\u0112','\x8A\x02\u0909\u090B\x07 \x02\x02\u090A\u090C\x07\x99','\x02\x02\u090B\u090A\x03\x02\x02\x02\u090B\u090C\x03\x02','\x02\x02\u090C\u090D\x03\x02\x02\x02\u090D\u091E\x05\u0112','\x8A\x02\u090E\u0910\x07!\x02\x02\u090F\u0911\x07\x99','\x02\x02\u0910\u090F\x03\x02\x02\x02\u0910\u0911\x03\x02','\x02\x02\u0911\u0912\x03\x02\x02\x02\u0912\u091E\x05\u0112','\x8A\x02\u0913\u0915\x07"\x02\x02\u0914\u0916\x07\x99','\x02\x02\u0915\u0914\x03\x02\x02\x02\u0915\u0916\x03\x02','\x02\x02\u0916\u0917\x03\x02\x02\x02\u0917\u091E\x05\u0112','\x8A\x02\u0918\u091A\x07#\x02\x02\u0919\u091B\x07\x99','\x02\x02\u091A\u0919\x03\x02\x02\x02\u091A\u091B\x03\x02','\x02\x02\u091B\u091C\x03\x02\x02\x02\u091C\u091E\x05\u0112','\x8A\x02\u091D\u08FA\x03\x02\x02\x02\u091D\u08FF\x03\x02','\x02\x02\u091D\u0904\x03\x02\x02\x02\u091D\u0909\x03\x02','\x02\x02\u091D\u090E\x03\x02\x02\x02\u091D\u0913\x03\x02','\x02\x02\u091D\u0918\x03\x02\x02\x02\u091E\u014F\x03\x02','\x02\x02\u091F\u0921\x07\x15\x02\x02\u0920\u0922\x07\x99','\x02\x02\u0921\u0920\x03\x02\x02\x02\u0921\u0922\x03\x02','\x02\x02\u0922\u0923\x03\x02\x02\x02\u0923\u0925\x05\u0106','\x84\x02\u0924\u0926\x07\x99\x02\x02\u0925\u0924\x03\x02','\x02\x02\u0925\u0926\x03\x02\x02\x02\u0926\u0927\x03\x02','\x02\x02\u0927\u0928\x07\x16\x02\x02\u0928\u0151\x03\x02','\x02\x02\u0929\u092E\x05\xE6t\x02\u092A\u092C\x07\x99','\x02\x02\u092B\u092A\x03\x02\x02\x02\u092B\u092C\x03\x02','\x02\x02\u092C\u092D\x03\x02\x02\x02\u092D\u092F\x05\xE8','u\x02\u092E\u092B\x03\x02\x02\x02\u092F\u0930\x03\x02','\x02\x02\u0930\u092E\x03\x02\x02\x02\u0930\u0931\x03\x02','\x02\x02\u0931\u0153\x03\x02\x02\x02\u0932\u0937\x05\u0156','\xAC\x02\u0933\u0935\x07\x99\x02\x02\u0934\u0933\x03\x02','\x02\x02\u0934\u0935\x03\x02\x02\x02\u0935\u0936\x03\x02','\x02\x02\u0936\u0938\x05\xDCo\x02\u0937\u0934\x03\x02','\x02\x02\u0937\u0938\x03\x02\x02\x02\u0938\u0155\x03\x02','\x02\x02\u0939\u093A\x05\u016A\xB6\x02\u093A\u093B\x07\x99','\x02\x02\u093B\u093C\x07Y\x02\x02\u093C\u093D\x07\x99','\x02\x02\u093D\u093E\x05\u0106\x84\x02\u093E\u0157\x03\x02','\x02\x02\u093F\u0941\x05\u015A\xAE\x02\u0940\u0942\x07\x99','\x02\x02\u0941\u0940\x03\x02\x02\x02\u0941\u0942\x03\x02','\x02\x02\u0942\u0943\x03\x02\x02\x02\u0943\u0945\x07\x15','\x02\x02\u0944\u0946\x07\x99\x02\x02\u0945\u0944\x03\x02','\x02\x02\u0945\u0946\x03\x02\x02\x02\u0946\u094B\x03\x02','\x02\x02\u0947\u0949\x07Z\x02\x02\u0948\u094A\x07\x99','\x02\x02\u0949\u0948\x03\x02\x02\x02\u0949\u094A\x03\x02','\x02\x02\u094A\u094C\x03\x02\x02\x02\u094B\u0947\x03\x02','\x02\x02\u094B\u094C\x03\x02\x02\x02\u094C\u095E\x03\x02','\x02\x02\u094D\u094F\x05\u0106\x84\x02\u094E\u0950\x07\x99','\x02\x02\u094F\u094E\x03\x02\x02\x02\u094F\u0950\x03\x02','\x02\x02\u0950\u095B\x03\x02\x02\x02\u0951\u0953\x07\x11','\x02\x02\u0952\u0954\x07\x99\x02\x02\u0953\u0952\x03\x02','\x02\x02\u0953\u0954\x03\x02\x02\x02\u0954\u0955\x03\x02','\x02\x02\u0955\u0957\x05\u0106\x84\x02\u0956\u0958\x07\x99','\x02\x02\u0957\u0956\x03\x02\x02\x02\u0957\u0958\x03\x02','\x02\x02\u0958\u095A\x03\x02\x02\x02\u0959\u0951\x03\x02','\x02\x02\u095A\u095D\x03\x02\x02\x02\u095B\u0959\x03\x02','\x02\x02\u095B\u095C\x03\x02\x02\x02\u095C\u095F\x03\x02','\x02\x02\u095D\u095B\x03\x02\x02\x02\u095E\u094D\x03\x02','\x02\x02\u095E\u095F\x03\x02\x02\x02\u095F\u0960\x03\x02','\x02\x02\u0960\u0961\x07\x16\x02\x02\u0961\u0159\x03\x02','\x02\x02\u0962\u0963\x05\u0190\xC9\x02\u0963\u0964\x05\u015C','\xAF\x02\u0964\u015B\x03\x02\x02\x02\u0965\u0966\t\x07','\x02\x02\u0966\u015D\x03\x02\x02\x02\u0967\u0968\x05\u0198','\xCD\x02\u0968\u015F\x03\x02\x02\x02\u0969\u096B\x07\x13','\x02\x02\u096A\u096C\x07\x99\x02\x02\u096B\u096A\x03\x02','\x02\x02\u096B\u096C\x03\x02\x02\x02\u096C\u096D\x03\x02','\x02\x02\u096D\u0976\x05\u0154\xAB\x02\u096E\u0970\x07\x99','\x02\x02\u096F\u096E\x03\x02\x02\x02\u096F\u0970\x03\x02','\x02\x02\u0970\u0971\x03\x02\x02\x02\u0971\u0973\x07\x18','\x02\x02\u0972\u0974\x07\x99\x02\x02\u0973\u0972\x03\x02','\x02\x02\u0973\u0974\x03\x02\x02\x02\u0974\u0975\x03\x02','\x02\x02\u0975\u0977\x05\u0106\x84\x02\u0976\u096F\x03\x02','\x02\x02\u0976\u0977\x03\x02\x02\x02\u0977\u0979\x03\x02','\x02\x02\u0978\u097A\x07\x99\x02\x02\u0979\u0978\x03\x02','\x02\x02\u0979\u097A\x03\x02\x02\x02\u097A\u097B\x03\x02','\x02\x02\u097B\u097C\x07\x14\x02\x02\u097C\u0161\x03\x02','\x02\x02\u097D\u097F\x07\x13\x02\x02\u097E\u0980\x07\x99','\x02\x02\u097F\u097E\x03\x02\x02\x02\u097F\u0980\x03\x02','\x02\x02\u0980\u0989\x03\x02\x02\x02\u0981\u0983\x05\u016A','\xB6\x02\u0982\u0984\x07\x99\x02\x02\u0983\u0982\x03\x02','\x02\x02\u0983\u0984\x03\x02\x02\x02\u0984\u0985\x03\x02','\x02\x02\u0985\u0987\x07\x0E\x02\x02\u0986\u0988\x07\x99','\x02\x02\u0987\u0986\x03\x02\x02\x02\u0987\u0988\x03\x02','\x02\x02\u0988\u098A\x03\x02\x02\x02\u0989\u0981\x03\x02','\x02\x02\u0989\u098A\x03\x02\x02\x02\u098A\u098B\x03\x02','\x02\x02\u098B\u098D\x05\u0152\xAA\x02\u098C\u098E\x07\x99','\x02\x02\u098D\u098C\x03\x02\x02\x02\u098D\u098E\x03\x02','\x02\x02\u098E\u0997\x03\x02\x02\x02\u098F\u0991\x07j','\x02\x02\u0990\u0992\x07\x99\x02\x02\u0991\u0990\x03\x02','\x02\x02\u0991\u0992\x03\x02\x02\x02\u0992\u0993\x03\x02','\x02\x02\u0993\u0995\x05\u0106\x84\x02\u0994\u0996\x07\x99','\x02\x02\u0995\u0994\x03\x02\x02\x02\u0995\u0996\x03\x02','\x02\x02\u0996\u0998\x03\x02\x02\x02\u0997\u098F\x03\x02','\x02\x02\u0997\u0998\x03\x02\x02\x02\u0998\u0999\x03\x02','\x02\x02\u0999\u099B\x07\x18\x02\x02\u099A\u099C\x07\x99','\x02\x02\u099B\u099A\x03\x02\x02\x02\u099B\u099C\x03\x02','\x02\x02\u099C\u099D\x03\x02\x02\x02\u099D\u099F\x05\u0106','\x84\x02\u099E\u09A0\x07\x99\x02\x02\u099F\u099E\x03\x02','\x02\x02\u099F\u09A0\x03\x02\x02\x02\u09A0\u09A1\x03\x02','\x02\x02\u09A1\u09A2\x07\x14\x02\x02\u09A2\u0163\x03\x02','\x02\x02\u09A3\u09A5\x07\t\x02\x02\u09A4\u09A6\x07\x99','\x02\x02\u09A5\u09A4\x03\x02\x02\x02\u09A5\u09A6\x03\x02','\x02\x02\u09A6\u09A7\x03\x02\x02\x02\u09A7\u09A8\x05\u018A','\xC6\x02\u09A8\u0165\x03\x02\x02\x02\u09A9\u09AE\x07~','\x02\x02\u09AA\u09AC\x07\x99\x02\x02\u09AB\u09AA\x03\x02','\x02\x02\u09AB\u09AC\x03\x02\x02\x02\u09AC\u09AD\x03\x02','\x02\x02\u09AD\u09AF\x05\u0168\xB5\x02\u09AE\u09AB\x03\x02','\x02\x02\u09AF\u09B0\x03\x02\x02\x02\u09B0\u09AE\x03\x02','\x02\x02\u09B0\u09B1\x03\x02\x02\x02\u09B1\u09C0\x03\x02','\x02\x02\u09B2\u09B4\x07~\x02\x02\u09B3\u09B5\x07\x99','\x02\x02\u09B4\u09B3\x03\x02\x02\x02\u09B4\u09B5\x03\x02','\x02\x02\u09B5\u09B6\x03\x02\x02\x02\u09B6\u09BB\x05\u0106','\x84\x02\u09B7\u09B9\x07\x99\x02\x02\u09B8\u09B7\x03\x02','\x02\x02\u09B8\u09B9\x03\x02\x02\x02\u09B9\u09BA\x03\x02','\x02\x02\u09BA\u09BC\x05\u0168\xB5\x02\u09BB\u09B8\x03\x02','\x02\x02\u09BC\u09BD\x03\x02\x02\x02\u09BD\u09BB\x03\x02','\x02\x02\u09BD\u09BE\x03\x02\x02\x02\u09BE\u09C0\x03\x02','\x02\x02\u09BF\u09A9\x03\x02\x02\x02\u09BF\u09B2\x03\x02','\x02\x02\u09C0\u09C9\x03\x02\x02\x02\u09C1\u09C3\x07\x99','\x02\x02\u09C2\u09C1\x03\x02\x02\x02\u09C2\u09C3\x03\x02','\x02\x02\u09C3\u09C4\x03\x02\x02\x02\u09C4\u09C6\x07\x7F','\x02\x02\u09C5\u09C7\x07\x99\x02\x02\u09C6\u09C5\x03\x02','\x02\x02\u09C6\u09C7\x03\x02\x02\x02\u09C7\u09C8\x03\x02','\x02\x02\u09C8\u09CA\x05\u0106\x84\x02\u09C9\u09C2\x03\x02','\x02\x02\u09C9\u09CA\x03\x02\x02\x02\u09CA\u09CC\x03\x02','\x02\x02\u09CB\u09CD\x07\x99\x02\x02\u09CC\u09CB\x03\x02','\x02\x02\u09CC\u09CD\x03\x02\x02\x02\u09CD\u09CE\x03\x02','\x02\x02\u09CE\u09CF\x07\x80\x02\x02\u09CF\u0167\x03\x02','\x02\x02\u09D0\u09D2\x07\x81\x02\x02\u09D1\u09D3\x07\x99','\x02\x02\u09D2\u09D1\x03\x02\x02\x02\u09D2\u09D3\x03\x02','\x02\x02\u09D3\u09D4\x03\x02\x02\x02\u09D4\u09D6\x05\u0106','\x84\x02\u09D5\u09D7\x07\x99\x02\x02\u09D6\u09D5\x03\x02','\x02\x02\u09D6\u09D7\x03\x02\x02\x02\u09D7\u09D8\x03\x02','\x02\x02\u09D8\u09DA\x07\x82\x02\x02\u09D9\u09DB\x07\x99','\x02\x02\u09DA\u09D9\x03\x02\x02\x02\u09DA\u09DB\x03\x02','\x02\x02\u09DB\u09DC\x03\x02\x02\x02\u09DC\u09DD\x05\u0106','\x84\x02\u09DD\u0169\x03\x02\x02\x02\u09DE\u09DF\x05\u0198','\xCD\x02\u09DF\u016B\x03\x02\x02\x02\u09E0\u09E3\x05\u018E','\xC8\x02\u09E1\u09E3\x05\u018C\xC7\x02\u09E2\u09E0\x03\x02','\x02\x02\u09E2\u09E1\x03\x02\x02\x02\u09E3\u016D\x03\x02','\x02\x02\u09E4\u09E6\x07\x10\x02\x02\u09E5\u09E7\x07\x99','\x02\x02\u09E6\u09E5\x03\x02\x02\x02\u09E6\u09E7\x03\x02','\x02\x02\u09E7\u09F9\x03\x02\x02\x02\u09E8\u09EA\x05\u0174','\xBB\x02\u09E9\u09EB\x07\x99\x02\x02\u09EA\u09E9\x03\x02','\x02\x02\u09EA\u09EB\x03\x02\x02\x02\u09EB\u09F6\x03\x02','\x02\x02\u09EC\u09EE\x07\x11\x02\x02\u09ED\u09EF\x07\x99','\x02\x02\u09EE\u09ED\x03\x02\x02\x02\u09EE\u09EF\x03\x02','\x02\x02\u09EF\u09F0\x03\x02\x02\x02\u09F0\u09F2\x05\u0174','\xBB\x02\u09F1\u09F3\x07\x99\x02\x02\u09F2\u09F1\x03\x02','\x02\x02\u09F2\u09F3\x03\x02\x02\x02\u09F3\u09F5\x03\x02','\x02\x02\u09F4\u09EC\x03\x02\x02\x02\u09F5\u09F8\x03\x02','\x02\x02\u09F6\u09F4\x03\x02\x02\x02\u09F6\u09F7\x03\x02','\x02\x02\u09F7\u09FA\x03\x02\x02\x02\u09F8\u09F6\x03\x02','\x02\x02\u09F9\u09E8\x03\x02\x02\x02\u09F9\u09FA\x03\x02','\x02\x02\u09FA\u09FB\x03\x02\x02\x02\u09FB\u09FC\x07\x12','\x02\x02\u09FC\u016F\x03\x02\x02\x02\u09FD\u09FF\x05\u016A','\xB6\x02\u09FE\u0A00\x07\x99\x02\x02\u09FF\u09FE\x03\x02','\x02\x02\u09FF\u0A00\x03\x02\x02\x02\u0A00\u0A01\x03\x02','\x02\x02\u0A01\u0A03\x07\x10\x02\x02\u0A02\u0A04\x07\x99','\x02\x02\u0A03\u0A02\x03\x02\x02\x02\u0A03\u0A04\x03\x02','\x02\x02\u0A04\u0A06\x03\x02\x02\x02\u0A05\u0A07\x05\u0172','\xBA\x02\u0A06\u0A05\x03\x02\x02\x02\u0A06\u0A07\x03\x02','\x02\x02\u0A07\u0A12\x03\x02\x02\x02\u0A08\u0A0A\x07\x99','\x02\x02\u0A09\u0A08\x03\x02\x02\x02\u0A09\u0A0A\x03\x02','\x02\x02\u0A0A\u0A0B\x03\x02\x02\x02\u0A0B\u0A0D\x07\x11','\x02\x02\u0A0C\u0A0E\x07\x99\x02\x02\u0A0D\u0A0C\x03\x02','\x02\x02\u0A0D\u0A0E\x03\x02\x02\x02\u0A0E\u0A0F\x03\x02','\x02\x02\u0A0F\u0A11\x05\u0172\xBA\x02\u0A10\u0A09\x03\x02','\x02\x02\u0A11\u0A14\x03\x02\x02\x02\u0A12\u0A10\x03\x02','\x02\x02\u0A12\u0A13\x03\x02\x02\x02\u0A13\u0A16\x03\x02','\x02\x02\u0A14\u0A12\x03\x02\x02\x02\u0A15\u0A17\x07\x99','\x02\x02\u0A16\u0A15\x03\x02\x02\x02\u0A16\u0A17\x03\x02','\x02\x02\u0A17\u0A18\x03\x02\x02\x02\u0A18\u0A19\x07\x12','\x02\x02\u0A19\u0171\x03\x02\x02\x02\u0A1A\u0A1F\x05\u0174','\xBB\x02\u0A1B\u0A1F\x05\u0176\xBC\x02\u0A1C\u0A1F\x05\u0178','\xBD\x02\u0A1D\u0A1F\x05\u017A\xBE\x02\u0A1E\u0A1A\x03\x02','\x02\x02\u0A1E\u0A1B\x03\x02\x02\x02\u0A1E\u0A1C\x03\x02','\x02\x02\u0A1E\u0A1D\x03\x02\x02\x02\u0A1F\u0173\x03\x02','\x02\x02\u0A20\u0A22\x05\u018A\xC6\x02\u0A21\u0A23\x07\x99','\x02\x02\u0A22\u0A21\x03\x02\x02\x02\u0A22\u0A23\x03\x02','\x02\x02\u0A23\u0A24\x03\x02\x02\x02\u0A24\u0A26\x07\x04','\x02\x02\u0A25\u0A27\x07\x99\x02\x02\u0A26\u0A25\x03\x02','\x02\x02\u0A26\u0A27\x03\x02\x02\x02\u0A27\u0A28\x03\x02','\x02\x02\u0A28\u0A29\x05\u0106\x84\x02\u0A29\u0175\x03\x02','\x02\x02\u0A2A\u0A2B\x07\t\x02\x02\u0A2B\u0A2C\x05\u016A','\xB6\x02\u0A2C\u0177\x03\x02\x02\x02\u0A2D\u0A2E\x05\u016A','\xB6\x02\u0A2E\u0179\x03\x02\x02\x02\u0A2F\u0A30\x07\t','\x02\x02\u0A30\u0A31\x07\x19\x02\x02\u0A31\u017B\x03\x02','\x02\x02\u0A32\u0A35\x05\u017E\xC0\x02\u0A33\u0A35\x05\u0180','\xC1\x02\u0A34\u0A32\x03\x02\x02\x02\u0A34\u0A33\x03\x02','\x02\x02\u0A35\u017D\x03\x02\x02\x02\u0A36\u0A38\x07\x10','\x02\x02\u0A37\u0A39\x07\x99\x02\x02\u0A38\u0A37\x03\x02','\x02\x02\u0A38\u0A39\x03\x02\x02\x02\u0A39\u0A3A\x03\x02','\x02\x02\u0A3A\u0A3C\x05\u0182\xC2\x02\u0A3B\u0A3D\x07\x99','\x02\x02\u0A3C\u0A3B\x03\x02\x02\x02\u0A3C\u0A3D\x03\x02','\x02\x02\u0A3D\u0A3E\x03\x02\x02\x02\u0A3E\u0A3F\x07\x12','\x02\x02\u0A3F\u017F\x03\x02\x02\x02\u0A40\u0A41\x07$','\x02\x02\u0A41\u0A42\x05\u0182\xC2\x02\u0A42\u0181\x03\x02','\x02\x02\u0A43\u0A46\x05\u0198\xCD\x02\u0A44\u0A46\x07\x8A','\x02\x02\u0A45\u0A43\x03\x02\x02\x02\u0A45\u0A44\x03\x02','\x02\x02\u0A46\u0183\x03\x02\x02\x02\u0A47\u0A52\x05\u0186','\xC4\x02\u0A48\u0A4A\x07\x99\x02\x02\u0A49\u0A48\x03\x02','\x02\x02\u0A49\u0A4A\x03\x02\x02\x02\u0A4A\u0A4B\x03\x02','\x02\x02\u0A4B\u0A4D\x07\x11\x02\x02\u0A4C\u0A4E\x07\x99','\x02\x02\u0A4D\u0A4C\x03\x02\x02\x02\u0A4D\u0A4E\x03\x02','\x02\x02\u0A4E\u0A4F\x03\x02\x02\x02\u0A4F\u0A51\x05\u0186','\xC4\x02\u0A50\u0A49\x03\x02\x02\x02\u0A51\u0A54\x03\x02','\x02\x02\u0A52\u0A50\x03\x02\x02\x02\u0A52\u0A53\x03\x02','\x02\x02\u0A53\u0185\x03\x02\x02\x02\u0A54\u0A52\x03\x02','\x02\x02\u0A55\u0A5A\x05\u0144\xA3\x02\u0A56\u0A58\x07\x99','\x02\x02\u0A57\u0A56\x03\x02\x02\x02\u0A57\u0A58\x03\x02','\x02\x02\u0A58\u0A59\x03\x02\x02\x02\u0A59\u0A5B\x05\u0164','\xB3\x02\u0A5A\u0A57\x03\x02\x02\x02\u0A5B\u0A5C\x03\x02','\x02\x02\u0A5C\u0A5A\x03\x02\x02\x02\u0A5C\u0A5D\x03\x02','\x02\x02\u0A5D\u0187\x03\x02\x02\x02\u0A5E\u0A69\x05\u018A','\xC6\x02\u0A5F\u0A61\x07\x99\x02\x02\u0A60\u0A5F\x03\x02','\x02\x02\u0A60\u0A61\x03\x02\x02\x02\u0A61\u0A62\x03\x02','\x02\x02\u0A62\u0A64\x07\x11\x02\x02\u0A63\u0A65\x07\x99','\x02\x02\u0A64\u0A63\x03\x02\x02\x02\u0A64\u0A65\x03\x02','\x02\x02\u0A65\u0A66\x03\x02\x02\x02\u0A66\u0A68\x05\u018A','\xC6\x02\u0A67\u0A60\x03\x02\x02\x02\u0A68\u0A6B\x03\x02','\x02\x02\u0A69\u0A67\x03\x02\x02\x02\u0A69\u0A6A\x03\x02','\x02\x02\u0A6A\u0189\x03\x02\x02\x02\u0A6B\u0A69\x03\x02','\x02\x02\u0A6C\u0A6D\x05\u0198\xCD\x02\u0A6D\u018B\x03\x02','\x02\x02\u0A6E\u0A6F\t\b\x02\x02\u0A6F\u018D\x03\x02\x02','\x02\u0A70\u0A71\t\t\x02\x02\u0A71\u018F\x03\x02\x02\x02','\u0A72\u0A73\x05\u0198\xCD\x02\u0A73\u0A74\x07\t\x02\x02','\u0A74\u0A76\x03\x02\x02\x02\u0A75\u0A72\x03\x02\x02\x02','\u0A76\u0A79\x03\x02\x02\x02\u0A77\u0A75\x03\x02\x02\x02','\u0A77\u0A78\x03\x02\x02\x02\u0A78\u0191\x03\x02\x02\x02','\u0A79\u0A77\x03\x02\x02\x02\u0A7A\u0A7B\t\n\x02\x02\u0A7B','\u0193\x03\x02\x02\x02\u0A7C\u0A7D\t\x0B\x02\x02\u0A7D','\u0195\x03\x02\x02\x02\u0A7E\u0A7F\t\f\x02\x02\u0A7F\u0197','\x03\x02\x02\x02\u0A80\u0A85\x05\u019A\xCE\x02\u0A81\u0A85','\x07\x95\x02\x02\u0A82\u0A85\x07\x98\x02\x02\u0A83\u0A85','\x07\x8C\x02\x02\u0A84\u0A80\x03\x02\x02\x02\u0A84\u0A81','\x03\x02\x02\x02\u0A84\u0A82\x03\x02\x02\x02\u0A84\u0A83','\x03\x02\x02\x02\u0A85\u0199\x03\x02\x02\x02\u0A86\u0A87','\t\r\x02\x02\u0A87\u019B\x03\x02\x02\x02\u01A8\u019F\u01A3','\u01AA\u01AE\u01B3\u01B7\u01BA\u01BF\u01C7\u01CF\u01DC\u01E0\u01E4\u01ED','\u01F2\u01F6\u01F9\u01FC\u0201\u0205\u020C\u021E\u0235\u023D\u023F\u0243','\u0248\u024E\u0254\u0258\u025C\u0260\u0264\u026B\u026E\u0272\u0276\u027C','\u0280\u0284\u0288\u028C\u0293\u0296\u029E\u02A7\u02AC\u02B0\u02B3\u02BA','\u02C2\u02C6\u02CC\u02D1\u02D7\u02E2\u02E6\u02EC\u02F0\u02F4\u02F9\u02FE','\u0304\u0309\u0313\u0317\u031C\u0323\u0328\u032B\u033B\u0347\u0375\u0379','\u037D\u0381\u0389\u038D\u0392\u0396\u03A4\u03A8\u03AD\u03B1\u03B7\u03BB','\u03C9\u03D0\u03D6\u03E0\u03E4\u03EA\u03F2\u03FD\u0403\u040F\u0415\u0421','\u0425\u042F\u043C\u0440\u0444\u044A\u044E\u0451\u0455\u045F\u0466\u0473','\u0477\u047F\u0485\u0489\u048D\u0492\u0497\u049B\u04A1\u04A5\u04AB\u04AF','\u04B5\u04B9\u04BD\u04C1\u04C5\u04C9\u04CE\u04D5\u04D9\u04DE\u04E5\u04E9','\u04ED\u04F5\u04FC\u04FF\u0505\u0508\u050D\u0510\u0514\u0517\u051A\u0521','\u0525\u0529\u052D\u0530\u0534\u0538\u053D\u0542\u0546\u054B\u054F\u0558','\u055E\u0561\u0565\u0568\u056F\u0572\u0575\u0579\u057E\u0582\u058A\u058E','\u0593\u0598\u059C\u05AE\u05B2\u05B7\u05C4\u05C8\u05CA\u05CD\u05D6\u05DA','\u05DE\u05EA\u05EE\u05F3\u05FD\u0603\u0607\u060C\u0610\u0614\u0618\u061E','\u0622\u0627\u062D\u0636\u063F\u0647\u064D\u0651\u0656\u065F\u0663\u0668','\u066D\u0671\u0676\u067A\u067E\u0683\u068A\u068E\u0692\u0694\u0698\u069A','\u069E\u06A0\u06A6\u06AC\u06AF\u06B2\u06B8\u06BD\u06C1\u06C6\u06CA\u06CE','\u06D0\u06D4\u06D6\u06D9\u06DD\u06DF\u06E5\u06E9\u06EF\u06F5\u06FC\u0702','\u0707\u070F\u0713\u0715\u0719\u071D\u071F\u0721\u0730\u073A\u0744\u0749','\u074D\u0754\u0759\u075E\u0762\u0766\u076A\u076D\u076F\u0774\u0778\u077C','\u0780\u0784\u0788\u078B\u078D\u0792\u0796\u079B\u07A0\u07A4\u07AB\u07B2','\u07B6\u07BA\u07BE\u07CD\u07D0\u07DD\u07DF\u07E4\u07E8\u07EC\u07F1\u07F5','\u07F9\u0801\u0805\u0809\u0811\u0815\u0819\u0821\u0825\u0829\u0831\u0835','\u0839\u0841\u0845\u0849\u0851\u0855\u0859\u085D\u0860\u0863\u086B\u086F','\u0873\u0877\u087B\u087F\u0883\u0887\u088B\u0893\u0897\u089B\u08A1\u08A5','\u08A9\u08AD\u08B8\u08BC\u08C0\u08D2\u08DB\u08E3\u08E7\u08EB\u08EF\u08F3','\u08F6\u08FC\u0901\u0906\u090B\u0910\u0915\u091A\u091D\u0921\u0925\u092B','\u0930\u0934\u0937\u0941\u0945\u0949\u094B\u094F\u0953\u0957\u095B\u095E','\u096B\u096F\u0973\u0976\u0979\u097F\u0983\u0987\u0989\u098D\u0991\u0995','\u0997\u099B\u099F\u09A5\u09AB\u09B0\u09B4\u09B8\u09BD\u09BF\u09C2\u09C6','\u09C9\u09CC\u09D2\u09D6\u09DA\u09E2\u09E6\u09EA\u09EE\u09F2\u09F6\u09F9','\u09FF\u0A03\u0A06\u0A09\u0A0D\u0A12\u0A16\u0A1E\u0A22\u0A26\u0A34\u0A38','\u0A3C\u0A45\u0A49\u0A4D\u0A52\u0A57\u0A5C\u0A60\u0A64\u0A69\u0A77\u0A84'].join("");var atn=new antlr4.atn.ATNDeserializer().deserialize(serializedATN);var decisionsToDFA=atn.decisionToState.map(function(ds,index){return new antlr4.dfa.DFA(ds,index);});var sharedContextCache=new antlr4.PredictionContextCache();var literalNames=[null,"';'","':'","'-'","'=>'","'://'","'/'","'.'","'@'","'#'","'?'","'&'","'='","'+'","'{'","','","'}'","'['","']'","'('","')'","'+='","'|'","'*'","'..'","'%'","'^'","'=~'","'<>'","'!='","'<'","'>'","'<='","'>='","'$'",'\'\u27E8\'','\'\u3008\'','\'\uFE64\'','\'\uFF1C\'','\'\u27E9\'','\'\u3009\'','\'\uFE65\'','\'\uFF1E\'','\'\xAD\'','\'\u2010\'','\'\u2011\'','\'\u2012\'','\'\u2013\'','\'\u2014\'','\'\u2015\'','\'\u2212\'','\'\uFE58\'','\'\uFE63\'','\'\uFF0D\'',null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"'0'"];var symbolicNames=[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"CYPHER","EXPLAIN","PROFILE","USING","PERIODIC","COMMIT","UNION","ALL","CREATE","DROP","INDEX","ON","CONSTRAINT","ASSERT","IS","UNIQUE","EXISTS","LOAD","CSV","WITH","HEADERS","FROM","AS","FIELDTERMINATOR","OPTIONAL","MATCH","UNWIND","MERGE","SET","DETACH","DELETE","REMOVE","FOREACH","IN","DISTINCT","RETURN","ORDER","BY","L_SKIP","LIMIT","ASCENDING","ASC","DESCENDING","DESC","JOIN","SCAN","START","NODE","RELATIONSHIP","REL","WHERE","SHORTESTPATH","ALLSHORTESTPATHS","OR","XOR","AND","NOT","STARTS","ENDS","CONTAINS","NULL","COUNT","FILTER","EXTRACT","ANY","NONE","SINGLE","TRUE","FALSE","REDUCE","CASE","ELSE","END","WHEN","THEN","CALL","YIELD","KEY","StringLiteral","UrlHex","EscapedChar","HexInteger","DecimalInteger","OctalInteger","HexLetter","HexDigit","Digit","NonZeroDigit","NonZeroOctDigit","OctDigit","ZeroDigit","ExponentDecimalReal","RegularDecimalReal","UnescapedSymbolicName","IdentifierStart","IdentifierPart","EscapedSymbolicName","SP","WHITESPACE","Comment","ERROR_TOKEN"];var ruleNames=["raw","cypher","cypherPart","cypherConsoleCommand","cypherConsoleCommandName","cypherConsoleCommandParameters","cypherConsoleCommandParameter","arrowExpression","url","uri","scheme","host","hostname","hostnumber","port","path","user","login","password","frag","urlQuery","search","searchparameter","string","urlDigits","json","obj","pair","array","value","keyValueLiteral","commandPath","subCommand","cypherQuery","queryOptions","anyCypherOption","cypherOption","versionNumber","explain","profile","configurationOption","statement","query","regularQuery","bulkImportQuery","singleQuery","periodicCommitHint","loadCSVQuery","union","clause","command","createUniqueConstraint","createNodeKeyConstraint","createNodePropertyExistenceConstraint","createRelationshipPropertyExistenceConstraint","createIndex","dropUniqueConstraint","dropNodeKeyConstraint","dropNodePropertyExistenceConstraint","dropRelationshipPropertyExistenceConstraint","dropIndex","index","uniqueConstraint","nodeKeyConstraint","nodePropertyExistenceConstraint","relationshipPropertyExistenceConstraint","relationshipPatternSyntax","loadCSVClause","matchClause","unwindClause","mergeClause","mergeAction","createClause","createUniqueClause","setClause","setItem","deleteClause","removeClause","removeItem","foreachClause","withClause","returnClause","returnBody","func","returnItems","returnItem","call","procedureInvocation","procedureInvocationBody","procedureArguments","procedureResults","procedureResult","aliasedProcedureResult","simpleProcedureResult","procedureOutput","order","skip","limit","sortItem","hint","startClause","startPoint","lookup","nodeLookup","relationshipLookup","identifiedIndexLookup","indexQuery","idLookup","literalIds","where","pattern","patternPart","anonymousPatternPart","patternElement","nodePattern","patternElementChain","relationshipPattern","relationshipPatternStart","relationshipPatternEnd","relationshipDetail","properties","relType","relationshipTypes","relationshipType","relationshipTypeOptionalColon","nodeLabels","nodeLabel","rangeLiteral","labelName","relTypeName","expression","orExpression","xorExpression","andExpression","notExpression","comparisonExpression","addOrSubtractExpression","multiplyDivideModuloExpression","powerOfExpression","unaryAddOrSubtractExpression","stringListNullOperatorExpression","propertyOrLabelsExpression","filterFunction","filterFunctionName","existsFunction","existsFunctionName","allFunction","allFunctionName","anyFunction","anyFunctionName","noneFunction","noneFunctionName","singleFunction","singleFunctionName","extractFunction","extractFunctionName","reduceFunction","reduceFunctionName","shortestPathPatternFunction","shortestPathFunctionName","allShortestPathFunctionName","atom","literal","stringLiteral","booleanLiteral","listLiteral","partialComparisonExpression","parenthesizedExpression","relationshipsPattern","filterExpression","idInColl","functionInvocation","functionInvocationBody","functionName","procedureName","listComprehension","patternComprehension","propertyLookup","caseExpression","caseAlternatives","variable","numberLiteral","mapLiteral","mapProjection","mapProjectionVariants","literalEntry","propertySelector","variableSelector","allPropertiesSelector","parameter","legacyParameter","newParameter","parameterName","propertyExpressions","propertyExpression","propertyKeys","propertyKeyName","integerLiteral","doubleLiteral","namespace","leftArrowHead","rightArrowHead","dash","symbolicName","keyword"];function CypherParser(input){antlr4.Parser.call(this,input);this._interp=new antlr4.atn.ParserATNSimulator(this,atn,decisionsToDFA,sharedContextCache);this.ruleNames=ruleNames;this.literalNames=literalNames;this.symbolicNames=symbolicNames;return this;}CypherParser.prototype=Object.create(antlr4.Parser.prototype);CypherParser.prototype.constructor=CypherParser;Object.defineProperty(CypherParser.prototype,"atn",{get:function get(){return atn;}});CypherParser.EOF=antlr4.Token.EOF;CypherParser.T__0=1;CypherParser.T__1=2;CypherParser.T__2=3;CypherParser.T__3=4;CypherParser.T__4=5;CypherParser.T__5=6;CypherParser.T__6=7;CypherParser.T__7=8;CypherParser.T__8=9;CypherParser.T__9=10;CypherParser.T__10=11;CypherParser.T__11=12;CypherParser.T__12=13;CypherParser.T__13=14;CypherParser.T__14=15;CypherParser.T__15=16;CypherParser.T__16=17;CypherParser.T__17=18;CypherParser.T__18=19;CypherParser.T__19=20;CypherParser.T__20=21;CypherParser.T__21=22;CypherParser.T__22=23;CypherParser.T__23=24;CypherParser.T__24=25;CypherParser.T__25=26;CypherParser.T__26=27;CypherParser.T__27=28;CypherParser.T__28=29;CypherParser.T__29=30;CypherParser.T__30=31;CypherParser.T__31=32;CypherParser.T__32=33;CypherParser.T__33=34;CypherParser.T__34=35;CypherParser.T__35=36;CypherParser.T__36=37;CypherParser.T__37=38;CypherParser.T__38=39;CypherParser.T__39=40;CypherParser.T__40=41;CypherParser.T__41=42;CypherParser.T__42=43;CypherParser.T__43=44;CypherParser.T__44=45;CypherParser.T__45=46;CypherParser.T__46=47;CypherParser.T__47=48;CypherParser.T__48=49;CypherParser.T__49=50;CypherParser.T__50=51;CypherParser.T__51=52;CypherParser.T__52=53;CypherParser.CYPHER=54;CypherParser.EXPLAIN=55;CypherParser.PROFILE=56;CypherParser.USING=57;CypherParser.PERIODIC=58;CypherParser.COMMIT=59;CypherParser.UNION=60;CypherParser.ALL=61;CypherParser.CREATE=62;CypherParser.DROP=63;CypherParser.INDEX=64;CypherParser.ON=65;CypherParser.CONSTRAINT=66;CypherParser.ASSERT=67;CypherParser.IS=68;CypherParser.UNIQUE=69;CypherParser.EXISTS=70;CypherParser.LOAD=71;CypherParser.CSV=72;CypherParser.WITH=73;CypherParser.HEADERS=74;CypherParser.FROM=75;CypherParser.AS=76;CypherParser.FIELDTERMINATOR=77;CypherParser.OPTIONAL=78;CypherParser.MATCH=79;CypherParser.UNWIND=80;CypherParser.MERGE=81;CypherParser.SET=82;CypherParser.DETACH=83;CypherParser.DELETE=84;CypherParser.REMOVE=85;CypherParser.FOREACH=86;CypherParser.IN=87;CypherParser.DISTINCT=88;CypherParser.RETURN=89;CypherParser.ORDER=90;CypherParser.BY=91;CypherParser.L_SKIP=92;CypherParser.LIMIT=93;CypherParser.ASCENDING=94;CypherParser.ASC=95;CypherParser.DESCENDING=96;CypherParser.DESC=97;CypherParser.JOIN=98;CypherParser.SCAN=99;CypherParser.START=100;CypherParser.NODE=101;CypherParser.RELATIONSHIP=102;CypherParser.REL=103;CypherParser.WHERE=104;CypherParser.SHORTESTPATH=105;CypherParser.ALLSHORTESTPATHS=106;CypherParser.OR=107;CypherParser.XOR=108;CypherParser.AND=109;CypherParser.NOT=110;CypherParser.STARTS=111;CypherParser.ENDS=112;CypherParser.CONTAINS=113;CypherParser.NULL=114;CypherParser.COUNT=115;CypherParser.FILTER=116;CypherParser.EXTRACT=117;CypherParser.ANY=118;CypherParser.NONE=119;CypherParser.SINGLE=120;CypherParser.TRUE=121;CypherParser.FALSE=122;CypherParser.REDUCE=123;CypherParser.CASE=124;CypherParser.ELSE=125;CypherParser.END=126;CypherParser.WHEN=127;CypherParser.THEN=128;CypherParser.CALL=129;CypherParser.YIELD=130;CypherParser.KEY=131;CypherParser.StringLiteral=132;CypherParser.UrlHex=133;CypherParser.EscapedChar=134;CypherParser.HexInteger=135;CypherParser.DecimalInteger=136;CypherParser.OctalInteger=137;CypherParser.HexLetter=138;CypherParser.HexDigit=139;CypherParser.Digit=140;CypherParser.NonZeroDigit=141;CypherParser.NonZeroOctDigit=142;CypherParser.OctDigit=143;CypherParser.ZeroDigit=144;CypherParser.ExponentDecimalReal=145;CypherParser.RegularDecimalReal=146;CypherParser.UnescapedSymbolicName=147;CypherParser.IdentifierStart=148;CypherParser.IdentifierPart=149;CypherParser.EscapedSymbolicName=150;CypherParser.SP=151;CypherParser.WHITESPACE=152;CypherParser.Comment=153;CypherParser.ERROR_TOKEN=154;CypherParser.RULE_raw=0;CypherParser.RULE_cypher=1;CypherParser.RULE_cypherPart=2;CypherParser.RULE_cypherConsoleCommand=3;CypherParser.RULE_cypherConsoleCommandName=4;CypherParser.RULE_cypherConsoleCommandParameters=5;CypherParser.RULE_cypherConsoleCommandParameter=6;CypherParser.RULE_arrowExpression=7;CypherParser.RULE_url=8;CypherParser.RULE_uri=9;CypherParser.RULE_scheme=10;CypherParser.RULE_host=11;CypherParser.RULE_hostname=12;CypherParser.RULE_hostnumber=13;CypherParser.RULE_port=14;CypherParser.RULE_path=15;CypherParser.RULE_user=16;CypherParser.RULE_login=17;CypherParser.RULE_password=18;CypherParser.RULE_frag=19;CypherParser.RULE_urlQuery=20;CypherParser.RULE_search=21;CypherParser.RULE_searchparameter=22;CypherParser.RULE_string=23;CypherParser.RULE_urlDigits=24;CypherParser.RULE_json=25;CypherParser.RULE_obj=26;CypherParser.RULE_pair=27;CypherParser.RULE_array=28;CypherParser.RULE_value=29;CypherParser.RULE_keyValueLiteral=30;CypherParser.RULE_commandPath=31;CypherParser.RULE_subCommand=32;CypherParser.RULE_cypherQuery=33;CypherParser.RULE_queryOptions=34;CypherParser.RULE_anyCypherOption=35;CypherParser.RULE_cypherOption=36;CypherParser.RULE_versionNumber=37;CypherParser.RULE_explain=38;CypherParser.RULE_profile=39;CypherParser.RULE_configurationOption=40;CypherParser.RULE_statement=41;CypherParser.RULE_query=42;CypherParser.RULE_regularQuery=43;CypherParser.RULE_bulkImportQuery=44;CypherParser.RULE_singleQuery=45;CypherParser.RULE_periodicCommitHint=46;CypherParser.RULE_loadCSVQuery=47;CypherParser.RULE_union=48;CypherParser.RULE_clause=49;CypherParser.RULE_command=50;CypherParser.RULE_createUniqueConstraint=51;CypherParser.RULE_createNodeKeyConstraint=52;CypherParser.RULE_createNodePropertyExistenceConstraint=53;CypherParser.RULE_createRelationshipPropertyExistenceConstraint=54;CypherParser.RULE_createIndex=55;CypherParser.RULE_dropUniqueConstraint=56;CypherParser.RULE_dropNodeKeyConstraint=57;CypherParser.RULE_dropNodePropertyExistenceConstraint=58;CypherParser.RULE_dropRelationshipPropertyExistenceConstraint=59;CypherParser.RULE_dropIndex=60;CypherParser.RULE_index=61;CypherParser.RULE_uniqueConstraint=62;CypherParser.RULE_nodeKeyConstraint=63;CypherParser.RULE_nodePropertyExistenceConstraint=64;CypherParser.RULE_relationshipPropertyExistenceConstraint=65;CypherParser.RULE_relationshipPatternSyntax=66;CypherParser.RULE_loadCSVClause=67;CypherParser.RULE_matchClause=68;CypherParser.RULE_unwindClause=69;CypherParser.RULE_mergeClause=70;CypherParser.RULE_mergeAction=71;CypherParser.RULE_createClause=72;CypherParser.RULE_createUniqueClause=73;CypherParser.RULE_setClause=74;CypherParser.RULE_setItem=75;CypherParser.RULE_deleteClause=76;CypherParser.RULE_removeClause=77;CypherParser.RULE_removeItem=78;CypherParser.RULE_foreachClause=79;CypherParser.RULE_withClause=80;CypherParser.RULE_returnClause=81;CypherParser.RULE_returnBody=82;CypherParser.RULE_func=83;CypherParser.RULE_returnItems=84;CypherParser.RULE_returnItem=85;CypherParser.RULE_call=86;CypherParser.RULE_procedureInvocation=87;CypherParser.RULE_procedureInvocationBody=88;CypherParser.RULE_procedureArguments=89;CypherParser.RULE_procedureResults=90;CypherParser.RULE_procedureResult=91;CypherParser.RULE_aliasedProcedureResult=92;CypherParser.RULE_simpleProcedureResult=93;CypherParser.RULE_procedureOutput=94;CypherParser.RULE_order=95;CypherParser.RULE_skip=96;CypherParser.RULE_limit=97;CypherParser.RULE_sortItem=98;CypherParser.RULE_hint=99;CypherParser.RULE_startClause=100;CypherParser.RULE_startPoint=101;CypherParser.RULE_lookup=102;CypherParser.RULE_nodeLookup=103;CypherParser.RULE_relationshipLookup=104;CypherParser.RULE_identifiedIndexLookup=105;CypherParser.RULE_indexQuery=106;CypherParser.RULE_idLookup=107;CypherParser.RULE_literalIds=108;CypherParser.RULE_where=109;CypherParser.RULE_pattern=110;CypherParser.RULE_patternPart=111;CypherParser.RULE_anonymousPatternPart=112;CypherParser.RULE_patternElement=113;CypherParser.RULE_nodePattern=114;CypherParser.RULE_patternElementChain=115;CypherParser.RULE_relationshipPattern=116;CypherParser.RULE_relationshipPatternStart=117;CypherParser.RULE_relationshipPatternEnd=118;CypherParser.RULE_relationshipDetail=119;CypherParser.RULE_properties=120;CypherParser.RULE_relType=121;CypherParser.RULE_relationshipTypes=122;CypherParser.RULE_relationshipType=123;CypherParser.RULE_relationshipTypeOptionalColon=124;CypherParser.RULE_nodeLabels=125;CypherParser.RULE_nodeLabel=126;CypherParser.RULE_rangeLiteral=127;CypherParser.RULE_labelName=128;CypherParser.RULE_relTypeName=129;CypherParser.RULE_expression=130;CypherParser.RULE_orExpression=131;CypherParser.RULE_xorExpression=132;CypherParser.RULE_andExpression=133;CypherParser.RULE_notExpression=134;CypherParser.RULE_comparisonExpression=135;CypherParser.RULE_addOrSubtractExpression=136;CypherParser.RULE_multiplyDivideModuloExpression=137;CypherParser.RULE_powerOfExpression=138;CypherParser.RULE_unaryAddOrSubtractExpression=139;CypherParser.RULE_stringListNullOperatorExpression=140;CypherParser.RULE_propertyOrLabelsExpression=141;CypherParser.RULE_filterFunction=142;CypherParser.RULE_filterFunctionName=143;CypherParser.RULE_existsFunction=144;CypherParser.RULE_existsFunctionName=145;CypherParser.RULE_allFunction=146;CypherParser.RULE_allFunctionName=147;CypherParser.RULE_anyFunction=148;CypherParser.RULE_anyFunctionName=149;CypherParser.RULE_noneFunction=150;CypherParser.RULE_noneFunctionName=151;CypherParser.RULE_singleFunction=152;CypherParser.RULE_singleFunctionName=153;CypherParser.RULE_extractFunction=154;CypherParser.RULE_extractFunctionName=155;CypherParser.RULE_reduceFunction=156;CypherParser.RULE_reduceFunctionName=157;CypherParser.RULE_shortestPathPatternFunction=158;CypherParser.RULE_shortestPathFunctionName=159;CypherParser.RULE_allShortestPathFunctionName=160;CypherParser.RULE_atom=161;CypherParser.RULE_literal=162;CypherParser.RULE_stringLiteral=163;CypherParser.RULE_booleanLiteral=164;CypherParser.RULE_listLiteral=165;CypherParser.RULE_partialComparisonExpression=166;CypherParser.RULE_parenthesizedExpression=167;CypherParser.RULE_relationshipsPattern=168;CypherParser.RULE_filterExpression=169;CypherParser.RULE_idInColl=170;CypherParser.RULE_functionInvocation=171;CypherParser.RULE_functionInvocationBody=172;CypherParser.RULE_functionName=173;CypherParser.RULE_procedureName=174;CypherParser.RULE_listComprehension=175;CypherParser.RULE_patternComprehension=176;CypherParser.RULE_propertyLookup=177;CypherParser.RULE_caseExpression=178;CypherParser.RULE_caseAlternatives=179;CypherParser.RULE_variable=180;CypherParser.RULE_numberLiteral=181;CypherParser.RULE_mapLiteral=182;CypherParser.RULE_mapProjection=183;CypherParser.RULE_mapProjectionVariants=184;CypherParser.RULE_literalEntry=185;CypherParser.RULE_propertySelector=186;CypherParser.RULE_variableSelector=187;CypherParser.RULE_allPropertiesSelector=188;CypherParser.RULE_parameter=189;CypherParser.RULE_legacyParameter=190;CypherParser.RULE_newParameter=191;CypherParser.RULE_parameterName=192;CypherParser.RULE_propertyExpressions=193;CypherParser.RULE_propertyExpression=194;CypherParser.RULE_propertyKeys=195;CypherParser.RULE_propertyKeyName=196;CypherParser.RULE_integerLiteral=197;CypherParser.RULE_doubleLiteral=198;CypherParser.RULE_namespace=199;CypherParser.RULE_leftArrowHead=200;CypherParser.RULE_rightArrowHead=201;CypherParser.RULE_dash=202;CypherParser.RULE_symbolicName=203;CypherParser.RULE_keyword=204;function RawContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_raw;return this;}RawContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RawContext.prototype.constructor=RawContext;RawContext.prototype.cypherPart=function(){return this.getTypedRuleContext(CypherPartContext,0);};RawContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterRaw(this);}};RawContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitRaw(this);}};CypherParser.RawContext=RawContext;CypherParser.prototype.raw=function(){var localctx=new RawContext(this,this._ctx,this.state);this.enterRule(localctx,0,CypherParser.RULE_raw);try{this.enterOuterAlt(localctx,1);this.state=417;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,1,this._ctx);switch(la_){case 1:this.state=413;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,0,this._ctx);while(_alt!=1&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1+1){this.state=410;this.matchWildcard();}this.state=415;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,0,this._ctx);}break;case 2:this.state=416;this.cypherPart();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CypherContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_cypher;return this;}CypherContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CypherContext.prototype.constructor=CypherContext;CypherContext.prototype.raw=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(RawContext);}else{return this.getTypedRuleContext(RawContext,i);}};CypherContext.prototype.EOF=function(){return this.getToken(CypherParser.EOF,0);};CypherContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCypher(this);}};CypherContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCypher(this);}};CypherParser.CypherContext=CypherContext;CypherParser.prototype.cypher=function(){var localctx=new CypherContext(this,this._ctx,this.state);this.enterRule(localctx,2,CypherParser.RULE_cypher);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=419;this.raw();this.state=424;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,2,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=420;this.match(CypherParser.T__0);this.state=421;this.raw();}this.state=426;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,2,this._ctx);}this.state=428;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.T__0){this.state=427;this.match(CypherParser.T__0);}this.state=430;this.match(CypherParser.EOF);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CypherPartContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_cypherPart;return this;}CypherPartContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CypherPartContext.prototype.constructor=CypherPartContext;CypherPartContext.prototype.cypherQuery=function(){return this.getTypedRuleContext(CypherQueryContext,0);};CypherPartContext.prototype.cypherConsoleCommand=function(){return this.getTypedRuleContext(CypherConsoleCommandContext,0);};CypherPartContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};CypherPartContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCypherPart(this);}};CypherPartContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCypherPart(this);}};CypherParser.CypherPartContext=CypherPartContext;CypherParser.prototype.cypherPart=function(){var localctx=new CypherPartContext(this,this._ctx,this.state);this.enterRule(localctx,4,CypherParser.RULE_cypherPart);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=433;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=432;this.match(CypherParser.SP);}this.state=437;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.CYPHER:case CypherParser.EXPLAIN:case CypherParser.PROFILE:case CypherParser.USING:case CypherParser.CREATE:case CypherParser.DROP:case CypherParser.LOAD:case CypherParser.WITH:case CypherParser.OPTIONAL:case CypherParser.MATCH:case CypherParser.UNWIND:case CypherParser.MERGE:case CypherParser.SET:case CypherParser.DETACH:case CypherParser.DELETE:case CypherParser.REMOVE:case CypherParser.FOREACH:case CypherParser.RETURN:case CypherParser.START:case CypherParser.CALL:this.state=435;this.cypherQuery();break;case CypherParser.T__1:this.state=436;this.cypherConsoleCommand();break;default:throw new antlr4.error.NoViableAltException(this);}this.state=440;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=439;this.match(CypherParser.SP);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CypherConsoleCommandContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_cypherConsoleCommand;return this;}CypherConsoleCommandContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CypherConsoleCommandContext.prototype.constructor=CypherConsoleCommandContext;CypherConsoleCommandContext.prototype.cypherConsoleCommandName=function(){return this.getTypedRuleContext(CypherConsoleCommandNameContext,0);};CypherConsoleCommandContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};CypherConsoleCommandContext.prototype.cypherConsoleCommandParameters=function(){return this.getTypedRuleContext(CypherConsoleCommandParametersContext,0);};CypherConsoleCommandContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCypherConsoleCommand(this);}};CypherConsoleCommandContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCypherConsoleCommand(this);}};CypherParser.CypherConsoleCommandContext=CypherConsoleCommandContext;CypherParser.prototype.cypherConsoleCommand=function(){var localctx=new CypherConsoleCommandContext(this,this._ctx,this.state);this.enterRule(localctx,6,CypherParser.RULE_cypherConsoleCommand);try{this.enterOuterAlt(localctx,1);this.state=442;this.cypherConsoleCommandName();this.state=445;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,7,this._ctx);if(la_===1){this.state=443;this.match(CypherParser.SP);this.state=444;this.cypherConsoleCommandParameters();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CypherConsoleCommandNameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_cypherConsoleCommandName;return this;}CypherConsoleCommandNameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CypherConsoleCommandNameContext.prototype.constructor=CypherConsoleCommandNameContext;CypherConsoleCommandNameContext.prototype.symbolicName=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(SymbolicNameContext);}else{return this.getTypedRuleContext(SymbolicNameContext,i);}};CypherConsoleCommandNameContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCypherConsoleCommandName(this);}};CypherConsoleCommandNameContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCypherConsoleCommandName(this);}};CypherParser.CypherConsoleCommandNameContext=CypherConsoleCommandNameContext;CypherParser.prototype.cypherConsoleCommandName=function(){var localctx=new CypherConsoleCommandNameContext(this,this._ctx,this.state);this.enterRule(localctx,8,CypherParser.RULE_cypherConsoleCommandName);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=447;this.match(CypherParser.T__1);this.state=448;this.symbolicName();this.state=453;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CypherParser.T__2){this.state=449;this.match(CypherParser.T__2);this.state=450;this.symbolicName();this.state=455;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CypherConsoleCommandParametersContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_cypherConsoleCommandParameters;return this;}CypherConsoleCommandParametersContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CypherConsoleCommandParametersContext.prototype.constructor=CypherConsoleCommandParametersContext;CypherConsoleCommandParametersContext.prototype.cypherConsoleCommandParameter=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(CypherConsoleCommandParameterContext);}else{return this.getTypedRuleContext(CypherConsoleCommandParameterContext,i);}};CypherConsoleCommandParametersContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};CypherConsoleCommandParametersContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCypherConsoleCommandParameters(this);}};CypherConsoleCommandParametersContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCypherConsoleCommandParameters(this);}};CypherParser.CypherConsoleCommandParametersContext=CypherConsoleCommandParametersContext;CypherParser.prototype.cypherConsoleCommandParameters=function(){var localctx=new CypherConsoleCommandParametersContext(this,this._ctx,this.state);this.enterRule(localctx,10,CypherParser.RULE_cypherConsoleCommandParameters);try{this.enterOuterAlt(localctx,1);this.state=456;this.cypherConsoleCommandParameter();this.state=461;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,9,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=457;this.match(CypherParser.SP);this.state=458;this.cypherConsoleCommandParameter();}this.state=463;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,9,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CypherConsoleCommandParameterContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_cypherConsoleCommandParameter;return this;}CypherConsoleCommandParameterContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CypherConsoleCommandParameterContext.prototype.constructor=CypherConsoleCommandParameterContext;CypherConsoleCommandParameterContext.prototype.url=function(){return this.getTypedRuleContext(UrlContext,0);};CypherConsoleCommandParameterContext.prototype.json=function(){return this.getTypedRuleContext(JsonContext,0);};CypherConsoleCommandParameterContext.prototype.arrowExpression=function(){return this.getTypedRuleContext(ArrowExpressionContext,0);};CypherConsoleCommandParameterContext.prototype.mapLiteral=function(){return this.getTypedRuleContext(MapLiteralContext,0);};CypherConsoleCommandParameterContext.prototype.keyValueLiteral=function(){return this.getTypedRuleContext(KeyValueLiteralContext,0);};CypherConsoleCommandParameterContext.prototype.stringLiteral=function(){return this.getTypedRuleContext(StringLiteralContext,0);};CypherConsoleCommandParameterContext.prototype.numberLiteral=function(){return this.getTypedRuleContext(NumberLiteralContext,0);};CypherConsoleCommandParameterContext.prototype.booleanLiteral=function(){return this.getTypedRuleContext(BooleanLiteralContext,0);};CypherConsoleCommandParameterContext.prototype.subCommand=function(){return this.getTypedRuleContext(SubCommandContext,0);};CypherConsoleCommandParameterContext.prototype.commandPath=function(){return this.getTypedRuleContext(CommandPathContext,0);};CypherConsoleCommandParameterContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCypherConsoleCommandParameter(this);}};CypherConsoleCommandParameterContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCypherConsoleCommandParameter(this);}};CypherParser.CypherConsoleCommandParameterContext=CypherConsoleCommandParameterContext;CypherParser.prototype.cypherConsoleCommandParameter=function(){var localctx=new CypherConsoleCommandParameterContext(this,this._ctx,this.state);this.enterRule(localctx,12,CypherParser.RULE_cypherConsoleCommandParameter);try{this.state=474;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,10,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=464;this.url();break;case 2:this.enterOuterAlt(localctx,2);this.state=465;this.json();break;case 3:this.enterOuterAlt(localctx,3);this.state=466;this.arrowExpression();break;case 4:this.enterOuterAlt(localctx,4);this.state=467;this.mapLiteral();break;case 5:this.enterOuterAlt(localctx,5);this.state=468;this.keyValueLiteral();break;case 6:this.enterOuterAlt(localctx,6);this.state=469;this.stringLiteral();break;case 7:this.enterOuterAlt(localctx,7);this.state=470;this.numberLiteral();break;case 8:this.enterOuterAlt(localctx,8);this.state=471;this.booleanLiteral();break;case 9:this.enterOuterAlt(localctx,9);this.state=472;this.subCommand();break;case 10:this.enterOuterAlt(localctx,10);this.state=473;this.commandPath();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ArrowExpressionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_arrowExpression;return this;}ArrowExpressionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ArrowExpressionContext.prototype.constructor=ArrowExpressionContext;ArrowExpressionContext.prototype.symbolicName=function(){return this.getTypedRuleContext(SymbolicNameContext,0);};ArrowExpressionContext.prototype.expression=function(){return this.getTypedRuleContext(ExpressionContext,0);};ArrowExpressionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};ArrowExpressionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterArrowExpression(this);}};ArrowExpressionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitArrowExpression(this);}};CypherParser.ArrowExpressionContext=ArrowExpressionContext;CypherParser.prototype.arrowExpression=function(){var localctx=new ArrowExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,14,CypherParser.RULE_arrowExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=476;this.symbolicName();this.state=478;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=477;this.match(CypherParser.SP);}this.state=480;this.match(CypherParser.T__3);this.state=482;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=481;this.match(CypherParser.SP);}this.state=484;this.expression();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function UrlContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_url;return this;}UrlContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);UrlContext.prototype.constructor=UrlContext;UrlContext.prototype.uri=function(){return this.getTypedRuleContext(UriContext,0);};UrlContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterUrl(this);}};UrlContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitUrl(this);}};CypherParser.UrlContext=UrlContext;CypherParser.prototype.url=function(){var localctx=new UrlContext(this,this._ctx,this.state);this.enterRule(localctx,16,CypherParser.RULE_url);try{this.enterOuterAlt(localctx,1);this.state=486;this.uri();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function UriContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_uri;return this;}UriContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);UriContext.prototype.constructor=UriContext;UriContext.prototype.scheme=function(){return this.getTypedRuleContext(SchemeContext,0);};UriContext.prototype.host=function(){return this.getTypedRuleContext(HostContext,0);};UriContext.prototype.login=function(){return this.getTypedRuleContext(LoginContext,0);};UriContext.prototype.port=function(){return this.getTypedRuleContext(PortContext,0);};UriContext.prototype.path=function(){return this.getTypedRuleContext(PathContext,0);};UriContext.prototype.urlQuery=function(){return this.getTypedRuleContext(UrlQueryContext,0);};UriContext.prototype.frag=function(){return this.getTypedRuleContext(FragContext,0);};UriContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterUri(this);}};UriContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitUri(this);}};CypherParser.UriContext=UriContext;CypherParser.prototype.uri=function(){var localctx=new UriContext(this,this._ctx,this.state);this.enterRule(localctx,18,CypherParser.RULE_uri);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=488;this.scheme();this.state=489;this.match(CypherParser.T__4);this.state=491;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,13,this._ctx);if(la_===1){this.state=490;this.login();}this.state=493;this.host();this.state=496;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.T__1){this.state=494;this.match(CypherParser.T__1);this.state=495;this.port();}this.state=500;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.T__5){this.state=498;this.match(CypherParser.T__5);this.state=499;this.path();}this.state=503;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.T__9){this.state=502;this.urlQuery();}this.state=506;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.T__8){this.state=505;this.frag();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function SchemeContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_scheme;return this;}SchemeContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);SchemeContext.prototype.constructor=SchemeContext;SchemeContext.prototype.string=function(){return this.getTypedRuleContext(StringContext,0);};SchemeContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterScheme(this);}};SchemeContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitScheme(this);}};CypherParser.SchemeContext=SchemeContext;CypherParser.prototype.scheme=function(){var localctx=new SchemeContext(this,this._ctx,this.state);this.enterRule(localctx,20,CypherParser.RULE_scheme);try{this.enterOuterAlt(localctx,1);this.state=508;this.string();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function HostContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_host;return this;}HostContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);HostContext.prototype.constructor=HostContext;HostContext.prototype.hostname=function(){return this.getTypedRuleContext(HostnameContext,0);};HostContext.prototype.hostnumber=function(){return this.getTypedRuleContext(HostnumberContext,0);};HostContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterHost(this);}};HostContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitHost(this);}};CypherParser.HostContext=HostContext;CypherParser.prototype.host=function(){var localctx=new HostContext(this,this._ctx,this.state);this.enterRule(localctx,22,CypherParser.RULE_host);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=511;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.T__5){this.state=510;this.match(CypherParser.T__5);}this.state=515;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.CYPHER:case CypherParser.EXPLAIN:case CypherParser.PROFILE:case CypherParser.USING:case CypherParser.PERIODIC:case CypherParser.COMMIT:case CypherParser.UNION:case CypherParser.ALL:case CypherParser.CREATE:case CypherParser.DROP:case CypherParser.INDEX:case CypherParser.ON:case CypherParser.CONSTRAINT:case CypherParser.ASSERT:case CypherParser.IS:case CypherParser.UNIQUE:case CypherParser.EXISTS:case CypherParser.LOAD:case CypherParser.CSV:case CypherParser.WITH:case CypherParser.HEADERS:case CypherParser.FROM:case CypherParser.AS:case CypherParser.FIELDTERMINATOR:case CypherParser.OPTIONAL:case CypherParser.MATCH:case CypherParser.UNWIND:case CypherParser.MERGE:case CypherParser.SET:case CypherParser.DETACH:case CypherParser.DELETE:case CypherParser.REMOVE:case CypherParser.FOREACH:case CypherParser.IN:case CypherParser.DISTINCT:case CypherParser.RETURN:case CypherParser.ORDER:case CypherParser.BY:case CypherParser.L_SKIP:case CypherParser.LIMIT:case CypherParser.ASCENDING:case CypherParser.ASC:case CypherParser.DESCENDING:case CypherParser.DESC:case CypherParser.JOIN:case CypherParser.SCAN:case CypherParser.START:case CypherParser.NODE:case CypherParser.RELATIONSHIP:case CypherParser.REL:case CypherParser.WHERE:case CypherParser.SHORTESTPATH:case CypherParser.ALLSHORTESTPATHS:case CypherParser.OR:case CypherParser.XOR:case CypherParser.AND:case CypherParser.NOT:case CypherParser.STARTS:case CypherParser.ENDS:case CypherParser.CONTAINS:case CypherParser.NULL:case CypherParser.COUNT:case CypherParser.FILTER:case CypherParser.EXTRACT:case CypherParser.ANY:case CypherParser.NONE:case CypherParser.SINGLE:case CypherParser.TRUE:case CypherParser.FALSE:case CypherParser.REDUCE:case CypherParser.CASE:case CypherParser.ELSE:case CypherParser.END:case CypherParser.WHEN:case CypherParser.THEN:case CypherParser.CALL:case CypherParser.YIELD:case CypherParser.KEY:case CypherParser.HexLetter:case CypherParser.UnescapedSymbolicName:case CypherParser.EscapedSymbolicName:this.state=513;this.hostname();break;case CypherParser.HexInteger:case CypherParser.DecimalInteger:case CypherParser.OctalInteger:this.state=514;this.hostnumber();break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function HostnameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_hostname;return this;}HostnameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);HostnameContext.prototype.constructor=HostnameContext;HostnameContext.prototype.string=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(StringContext);}else{return this.getTypedRuleContext(StringContext,i);}};HostnameContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterHostname(this);}};HostnameContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitHostname(this);}};CypherParser.HostnameContext=HostnameContext;CypherParser.prototype.hostname=function(){var localctx=new HostnameContext(this,this._ctx,this.state);this.enterRule(localctx,24,CypherParser.RULE_hostname);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=517;this.string();this.state=522;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CypherParser.T__6){this.state=518;this.match(CypherParser.T__6);this.state=519;this.string();this.state=524;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function HostnumberContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_hostnumber;return this;}HostnumberContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);HostnumberContext.prototype.constructor=HostnumberContext;HostnumberContext.prototype.urlDigits=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(UrlDigitsContext);}else{return this.getTypedRuleContext(UrlDigitsContext,i);}};HostnumberContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterHostnumber(this);}};HostnumberContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitHostnumber(this);}};CypherParser.HostnumberContext=HostnumberContext;CypherParser.prototype.hostnumber=function(){var localctx=new HostnumberContext(this,this._ctx,this.state);this.enterRule(localctx,26,CypherParser.RULE_hostnumber);try{this.enterOuterAlt(localctx,1);this.state=525;this.urlDigits();this.state=526;this.match(CypherParser.T__6);this.state=527;this.urlDigits();this.state=528;this.match(CypherParser.T__6);this.state=529;this.urlDigits();this.state=530;this.match(CypherParser.T__6);this.state=531;this.urlDigits();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PortContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_port;return this;}PortContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PortContext.prototype.constructor=PortContext;PortContext.prototype.urlDigits=function(){return this.getTypedRuleContext(UrlDigitsContext,0);};PortContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterPort(this);}};PortContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitPort(this);}};CypherParser.PortContext=PortContext;CypherParser.prototype.port=function(){var localctx=new PortContext(this,this._ctx,this.state);this.enterRule(localctx,28,CypherParser.RULE_port);try{this.enterOuterAlt(localctx,1);this.state=533;this.urlDigits();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PathContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_path;return this;}PathContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PathContext.prototype.constructor=PathContext;PathContext.prototype.string=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(StringContext);}else{return this.getTypedRuleContext(StringContext,i);}};PathContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterPath(this);}};PathContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitPath(this);}};CypherParser.PathContext=PathContext;CypherParser.prototype.path=function(){var localctx=new PathContext(this,this._ctx,this.state);this.enterRule(localctx,30,CypherParser.RULE_path);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=535;this.string();this.state=540;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CypherParser.T__5){this.state=536;this.match(CypherParser.T__5);this.state=537;this.string();this.state=542;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function UserContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_user;return this;}UserContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);UserContext.prototype.constructor=UserContext;UserContext.prototype.string=function(){return this.getTypedRuleContext(StringContext,0);};UserContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterUser(this);}};UserContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitUser(this);}};CypherParser.UserContext=UserContext;CypherParser.prototype.user=function(){var localctx=new UserContext(this,this._ctx,this.state);this.enterRule(localctx,32,CypherParser.RULE_user);try{this.enterOuterAlt(localctx,1);this.state=543;this.string();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function LoginContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_login;return this;}LoginContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);LoginContext.prototype.constructor=LoginContext;LoginContext.prototype.user=function(){return this.getTypedRuleContext(UserContext,0);};LoginContext.prototype.password=function(){return this.getTypedRuleContext(PasswordContext,0);};LoginContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterLogin(this);}};LoginContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitLogin(this);}};CypherParser.LoginContext=LoginContext;CypherParser.prototype.login=function(){var localctx=new LoginContext(this,this._ctx,this.state);this.enterRule(localctx,34,CypherParser.RULE_login);try{this.enterOuterAlt(localctx,1);this.state=545;this.user();this.state=546;this.match(CypherParser.T__1);this.state=547;this.password();this.state=548;this.match(CypherParser.T__7);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PasswordContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_password;return this;}PasswordContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PasswordContext.prototype.constructor=PasswordContext;PasswordContext.prototype.string=function(){return this.getTypedRuleContext(StringContext,0);};PasswordContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterPassword(this);}};PasswordContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitPassword(this);}};CypherParser.PasswordContext=PasswordContext;CypherParser.prototype.password=function(){var localctx=new PasswordContext(this,this._ctx,this.state);this.enterRule(localctx,36,CypherParser.RULE_password);try{this.enterOuterAlt(localctx,1);this.state=550;this.string();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function FragContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_frag;return this;}FragContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);FragContext.prototype.constructor=FragContext;FragContext.prototype.string=function(){return this.getTypedRuleContext(StringContext,0);};FragContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterFrag(this);}};FragContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitFrag(this);}};CypherParser.FragContext=FragContext;CypherParser.prototype.frag=function(){var localctx=new FragContext(this,this._ctx,this.state);this.enterRule(localctx,38,CypherParser.RULE_frag);try{this.enterOuterAlt(localctx,1);this.state=552;this.match(CypherParser.T__8);this.state=553;this.string();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function UrlQueryContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_urlQuery;return this;}UrlQueryContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);UrlQueryContext.prototype.constructor=UrlQueryContext;UrlQueryContext.prototype.search=function(){return this.getTypedRuleContext(SearchContext,0);};UrlQueryContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterUrlQuery(this);}};UrlQueryContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitUrlQuery(this);}};CypherParser.UrlQueryContext=UrlQueryContext;CypherParser.prototype.urlQuery=function(){var localctx=new UrlQueryContext(this,this._ctx,this.state);this.enterRule(localctx,40,CypherParser.RULE_urlQuery);try{this.enterOuterAlt(localctx,1);this.state=555;this.match(CypherParser.T__9);this.state=556;this.search();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function SearchContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_search;return this;}SearchContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);SearchContext.prototype.constructor=SearchContext;SearchContext.prototype.searchparameter=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(SearchparameterContext);}else{return this.getTypedRuleContext(SearchparameterContext,i);}};SearchContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterSearch(this);}};SearchContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitSearch(this);}};CypherParser.SearchContext=SearchContext;CypherParser.prototype.search=function(){var localctx=new SearchContext(this,this._ctx,this.state);this.enterRule(localctx,42,CypherParser.RULE_search);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=558;this.searchparameter();this.state=563;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CypherParser.T__10){this.state=559;this.match(CypherParser.T__10);this.state=560;this.searchparameter();this.state=565;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function SearchparameterContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_searchparameter;return this;}SearchparameterContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);SearchparameterContext.prototype.constructor=SearchparameterContext;SearchparameterContext.prototype.string=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(StringContext);}else{return this.getTypedRuleContext(StringContext,i);}};SearchparameterContext.prototype.urlDigits=function(){return this.getTypedRuleContext(UrlDigitsContext,0);};SearchparameterContext.prototype.UrlHex=function(){return this.getToken(CypherParser.UrlHex,0);};SearchparameterContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterSearchparameter(this);}};SearchparameterContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitSearchparameter(this);}};CypherParser.SearchparameterContext=SearchparameterContext;CypherParser.prototype.searchparameter=function(){var localctx=new SearchparameterContext(this,this._ctx,this.state);this.enterRule(localctx,44,CypherParser.RULE_searchparameter);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=566;this.string();this.state=573;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.T__11){this.state=567;this.match(CypherParser.T__11);this.state=571;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.CYPHER:case CypherParser.EXPLAIN:case CypherParser.PROFILE:case CypherParser.USING:case CypherParser.PERIODIC:case CypherParser.COMMIT:case CypherParser.UNION:case CypherParser.ALL:case CypherParser.CREATE:case CypherParser.DROP:case CypherParser.INDEX:case CypherParser.ON:case CypherParser.CONSTRAINT:case CypherParser.ASSERT:case CypherParser.IS:case CypherParser.UNIQUE:case CypherParser.EXISTS:case CypherParser.LOAD:case CypherParser.CSV:case CypherParser.WITH:case CypherParser.HEADERS:case CypherParser.FROM:case CypherParser.AS:case CypherParser.FIELDTERMINATOR:case CypherParser.OPTIONAL:case CypherParser.MATCH:case CypherParser.UNWIND:case CypherParser.MERGE:case CypherParser.SET:case CypherParser.DETACH:case CypherParser.DELETE:case CypherParser.REMOVE:case CypherParser.FOREACH:case CypherParser.IN:case CypherParser.DISTINCT:case CypherParser.RETURN:case CypherParser.ORDER:case CypherParser.BY:case CypherParser.L_SKIP:case CypherParser.LIMIT:case CypherParser.ASCENDING:case CypherParser.ASC:case CypherParser.DESCENDING:case CypherParser.DESC:case CypherParser.JOIN:case CypherParser.SCAN:case CypherParser.START:case CypherParser.NODE:case CypherParser.RELATIONSHIP:case CypherParser.REL:case CypherParser.WHERE:case CypherParser.SHORTESTPATH:case CypherParser.ALLSHORTESTPATHS:case CypherParser.OR:case CypherParser.XOR:case CypherParser.AND:case CypherParser.NOT:case CypherParser.STARTS:case CypherParser.ENDS:case CypherParser.CONTAINS:case CypherParser.NULL:case CypherParser.COUNT:case CypherParser.FILTER:case CypherParser.EXTRACT:case CypherParser.ANY:case CypherParser.NONE:case CypherParser.SINGLE:case CypherParser.TRUE:case CypherParser.FALSE:case CypherParser.REDUCE:case CypherParser.CASE:case CypherParser.ELSE:case CypherParser.END:case CypherParser.WHEN:case CypherParser.THEN:case CypherParser.CALL:case CypherParser.YIELD:case CypherParser.KEY:case CypherParser.HexLetter:case CypherParser.UnescapedSymbolicName:case CypherParser.EscapedSymbolicName:this.state=568;this.string();break;case CypherParser.HexInteger:case CypherParser.DecimalInteger:case CypherParser.OctalInteger:this.state=569;this.urlDigits();break;case CypherParser.UrlHex:this.state=570;this.match(CypherParser.UrlHex);break;default:throw new antlr4.error.NoViableAltException(this);}}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function StringContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_string;return this;}StringContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);StringContext.prototype.constructor=StringContext;StringContext.prototype.symbolicName=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(SymbolicNameContext);}else{return this.getTypedRuleContext(SymbolicNameContext,i);}};StringContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterString(this);}};StringContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitString(this);}};CypherParser.StringContext=StringContext;CypherParser.prototype.string=function(){var localctx=new StringContext(this,this._ctx,this.state);this.enterRule(localctx,46,CypherParser.RULE_string);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=575;this.symbolicName();this.state=582;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,26,this._ctx);while(_alt!=1&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1+1){this.state=577;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.T__6||_la===CypherParser.T__12){this.state=576;_la=this._input.LA(1);if(!(_la===CypherParser.T__6||_la===CypherParser.T__12)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}this.state=579;this.symbolicName();}this.state=584;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,26,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function UrlDigitsContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_urlDigits;return this;}UrlDigitsContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);UrlDigitsContext.prototype.constructor=UrlDigitsContext;UrlDigitsContext.prototype.integerLiteral=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(IntegerLiteralContext);}else{return this.getTypedRuleContext(IntegerLiteralContext,i);}};UrlDigitsContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterUrlDigits(this);}};UrlDigitsContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitUrlDigits(this);}};CypherParser.UrlDigitsContext=UrlDigitsContext;CypherParser.prototype.urlDigits=function(){var localctx=new UrlDigitsContext(this,this._ctx,this.state);this.enterRule(localctx,48,CypherParser.RULE_urlDigits);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=586;this._errHandler.sync(this);_la=this._input.LA(1);do{this.state=585;this.integerLiteral();this.state=588;this._errHandler.sync(this);_la=this._input.LA(1);}while((_la-135&~0x1f)==0&&(1<<_la-135&(1<<CypherParser.HexInteger-135|1<<CypherParser.DecimalInteger-135|1<<CypherParser.OctalInteger-135))!==0);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function JsonContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_json;return this;}JsonContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);JsonContext.prototype.constructor=JsonContext;JsonContext.prototype.value=function(){return this.getTypedRuleContext(ValueContext,0);};JsonContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterJson(this);}};JsonContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitJson(this);}};CypherParser.JsonContext=JsonContext;CypherParser.prototype.json=function(){var localctx=new JsonContext(this,this._ctx,this.state);this.enterRule(localctx,50,CypherParser.RULE_json);try{this.enterOuterAlt(localctx,1);this.state=590;this.value();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ObjContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_obj;return this;}ObjContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ObjContext.prototype.constructor=ObjContext;ObjContext.prototype.pair=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(PairContext);}else{return this.getTypedRuleContext(PairContext,i);}};ObjContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};ObjContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterObj(this);}};ObjContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitObj(this);}};CypherParser.ObjContext=ObjContext;CypherParser.prototype.obj=function(){var localctx=new ObjContext(this,this._ctx,this.state);this.enterRule(localctx,52,CypherParser.RULE_obj);var _la=0;// Token type
try{this.state=620;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,34,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=592;this.match(CypherParser.T__13);this.state=594;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=593;this.match(CypherParser.SP);}this.state=596;this.pair();this.state=598;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=597;this.match(CypherParser.SP);}this.state=610;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CypherParser.T__14){this.state=600;this.match(CypherParser.T__14);this.state=602;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=601;this.match(CypherParser.SP);}this.state=604;this.pair();this.state=606;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=605;this.match(CypherParser.SP);}this.state=612;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=613;this.match(CypherParser.T__15);break;case 2:this.enterOuterAlt(localctx,2);this.state=615;this.match(CypherParser.T__13);this.state=617;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=616;this.match(CypherParser.SP);}this.state=619;this.match(CypherParser.T__15);break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PairContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_pair;return this;}PairContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PairContext.prototype.constructor=PairContext;PairContext.prototype.stringLiteral=function(){return this.getTypedRuleContext(StringLiteralContext,0);};PairContext.prototype.value=function(){return this.getTypedRuleContext(ValueContext,0);};PairContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};PairContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterPair(this);}};PairContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitPair(this);}};CypherParser.PairContext=PairContext;CypherParser.prototype.pair=function(){var localctx=new PairContext(this,this._ctx,this.state);this.enterRule(localctx,54,CypherParser.RULE_pair);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=622;this.stringLiteral();this.state=624;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=623;this.match(CypherParser.SP);}this.state=626;this.match(CypherParser.T__1);this.state=628;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=627;this.match(CypherParser.SP);}this.state=630;this.value();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ArrayContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_array;return this;}ArrayContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ArrayContext.prototype.constructor=ArrayContext;ArrayContext.prototype.value=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ValueContext);}else{return this.getTypedRuleContext(ValueContext,i);}};ArrayContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};ArrayContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterArray(this);}};ArrayContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitArray(this);}};CypherParser.ArrayContext=ArrayContext;CypherParser.prototype.array=function(){var localctx=new ArrayContext(this,this._ctx,this.state);this.enterRule(localctx,56,CypherParser.RULE_array);var _la=0;// Token type
try{this.state=660;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,43,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=632;this.match(CypherParser.T__16);this.state=634;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=633;this.match(CypherParser.SP);}this.state=636;this.value();this.state=638;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=637;this.match(CypherParser.SP);}this.state=650;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CypherParser.T__14){this.state=640;this.match(CypherParser.T__14);this.state=642;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=641;this.match(CypherParser.SP);}this.state=644;this.value();this.state=646;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=645;this.match(CypherParser.SP);}this.state=652;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=653;this.match(CypherParser.T__17);break;case 2:this.enterOuterAlt(localctx,2);this.state=655;this.match(CypherParser.T__16);this.state=657;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=656;this.match(CypherParser.SP);}this.state=659;this.match(CypherParser.T__17);break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ValueContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_value;return this;}ValueContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ValueContext.prototype.constructor=ValueContext;ValueContext.prototype.stringLiteral=function(){return this.getTypedRuleContext(StringLiteralContext,0);};ValueContext.prototype.numberLiteral=function(){return this.getTypedRuleContext(NumberLiteralContext,0);};ValueContext.prototype.obj=function(){return this.getTypedRuleContext(ObjContext,0);};ValueContext.prototype.array=function(){return this.getTypedRuleContext(ArrayContext,0);};ValueContext.prototype.booleanLiteral=function(){return this.getTypedRuleContext(BooleanLiteralContext,0);};ValueContext.prototype.NULL=function(){return this.getToken(CypherParser.NULL,0);};ValueContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterValue(this);}};ValueContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitValue(this);}};CypherParser.ValueContext=ValueContext;CypherParser.prototype.value=function(){var localctx=new ValueContext(this,this._ctx,this.state);this.enterRule(localctx,58,CypherParser.RULE_value);try{this.state=668;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.StringLiteral:this.enterOuterAlt(localctx,1);this.state=662;this.stringLiteral();break;case CypherParser.HexInteger:case CypherParser.DecimalInteger:case CypherParser.OctalInteger:case CypherParser.ExponentDecimalReal:case CypherParser.RegularDecimalReal:this.enterOuterAlt(localctx,2);this.state=663;this.numberLiteral();break;case CypherParser.T__13:this.enterOuterAlt(localctx,3);this.state=664;this.obj();break;case CypherParser.T__16:this.enterOuterAlt(localctx,4);this.state=665;this.array();break;case CypherParser.TRUE:case CypherParser.FALSE:this.enterOuterAlt(localctx,5);this.state=666;this.booleanLiteral();break;case CypherParser.NULL:this.enterOuterAlt(localctx,6);this.state=667;this.match(CypherParser.NULL);break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function KeyValueLiteralContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_keyValueLiteral;return this;}KeyValueLiteralContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);KeyValueLiteralContext.prototype.constructor=KeyValueLiteralContext;KeyValueLiteralContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};KeyValueLiteralContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};KeyValueLiteralContext.prototype.StringLiteral=function(){return this.getToken(CypherParser.StringLiteral,0);};KeyValueLiteralContext.prototype.numberLiteral=function(){return this.getTypedRuleContext(NumberLiteralContext,0);};KeyValueLiteralContext.prototype.booleanLiteral=function(){return this.getTypedRuleContext(BooleanLiteralContext,0);};KeyValueLiteralContext.prototype.symbolicName=function(){return this.getTypedRuleContext(SymbolicNameContext,0);};KeyValueLiteralContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterKeyValueLiteral(this);}};KeyValueLiteralContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitKeyValueLiteral(this);}};CypherParser.KeyValueLiteralContext=KeyValueLiteralContext;CypherParser.prototype.keyValueLiteral=function(){var localctx=new KeyValueLiteralContext(this,this._ctx,this.state);this.enterRule(localctx,60,CypherParser.RULE_keyValueLiteral);try{this.enterOuterAlt(localctx,1);this.state=670;this.variable();this.state=671;this.match(CypherParser.T__1);this.state=672;this.match(CypherParser.SP);this.state=677;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,45,this._ctx);switch(la_){case 1:this.state=673;this.match(CypherParser.StringLiteral);break;case 2:this.state=674;this.numberLiteral();break;case 3:this.state=675;this.booleanLiteral();break;case 4:this.state=676;this.symbolicName();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CommandPathContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_commandPath;return this;}CommandPathContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CommandPathContext.prototype.constructor=CommandPathContext;CommandPathContext.prototype.symbolicName=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(SymbolicNameContext);}else{return this.getTypedRuleContext(SymbolicNameContext,i);}};CommandPathContext.prototype.numberLiteral=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(NumberLiteralContext);}else{return this.getTypedRuleContext(NumberLiteralContext,i);}};CommandPathContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCommandPath(this);}};CommandPathContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCommandPath(this);}};CypherParser.CommandPathContext=CommandPathContext;CypherParser.prototype.commandPath=function(){var localctx=new CommandPathContext(this,this._ctx,this.state);this.enterRule(localctx,62,CypherParser.RULE_commandPath);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=684;this._errHandler.sync(this);var _alt=1;do{switch(_alt){case 1:this.state=679;this.match(CypherParser.T__5);this.state=682;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.CYPHER:case CypherParser.EXPLAIN:case CypherParser.PROFILE:case CypherParser.USING:case CypherParser.PERIODIC:case CypherParser.COMMIT:case CypherParser.UNION:case CypherParser.ALL:case CypherParser.CREATE:case CypherParser.DROP:case CypherParser.INDEX:case CypherParser.ON:case CypherParser.CONSTRAINT:case CypherParser.ASSERT:case CypherParser.IS:case CypherParser.UNIQUE:case CypherParser.EXISTS:case CypherParser.LOAD:case CypherParser.CSV:case CypherParser.WITH:case CypherParser.HEADERS:case CypherParser.FROM:case CypherParser.AS:case CypherParser.FIELDTERMINATOR:case CypherParser.OPTIONAL:case CypherParser.MATCH:case CypherParser.UNWIND:case CypherParser.MERGE:case CypherParser.SET:case CypherParser.DETACH:case CypherParser.DELETE:case CypherParser.REMOVE:case CypherParser.FOREACH:case CypherParser.IN:case CypherParser.DISTINCT:case CypherParser.RETURN:case CypherParser.ORDER:case CypherParser.BY:case CypherParser.L_SKIP:case CypherParser.LIMIT:case CypherParser.ASCENDING:case CypherParser.ASC:case CypherParser.DESCENDING:case CypherParser.DESC:case CypherParser.JOIN:case CypherParser.SCAN:case CypherParser.START:case CypherParser.NODE:case CypherParser.RELATIONSHIP:case CypherParser.REL:case CypherParser.WHERE:case CypherParser.SHORTESTPATH:case CypherParser.ALLSHORTESTPATHS:case CypherParser.OR:case CypherParser.XOR:case CypherParser.AND:case CypherParser.NOT:case CypherParser.STARTS:case CypherParser.ENDS:case CypherParser.CONTAINS:case CypherParser.NULL:case CypherParser.COUNT:case CypherParser.FILTER:case CypherParser.EXTRACT:case CypherParser.ANY:case CypherParser.NONE:case CypherParser.SINGLE:case CypherParser.TRUE:case CypherParser.FALSE:case CypherParser.REDUCE:case CypherParser.CASE:case CypherParser.ELSE:case CypherParser.END:case CypherParser.WHEN:case CypherParser.THEN:case CypherParser.CALL:case CypherParser.YIELD:case CypherParser.KEY:case CypherParser.HexLetter:case CypherParser.UnescapedSymbolicName:case CypherParser.EscapedSymbolicName:this.state=680;this.symbolicName();break;case CypherParser.HexInteger:case CypherParser.DecimalInteger:case CypherParser.OctalInteger:case CypherParser.ExponentDecimalReal:case CypherParser.RegularDecimalReal:this.state=681;this.numberLiteral();break;default:throw new antlr4.error.NoViableAltException(this);}break;default:throw new antlr4.error.NoViableAltException(this);}this.state=686;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,47,this._ctx);}while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER);this.state=689;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.T__5){this.state=688;this.match(CypherParser.T__5);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function SubCommandContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_subCommand;return this;}SubCommandContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);SubCommandContext.prototype.constructor=SubCommandContext;SubCommandContext.prototype.symbolicName=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(SymbolicNameContext);}else{return this.getTypedRuleContext(SymbolicNameContext,i);}};SubCommandContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterSubCommand(this);}};SubCommandContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitSubCommand(this);}};CypherParser.SubCommandContext=SubCommandContext;CypherParser.prototype.subCommand=function(){var localctx=new SubCommandContext(this,this._ctx,this.state);this.enterRule(localctx,64,CypherParser.RULE_subCommand);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=691;this.symbolicName();this.state=696;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CypherParser.T__2){this.state=692;this.match(CypherParser.T__2);this.state=693;this.symbolicName();this.state=698;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CypherQueryContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_cypherQuery;return this;}CypherQueryContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CypherQueryContext.prototype.constructor=CypherQueryContext;CypherQueryContext.prototype.queryOptions=function(){return this.getTypedRuleContext(QueryOptionsContext,0);};CypherQueryContext.prototype.statement=function(){return this.getTypedRuleContext(StatementContext,0);};CypherQueryContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCypherQuery(this);}};CypherQueryContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCypherQuery(this);}};CypherParser.CypherQueryContext=CypherQueryContext;CypherParser.prototype.cypherQuery=function(){var localctx=new CypherQueryContext(this,this._ctx,this.state);this.enterRule(localctx,66,CypherParser.RULE_cypherQuery);try{this.enterOuterAlt(localctx,1);this.state=699;this.queryOptions();this.state=700;this.statement();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function QueryOptionsContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_queryOptions;return this;}QueryOptionsContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);QueryOptionsContext.prototype.constructor=QueryOptionsContext;QueryOptionsContext.prototype.anyCypherOption=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(AnyCypherOptionContext);}else{return this.getTypedRuleContext(AnyCypherOptionContext,i);}};QueryOptionsContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};QueryOptionsContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterQueryOptions(this);}};QueryOptionsContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitQueryOptions(this);}};CypherParser.QueryOptionsContext=QueryOptionsContext;CypherParser.prototype.queryOptions=function(){var localctx=new QueryOptionsContext(this,this._ctx,this.state);this.enterRule(localctx,68,CypherParser.RULE_queryOptions);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=708;this._errHandler.sync(this);_la=this._input.LA(1);while((_la-54&~0x1f)==0&&(1<<_la-54&(1<<CypherParser.CYPHER-54|1<<CypherParser.EXPLAIN-54|1<<CypherParser.PROFILE-54))!==0){this.state=702;this.anyCypherOption();this.state=704;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=703;this.match(CypherParser.SP);}this.state=710;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function AnyCypherOptionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_anyCypherOption;return this;}AnyCypherOptionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);AnyCypherOptionContext.prototype.constructor=AnyCypherOptionContext;AnyCypherOptionContext.prototype.cypherOption=function(){return this.getTypedRuleContext(CypherOptionContext,0);};AnyCypherOptionContext.prototype.explain=function(){return this.getTypedRuleContext(ExplainContext,0);};AnyCypherOptionContext.prototype.profile=function(){return this.getTypedRuleContext(ProfileContext,0);};AnyCypherOptionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterAnyCypherOption(this);}};AnyCypherOptionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitAnyCypherOption(this);}};CypherParser.AnyCypherOptionContext=AnyCypherOptionContext;CypherParser.prototype.anyCypherOption=function(){var localctx=new AnyCypherOptionContext(this,this._ctx,this.state);this.enterRule(localctx,70,CypherParser.RULE_anyCypherOption);try{this.state=714;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.CYPHER:this.enterOuterAlt(localctx,1);this.state=711;this.cypherOption();break;case CypherParser.EXPLAIN:this.enterOuterAlt(localctx,2);this.state=712;this.explain();break;case CypherParser.PROFILE:this.enterOuterAlt(localctx,3);this.state=713;this.profile();break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CypherOptionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_cypherOption;return this;}CypherOptionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CypherOptionContext.prototype.constructor=CypherOptionContext;CypherOptionContext.prototype.CYPHER=function(){return this.getToken(CypherParser.CYPHER,0);};CypherOptionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};CypherOptionContext.prototype.versionNumber=function(){return this.getTypedRuleContext(VersionNumberContext,0);};CypherOptionContext.prototype.configurationOption=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ConfigurationOptionContext);}else{return this.getTypedRuleContext(ConfigurationOptionContext,i);}};CypherOptionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCypherOption(this);}};CypherOptionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCypherOption(this);}};CypherParser.CypherOptionContext=CypherOptionContext;CypherParser.prototype.cypherOption=function(){var localctx=new CypherOptionContext(this,this._ctx,this.state);this.enterRule(localctx,72,CypherParser.RULE_cypherOption);try{this.enterOuterAlt(localctx,1);this.state=716;this.match(CypherParser.CYPHER);this.state=719;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,53,this._ctx);if(la_===1){this.state=717;this.match(CypherParser.SP);this.state=718;this.versionNumber();}this.state=725;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,54,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=721;this.match(CypherParser.SP);this.state=722;this.configurationOption();}this.state=727;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,54,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function VersionNumberContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_versionNumber;return this;}VersionNumberContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);VersionNumberContext.prototype.constructor=VersionNumberContext;VersionNumberContext.prototype.RegularDecimalReal=function(){return this.getToken(CypherParser.RegularDecimalReal,0);};VersionNumberContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterVersionNumber(this);}};VersionNumberContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitVersionNumber(this);}};CypherParser.VersionNumberContext=VersionNumberContext;CypherParser.prototype.versionNumber=function(){var localctx=new VersionNumberContext(this,this._ctx,this.state);this.enterRule(localctx,74,CypherParser.RULE_versionNumber);try{this.enterOuterAlt(localctx,1);this.state=728;this.match(CypherParser.RegularDecimalReal);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ExplainContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_explain;return this;}ExplainContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ExplainContext.prototype.constructor=ExplainContext;ExplainContext.prototype.EXPLAIN=function(){return this.getToken(CypherParser.EXPLAIN,0);};ExplainContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterExplain(this);}};ExplainContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitExplain(this);}};CypherParser.ExplainContext=ExplainContext;CypherParser.prototype.explain=function(){var localctx=new ExplainContext(this,this._ctx,this.state);this.enterRule(localctx,76,CypherParser.RULE_explain);try{this.enterOuterAlt(localctx,1);this.state=730;this.match(CypherParser.EXPLAIN);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ProfileContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_profile;return this;}ProfileContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ProfileContext.prototype.constructor=ProfileContext;ProfileContext.prototype.PROFILE=function(){return this.getToken(CypherParser.PROFILE,0);};ProfileContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterProfile(this);}};ProfileContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitProfile(this);}};CypherParser.ProfileContext=ProfileContext;CypherParser.prototype.profile=function(){var localctx=new ProfileContext(this,this._ctx,this.state);this.enterRule(localctx,78,CypherParser.RULE_profile);try{this.enterOuterAlt(localctx,1);this.state=732;this.match(CypherParser.PROFILE);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ConfigurationOptionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_configurationOption;return this;}ConfigurationOptionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ConfigurationOptionContext.prototype.constructor=ConfigurationOptionContext;ConfigurationOptionContext.prototype.symbolicName=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(SymbolicNameContext);}else{return this.getTypedRuleContext(SymbolicNameContext,i);}};ConfigurationOptionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};ConfigurationOptionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterConfigurationOption(this);}};ConfigurationOptionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitConfigurationOption(this);}};CypherParser.ConfigurationOptionContext=ConfigurationOptionContext;CypherParser.prototype.configurationOption=function(){var localctx=new ConfigurationOptionContext(this,this._ctx,this.state);this.enterRule(localctx,80,CypherParser.RULE_configurationOption);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=734;this.symbolicName();this.state=736;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=735;this.match(CypherParser.SP);}this.state=738;this.match(CypherParser.T__11);this.state=740;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=739;this.match(CypherParser.SP);}this.state=742;this.symbolicName();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function StatementContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_statement;return this;}StatementContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);StatementContext.prototype.constructor=StatementContext;StatementContext.prototype.command=function(){return this.getTypedRuleContext(CommandContext,0);};StatementContext.prototype.query=function(){return this.getTypedRuleContext(QueryContext,0);};StatementContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterStatement(this);}};StatementContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitStatement(this);}};CypherParser.StatementContext=StatementContext;CypherParser.prototype.statement=function(){var localctx=new StatementContext(this,this._ctx,this.state);this.enterRule(localctx,82,CypherParser.RULE_statement);try{this.state=746;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,57,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=744;this.command();break;case 2:this.enterOuterAlt(localctx,2);this.state=745;this.query();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function QueryContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_query;return this;}QueryContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);QueryContext.prototype.constructor=QueryContext;QueryContext.prototype.regularQuery=function(){return this.getTypedRuleContext(RegularQueryContext,0);};QueryContext.prototype.bulkImportQuery=function(){return this.getTypedRuleContext(BulkImportQueryContext,0);};QueryContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterQuery(this);}};QueryContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitQuery(this);}};CypherParser.QueryContext=QueryContext;CypherParser.prototype.query=function(){var localctx=new QueryContext(this,this._ctx,this.state);this.enterRule(localctx,84,CypherParser.RULE_query);try{this.state=750;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.CREATE:case CypherParser.LOAD:case CypherParser.WITH:case CypherParser.OPTIONAL:case CypherParser.MATCH:case CypherParser.UNWIND:case CypherParser.MERGE:case CypherParser.SET:case CypherParser.DETACH:case CypherParser.DELETE:case CypherParser.REMOVE:case CypherParser.FOREACH:case CypherParser.RETURN:case CypherParser.START:case CypherParser.CALL:this.enterOuterAlt(localctx,1);this.state=748;this.regularQuery();break;case CypherParser.USING:this.enterOuterAlt(localctx,2);this.state=749;this.bulkImportQuery();break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RegularQueryContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_regularQuery;return this;}RegularQueryContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RegularQueryContext.prototype.constructor=RegularQueryContext;RegularQueryContext.prototype.singleQuery=function(){return this.getTypedRuleContext(SingleQueryContext,0);};RegularQueryContext.prototype.union=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(UnionContext);}else{return this.getTypedRuleContext(UnionContext,i);}};RegularQueryContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};RegularQueryContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterRegularQuery(this);}};RegularQueryContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitRegularQuery(this);}};CypherParser.RegularQueryContext=RegularQueryContext;CypherParser.prototype.regularQuery=function(){var localctx=new RegularQueryContext(this,this._ctx,this.state);this.enterRule(localctx,86,CypherParser.RULE_regularQuery);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=752;this.singleQuery();this.state=759;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,60,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=754;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=753;this.match(CypherParser.SP);}this.state=756;this.union();}this.state=761;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,60,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function BulkImportQueryContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_bulkImportQuery;return this;}BulkImportQueryContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);BulkImportQueryContext.prototype.constructor=BulkImportQueryContext;BulkImportQueryContext.prototype.periodicCommitHint=function(){return this.getTypedRuleContext(PeriodicCommitHintContext,0);};BulkImportQueryContext.prototype.loadCSVQuery=function(){return this.getTypedRuleContext(LoadCSVQueryContext,0);};BulkImportQueryContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};BulkImportQueryContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterBulkImportQuery(this);}};BulkImportQueryContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitBulkImportQuery(this);}};CypherParser.BulkImportQueryContext=BulkImportQueryContext;CypherParser.prototype.bulkImportQuery=function(){var localctx=new BulkImportQueryContext(this,this._ctx,this.state);this.enterRule(localctx,88,CypherParser.RULE_bulkImportQuery);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=762;this.periodicCommitHint();this.state=764;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=763;this.match(CypherParser.SP);}this.state=766;this.loadCSVQuery();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function SingleQueryContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_singleQuery;return this;}SingleQueryContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);SingleQueryContext.prototype.constructor=SingleQueryContext;SingleQueryContext.prototype.clause=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ClauseContext);}else{return this.getTypedRuleContext(ClauseContext,i);}};SingleQueryContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};SingleQueryContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterSingleQuery(this);}};SingleQueryContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitSingleQuery(this);}};CypherParser.SingleQueryContext=SingleQueryContext;CypherParser.prototype.singleQuery=function(){var localctx=new SingleQueryContext(this,this._ctx,this.state);this.enterRule(localctx,90,CypherParser.RULE_singleQuery);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=768;this.clause();this.state=775;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,63,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=770;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=769;this.match(CypherParser.SP);}this.state=772;this.clause();}this.state=777;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,63,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PeriodicCommitHintContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_periodicCommitHint;return this;}PeriodicCommitHintContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PeriodicCommitHintContext.prototype.constructor=PeriodicCommitHintContext;PeriodicCommitHintContext.prototype.USING=function(){return this.getToken(CypherParser.USING,0);};PeriodicCommitHintContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};PeriodicCommitHintContext.prototype.PERIODIC=function(){return this.getToken(CypherParser.PERIODIC,0);};PeriodicCommitHintContext.prototype.COMMIT=function(){return this.getToken(CypherParser.COMMIT,0);};PeriodicCommitHintContext.prototype.integerLiteral=function(){return this.getTypedRuleContext(IntegerLiteralContext,0);};PeriodicCommitHintContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterPeriodicCommitHint(this);}};PeriodicCommitHintContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitPeriodicCommitHint(this);}};CypherParser.PeriodicCommitHintContext=PeriodicCommitHintContext;CypherParser.prototype.periodicCommitHint=function(){var localctx=new PeriodicCommitHintContext(this,this._ctx,this.state);this.enterRule(localctx,92,CypherParser.RULE_periodicCommitHint);try{this.enterOuterAlt(localctx,1);this.state=778;this.match(CypherParser.USING);this.state=779;this.match(CypherParser.SP);this.state=780;this.match(CypherParser.PERIODIC);this.state=781;this.match(CypherParser.SP);this.state=782;this.match(CypherParser.COMMIT);this.state=785;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,64,this._ctx);if(la_===1){this.state=783;this.match(CypherParser.SP);this.state=784;this.integerLiteral();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function LoadCSVQueryContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_loadCSVQuery;return this;}LoadCSVQueryContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);LoadCSVQueryContext.prototype.constructor=LoadCSVQueryContext;LoadCSVQueryContext.prototype.loadCSVClause=function(){return this.getTypedRuleContext(LoadCSVClauseContext,0);};LoadCSVQueryContext.prototype.clause=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ClauseContext);}else{return this.getTypedRuleContext(ClauseContext,i);}};LoadCSVQueryContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};LoadCSVQueryContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterLoadCSVQuery(this);}};LoadCSVQueryContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitLoadCSVQuery(this);}};CypherParser.LoadCSVQueryContext=LoadCSVQueryContext;CypherParser.prototype.loadCSVQuery=function(){var localctx=new LoadCSVQueryContext(this,this._ctx,this.state);this.enterRule(localctx,94,CypherParser.RULE_loadCSVQuery);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=787;this.loadCSVClause();this.state=794;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,66,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=789;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=788;this.match(CypherParser.SP);}this.state=791;this.clause();}this.state=796;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,66,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function UnionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_union;return this;}UnionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);UnionContext.prototype.constructor=UnionContext;UnionContext.prototype.UNION=function(){return this.getToken(CypherParser.UNION,0);};UnionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};UnionContext.prototype.ALL=function(){return this.getToken(CypherParser.ALL,0);};UnionContext.prototype.singleQuery=function(){return this.getTypedRuleContext(SingleQueryContext,0);};UnionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterUnion(this);}};UnionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitUnion(this);}};CypherParser.UnionContext=UnionContext;CypherParser.prototype.union=function(){var localctx=new UnionContext(this,this._ctx,this.state);this.enterRule(localctx,96,CypherParser.RULE_union);var _la=0;// Token type
try{this.state=809;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,69,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=797;this.match(CypherParser.UNION);this.state=798;this.match(CypherParser.SP);this.state=799;this.match(CypherParser.ALL);this.state=801;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=800;this.match(CypherParser.SP);}this.state=803;this.singleQuery();break;case 2:this.enterOuterAlt(localctx,2);this.state=804;this.match(CypherParser.UNION);this.state=806;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=805;this.match(CypherParser.SP);}this.state=808;this.singleQuery();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_clause;return this;}ClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ClauseContext.prototype.constructor=ClauseContext;ClauseContext.prototype.loadCSVClause=function(){return this.getTypedRuleContext(LoadCSVClauseContext,0);};ClauseContext.prototype.startClause=function(){return this.getTypedRuleContext(StartClauseContext,0);};ClauseContext.prototype.matchClause=function(){return this.getTypedRuleContext(MatchClauseContext,0);};ClauseContext.prototype.unwindClause=function(){return this.getTypedRuleContext(UnwindClauseContext,0);};ClauseContext.prototype.mergeClause=function(){return this.getTypedRuleContext(MergeClauseContext,0);};ClauseContext.prototype.createClause=function(){return this.getTypedRuleContext(CreateClauseContext,0);};ClauseContext.prototype.createUniqueClause=function(){return this.getTypedRuleContext(CreateUniqueClauseContext,0);};ClauseContext.prototype.setClause=function(){return this.getTypedRuleContext(SetClauseContext,0);};ClauseContext.prototype.deleteClause=function(){return this.getTypedRuleContext(DeleteClauseContext,0);};ClauseContext.prototype.removeClause=function(){return this.getTypedRuleContext(RemoveClauseContext,0);};ClauseContext.prototype.foreachClause=function(){return this.getTypedRuleContext(ForeachClauseContext,0);};ClauseContext.prototype.withClause=function(){return this.getTypedRuleContext(WithClauseContext,0);};ClauseContext.prototype.returnClause=function(){return this.getTypedRuleContext(ReturnClauseContext,0);};ClauseContext.prototype.call=function(){return this.getTypedRuleContext(CallContext,0);};ClauseContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterClause(this);}};ClauseContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitClause(this);}};CypherParser.ClauseContext=ClauseContext;CypherParser.prototype.clause=function(){var localctx=new ClauseContext(this,this._ctx,this.state);this.enterRule(localctx,98,CypherParser.RULE_clause);try{this.state=825;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,70,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=811;this.loadCSVClause();break;case 2:this.enterOuterAlt(localctx,2);this.state=812;this.startClause();break;case 3:this.enterOuterAlt(localctx,3);this.state=813;this.matchClause();break;case 4:this.enterOuterAlt(localctx,4);this.state=814;this.unwindClause();break;case 5:this.enterOuterAlt(localctx,5);this.state=815;this.mergeClause();break;case 6:this.enterOuterAlt(localctx,6);this.state=816;this.createClause();break;case 7:this.enterOuterAlt(localctx,7);this.state=817;this.createUniqueClause();break;case 8:this.enterOuterAlt(localctx,8);this.state=818;this.setClause();break;case 9:this.enterOuterAlt(localctx,9);this.state=819;this.deleteClause();break;case 10:this.enterOuterAlt(localctx,10);this.state=820;this.removeClause();break;case 11:this.enterOuterAlt(localctx,11);this.state=821;this.foreachClause();break;case 12:this.enterOuterAlt(localctx,12);this.state=822;this.withClause();break;case 13:this.enterOuterAlt(localctx,13);this.state=823;this.returnClause();break;case 14:this.enterOuterAlt(localctx,14);this.state=824;this.call();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CommandContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_command;return this;}CommandContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CommandContext.prototype.constructor=CommandContext;CommandContext.prototype.createIndex=function(){return this.getTypedRuleContext(CreateIndexContext,0);};CommandContext.prototype.dropIndex=function(){return this.getTypedRuleContext(DropIndexContext,0);};CommandContext.prototype.createUniqueConstraint=function(){return this.getTypedRuleContext(CreateUniqueConstraintContext,0);};CommandContext.prototype.dropUniqueConstraint=function(){return this.getTypedRuleContext(DropUniqueConstraintContext,0);};CommandContext.prototype.createNodeKeyConstraint=function(){return this.getTypedRuleContext(CreateNodeKeyConstraintContext,0);};CommandContext.prototype.dropNodeKeyConstraint=function(){return this.getTypedRuleContext(DropNodeKeyConstraintContext,0);};CommandContext.prototype.createNodePropertyExistenceConstraint=function(){return this.getTypedRuleContext(CreateNodePropertyExistenceConstraintContext,0);};CommandContext.prototype.dropNodePropertyExistenceConstraint=function(){return this.getTypedRuleContext(DropNodePropertyExistenceConstraintContext,0);};CommandContext.prototype.createRelationshipPropertyExistenceConstraint=function(){return this.getTypedRuleContext(CreateRelationshipPropertyExistenceConstraintContext,0);};CommandContext.prototype.dropRelationshipPropertyExistenceConstraint=function(){return this.getTypedRuleContext(DropRelationshipPropertyExistenceConstraintContext,0);};CommandContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCommand(this);}};CommandContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCommand(this);}};CypherParser.CommandContext=CommandContext;CypherParser.prototype.command=function(){var localctx=new CommandContext(this,this._ctx,this.state);this.enterRule(localctx,100,CypherParser.RULE_command);try{this.state=837;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,71,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=827;this.createIndex();break;case 2:this.enterOuterAlt(localctx,2);this.state=828;this.dropIndex();break;case 3:this.enterOuterAlt(localctx,3);this.state=829;this.createUniqueConstraint();break;case 4:this.enterOuterAlt(localctx,4);this.state=830;this.dropUniqueConstraint();break;case 5:this.enterOuterAlt(localctx,5);this.state=831;this.createNodeKeyConstraint();break;case 6:this.enterOuterAlt(localctx,6);this.state=832;this.dropNodeKeyConstraint();break;case 7:this.enterOuterAlt(localctx,7);this.state=833;this.createNodePropertyExistenceConstraint();break;case 8:this.enterOuterAlt(localctx,8);this.state=834;this.dropNodePropertyExistenceConstraint();break;case 9:this.enterOuterAlt(localctx,9);this.state=835;this.createRelationshipPropertyExistenceConstraint();break;case 10:this.enterOuterAlt(localctx,10);this.state=836;this.dropRelationshipPropertyExistenceConstraint();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CreateUniqueConstraintContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_createUniqueConstraint;return this;}CreateUniqueConstraintContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CreateUniqueConstraintContext.prototype.constructor=CreateUniqueConstraintContext;CreateUniqueConstraintContext.prototype.CREATE=function(){return this.getToken(CypherParser.CREATE,0);};CreateUniqueConstraintContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};CreateUniqueConstraintContext.prototype.uniqueConstraint=function(){return this.getTypedRuleContext(UniqueConstraintContext,0);};CreateUniqueConstraintContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCreateUniqueConstraint(this);}};CreateUniqueConstraintContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCreateUniqueConstraint(this);}};CypherParser.CreateUniqueConstraintContext=CreateUniqueConstraintContext;CypherParser.prototype.createUniqueConstraint=function(){var localctx=new CreateUniqueConstraintContext(this,this._ctx,this.state);this.enterRule(localctx,102,CypherParser.RULE_createUniqueConstraint);try{this.enterOuterAlt(localctx,1);this.state=839;this.match(CypherParser.CREATE);this.state=840;this.match(CypherParser.SP);this.state=841;this.uniqueConstraint();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CreateNodeKeyConstraintContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_createNodeKeyConstraint;return this;}CreateNodeKeyConstraintContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CreateNodeKeyConstraintContext.prototype.constructor=CreateNodeKeyConstraintContext;CreateNodeKeyConstraintContext.prototype.CREATE=function(){return this.getToken(CypherParser.CREATE,0);};CreateNodeKeyConstraintContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};CreateNodeKeyConstraintContext.prototype.nodeKeyConstraint=function(){return this.getTypedRuleContext(NodeKeyConstraintContext,0);};CreateNodeKeyConstraintContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCreateNodeKeyConstraint(this);}};CreateNodeKeyConstraintContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCreateNodeKeyConstraint(this);}};CypherParser.CreateNodeKeyConstraintContext=CreateNodeKeyConstraintContext;CypherParser.prototype.createNodeKeyConstraint=function(){var localctx=new CreateNodeKeyConstraintContext(this,this._ctx,this.state);this.enterRule(localctx,104,CypherParser.RULE_createNodeKeyConstraint);try{this.enterOuterAlt(localctx,1);this.state=843;this.match(CypherParser.CREATE);this.state=844;this.match(CypherParser.SP);this.state=845;this.nodeKeyConstraint();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CreateNodePropertyExistenceConstraintContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_createNodePropertyExistenceConstraint;return this;}CreateNodePropertyExistenceConstraintContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CreateNodePropertyExistenceConstraintContext.prototype.constructor=CreateNodePropertyExistenceConstraintContext;CreateNodePropertyExistenceConstraintContext.prototype.CREATE=function(){return this.getToken(CypherParser.CREATE,0);};CreateNodePropertyExistenceConstraintContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};CreateNodePropertyExistenceConstraintContext.prototype.nodePropertyExistenceConstraint=function(){return this.getTypedRuleContext(NodePropertyExistenceConstraintContext,0);};CreateNodePropertyExistenceConstraintContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCreateNodePropertyExistenceConstraint(this);}};CreateNodePropertyExistenceConstraintContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCreateNodePropertyExistenceConstraint(this);}};CypherParser.CreateNodePropertyExistenceConstraintContext=CreateNodePropertyExistenceConstraintContext;CypherParser.prototype.createNodePropertyExistenceConstraint=function(){var localctx=new CreateNodePropertyExistenceConstraintContext(this,this._ctx,this.state);this.enterRule(localctx,106,CypherParser.RULE_createNodePropertyExistenceConstraint);try{this.enterOuterAlt(localctx,1);this.state=847;this.match(CypherParser.CREATE);this.state=848;this.match(CypherParser.SP);this.state=849;this.nodePropertyExistenceConstraint();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CreateRelationshipPropertyExistenceConstraintContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_createRelationshipPropertyExistenceConstraint;return this;}CreateRelationshipPropertyExistenceConstraintContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CreateRelationshipPropertyExistenceConstraintContext.prototype.constructor=CreateRelationshipPropertyExistenceConstraintContext;CreateRelationshipPropertyExistenceConstraintContext.prototype.CREATE=function(){return this.getToken(CypherParser.CREATE,0);};CreateRelationshipPropertyExistenceConstraintContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};CreateRelationshipPropertyExistenceConstraintContext.prototype.relationshipPropertyExistenceConstraint=function(){return this.getTypedRuleContext(RelationshipPropertyExistenceConstraintContext,0);};CreateRelationshipPropertyExistenceConstraintContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCreateRelationshipPropertyExistenceConstraint(this);}};CreateRelationshipPropertyExistenceConstraintContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCreateRelationshipPropertyExistenceConstraint(this);}};CypherParser.CreateRelationshipPropertyExistenceConstraintContext=CreateRelationshipPropertyExistenceConstraintContext;CypherParser.prototype.createRelationshipPropertyExistenceConstraint=function(){var localctx=new CreateRelationshipPropertyExistenceConstraintContext(this,this._ctx,this.state);this.enterRule(localctx,108,CypherParser.RULE_createRelationshipPropertyExistenceConstraint);try{this.enterOuterAlt(localctx,1);this.state=851;this.match(CypherParser.CREATE);this.state=852;this.match(CypherParser.SP);this.state=853;this.relationshipPropertyExistenceConstraint();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CreateIndexContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_createIndex;return this;}CreateIndexContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CreateIndexContext.prototype.constructor=CreateIndexContext;CreateIndexContext.prototype.CREATE=function(){return this.getToken(CypherParser.CREATE,0);};CreateIndexContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};CreateIndexContext.prototype.index=function(){return this.getTypedRuleContext(IndexContext,0);};CreateIndexContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCreateIndex(this);}};CreateIndexContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCreateIndex(this);}};CypherParser.CreateIndexContext=CreateIndexContext;CypherParser.prototype.createIndex=function(){var localctx=new CreateIndexContext(this,this._ctx,this.state);this.enterRule(localctx,110,CypherParser.RULE_createIndex);try{this.enterOuterAlt(localctx,1);this.state=855;this.match(CypherParser.CREATE);this.state=856;this.match(CypherParser.SP);this.state=857;this.index();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function DropUniqueConstraintContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_dropUniqueConstraint;return this;}DropUniqueConstraintContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);DropUniqueConstraintContext.prototype.constructor=DropUniqueConstraintContext;DropUniqueConstraintContext.prototype.DROP=function(){return this.getToken(CypherParser.DROP,0);};DropUniqueConstraintContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};DropUniqueConstraintContext.prototype.uniqueConstraint=function(){return this.getTypedRuleContext(UniqueConstraintContext,0);};DropUniqueConstraintContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterDropUniqueConstraint(this);}};DropUniqueConstraintContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitDropUniqueConstraint(this);}};CypherParser.DropUniqueConstraintContext=DropUniqueConstraintContext;CypherParser.prototype.dropUniqueConstraint=function(){var localctx=new DropUniqueConstraintContext(this,this._ctx,this.state);this.enterRule(localctx,112,CypherParser.RULE_dropUniqueConstraint);try{this.enterOuterAlt(localctx,1);this.state=859;this.match(CypherParser.DROP);this.state=860;this.match(CypherParser.SP);this.state=861;this.uniqueConstraint();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function DropNodeKeyConstraintContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_dropNodeKeyConstraint;return this;}DropNodeKeyConstraintContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);DropNodeKeyConstraintContext.prototype.constructor=DropNodeKeyConstraintContext;DropNodeKeyConstraintContext.prototype.DROP=function(){return this.getToken(CypherParser.DROP,0);};DropNodeKeyConstraintContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};DropNodeKeyConstraintContext.prototype.nodeKeyConstraint=function(){return this.getTypedRuleContext(NodeKeyConstraintContext,0);};DropNodeKeyConstraintContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterDropNodeKeyConstraint(this);}};DropNodeKeyConstraintContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitDropNodeKeyConstraint(this);}};CypherParser.DropNodeKeyConstraintContext=DropNodeKeyConstraintContext;CypherParser.prototype.dropNodeKeyConstraint=function(){var localctx=new DropNodeKeyConstraintContext(this,this._ctx,this.state);this.enterRule(localctx,114,CypherParser.RULE_dropNodeKeyConstraint);try{this.enterOuterAlt(localctx,1);this.state=863;this.match(CypherParser.DROP);this.state=864;this.match(CypherParser.SP);this.state=865;this.nodeKeyConstraint();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function DropNodePropertyExistenceConstraintContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_dropNodePropertyExistenceConstraint;return this;}DropNodePropertyExistenceConstraintContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);DropNodePropertyExistenceConstraintContext.prototype.constructor=DropNodePropertyExistenceConstraintContext;DropNodePropertyExistenceConstraintContext.prototype.DROP=function(){return this.getToken(CypherParser.DROP,0);};DropNodePropertyExistenceConstraintContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};DropNodePropertyExistenceConstraintContext.prototype.nodePropertyExistenceConstraint=function(){return this.getTypedRuleContext(NodePropertyExistenceConstraintContext,0);};DropNodePropertyExistenceConstraintContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterDropNodePropertyExistenceConstraint(this);}};DropNodePropertyExistenceConstraintContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitDropNodePropertyExistenceConstraint(this);}};CypherParser.DropNodePropertyExistenceConstraintContext=DropNodePropertyExistenceConstraintContext;CypherParser.prototype.dropNodePropertyExistenceConstraint=function(){var localctx=new DropNodePropertyExistenceConstraintContext(this,this._ctx,this.state);this.enterRule(localctx,116,CypherParser.RULE_dropNodePropertyExistenceConstraint);try{this.enterOuterAlt(localctx,1);this.state=867;this.match(CypherParser.DROP);this.state=868;this.match(CypherParser.SP);this.state=869;this.nodePropertyExistenceConstraint();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function DropRelationshipPropertyExistenceConstraintContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_dropRelationshipPropertyExistenceConstraint;return this;}DropRelationshipPropertyExistenceConstraintContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);DropRelationshipPropertyExistenceConstraintContext.prototype.constructor=DropRelationshipPropertyExistenceConstraintContext;DropRelationshipPropertyExistenceConstraintContext.prototype.DROP=function(){return this.getToken(CypherParser.DROP,0);};DropRelationshipPropertyExistenceConstraintContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};DropRelationshipPropertyExistenceConstraintContext.prototype.relationshipPropertyExistenceConstraint=function(){return this.getTypedRuleContext(RelationshipPropertyExistenceConstraintContext,0);};DropRelationshipPropertyExistenceConstraintContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterDropRelationshipPropertyExistenceConstraint(this);}};DropRelationshipPropertyExistenceConstraintContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitDropRelationshipPropertyExistenceConstraint(this);}};CypherParser.DropRelationshipPropertyExistenceConstraintContext=DropRelationshipPropertyExistenceConstraintContext;CypherParser.prototype.dropRelationshipPropertyExistenceConstraint=function(){var localctx=new DropRelationshipPropertyExistenceConstraintContext(this,this._ctx,this.state);this.enterRule(localctx,118,CypherParser.RULE_dropRelationshipPropertyExistenceConstraint);try{this.enterOuterAlt(localctx,1);this.state=871;this.match(CypherParser.DROP);this.state=872;this.match(CypherParser.SP);this.state=873;this.relationshipPropertyExistenceConstraint();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function DropIndexContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_dropIndex;return this;}DropIndexContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);DropIndexContext.prototype.constructor=DropIndexContext;DropIndexContext.prototype.DROP=function(){return this.getToken(CypherParser.DROP,0);};DropIndexContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};DropIndexContext.prototype.index=function(){return this.getTypedRuleContext(IndexContext,0);};DropIndexContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterDropIndex(this);}};DropIndexContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitDropIndex(this);}};CypherParser.DropIndexContext=DropIndexContext;CypherParser.prototype.dropIndex=function(){var localctx=new DropIndexContext(this,this._ctx,this.state);this.enterRule(localctx,120,CypherParser.RULE_dropIndex);try{this.enterOuterAlt(localctx,1);this.state=875;this.match(CypherParser.DROP);this.state=876;this.match(CypherParser.SP);this.state=877;this.index();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function IndexContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_index;return this;}IndexContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);IndexContext.prototype.constructor=IndexContext;IndexContext.prototype.INDEX=function(){return this.getToken(CypherParser.INDEX,0);};IndexContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};IndexContext.prototype.ON=function(){return this.getToken(CypherParser.ON,0);};IndexContext.prototype.nodeLabel=function(){return this.getTypedRuleContext(NodeLabelContext,0);};IndexContext.prototype.propertyKeys=function(){return this.getTypedRuleContext(PropertyKeysContext,0);};IndexContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterIndex(this);}};IndexContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitIndex(this);}};CypherParser.IndexContext=IndexContext;CypherParser.prototype.index=function(){var localctx=new IndexContext(this,this._ctx,this.state);this.enterRule(localctx,122,CypherParser.RULE_index);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=879;this.match(CypherParser.INDEX);this.state=880;this.match(CypherParser.SP);this.state=881;this.match(CypherParser.ON);this.state=883;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=882;this.match(CypherParser.SP);}this.state=885;this.nodeLabel();this.state=887;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=886;this.match(CypherParser.SP);}this.state=889;this.match(CypherParser.T__18);this.state=891;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=890;this.match(CypherParser.SP);}this.state=893;this.propertyKeys();this.state=895;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=894;this.match(CypherParser.SP);}this.state=897;this.match(CypherParser.T__19);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function UniqueConstraintContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_uniqueConstraint;return this;}UniqueConstraintContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);UniqueConstraintContext.prototype.constructor=UniqueConstraintContext;UniqueConstraintContext.prototype.CONSTRAINT=function(){return this.getToken(CypherParser.CONSTRAINT,0);};UniqueConstraintContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};UniqueConstraintContext.prototype.ON=function(){return this.getToken(CypherParser.ON,0);};UniqueConstraintContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};UniqueConstraintContext.prototype.nodeLabel=function(){return this.getTypedRuleContext(NodeLabelContext,0);};UniqueConstraintContext.prototype.ASSERT=function(){return this.getToken(CypherParser.ASSERT,0);};UniqueConstraintContext.prototype.propertyExpression=function(){return this.getTypedRuleContext(PropertyExpressionContext,0);};UniqueConstraintContext.prototype.IS=function(){return this.getToken(CypherParser.IS,0);};UniqueConstraintContext.prototype.UNIQUE=function(){return this.getToken(CypherParser.UNIQUE,0);};UniqueConstraintContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterUniqueConstraint(this);}};UniqueConstraintContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitUniqueConstraint(this);}};CypherParser.UniqueConstraintContext=UniqueConstraintContext;CypherParser.prototype.uniqueConstraint=function(){var localctx=new UniqueConstraintContext(this,this._ctx,this.state);this.enterRule(localctx,124,CypherParser.RULE_uniqueConstraint);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=899;this.match(CypherParser.CONSTRAINT);this.state=900;this.match(CypherParser.SP);this.state=901;this.match(CypherParser.ON);this.state=903;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=902;this.match(CypherParser.SP);}this.state=905;this.match(CypherParser.T__18);this.state=907;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=906;this.match(CypherParser.SP);}this.state=909;this.variable();this.state=910;this.nodeLabel();this.state=912;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=911;this.match(CypherParser.SP);}this.state=914;this.match(CypherParser.T__19);this.state=916;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=915;this.match(CypherParser.SP);}this.state=918;this.match(CypherParser.ASSERT);this.state=919;this.match(CypherParser.SP);this.state=920;this.propertyExpression();this.state=921;this.match(CypherParser.SP);this.state=922;this.match(CypherParser.IS);this.state=923;this.match(CypherParser.SP);this.state=924;this.match(CypherParser.UNIQUE);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function NodeKeyConstraintContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_nodeKeyConstraint;return this;}NodeKeyConstraintContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);NodeKeyConstraintContext.prototype.constructor=NodeKeyConstraintContext;NodeKeyConstraintContext.prototype.CONSTRAINT=function(){return this.getToken(CypherParser.CONSTRAINT,0);};NodeKeyConstraintContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};NodeKeyConstraintContext.prototype.ON=function(){return this.getToken(CypherParser.ON,0);};NodeKeyConstraintContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};NodeKeyConstraintContext.prototype.nodeLabel=function(){return this.getTypedRuleContext(NodeLabelContext,0);};NodeKeyConstraintContext.prototype.ASSERT=function(){return this.getToken(CypherParser.ASSERT,0);};NodeKeyConstraintContext.prototype.propertyExpressions=function(){return this.getTypedRuleContext(PropertyExpressionsContext,0);};NodeKeyConstraintContext.prototype.IS=function(){return this.getToken(CypherParser.IS,0);};NodeKeyConstraintContext.prototype.NODE=function(){return this.getToken(CypherParser.NODE,0);};NodeKeyConstraintContext.prototype.KEY=function(){return this.getToken(CypherParser.KEY,0);};NodeKeyConstraintContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterNodeKeyConstraint(this);}};NodeKeyConstraintContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitNodeKeyConstraint(this);}};CypherParser.NodeKeyConstraintContext=NodeKeyConstraintContext;CypherParser.prototype.nodeKeyConstraint=function(){var localctx=new NodeKeyConstraintContext(this,this._ctx,this.state);this.enterRule(localctx,126,CypherParser.RULE_nodeKeyConstraint);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=926;this.match(CypherParser.CONSTRAINT);this.state=927;this.match(CypherParser.SP);this.state=928;this.match(CypherParser.ON);this.state=930;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=929;this.match(CypherParser.SP);}this.state=932;this.match(CypherParser.T__18);this.state=934;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=933;this.match(CypherParser.SP);}this.state=936;this.variable();this.state=937;this.nodeLabel();this.state=939;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=938;this.match(CypherParser.SP);}this.state=941;this.match(CypherParser.T__19);this.state=943;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=942;this.match(CypherParser.SP);}this.state=945;this.match(CypherParser.ASSERT);this.state=946;this.match(CypherParser.SP);this.state=947;this.match(CypherParser.T__18);this.state=949;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=948;this.match(CypherParser.SP);}this.state=951;this.propertyExpressions();this.state=953;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=952;this.match(CypherParser.SP);}this.state=955;this.match(CypherParser.T__19);this.state=956;this.match(CypherParser.SP);this.state=957;this.match(CypherParser.IS);this.state=958;this.match(CypherParser.SP);this.state=959;this.match(CypherParser.NODE);this.state=960;this.match(CypherParser.SP);this.state=961;this.match(CypherParser.KEY);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function NodePropertyExistenceConstraintContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_nodePropertyExistenceConstraint;return this;}NodePropertyExistenceConstraintContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);NodePropertyExistenceConstraintContext.prototype.constructor=NodePropertyExistenceConstraintContext;NodePropertyExistenceConstraintContext.prototype.CONSTRAINT=function(){return this.getToken(CypherParser.CONSTRAINT,0);};NodePropertyExistenceConstraintContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};NodePropertyExistenceConstraintContext.prototype.ON=function(){return this.getToken(CypherParser.ON,0);};NodePropertyExistenceConstraintContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};NodePropertyExistenceConstraintContext.prototype.nodeLabel=function(){return this.getTypedRuleContext(NodeLabelContext,0);};NodePropertyExistenceConstraintContext.prototype.ASSERT=function(){return this.getToken(CypherParser.ASSERT,0);};NodePropertyExistenceConstraintContext.prototype.EXISTS=function(){return this.getToken(CypherParser.EXISTS,0);};NodePropertyExistenceConstraintContext.prototype.propertyExpression=function(){return this.getTypedRuleContext(PropertyExpressionContext,0);};NodePropertyExistenceConstraintContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterNodePropertyExistenceConstraint(this);}};NodePropertyExistenceConstraintContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitNodePropertyExistenceConstraint(this);}};CypherParser.NodePropertyExistenceConstraintContext=NodePropertyExistenceConstraintContext;CypherParser.prototype.nodePropertyExistenceConstraint=function(){var localctx=new NodePropertyExistenceConstraintContext(this,this._ctx,this.state);this.enterRule(localctx,128,CypherParser.RULE_nodePropertyExistenceConstraint);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=963;this.match(CypherParser.CONSTRAINT);this.state=964;this.match(CypherParser.SP);this.state=965;this.match(CypherParser.ON);this.state=967;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=966;this.match(CypherParser.SP);}this.state=969;this.match(CypherParser.T__18);this.state=970;this.variable();this.state=971;this.nodeLabel();this.state=972;this.match(CypherParser.T__19);this.state=974;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=973;this.match(CypherParser.SP);}this.state=976;this.match(CypherParser.ASSERT);this.state=977;this.match(CypherParser.SP);this.state=978;this.match(CypherParser.EXISTS);this.state=980;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=979;this.match(CypherParser.SP);}this.state=982;this.match(CypherParser.T__18);this.state=983;this.propertyExpression();this.state=984;this.match(CypherParser.T__19);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RelationshipPropertyExistenceConstraintContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_relationshipPropertyExistenceConstraint;return this;}RelationshipPropertyExistenceConstraintContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RelationshipPropertyExistenceConstraintContext.prototype.constructor=RelationshipPropertyExistenceConstraintContext;RelationshipPropertyExistenceConstraintContext.prototype.CONSTRAINT=function(){return this.getToken(CypherParser.CONSTRAINT,0);};RelationshipPropertyExistenceConstraintContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};RelationshipPropertyExistenceConstraintContext.prototype.ON=function(){return this.getToken(CypherParser.ON,0);};RelationshipPropertyExistenceConstraintContext.prototype.relationshipPatternSyntax=function(){return this.getTypedRuleContext(RelationshipPatternSyntaxContext,0);};RelationshipPropertyExistenceConstraintContext.prototype.ASSERT=function(){return this.getToken(CypherParser.ASSERT,0);};RelationshipPropertyExistenceConstraintContext.prototype.EXISTS=function(){return this.getToken(CypherParser.EXISTS,0);};RelationshipPropertyExistenceConstraintContext.prototype.propertyExpression=function(){return this.getTypedRuleContext(PropertyExpressionContext,0);};RelationshipPropertyExistenceConstraintContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterRelationshipPropertyExistenceConstraint(this);}};RelationshipPropertyExistenceConstraintContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitRelationshipPropertyExistenceConstraint(this);}};CypherParser.RelationshipPropertyExistenceConstraintContext=RelationshipPropertyExistenceConstraintContext;CypherParser.prototype.relationshipPropertyExistenceConstraint=function(){var localctx=new RelationshipPropertyExistenceConstraintContext(this,this._ctx,this.state);this.enterRule(localctx,130,CypherParser.RULE_relationshipPropertyExistenceConstraint);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=986;this.match(CypherParser.CONSTRAINT);this.state=987;this.match(CypherParser.SP);this.state=988;this.match(CypherParser.ON);this.state=990;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=989;this.match(CypherParser.SP);}this.state=992;this.relationshipPatternSyntax();this.state=994;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=993;this.match(CypherParser.SP);}this.state=996;this.match(CypherParser.ASSERT);this.state=997;this.match(CypherParser.SP);this.state=998;this.match(CypherParser.EXISTS);this.state=1000;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=999;this.match(CypherParser.SP);}this.state=1002;this.match(CypherParser.T__18);this.state=1003;this.propertyExpression();this.state=1004;this.match(CypherParser.T__19);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RelationshipPatternSyntaxContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_relationshipPatternSyntax;return this;}RelationshipPatternSyntaxContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RelationshipPatternSyntaxContext.prototype.constructor=RelationshipPatternSyntaxContext;RelationshipPatternSyntaxContext.prototype.dash=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(DashContext);}else{return this.getTypedRuleContext(DashContext,i);}};RelationshipPatternSyntaxContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};RelationshipPatternSyntaxContext.prototype.relType=function(){return this.getTypedRuleContext(RelTypeContext,0);};RelationshipPatternSyntaxContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};RelationshipPatternSyntaxContext.prototype.rightArrowHead=function(){return this.getTypedRuleContext(RightArrowHeadContext,0);};RelationshipPatternSyntaxContext.prototype.leftArrowHead=function(){return this.getTypedRuleContext(LeftArrowHeadContext,0);};RelationshipPatternSyntaxContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterRelationshipPatternSyntax(this);}};RelationshipPatternSyntaxContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitRelationshipPatternSyntax(this);}};CypherParser.RelationshipPatternSyntaxContext=RelationshipPatternSyntaxContext;CypherParser.prototype.relationshipPatternSyntax=function(){var localctx=new RelationshipPatternSyntaxContext(this,this._ctx,this.state);this.enterRule(localctx,132,CypherParser.RULE_relationshipPatternSyntax);var _la=0;// Token type
try{this.state=1059;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,98,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1006;this.match(CypherParser.T__18);this.state=1008;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1007;this.match(CypherParser.SP);}this.state=1010;this.match(CypherParser.T__19);this.state=1011;this.dash();this.state=1012;this.match(CypherParser.T__16);this.state=1013;this.variable();this.state=1014;this.relType();this.state=1015;this.match(CypherParser.T__17);this.state=1016;this.dash();this.state=1017;this.match(CypherParser.T__18);this.state=1019;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1018;this.match(CypherParser.SP);}this.state=1021;this.match(CypherParser.T__19);break;case 2:this.enterOuterAlt(localctx,2);this.state=1023;this.match(CypherParser.T__18);this.state=1025;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1024;this.match(CypherParser.SP);}this.state=1027;this.match(CypherParser.T__19);this.state=1028;this.dash();this.state=1029;this.match(CypherParser.T__16);this.state=1030;this.variable();this.state=1031;this.relType();this.state=1032;this.match(CypherParser.T__17);this.state=1033;this.dash();this.state=1034;this.rightArrowHead();this.state=1035;this.match(CypherParser.T__18);this.state=1037;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1036;this.match(CypherParser.SP);}this.state=1039;this.match(CypherParser.T__19);break;case 3:this.enterOuterAlt(localctx,3);this.state=1041;this.match(CypherParser.T__18);this.state=1043;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1042;this.match(CypherParser.SP);}this.state=1045;this.match(CypherParser.T__19);this.state=1046;this.leftArrowHead();this.state=1047;this.dash();this.state=1048;this.match(CypherParser.T__16);this.state=1049;this.variable();this.state=1050;this.relType();this.state=1051;this.match(CypherParser.T__17);this.state=1052;this.dash();this.state=1053;this.match(CypherParser.T__18);this.state=1055;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1054;this.match(CypherParser.SP);}this.state=1057;this.match(CypherParser.T__19);break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function LoadCSVClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_loadCSVClause;return this;}LoadCSVClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);LoadCSVClauseContext.prototype.constructor=LoadCSVClauseContext;LoadCSVClauseContext.prototype.LOAD=function(){return this.getToken(CypherParser.LOAD,0);};LoadCSVClauseContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};LoadCSVClauseContext.prototype.CSV=function(){return this.getToken(CypherParser.CSV,0);};LoadCSVClauseContext.prototype.FROM=function(){return this.getToken(CypherParser.FROM,0);};LoadCSVClauseContext.prototype.expression=function(){return this.getTypedRuleContext(ExpressionContext,0);};LoadCSVClauseContext.prototype.AS=function(){return this.getToken(CypherParser.AS,0);};LoadCSVClauseContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};LoadCSVClauseContext.prototype.WITH=function(){return this.getToken(CypherParser.WITH,0);};LoadCSVClauseContext.prototype.HEADERS=function(){return this.getToken(CypherParser.HEADERS,0);};LoadCSVClauseContext.prototype.FIELDTERMINATOR=function(){return this.getToken(CypherParser.FIELDTERMINATOR,0);};LoadCSVClauseContext.prototype.StringLiteral=function(){return this.getToken(CypherParser.StringLiteral,0);};LoadCSVClauseContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterLoadCSVClause(this);}};LoadCSVClauseContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitLoadCSVClause(this);}};CypherParser.LoadCSVClauseContext=LoadCSVClauseContext;CypherParser.prototype.loadCSVClause=function(){var localctx=new LoadCSVClauseContext(this,this._ctx,this.state);this.enterRule(localctx,134,CypherParser.RULE_loadCSVClause);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1061;this.match(CypherParser.LOAD);this.state=1062;this.match(CypherParser.SP);this.state=1063;this.match(CypherParser.CSV);this.state=1064;this.match(CypherParser.SP);this.state=1069;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.WITH){this.state=1065;this.match(CypherParser.WITH);this.state=1066;this.match(CypherParser.SP);this.state=1067;this.match(CypherParser.HEADERS);this.state=1068;this.match(CypherParser.SP);}this.state=1071;this.match(CypherParser.FROM);this.state=1072;this.match(CypherParser.SP);this.state=1073;this.expression();this.state=1074;this.match(CypherParser.SP);this.state=1075;this.match(CypherParser.AS);this.state=1076;this.match(CypherParser.SP);this.state=1077;this.variable();this.state=1078;this.match(CypherParser.SP);this.state=1082;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.FIELDTERMINATOR){this.state=1079;this.match(CypherParser.FIELDTERMINATOR);this.state=1080;this.match(CypherParser.SP);this.state=1081;this.match(CypherParser.StringLiteral);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function MatchClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_matchClause;return this;}MatchClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);MatchClauseContext.prototype.constructor=MatchClauseContext;MatchClauseContext.prototype.MATCH=function(){return this.getToken(CypherParser.MATCH,0);};MatchClauseContext.prototype.pattern=function(){return this.getTypedRuleContext(PatternContext,0);};MatchClauseContext.prototype.OPTIONAL=function(){return this.getToken(CypherParser.OPTIONAL,0);};MatchClauseContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};MatchClauseContext.prototype.hint=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(HintContext);}else{return this.getTypedRuleContext(HintContext,i);}};MatchClauseContext.prototype.where=function(){return this.getTypedRuleContext(WhereContext,0);};MatchClauseContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterMatchClause(this);}};MatchClauseContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitMatchClause(this);}};CypherParser.MatchClauseContext=MatchClauseContext;CypherParser.prototype.matchClause=function(){var localctx=new MatchClauseContext(this,this._ctx,this.state);this.enterRule(localctx,136,CypherParser.RULE_matchClause);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1086;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.OPTIONAL){this.state=1084;this.match(CypherParser.OPTIONAL);this.state=1085;this.match(CypherParser.SP);}this.state=1088;this.match(CypherParser.MATCH);this.state=1090;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1089;this.match(CypherParser.SP);}this.state=1092;this.pattern();this.state=1096;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,103,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1093;this.hint();}this.state=1098;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,103,this._ctx);}this.state=1103;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,105,this._ctx);if(la_===1){this.state=1100;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1099;this.match(CypherParser.SP);}this.state=1102;this.where();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function UnwindClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_unwindClause;return this;}UnwindClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);UnwindClauseContext.prototype.constructor=UnwindClauseContext;UnwindClauseContext.prototype.UNWIND=function(){return this.getToken(CypherParser.UNWIND,0);};UnwindClauseContext.prototype.expression=function(){return this.getTypedRuleContext(ExpressionContext,0);};UnwindClauseContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};UnwindClauseContext.prototype.AS=function(){return this.getToken(CypherParser.AS,0);};UnwindClauseContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};UnwindClauseContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterUnwindClause(this);}};UnwindClauseContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitUnwindClause(this);}};CypherParser.UnwindClauseContext=UnwindClauseContext;CypherParser.prototype.unwindClause=function(){var localctx=new UnwindClauseContext(this,this._ctx,this.state);this.enterRule(localctx,138,CypherParser.RULE_unwindClause);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1105;this.match(CypherParser.UNWIND);this.state=1107;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1106;this.match(CypherParser.SP);}this.state=1109;this.expression();this.state=1110;this.match(CypherParser.SP);this.state=1111;this.match(CypherParser.AS);this.state=1112;this.match(CypherParser.SP);this.state=1113;this.variable();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function MergeClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_mergeClause;return this;}MergeClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);MergeClauseContext.prototype.constructor=MergeClauseContext;MergeClauseContext.prototype.MERGE=function(){return this.getToken(CypherParser.MERGE,0);};MergeClauseContext.prototype.patternPart=function(){return this.getTypedRuleContext(PatternPartContext,0);};MergeClauseContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};MergeClauseContext.prototype.mergeAction=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(MergeActionContext);}else{return this.getTypedRuleContext(MergeActionContext,i);}};MergeClauseContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterMergeClause(this);}};MergeClauseContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitMergeClause(this);}};CypherParser.MergeClauseContext=MergeClauseContext;CypherParser.prototype.mergeClause=function(){var localctx=new MergeClauseContext(this,this._ctx,this.state);this.enterRule(localctx,140,CypherParser.RULE_mergeClause);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1115;this.match(CypherParser.MERGE);this.state=1117;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1116;this.match(CypherParser.SP);}this.state=1119;this.patternPart();this.state=1124;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,108,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1120;this.match(CypherParser.SP);this.state=1121;this.mergeAction();}this.state=1126;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,108,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function MergeActionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_mergeAction;return this;}MergeActionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);MergeActionContext.prototype.constructor=MergeActionContext;MergeActionContext.prototype.ON=function(){return this.getToken(CypherParser.ON,0);};MergeActionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};MergeActionContext.prototype.MATCH=function(){return this.getToken(CypherParser.MATCH,0);};MergeActionContext.prototype.setClause=function(){return this.getTypedRuleContext(SetClauseContext,0);};MergeActionContext.prototype.CREATE=function(){return this.getToken(CypherParser.CREATE,0);};MergeActionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterMergeAction(this);}};MergeActionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitMergeAction(this);}};CypherParser.MergeActionContext=MergeActionContext;CypherParser.prototype.mergeAction=function(){var localctx=new MergeActionContext(this,this._ctx,this.state);this.enterRule(localctx,142,CypherParser.RULE_mergeAction);try{this.state=1137;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,109,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1127;this.match(CypherParser.ON);this.state=1128;this.match(CypherParser.SP);this.state=1129;this.match(CypherParser.MATCH);this.state=1130;this.match(CypherParser.SP);this.state=1131;this.setClause();break;case 2:this.enterOuterAlt(localctx,2);this.state=1132;this.match(CypherParser.ON);this.state=1133;this.match(CypherParser.SP);this.state=1134;this.match(CypherParser.CREATE);this.state=1135;this.match(CypherParser.SP);this.state=1136;this.setClause();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CreateClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_createClause;return this;}CreateClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CreateClauseContext.prototype.constructor=CreateClauseContext;CreateClauseContext.prototype.CREATE=function(){return this.getToken(CypherParser.CREATE,0);};CreateClauseContext.prototype.pattern=function(){return this.getTypedRuleContext(PatternContext,0);};CreateClauseContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};CreateClauseContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCreateClause(this);}};CreateClauseContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCreateClause(this);}};CypherParser.CreateClauseContext=CreateClauseContext;CypherParser.prototype.createClause=function(){var localctx=new CreateClauseContext(this,this._ctx,this.state);this.enterRule(localctx,144,CypherParser.RULE_createClause);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1139;this.match(CypherParser.CREATE);this.state=1141;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1140;this.match(CypherParser.SP);}this.state=1143;this.pattern();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CreateUniqueClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_createUniqueClause;return this;}CreateUniqueClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CreateUniqueClauseContext.prototype.constructor=CreateUniqueClauseContext;CreateUniqueClauseContext.prototype.CREATE=function(){return this.getToken(CypherParser.CREATE,0);};CreateUniqueClauseContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};CreateUniqueClauseContext.prototype.UNIQUE=function(){return this.getToken(CypherParser.UNIQUE,0);};CreateUniqueClauseContext.prototype.pattern=function(){return this.getTypedRuleContext(PatternContext,0);};CreateUniqueClauseContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCreateUniqueClause(this);}};CreateUniqueClauseContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCreateUniqueClause(this);}};CypherParser.CreateUniqueClauseContext=CreateUniqueClauseContext;CypherParser.prototype.createUniqueClause=function(){var localctx=new CreateUniqueClauseContext(this,this._ctx,this.state);this.enterRule(localctx,146,CypherParser.RULE_createUniqueClause);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1145;this.match(CypherParser.CREATE);this.state=1146;this.match(CypherParser.SP);this.state=1147;this.match(CypherParser.UNIQUE);this.state=1149;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1148;this.match(CypherParser.SP);}this.state=1151;this.pattern();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function SetClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_setClause;return this;}SetClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);SetClauseContext.prototype.constructor=SetClauseContext;SetClauseContext.prototype.SET=function(){return this.getToken(CypherParser.SET,0);};SetClauseContext.prototype.setItem=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(SetItemContext);}else{return this.getTypedRuleContext(SetItemContext,i);}};SetClauseContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};SetClauseContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterSetClause(this);}};SetClauseContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitSetClause(this);}};CypherParser.SetClauseContext=SetClauseContext;CypherParser.prototype.setClause=function(){var localctx=new SetClauseContext(this,this._ctx,this.state);this.enterRule(localctx,148,CypherParser.RULE_setClause);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1153;this.match(CypherParser.SET);this.state=1155;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1154;this.match(CypherParser.SP);}this.state=1157;this.setItem();this.state=1168;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,115,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1159;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1158;this.match(CypherParser.SP);}this.state=1161;this.match(CypherParser.T__14);this.state=1163;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1162;this.match(CypherParser.SP);}this.state=1165;this.setItem();}this.state=1170;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,115,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function SetItemContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_setItem;return this;}SetItemContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);SetItemContext.prototype.constructor=SetItemContext;SetItemContext.prototype.propertyExpression=function(){return this.getTypedRuleContext(PropertyExpressionContext,0);};SetItemContext.prototype.expression=function(){return this.getTypedRuleContext(ExpressionContext,0);};SetItemContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};SetItemContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};SetItemContext.prototype.nodeLabels=function(){return this.getTypedRuleContext(NodeLabelsContext,0);};SetItemContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterSetItem(this);}};SetItemContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitSetItem(this);}};CypherParser.SetItemContext=SetItemContext;CypherParser.prototype.setItem=function(){var localctx=new SetItemContext(this,this._ctx,this.state);this.enterRule(localctx,150,CypherParser.RULE_setItem);var _la=0;// Token type
try{this.state=1207;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,123,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1171;this.propertyExpression();this.state=1173;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1172;this.match(CypherParser.SP);}this.state=1175;this.match(CypherParser.T__11);this.state=1177;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1176;this.match(CypherParser.SP);}this.state=1179;this.expression();break;case 2:this.enterOuterAlt(localctx,2);this.state=1181;this.variable();this.state=1183;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1182;this.match(CypherParser.SP);}this.state=1185;this.match(CypherParser.T__11);this.state=1187;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1186;this.match(CypherParser.SP);}this.state=1189;this.expression();break;case 3:this.enterOuterAlt(localctx,3);this.state=1191;this.variable();this.state=1193;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1192;this.match(CypherParser.SP);}this.state=1195;this.match(CypherParser.T__20);this.state=1197;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1196;this.match(CypherParser.SP);}this.state=1199;this.expression();break;case 4:this.enterOuterAlt(localctx,4);this.state=1201;this.variable();this.state=1203;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1202;this.match(CypherParser.SP);}this.state=1205;this.nodeLabels();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function DeleteClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_deleteClause;return this;}DeleteClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);DeleteClauseContext.prototype.constructor=DeleteClauseContext;DeleteClauseContext.prototype.DELETE=function(){return this.getToken(CypherParser.DELETE,0);};DeleteClauseContext.prototype.expression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExpressionContext);}else{return this.getTypedRuleContext(ExpressionContext,i);}};DeleteClauseContext.prototype.DETACH=function(){return this.getToken(CypherParser.DETACH,0);};DeleteClauseContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};DeleteClauseContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterDeleteClause(this);}};DeleteClauseContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitDeleteClause(this);}};CypherParser.DeleteClauseContext=DeleteClauseContext;CypherParser.prototype.deleteClause=function(){var localctx=new DeleteClauseContext(this,this._ctx,this.state);this.enterRule(localctx,152,CypherParser.RULE_deleteClause);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1211;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.DETACH){this.state=1209;this.match(CypherParser.DETACH);this.state=1210;this.match(CypherParser.SP);}this.state=1213;this.match(CypherParser.DELETE);this.state=1215;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1214;this.match(CypherParser.SP);}this.state=1217;this.expression();this.state=1228;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,128,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1219;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1218;this.match(CypherParser.SP);}this.state=1221;this.match(CypherParser.T__14);this.state=1223;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1222;this.match(CypherParser.SP);}this.state=1225;this.expression();}this.state=1230;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,128,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RemoveClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_removeClause;return this;}RemoveClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RemoveClauseContext.prototype.constructor=RemoveClauseContext;RemoveClauseContext.prototype.REMOVE=function(){return this.getToken(CypherParser.REMOVE,0);};RemoveClauseContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};RemoveClauseContext.prototype.removeItem=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(RemoveItemContext);}else{return this.getTypedRuleContext(RemoveItemContext,i);}};RemoveClauseContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterRemoveClause(this);}};RemoveClauseContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitRemoveClause(this);}};CypherParser.RemoveClauseContext=RemoveClauseContext;CypherParser.prototype.removeClause=function(){var localctx=new RemoveClauseContext(this,this._ctx,this.state);this.enterRule(localctx,154,CypherParser.RULE_removeClause);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1231;this.match(CypherParser.REMOVE);this.state=1232;this.match(CypherParser.SP);this.state=1233;this.removeItem();this.state=1244;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,131,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1235;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1234;this.match(CypherParser.SP);}this.state=1237;this.match(CypherParser.T__14);this.state=1239;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1238;this.match(CypherParser.SP);}this.state=1241;this.removeItem();}this.state=1246;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,131,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RemoveItemContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_removeItem;return this;}RemoveItemContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RemoveItemContext.prototype.constructor=RemoveItemContext;RemoveItemContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};RemoveItemContext.prototype.nodeLabels=function(){return this.getTypedRuleContext(NodeLabelsContext,0);};RemoveItemContext.prototype.propertyExpression=function(){return this.getTypedRuleContext(PropertyExpressionContext,0);};RemoveItemContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterRemoveItem(this);}};RemoveItemContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitRemoveItem(this);}};CypherParser.RemoveItemContext=RemoveItemContext;CypherParser.prototype.removeItem=function(){var localctx=new RemoveItemContext(this,this._ctx,this.state);this.enterRule(localctx,156,CypherParser.RULE_removeItem);try{this.state=1251;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,132,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1247;this.variable();this.state=1248;this.nodeLabels();break;case 2:this.enterOuterAlt(localctx,2);this.state=1250;this.propertyExpression();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ForeachClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_foreachClause;return this;}ForeachClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ForeachClauseContext.prototype.constructor=ForeachClauseContext;ForeachClauseContext.prototype.FOREACH=function(){return this.getToken(CypherParser.FOREACH,0);};ForeachClauseContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};ForeachClauseContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};ForeachClauseContext.prototype.IN=function(){return this.getToken(CypherParser.IN,0);};ForeachClauseContext.prototype.expression=function(){return this.getTypedRuleContext(ExpressionContext,0);};ForeachClauseContext.prototype.clause=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ClauseContext);}else{return this.getTypedRuleContext(ClauseContext,i);}};ForeachClauseContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterForeachClause(this);}};ForeachClauseContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitForeachClause(this);}};CypherParser.ForeachClauseContext=ForeachClauseContext;CypherParser.prototype.foreachClause=function(){var localctx=new ForeachClauseContext(this,this._ctx,this.state);this.enterRule(localctx,158,CypherParser.RULE_foreachClause);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1253;this.match(CypherParser.FOREACH);this.state=1255;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1254;this.match(CypherParser.SP);}this.state=1257;this.match(CypherParser.T__18);this.state=1259;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1258;this.match(CypherParser.SP);}this.state=1261;this.variable();this.state=1262;this.match(CypherParser.SP);this.state=1263;this.match(CypherParser.IN);this.state=1264;this.match(CypherParser.SP);this.state=1265;this.expression();this.state=1267;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1266;this.match(CypherParser.SP);}this.state=1269;this.match(CypherParser.T__21);this.state=1272;this._errHandler.sync(this);var _alt=1;do{switch(_alt){case 1:this.state=1270;this.match(CypherParser.SP);this.state=1271;this.clause();break;default:throw new antlr4.error.NoViableAltException(this);}this.state=1274;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,136,this._ctx);}while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER);this.state=1277;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1276;this.match(CypherParser.SP);}this.state=1279;this.match(CypherParser.T__19);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function WithClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_withClause;return this;}WithClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);WithClauseContext.prototype.constructor=WithClauseContext;WithClauseContext.prototype.WITH=function(){return this.getToken(CypherParser.WITH,0);};WithClauseContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};WithClauseContext.prototype.returnBody=function(){return this.getTypedRuleContext(ReturnBodyContext,0);};WithClauseContext.prototype.DISTINCT=function(){return this.getToken(CypherParser.DISTINCT,0);};WithClauseContext.prototype.where=function(){return this.getTypedRuleContext(WhereContext,0);};WithClauseContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterWithClause(this);}};WithClauseContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitWithClause(this);}};CypherParser.WithClauseContext=WithClauseContext;CypherParser.prototype.withClause=function(){var localctx=new WithClauseContext(this,this._ctx,this.state);this.enterRule(localctx,160,CypherParser.RULE_withClause);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1281;this.match(CypherParser.WITH);this.state=1286;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,139,this._ctx);if(la_===1){this.state=1283;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1282;this.match(CypherParser.SP);}this.state=1285;this.match(CypherParser.DISTINCT);}this.state=1288;this.match(CypherParser.SP);this.state=1289;this.returnBody();this.state=1294;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,141,this._ctx);if(la_===1){this.state=1291;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1290;this.match(CypherParser.SP);}this.state=1293;this.where();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ReturnClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_returnClause;return this;}ReturnClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ReturnClauseContext.prototype.constructor=ReturnClauseContext;ReturnClauseContext.prototype.RETURN=function(){return this.getToken(CypherParser.RETURN,0);};ReturnClauseContext.prototype.returnBody=function(){return this.getTypedRuleContext(ReturnBodyContext,0);};ReturnClauseContext.prototype.DISTINCT=function(){return this.getToken(CypherParser.DISTINCT,0);};ReturnClauseContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};ReturnClauseContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterReturnClause(this);}};ReturnClauseContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitReturnClause(this);}};CypherParser.ReturnClauseContext=ReturnClauseContext;CypherParser.prototype.returnClause=function(){var localctx=new ReturnClauseContext(this,this._ctx,this.state);this.enterRule(localctx,162,CypherParser.RULE_returnClause);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1296;this.match(CypherParser.RETURN);this.state=1301;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,143,this._ctx);if(la_===1){this.state=1298;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1297;this.match(CypherParser.SP);}this.state=1300;this.match(CypherParser.DISTINCT);}this.state=1304;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1303;this.match(CypherParser.SP);}this.state=1306;this.returnBody();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ReturnBodyContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_returnBody;return this;}ReturnBodyContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ReturnBodyContext.prototype.constructor=ReturnBodyContext;ReturnBodyContext.prototype.returnItems=function(){return this.getTypedRuleContext(ReturnItemsContext,0);};ReturnBodyContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};ReturnBodyContext.prototype.order=function(){return this.getTypedRuleContext(OrderContext,0);};ReturnBodyContext.prototype.skip=function(){return this.getTypedRuleContext(SkipContext,0);};ReturnBodyContext.prototype.limit=function(){return this.getTypedRuleContext(LimitContext,0);};ReturnBodyContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterReturnBody(this);}};ReturnBodyContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitReturnBody(this);}};CypherParser.ReturnBodyContext=ReturnBodyContext;CypherParser.prototype.returnBody=function(){var localctx=new ReturnBodyContext(this,this._ctx,this.state);this.enterRule(localctx,164,CypherParser.RULE_returnBody);try{this.enterOuterAlt(localctx,1);this.state=1308;this.returnItems();this.state=1311;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,145,this._ctx);if(la_===1){this.state=1309;this.match(CypherParser.SP);this.state=1310;this.order();}this.state=1315;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,146,this._ctx);if(la_===1){this.state=1313;this.match(CypherParser.SP);this.state=1314;this.skip();}this.state=1319;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,147,this._ctx);if(la_===1){this.state=1317;this.match(CypherParser.SP);this.state=1318;this.limit();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function FuncContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_func;return this;}FuncContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);FuncContext.prototype.constructor=FuncContext;FuncContext.prototype.procedureInvocation=function(){return this.getTypedRuleContext(ProcedureInvocationContext,0);};FuncContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};FuncContext.prototype.procedureResults=function(){return this.getTypedRuleContext(ProcedureResultsContext,0);};FuncContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterFunc(this);}};FuncContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitFunc(this);}};CypherParser.FuncContext=FuncContext;CypherParser.prototype.func=function(){var localctx=new FuncContext(this,this._ctx,this.state);this.enterRule(localctx,166,CypherParser.RULE_func);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1321;this.procedureInvocation();this.state=1323;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,148,this._ctx);if(la_===1){this.state=1322;this.match(CypherParser.SP);}this.state=1326;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.YIELD){this.state=1325;this.procedureResults();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ReturnItemsContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_returnItems;return this;}ReturnItemsContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ReturnItemsContext.prototype.constructor=ReturnItemsContext;ReturnItemsContext.prototype.returnItem=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ReturnItemContext);}else{return this.getTypedRuleContext(ReturnItemContext,i);}};ReturnItemsContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};ReturnItemsContext.prototype.func=function(){return this.getTypedRuleContext(FuncContext,0);};ReturnItemsContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterReturnItems(this);}};ReturnItemsContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitReturnItems(this);}};CypherParser.ReturnItemsContext=ReturnItemsContext;CypherParser.prototype.returnItems=function(){var localctx=new ReturnItemsContext(this,this._ctx,this.state);this.enterRule(localctx,168,CypherParser.RULE_returnItems);var _la=0;// Token type
try{this.state=1357;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,156,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1328;this.match(CypherParser.T__22);this.state=1339;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,152,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1330;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1329;this.match(CypherParser.SP);}this.state=1332;this.match(CypherParser.T__14);this.state=1334;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1333;this.match(CypherParser.SP);}this.state=1336;this.returnItem();}this.state=1341;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,152,this._ctx);}break;case 2:this.enterOuterAlt(localctx,2);this.state=1342;this.returnItem();this.state=1353;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,155,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1344;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1343;this.match(CypherParser.SP);}this.state=1346;this.match(CypherParser.T__14);this.state=1348;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1347;this.match(CypherParser.SP);}this.state=1350;this.returnItem();}this.state=1355;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,155,this._ctx);}break;case 3:this.enterOuterAlt(localctx,3);this.state=1356;this.func();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ReturnItemContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_returnItem;return this;}ReturnItemContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ReturnItemContext.prototype.constructor=ReturnItemContext;ReturnItemContext.prototype.expression=function(){return this.getTypedRuleContext(ExpressionContext,0);};ReturnItemContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};ReturnItemContext.prototype.AS=function(){return this.getToken(CypherParser.AS,0);};ReturnItemContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};ReturnItemContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterReturnItem(this);}};ReturnItemContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitReturnItem(this);}};CypherParser.ReturnItemContext=ReturnItemContext;CypherParser.prototype.returnItem=function(){var localctx=new ReturnItemContext(this,this._ctx,this.state);this.enterRule(localctx,170,CypherParser.RULE_returnItem);try{this.state=1366;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,157,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1359;this.expression();this.state=1360;this.match(CypherParser.SP);this.state=1361;this.match(CypherParser.AS);this.state=1362;this.match(CypherParser.SP);this.state=1363;this.variable();break;case 2:this.enterOuterAlt(localctx,2);this.state=1365;this.expression();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CallContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_call;return this;}CallContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CallContext.prototype.constructor=CallContext;CallContext.prototype.CALL=function(){return this.getToken(CypherParser.CALL,0);};CallContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};CallContext.prototype.procedureInvocation=function(){return this.getTypedRuleContext(ProcedureInvocationContext,0);};CallContext.prototype.procedureResults=function(){return this.getTypedRuleContext(ProcedureResultsContext,0);};CallContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCall(this);}};CallContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCall(this);}};CypherParser.CallContext=CallContext;CypherParser.prototype.call=function(){var localctx=new CallContext(this,this._ctx,this.state);this.enterRule(localctx,172,CypherParser.RULE_call);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1368;this.match(CypherParser.CALL);this.state=1369;this.match(CypherParser.SP);this.state=1370;this.procedureInvocation();this.state=1372;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,158,this._ctx);if(la_===1){this.state=1371;this.match(CypherParser.SP);}this.state=1375;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.YIELD){this.state=1374;this.procedureResults();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ProcedureInvocationContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_procedureInvocation;return this;}ProcedureInvocationContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ProcedureInvocationContext.prototype.constructor=ProcedureInvocationContext;ProcedureInvocationContext.prototype.procedureInvocationBody=function(){return this.getTypedRuleContext(ProcedureInvocationBodyContext,0);};ProcedureInvocationContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};ProcedureInvocationContext.prototype.procedureArguments=function(){return this.getTypedRuleContext(ProcedureArgumentsContext,0);};ProcedureInvocationContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterProcedureInvocation(this);}};ProcedureInvocationContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitProcedureInvocation(this);}};CypherParser.ProcedureInvocationContext=ProcedureInvocationContext;CypherParser.prototype.procedureInvocation=function(){var localctx=new ProcedureInvocationContext(this,this._ctx,this.state);this.enterRule(localctx,174,CypherParser.RULE_procedureInvocation);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1377;this.procedureInvocationBody();this.state=1379;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,160,this._ctx);if(la_===1){this.state=1378;this.match(CypherParser.SP);}this.state=1382;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.T__18){this.state=1381;this.procedureArguments();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ProcedureInvocationBodyContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_procedureInvocationBody;return this;}ProcedureInvocationBodyContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ProcedureInvocationBodyContext.prototype.constructor=ProcedureInvocationBodyContext;ProcedureInvocationBodyContext.prototype.namespace=function(){return this.getTypedRuleContext(NamespaceContext,0);};ProcedureInvocationBodyContext.prototype.procedureName=function(){return this.getTypedRuleContext(ProcedureNameContext,0);};ProcedureInvocationBodyContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterProcedureInvocationBody(this);}};ProcedureInvocationBodyContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitProcedureInvocationBody(this);}};CypherParser.ProcedureInvocationBodyContext=ProcedureInvocationBodyContext;CypherParser.prototype.procedureInvocationBody=function(){var localctx=new ProcedureInvocationBodyContext(this,this._ctx,this.state);this.enterRule(localctx,176,CypherParser.RULE_procedureInvocationBody);try{this.enterOuterAlt(localctx,1);this.state=1384;this.namespace();this.state=1385;this.procedureName();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ProcedureArgumentsContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_procedureArguments;return this;}ProcedureArgumentsContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ProcedureArgumentsContext.prototype.constructor=ProcedureArgumentsContext;ProcedureArgumentsContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};ProcedureArgumentsContext.prototype.expression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExpressionContext);}else{return this.getTypedRuleContext(ExpressionContext,i);}};ProcedureArgumentsContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterProcedureArguments(this);}};ProcedureArgumentsContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitProcedureArguments(this);}};CypherParser.ProcedureArgumentsContext=ProcedureArgumentsContext;CypherParser.prototype.procedureArguments=function(){var localctx=new ProcedureArgumentsContext(this,this._ctx,this.state);this.enterRule(localctx,178,CypherParser.RULE_procedureArguments);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1387;this.match(CypherParser.T__18);this.state=1389;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,162,this._ctx);if(la_===1){this.state=1388;this.match(CypherParser.SP);}this.state=1392;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<CypherParser.T__2|1<<CypherParser.T__12|1<<CypherParser.T__13|1<<CypherParser.T__16|1<<CypherParser.T__18))!==0||(_la-34&~0x1f)==0&&(1<<_la-34&(1<<CypherParser.T__33-34|1<<CypherParser.CYPHER-34|1<<CypherParser.EXPLAIN-34|1<<CypherParser.PROFILE-34|1<<CypherParser.USING-34|1<<CypherParser.PERIODIC-34|1<<CypherParser.COMMIT-34|1<<CypherParser.UNION-34|1<<CypherParser.ALL-34|1<<CypherParser.CREATE-34|1<<CypherParser.DROP-34|1<<CypherParser.INDEX-34|1<<CypherParser.ON-34))!==0||(_la-66&~0x1f)==0&&(1<<_la-66&(1<<CypherParser.CONSTRAINT-66|1<<CypherParser.ASSERT-66|1<<CypherParser.IS-66|1<<CypherParser.UNIQUE-66|1<<CypherParser.EXISTS-66|1<<CypherParser.LOAD-66|1<<CypherParser.CSV-66|1<<CypherParser.WITH-66|1<<CypherParser.HEADERS-66|1<<CypherParser.FROM-66|1<<CypherParser.AS-66|1<<CypherParser.FIELDTERMINATOR-66|1<<CypherParser.OPTIONAL-66|1<<CypherParser.MATCH-66|1<<CypherParser.UNWIND-66|1<<CypherParser.MERGE-66|1<<CypherParser.SET-66|1<<CypherParser.DETACH-66|1<<CypherParser.DELETE-66|1<<CypherParser.REMOVE-66|1<<CypherParser.FOREACH-66|1<<CypherParser.IN-66|1<<CypherParser.DISTINCT-66|1<<CypherParser.RETURN-66|1<<CypherParser.ORDER-66|1<<CypherParser.BY-66|1<<CypherParser.L_SKIP-66|1<<CypherParser.LIMIT-66|1<<CypherParser.ASCENDING-66|1<<CypherParser.ASC-66|1<<CypherParser.DESCENDING-66|1<<CypherParser.DESC-66))!==0||(_la-98&~0x1f)==0&&(1<<_la-98&(1<<CypherParser.JOIN-98|1<<CypherParser.SCAN-98|1<<CypherParser.START-98|1<<CypherParser.NODE-98|1<<CypherParser.RELATIONSHIP-98|1<<CypherParser.REL-98|1<<CypherParser.WHERE-98|1<<CypherParser.SHORTESTPATH-98|1<<CypherParser.ALLSHORTESTPATHS-98|1<<CypherParser.OR-98|1<<CypherParser.XOR-98|1<<CypherParser.AND-98|1<<CypherParser.NOT-98|1<<CypherParser.STARTS-98|1<<CypherParser.ENDS-98|1<<CypherParser.CONTAINS-98|1<<CypherParser.NULL-98|1<<CypherParser.COUNT-98|1<<CypherParser.FILTER-98|1<<CypherParser.EXTRACT-98|1<<CypherParser.ANY-98|1<<CypherParser.NONE-98|1<<CypherParser.SINGLE-98|1<<CypherParser.TRUE-98|1<<CypherParser.FALSE-98|1<<CypherParser.REDUCE-98|1<<CypherParser.CASE-98|1<<CypherParser.ELSE-98|1<<CypherParser.END-98|1<<CypherParser.WHEN-98|1<<CypherParser.THEN-98|1<<CypherParser.CALL-98))!==0||(_la-130&~0x1f)==0&&(1<<_la-130&(1<<CypherParser.YIELD-130|1<<CypherParser.KEY-130|1<<CypherParser.StringLiteral-130|1<<CypherParser.HexInteger-130|1<<CypherParser.DecimalInteger-130|1<<CypherParser.OctalInteger-130|1<<CypherParser.HexLetter-130|1<<CypherParser.ExponentDecimalReal-130|1<<CypherParser.RegularDecimalReal-130|1<<CypherParser.UnescapedSymbolicName-130|1<<CypherParser.EscapedSymbolicName-130))!==0){this.state=1391;this.expression();}this.state=1404;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,166,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1395;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1394;this.match(CypherParser.SP);}this.state=1397;this.match(CypherParser.T__14);this.state=1399;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1398;this.match(CypherParser.SP);}this.state=1401;this.expression();}this.state=1406;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,166,this._ctx);}this.state=1408;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1407;this.match(CypherParser.SP);}this.state=1410;this.match(CypherParser.T__19);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ProcedureResultsContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_procedureResults;return this;}ProcedureResultsContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ProcedureResultsContext.prototype.constructor=ProcedureResultsContext;ProcedureResultsContext.prototype.YIELD=function(){return this.getToken(CypherParser.YIELD,0);};ProcedureResultsContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};ProcedureResultsContext.prototype.procedureResult=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ProcedureResultContext);}else{return this.getTypedRuleContext(ProcedureResultContext,i);}};ProcedureResultsContext.prototype.where=function(){return this.getTypedRuleContext(WhereContext,0);};ProcedureResultsContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterProcedureResults(this);}};ProcedureResultsContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitProcedureResults(this);}};CypherParser.ProcedureResultsContext=ProcedureResultsContext;CypherParser.prototype.procedureResults=function(){var localctx=new ProcedureResultsContext(this,this._ctx,this.state);this.enterRule(localctx,180,CypherParser.RULE_procedureResults);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1412;this.match(CypherParser.YIELD);this.state=1413;this.match(CypherParser.SP);this.state=1414;this.procedureResult();this.state=1425;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,170,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1416;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1415;this.match(CypherParser.SP);}this.state=1418;this.match(CypherParser.T__14);this.state=1420;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1419;this.match(CypherParser.SP);}this.state=1422;this.procedureResult();}this.state=1427;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,170,this._ctx);}this.state=1430;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,171,this._ctx);if(la_===1){this.state=1428;this.match(CypherParser.SP);this.state=1429;this.where();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ProcedureResultContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_procedureResult;return this;}ProcedureResultContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ProcedureResultContext.prototype.constructor=ProcedureResultContext;ProcedureResultContext.prototype.aliasedProcedureResult=function(){return this.getTypedRuleContext(AliasedProcedureResultContext,0);};ProcedureResultContext.prototype.simpleProcedureResult=function(){return this.getTypedRuleContext(SimpleProcedureResultContext,0);};ProcedureResultContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterProcedureResult(this);}};ProcedureResultContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitProcedureResult(this);}};CypherParser.ProcedureResultContext=ProcedureResultContext;CypherParser.prototype.procedureResult=function(){var localctx=new ProcedureResultContext(this,this._ctx,this.state);this.enterRule(localctx,182,CypherParser.RULE_procedureResult);try{this.state=1434;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,172,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1432;this.aliasedProcedureResult();break;case 2:this.enterOuterAlt(localctx,2);this.state=1433;this.simpleProcedureResult();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function AliasedProcedureResultContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_aliasedProcedureResult;return this;}AliasedProcedureResultContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);AliasedProcedureResultContext.prototype.constructor=AliasedProcedureResultContext;AliasedProcedureResultContext.prototype.procedureOutput=function(){return this.getTypedRuleContext(ProcedureOutputContext,0);};AliasedProcedureResultContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};AliasedProcedureResultContext.prototype.AS=function(){return this.getToken(CypherParser.AS,0);};AliasedProcedureResultContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};AliasedProcedureResultContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterAliasedProcedureResult(this);}};AliasedProcedureResultContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitAliasedProcedureResult(this);}};CypherParser.AliasedProcedureResultContext=AliasedProcedureResultContext;CypherParser.prototype.aliasedProcedureResult=function(){var localctx=new AliasedProcedureResultContext(this,this._ctx,this.state);this.enterRule(localctx,184,CypherParser.RULE_aliasedProcedureResult);try{this.enterOuterAlt(localctx,1);this.state=1436;this.procedureOutput();this.state=1437;this.match(CypherParser.SP);this.state=1438;this.match(CypherParser.AS);this.state=1439;this.match(CypherParser.SP);this.state=1440;this.variable();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function SimpleProcedureResultContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_simpleProcedureResult;return this;}SimpleProcedureResultContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);SimpleProcedureResultContext.prototype.constructor=SimpleProcedureResultContext;SimpleProcedureResultContext.prototype.procedureOutput=function(){return this.getTypedRuleContext(ProcedureOutputContext,0);};SimpleProcedureResultContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterSimpleProcedureResult(this);}};SimpleProcedureResultContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitSimpleProcedureResult(this);}};CypherParser.SimpleProcedureResultContext=SimpleProcedureResultContext;CypherParser.prototype.simpleProcedureResult=function(){var localctx=new SimpleProcedureResultContext(this,this._ctx,this.state);this.enterRule(localctx,186,CypherParser.RULE_simpleProcedureResult);try{this.enterOuterAlt(localctx,1);this.state=1442;this.procedureOutput();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ProcedureOutputContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_procedureOutput;return this;}ProcedureOutputContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ProcedureOutputContext.prototype.constructor=ProcedureOutputContext;ProcedureOutputContext.prototype.symbolicName=function(){return this.getTypedRuleContext(SymbolicNameContext,0);};ProcedureOutputContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterProcedureOutput(this);}};ProcedureOutputContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitProcedureOutput(this);}};CypherParser.ProcedureOutputContext=ProcedureOutputContext;CypherParser.prototype.procedureOutput=function(){var localctx=new ProcedureOutputContext(this,this._ctx,this.state);this.enterRule(localctx,188,CypherParser.RULE_procedureOutput);try{this.enterOuterAlt(localctx,1);this.state=1444;this.symbolicName();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function OrderContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_order;return this;}OrderContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);OrderContext.prototype.constructor=OrderContext;OrderContext.prototype.ORDER=function(){return this.getToken(CypherParser.ORDER,0);};OrderContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};OrderContext.prototype.BY=function(){return this.getToken(CypherParser.BY,0);};OrderContext.prototype.sortItem=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(SortItemContext);}else{return this.getTypedRuleContext(SortItemContext,i);}};OrderContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterOrder(this);}};OrderContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitOrder(this);}};CypherParser.OrderContext=OrderContext;CypherParser.prototype.order=function(){var localctx=new OrderContext(this,this._ctx,this.state);this.enterRule(localctx,190,CypherParser.RULE_order);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1446;this.match(CypherParser.ORDER);this.state=1447;this.match(CypherParser.SP);this.state=1448;this.match(CypherParser.BY);this.state=1449;this.match(CypherParser.SP);this.state=1450;this.sortItem();this.state=1461;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,175,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1452;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1451;this.match(CypherParser.SP);}this.state=1454;this.match(CypherParser.T__14);this.state=1456;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1455;this.match(CypherParser.SP);}this.state=1458;this.sortItem();}this.state=1463;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,175,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function SkipContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_skip;return this;}SkipContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);SkipContext.prototype.constructor=SkipContext;SkipContext.prototype.L_SKIP=function(){return this.getToken(CypherParser.L_SKIP,0);};SkipContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};SkipContext.prototype.expression=function(){return this.getTypedRuleContext(ExpressionContext,0);};SkipContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterSkip(this);}};SkipContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitSkip(this);}};CypherParser.SkipContext=SkipContext;CypherParser.prototype.skip=function(){var localctx=new SkipContext(this,this._ctx,this.state);this.enterRule(localctx,192,CypherParser.RULE_skip);try{this.enterOuterAlt(localctx,1);this.state=1464;this.match(CypherParser.L_SKIP);this.state=1465;this.match(CypherParser.SP);this.state=1466;this.expression();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function LimitContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_limit;return this;}LimitContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);LimitContext.prototype.constructor=LimitContext;LimitContext.prototype.LIMIT=function(){return this.getToken(CypherParser.LIMIT,0);};LimitContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};LimitContext.prototype.expression=function(){return this.getTypedRuleContext(ExpressionContext,0);};LimitContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterLimit(this);}};LimitContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitLimit(this);}};CypherParser.LimitContext=LimitContext;CypherParser.prototype.limit=function(){var localctx=new LimitContext(this,this._ctx,this.state);this.enterRule(localctx,194,CypherParser.RULE_limit);try{this.enterOuterAlt(localctx,1);this.state=1468;this.match(CypherParser.LIMIT);this.state=1469;this.match(CypherParser.SP);this.state=1470;this.expression();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function SortItemContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_sortItem;return this;}SortItemContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);SortItemContext.prototype.constructor=SortItemContext;SortItemContext.prototype.expression=function(){return this.getTypedRuleContext(ExpressionContext,0);};SortItemContext.prototype.ASCENDING=function(){return this.getToken(CypherParser.ASCENDING,0);};SortItemContext.prototype.ASC=function(){return this.getToken(CypherParser.ASC,0);};SortItemContext.prototype.DESCENDING=function(){return this.getToken(CypherParser.DESCENDING,0);};SortItemContext.prototype.DESC=function(){return this.getToken(CypherParser.DESC,0);};SortItemContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};SortItemContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterSortItem(this);}};SortItemContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitSortItem(this);}};CypherParser.SortItemContext=SortItemContext;CypherParser.prototype.sortItem=function(){var localctx=new SortItemContext(this,this._ctx,this.state);this.enterRule(localctx,196,CypherParser.RULE_sortItem);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1472;this.expression();this.state=1480;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,178,this._ctx);if(la_===1){this.state=1474;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1473;this.match(CypherParser.SP);}this.state=1476;_la=this._input.LA(1);if(!((_la-94&~0x1f)==0&&(1<<_la-94&(1<<CypherParser.ASCENDING-94|1<<CypherParser.ASC-94|1<<CypherParser.DESCENDING-94|1<<CypherParser.DESC-94))!==0)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}this.state=1478;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,177,this._ctx);if(la_===1){this.state=1477;this.match(CypherParser.SP);}}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function HintContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_hint;return this;}HintContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);HintContext.prototype.constructor=HintContext;HintContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};HintContext.prototype.USING=function(){return this.getToken(CypherParser.USING,0);};HintContext.prototype.INDEX=function(){return this.getToken(CypherParser.INDEX,0);};HintContext.prototype.variable=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(VariableContext);}else{return this.getTypedRuleContext(VariableContext,i);}};HintContext.prototype.nodeLabel=function(){return this.getTypedRuleContext(NodeLabelContext,0);};HintContext.prototype.propertyKeys=function(){return this.getTypedRuleContext(PropertyKeysContext,0);};HintContext.prototype.JOIN=function(){return this.getToken(CypherParser.JOIN,0);};HintContext.prototype.ON=function(){return this.getToken(CypherParser.ON,0);};HintContext.prototype.SCAN=function(){return this.getToken(CypherParser.SCAN,0);};HintContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterHint(this);}};HintContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitHint(this);}};CypherParser.HintContext=HintContext;CypherParser.prototype.hint=function(){var localctx=new HintContext(this,this._ctx,this.state);this.enterRule(localctx,198,CypherParser.RULE_hint);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1483;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1482;this.match(CypherParser.SP);}this.state=1531;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,186,this._ctx);switch(la_){case 1:this.state=1485;this.match(CypherParser.USING);this.state=1486;this.match(CypherParser.SP);this.state=1487;this.match(CypherParser.INDEX);this.state=1488;this.match(CypherParser.SP);this.state=1489;this.variable();this.state=1490;this.nodeLabel();this.state=1492;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1491;this.match(CypherParser.SP);}this.state=1494;this.match(CypherParser.T__18);this.state=1496;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1495;this.match(CypherParser.SP);}this.state=1498;this.propertyKeys();this.state=1500;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1499;this.match(CypherParser.SP);}this.state=1502;this.match(CypherParser.T__19);break;case 2:this.state=1504;this.match(CypherParser.USING);this.state=1505;this.match(CypherParser.SP);this.state=1506;this.match(CypherParser.JOIN);this.state=1507;this.match(CypherParser.SP);this.state=1508;this.match(CypherParser.ON);this.state=1509;this.match(CypherParser.SP);this.state=1510;this.variable();this.state=1521;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,185,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1512;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1511;this.match(CypherParser.SP);}this.state=1514;this.match(CypherParser.T__14);this.state=1516;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1515;this.match(CypherParser.SP);}this.state=1518;this.variable();}this.state=1523;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,185,this._ctx);}break;case 3:this.state=1524;this.match(CypherParser.USING);this.state=1525;this.match(CypherParser.SP);this.state=1526;this.match(CypherParser.SCAN);this.state=1527;this.match(CypherParser.SP);this.state=1528;this.variable();this.state=1529;this.nodeLabel();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function StartClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_startClause;return this;}StartClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);StartClauseContext.prototype.constructor=StartClauseContext;StartClauseContext.prototype.START=function(){return this.getToken(CypherParser.START,0);};StartClauseContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};StartClauseContext.prototype.startPoint=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(StartPointContext);}else{return this.getTypedRuleContext(StartPointContext,i);}};StartClauseContext.prototype.where=function(){return this.getTypedRuleContext(WhereContext,0);};StartClauseContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterStartClause(this);}};StartClauseContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitStartClause(this);}};CypherParser.StartClauseContext=StartClauseContext;CypherParser.prototype.startClause=function(){var localctx=new StartClauseContext(this,this._ctx,this.state);this.enterRule(localctx,200,CypherParser.RULE_startClause);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1533;this.match(CypherParser.START);this.state=1534;this.match(CypherParser.SP);this.state=1535;this.startPoint();this.state=1546;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,189,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1537;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1536;this.match(CypherParser.SP);}this.state=1539;this.match(CypherParser.T__14);this.state=1541;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1540;this.match(CypherParser.SP);}this.state=1543;this.startPoint();}this.state=1548;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,189,this._ctx);}this.state=1550;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.WHERE){this.state=1549;this.where();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function StartPointContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_startPoint;return this;}StartPointContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);StartPointContext.prototype.constructor=StartPointContext;StartPointContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};StartPointContext.prototype.lookup=function(){return this.getTypedRuleContext(LookupContext,0);};StartPointContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};StartPointContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterStartPoint(this);}};StartPointContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitStartPoint(this);}};CypherParser.StartPointContext=StartPointContext;CypherParser.prototype.startPoint=function(){var localctx=new StartPointContext(this,this._ctx,this.state);this.enterRule(localctx,202,CypherParser.RULE_startPoint);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1552;this.variable();this.state=1554;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1553;this.match(CypherParser.SP);}this.state=1556;this.match(CypherParser.T__11);this.state=1558;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1557;this.match(CypherParser.SP);}this.state=1560;this.lookup();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function LookupContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_lookup;return this;}LookupContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);LookupContext.prototype.constructor=LookupContext;LookupContext.prototype.nodeLookup=function(){return this.getTypedRuleContext(NodeLookupContext,0);};LookupContext.prototype.relationshipLookup=function(){return this.getTypedRuleContext(RelationshipLookupContext,0);};LookupContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterLookup(this);}};LookupContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitLookup(this);}};CypherParser.LookupContext=LookupContext;CypherParser.prototype.lookup=function(){var localctx=new LookupContext(this,this._ctx,this.state);this.enterRule(localctx,204,CypherParser.RULE_lookup);try{this.state=1564;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.NODE:this.enterOuterAlt(localctx,1);this.state=1562;this.nodeLookup();break;case CypherParser.RELATIONSHIP:case CypherParser.REL:this.enterOuterAlt(localctx,2);this.state=1563;this.relationshipLookup();break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function NodeLookupContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_nodeLookup;return this;}NodeLookupContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);NodeLookupContext.prototype.constructor=NodeLookupContext;NodeLookupContext.prototype.NODE=function(){return this.getToken(CypherParser.NODE,0);};NodeLookupContext.prototype.identifiedIndexLookup=function(){return this.getTypedRuleContext(IdentifiedIndexLookupContext,0);};NodeLookupContext.prototype.indexQuery=function(){return this.getTypedRuleContext(IndexQueryContext,0);};NodeLookupContext.prototype.idLookup=function(){return this.getTypedRuleContext(IdLookupContext,0);};NodeLookupContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};NodeLookupContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterNodeLookup(this);}};NodeLookupContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitNodeLookup(this);}};CypherParser.NodeLookupContext=NodeLookupContext;CypherParser.prototype.nodeLookup=function(){var localctx=new NodeLookupContext(this,this._ctx,this.state);this.enterRule(localctx,206,CypherParser.RULE_nodeLookup);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1566;this.match(CypherParser.NODE);this.state=1568;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1567;this.match(CypherParser.SP);}this.state=1573;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,195,this._ctx);switch(la_){case 1:this.state=1570;this.identifiedIndexLookup();break;case 2:this.state=1571;this.indexQuery();break;case 3:this.state=1572;this.idLookup();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RelationshipLookupContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_relationshipLookup;return this;}RelationshipLookupContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RelationshipLookupContext.prototype.constructor=RelationshipLookupContext;RelationshipLookupContext.prototype.RELATIONSHIP=function(){return this.getToken(CypherParser.RELATIONSHIP,0);};RelationshipLookupContext.prototype.REL=function(){return this.getToken(CypherParser.REL,0);};RelationshipLookupContext.prototype.identifiedIndexLookup=function(){return this.getTypedRuleContext(IdentifiedIndexLookupContext,0);};RelationshipLookupContext.prototype.indexQuery=function(){return this.getTypedRuleContext(IndexQueryContext,0);};RelationshipLookupContext.prototype.idLookup=function(){return this.getTypedRuleContext(IdLookupContext,0);};RelationshipLookupContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterRelationshipLookup(this);}};RelationshipLookupContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitRelationshipLookup(this);}};CypherParser.RelationshipLookupContext=RelationshipLookupContext;CypherParser.prototype.relationshipLookup=function(){var localctx=new RelationshipLookupContext(this,this._ctx,this.state);this.enterRule(localctx,208,CypherParser.RULE_relationshipLookup);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1575;_la=this._input.LA(1);if(!(_la===CypherParser.RELATIONSHIP||_la===CypherParser.REL)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}this.state=1579;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,196,this._ctx);switch(la_){case 1:this.state=1576;this.identifiedIndexLookup();break;case 2:this.state=1577;this.indexQuery();break;case 3:this.state=1578;this.idLookup();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function IdentifiedIndexLookupContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_identifiedIndexLookup;return this;}IdentifiedIndexLookupContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);IdentifiedIndexLookupContext.prototype.constructor=IdentifiedIndexLookupContext;IdentifiedIndexLookupContext.prototype.symbolicName=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(SymbolicNameContext);}else{return this.getTypedRuleContext(SymbolicNameContext,i);}};IdentifiedIndexLookupContext.prototype.StringLiteral=function(){return this.getToken(CypherParser.StringLiteral,0);};IdentifiedIndexLookupContext.prototype.parameter=function(){return this.getTypedRuleContext(ParameterContext,0);};IdentifiedIndexLookupContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterIdentifiedIndexLookup(this);}};IdentifiedIndexLookupContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitIdentifiedIndexLookup(this);}};CypherParser.IdentifiedIndexLookupContext=IdentifiedIndexLookupContext;CypherParser.prototype.identifiedIndexLookup=function(){var localctx=new IdentifiedIndexLookupContext(this,this._ctx,this.state);this.enterRule(localctx,210,CypherParser.RULE_identifiedIndexLookup);try{this.enterOuterAlt(localctx,1);this.state=1581;this.match(CypherParser.T__1);this.state=1582;this.symbolicName();this.state=1583;this.match(CypherParser.T__18);this.state=1584;this.symbolicName();this.state=1585;this.match(CypherParser.T__11);this.state=1588;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.StringLiteral:this.state=1586;this.match(CypherParser.StringLiteral);break;case CypherParser.T__13:case CypherParser.T__33:this.state=1587;this.parameter();break;default:throw new antlr4.error.NoViableAltException(this);}this.state=1590;this.match(CypherParser.T__19);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function IndexQueryContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_indexQuery;return this;}IndexQueryContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);IndexQueryContext.prototype.constructor=IndexQueryContext;IndexQueryContext.prototype.symbolicName=function(){return this.getTypedRuleContext(SymbolicNameContext,0);};IndexQueryContext.prototype.StringLiteral=function(){return this.getToken(CypherParser.StringLiteral,0);};IndexQueryContext.prototype.parameter=function(){return this.getTypedRuleContext(ParameterContext,0);};IndexQueryContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterIndexQuery(this);}};IndexQueryContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitIndexQuery(this);}};CypherParser.IndexQueryContext=IndexQueryContext;CypherParser.prototype.indexQuery=function(){var localctx=new IndexQueryContext(this,this._ctx,this.state);this.enterRule(localctx,212,CypherParser.RULE_indexQuery);try{this.enterOuterAlt(localctx,1);this.state=1592;this.match(CypherParser.T__1);this.state=1593;this.symbolicName();this.state=1594;this.match(CypherParser.T__18);this.state=1597;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.StringLiteral:this.state=1595;this.match(CypherParser.StringLiteral);break;case CypherParser.T__13:case CypherParser.T__33:this.state=1596;this.parameter();break;default:throw new antlr4.error.NoViableAltException(this);}this.state=1599;this.match(CypherParser.T__19);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function IdLookupContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_idLookup;return this;}IdLookupContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);IdLookupContext.prototype.constructor=IdLookupContext;IdLookupContext.prototype.literalIds=function(){return this.getTypedRuleContext(LiteralIdsContext,0);};IdLookupContext.prototype.parameter=function(){return this.getTypedRuleContext(ParameterContext,0);};IdLookupContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterIdLookup(this);}};IdLookupContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitIdLookup(this);}};CypherParser.IdLookupContext=IdLookupContext;CypherParser.prototype.idLookup=function(){var localctx=new IdLookupContext(this,this._ctx,this.state);this.enterRule(localctx,214,CypherParser.RULE_idLookup);try{this.enterOuterAlt(localctx,1);this.state=1601;this.match(CypherParser.T__18);this.state=1605;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.HexInteger:case CypherParser.DecimalInteger:case CypherParser.OctalInteger:this.state=1602;this.literalIds();break;case CypherParser.T__13:case CypherParser.T__33:this.state=1603;this.parameter();break;case CypherParser.T__22:this.state=1604;this.match(CypherParser.T__22);break;default:throw new antlr4.error.NoViableAltException(this);}this.state=1607;this.match(CypherParser.T__19);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function LiteralIdsContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_literalIds;return this;}LiteralIdsContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);LiteralIdsContext.prototype.constructor=LiteralIdsContext;LiteralIdsContext.prototype.integerLiteral=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(IntegerLiteralContext);}else{return this.getTypedRuleContext(IntegerLiteralContext,i);}};LiteralIdsContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};LiteralIdsContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterLiteralIds(this);}};LiteralIdsContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitLiteralIds(this);}};CypherParser.LiteralIdsContext=LiteralIdsContext;CypherParser.prototype.literalIds=function(){var localctx=new LiteralIdsContext(this,this._ctx,this.state);this.enterRule(localctx,216,CypherParser.RULE_literalIds);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1609;this.integerLiteral();this.state=1620;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CypherParser.T__14||_la===CypherParser.SP){this.state=1611;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1610;this.match(CypherParser.SP);}this.state=1613;this.match(CypherParser.T__14);this.state=1615;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1614;this.match(CypherParser.SP);}this.state=1617;this.integerLiteral();this.state=1622;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function WhereContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_where;return this;}WhereContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);WhereContext.prototype.constructor=WhereContext;WhereContext.prototype.WHERE=function(){return this.getToken(CypherParser.WHERE,0);};WhereContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};WhereContext.prototype.expression=function(){return this.getTypedRuleContext(ExpressionContext,0);};WhereContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterWhere(this);}};WhereContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitWhere(this);}};CypherParser.WhereContext=WhereContext;CypherParser.prototype.where=function(){var localctx=new WhereContext(this,this._ctx,this.state);this.enterRule(localctx,218,CypherParser.RULE_where);try{this.enterOuterAlt(localctx,1);this.state=1623;this.match(CypherParser.WHERE);this.state=1624;this.match(CypherParser.SP);this.state=1625;this.expression();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PatternContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_pattern;return this;}PatternContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PatternContext.prototype.constructor=PatternContext;PatternContext.prototype.patternPart=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(PatternPartContext);}else{return this.getTypedRuleContext(PatternPartContext,i);}};PatternContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};PatternContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterPattern(this);}};PatternContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitPattern(this);}};CypherParser.PatternContext=PatternContext;CypherParser.prototype.pattern=function(){var localctx=new PatternContext(this,this._ctx,this.state);this.enterRule(localctx,220,CypherParser.RULE_pattern);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1627;this.patternPart();this.state=1638;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,205,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1629;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1628;this.match(CypherParser.SP);}this.state=1631;this.match(CypherParser.T__14);this.state=1633;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1632;this.match(CypherParser.SP);}this.state=1635;this.patternPart();}this.state=1640;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,205,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PatternPartContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_patternPart;return this;}PatternPartContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PatternPartContext.prototype.constructor=PatternPartContext;PatternPartContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};PatternPartContext.prototype.anonymousPatternPart=function(){return this.getTypedRuleContext(AnonymousPatternPartContext,0);};PatternPartContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};PatternPartContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterPatternPart(this);}};PatternPartContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitPatternPart(this);}};CypherParser.PatternPartContext=PatternPartContext;CypherParser.prototype.patternPart=function(){var localctx=new PatternPartContext(this,this._ctx,this.state);this.enterRule(localctx,222,CypherParser.RULE_patternPart);var _la=0;// Token type
try{this.state=1652;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,208,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1641;this.variable();this.state=1643;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1642;this.match(CypherParser.SP);}this.state=1645;this.match(CypherParser.T__11);this.state=1647;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1646;this.match(CypherParser.SP);}this.state=1649;this.anonymousPatternPart();break;case 2:this.enterOuterAlt(localctx,2);this.state=1651;this.anonymousPatternPart();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function AnonymousPatternPartContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_anonymousPatternPart;return this;}AnonymousPatternPartContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);AnonymousPatternPartContext.prototype.constructor=AnonymousPatternPartContext;AnonymousPatternPartContext.prototype.shortestPathPatternFunction=function(){return this.getTypedRuleContext(ShortestPathPatternFunctionContext,0);};AnonymousPatternPartContext.prototype.patternElement=function(){return this.getTypedRuleContext(PatternElementContext,0);};AnonymousPatternPartContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterAnonymousPatternPart(this);}};AnonymousPatternPartContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitAnonymousPatternPart(this);}};CypherParser.AnonymousPatternPartContext=AnonymousPatternPartContext;CypherParser.prototype.anonymousPatternPart=function(){var localctx=new AnonymousPatternPartContext(this,this._ctx,this.state);this.enterRule(localctx,224,CypherParser.RULE_anonymousPatternPart);try{this.state=1656;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.SHORTESTPATH:case CypherParser.ALLSHORTESTPATHS:this.enterOuterAlt(localctx,1);this.state=1654;this.shortestPathPatternFunction();break;case CypherParser.T__18:this.enterOuterAlt(localctx,2);this.state=1655;this.patternElement();break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PatternElementContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_patternElement;return this;}PatternElementContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PatternElementContext.prototype.constructor=PatternElementContext;PatternElementContext.prototype.nodePattern=function(){return this.getTypedRuleContext(NodePatternContext,0);};PatternElementContext.prototype.patternElementChain=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(PatternElementChainContext);}else{return this.getTypedRuleContext(PatternElementChainContext,i);}};PatternElementContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};PatternElementContext.prototype.patternElement=function(){return this.getTypedRuleContext(PatternElementContext,0);};PatternElementContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterPatternElement(this);}};PatternElementContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitPatternElement(this);}};CypherParser.PatternElementContext=PatternElementContext;CypherParser.prototype.patternElement=function(){var localctx=new PatternElementContext(this,this._ctx,this.state);this.enterRule(localctx,226,CypherParser.RULE_patternElement);var _la=0;// Token type
try{this.state=1672;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,212,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1658;this.nodePattern();this.state=1665;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,211,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1660;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1659;this.match(CypherParser.SP);}this.state=1662;this.patternElementChain();}this.state=1667;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,211,this._ctx);}break;case 2:this.enterOuterAlt(localctx,2);this.state=1668;this.match(CypherParser.T__18);this.state=1669;this.patternElement();this.state=1670;this.match(CypherParser.T__19);break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function NodePatternContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_nodePattern;return this;}NodePatternContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);NodePatternContext.prototype.constructor=NodePatternContext;NodePatternContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};NodePatternContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};NodePatternContext.prototype.nodeLabels=function(){return this.getTypedRuleContext(NodeLabelsContext,0);};NodePatternContext.prototype.properties=function(){return this.getTypedRuleContext(PropertiesContext,0);};NodePatternContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterNodePattern(this);}};NodePatternContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitNodePattern(this);}};CypherParser.NodePatternContext=NodePatternContext;CypherParser.prototype.nodePattern=function(){var localctx=new NodePatternContext(this,this._ctx,this.state);this.enterRule(localctx,228,CypherParser.RULE_nodePattern);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1674;this.match(CypherParser.T__18);this.state=1676;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1675;this.match(CypherParser.SP);}this.state=1682;this._errHandler.sync(this);_la=this._input.LA(1);if((_la-54&~0x1f)==0&&(1<<_la-54&(1<<CypherParser.CYPHER-54|1<<CypherParser.EXPLAIN-54|1<<CypherParser.PROFILE-54|1<<CypherParser.USING-54|1<<CypherParser.PERIODIC-54|1<<CypherParser.COMMIT-54|1<<CypherParser.UNION-54|1<<CypherParser.ALL-54|1<<CypherParser.CREATE-54|1<<CypherParser.DROP-54|1<<CypherParser.INDEX-54|1<<CypherParser.ON-54|1<<CypherParser.CONSTRAINT-54|1<<CypherParser.ASSERT-54|1<<CypherParser.IS-54|1<<CypherParser.UNIQUE-54|1<<CypherParser.EXISTS-54|1<<CypherParser.LOAD-54|1<<CypherParser.CSV-54|1<<CypherParser.WITH-54|1<<CypherParser.HEADERS-54|1<<CypherParser.FROM-54|1<<CypherParser.AS-54|1<<CypherParser.FIELDTERMINATOR-54|1<<CypherParser.OPTIONAL-54|1<<CypherParser.MATCH-54|1<<CypherParser.UNWIND-54|1<<CypherParser.MERGE-54|1<<CypherParser.SET-54|1<<CypherParser.DETACH-54|1<<CypherParser.DELETE-54|1<<CypherParser.REMOVE-54))!==0||(_la-86&~0x1f)==0&&(1<<_la-86&(1<<CypherParser.FOREACH-86|1<<CypherParser.IN-86|1<<CypherParser.DISTINCT-86|1<<CypherParser.RETURN-86|1<<CypherParser.ORDER-86|1<<CypherParser.BY-86|1<<CypherParser.L_SKIP-86|1<<CypherParser.LIMIT-86|1<<CypherParser.ASCENDING-86|1<<CypherParser.ASC-86|1<<CypherParser.DESCENDING-86|1<<CypherParser.DESC-86|1<<CypherParser.JOIN-86|1<<CypherParser.SCAN-86|1<<CypherParser.START-86|1<<CypherParser.NODE-86|1<<CypherParser.RELATIONSHIP-86|1<<CypherParser.REL-86|1<<CypherParser.WHERE-86|1<<CypherParser.SHORTESTPATH-86|1<<CypherParser.ALLSHORTESTPATHS-86|1<<CypherParser.OR-86|1<<CypherParser.XOR-86|1<<CypherParser.AND-86|1<<CypherParser.NOT-86|1<<CypherParser.STARTS-86|1<<CypherParser.ENDS-86|1<<CypherParser.CONTAINS-86|1<<CypherParser.NULL-86|1<<CypherParser.COUNT-86|1<<CypherParser.FILTER-86|1<<CypherParser.EXTRACT-86))!==0||(_la-118&~0x1f)==0&&(1<<_la-118&(1<<CypherParser.ANY-118|1<<CypherParser.NONE-118|1<<CypherParser.SINGLE-118|1<<CypherParser.TRUE-118|1<<CypherParser.FALSE-118|1<<CypherParser.REDUCE-118|1<<CypherParser.CASE-118|1<<CypherParser.ELSE-118|1<<CypherParser.END-118|1<<CypherParser.WHEN-118|1<<CypherParser.THEN-118|1<<CypherParser.CALL-118|1<<CypherParser.YIELD-118|1<<CypherParser.KEY-118|1<<CypherParser.HexLetter-118|1<<CypherParser.UnescapedSymbolicName-118))!==0||_la===CypherParser.EscapedSymbolicName){this.state=1678;this.variable();this.state=1680;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1679;this.match(CypherParser.SP);}}this.state=1688;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.T__1){this.state=1684;this.nodeLabels();this.state=1686;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1685;this.match(CypherParser.SP);}}this.state=1694;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.T__13||_la===CypherParser.T__33){this.state=1690;this.properties();this.state=1692;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1691;this.match(CypherParser.SP);}}this.state=1696;this.match(CypherParser.T__19);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PatternElementChainContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_patternElementChain;return this;}PatternElementChainContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PatternElementChainContext.prototype.constructor=PatternElementChainContext;PatternElementChainContext.prototype.relationshipPattern=function(){return this.getTypedRuleContext(RelationshipPatternContext,0);};PatternElementChainContext.prototype.nodePattern=function(){return this.getTypedRuleContext(NodePatternContext,0);};PatternElementChainContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};PatternElementChainContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterPatternElementChain(this);}};PatternElementChainContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitPatternElementChain(this);}};CypherParser.PatternElementChainContext=PatternElementChainContext;CypherParser.prototype.patternElementChain=function(){var localctx=new PatternElementChainContext(this,this._ctx,this.state);this.enterRule(localctx,230,CypherParser.RULE_patternElementChain);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1698;this.relationshipPattern();this.state=1700;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1699;this.match(CypherParser.SP);}this.state=1702;this.nodePattern();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RelationshipPatternContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_relationshipPattern;return this;}RelationshipPatternContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RelationshipPatternContext.prototype.constructor=RelationshipPatternContext;RelationshipPatternContext.prototype.relationshipPatternStart=function(){return this.getTypedRuleContext(RelationshipPatternStartContext,0);};RelationshipPatternContext.prototype.relationshipPatternEnd=function(){return this.getTypedRuleContext(RelationshipPatternEndContext,0);};RelationshipPatternContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};RelationshipPatternContext.prototype.relationshipDetail=function(){return this.getTypedRuleContext(RelationshipDetailContext,0);};RelationshipPatternContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterRelationshipPattern(this);}};RelationshipPatternContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitRelationshipPattern(this);}};CypherParser.RelationshipPatternContext=RelationshipPatternContext;CypherParser.prototype.relationshipPattern=function(){var localctx=new RelationshipPatternContext(this,this._ctx,this.state);this.enterRule(localctx,232,CypherParser.RULE_relationshipPattern);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1704;this.relationshipPatternStart();this.state=1706;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,221,this._ctx);if(la_===1){this.state=1705;this.match(CypherParser.SP);}this.state=1709;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.T__16){this.state=1708;this.relationshipDetail();}this.state=1712;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1711;this.match(CypherParser.SP);}this.state=1714;this.relationshipPatternEnd();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RelationshipPatternStartContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_relationshipPatternStart;return this;}RelationshipPatternStartContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RelationshipPatternStartContext.prototype.constructor=RelationshipPatternStartContext;RelationshipPatternStartContext.prototype.leftArrowHead=function(){return this.getTypedRuleContext(LeftArrowHeadContext,0);};RelationshipPatternStartContext.prototype.dash=function(){return this.getTypedRuleContext(DashContext,0);};RelationshipPatternStartContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};RelationshipPatternStartContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterRelationshipPatternStart(this);}};RelationshipPatternStartContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitRelationshipPatternStart(this);}};CypherParser.RelationshipPatternStartContext=RelationshipPatternStartContext;CypherParser.prototype.relationshipPatternStart=function(){var localctx=new RelationshipPatternStartContext(this,this._ctx,this.state);this.enterRule(localctx,234,CypherParser.RULE_relationshipPatternStart);var _la=0;// Token type
try{this.state=1723;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.T__29:case CypherParser.T__34:case CypherParser.T__35:case CypherParser.T__36:case CypherParser.T__37:this.enterOuterAlt(localctx,1);this.state=1716;this.leftArrowHead();this.state=1718;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1717;this.match(CypherParser.SP);}this.state=1720;this.dash();break;case CypherParser.T__2:case CypherParser.T__42:case CypherParser.T__43:case CypherParser.T__44:case CypherParser.T__45:case CypherParser.T__46:case CypherParser.T__47:case CypherParser.T__48:case CypherParser.T__49:case CypherParser.T__50:case CypherParser.T__51:case CypherParser.T__52:this.enterOuterAlt(localctx,2);this.state=1722;this.dash();break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RelationshipPatternEndContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_relationshipPatternEnd;return this;}RelationshipPatternEndContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RelationshipPatternEndContext.prototype.constructor=RelationshipPatternEndContext;RelationshipPatternEndContext.prototype.dash=function(){return this.getTypedRuleContext(DashContext,0);};RelationshipPatternEndContext.prototype.rightArrowHead=function(){return this.getTypedRuleContext(RightArrowHeadContext,0);};RelationshipPatternEndContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};RelationshipPatternEndContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterRelationshipPatternEnd(this);}};RelationshipPatternEndContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitRelationshipPatternEnd(this);}};CypherParser.RelationshipPatternEndContext=RelationshipPatternEndContext;CypherParser.prototype.relationshipPatternEnd=function(){var localctx=new RelationshipPatternEndContext(this,this._ctx,this.state);this.enterRule(localctx,236,CypherParser.RULE_relationshipPatternEnd);var _la=0;// Token type
try{this.state=1732;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,227,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1725;this.dash();this.state=1727;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1726;this.match(CypherParser.SP);}this.state=1729;this.rightArrowHead();break;case 2:this.enterOuterAlt(localctx,2);this.state=1731;this.dash();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RelationshipDetailContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_relationshipDetail;return this;}RelationshipDetailContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RelationshipDetailContext.prototype.constructor=RelationshipDetailContext;RelationshipDetailContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};RelationshipDetailContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};RelationshipDetailContext.prototype.relationshipTypes=function(){return this.getTypedRuleContext(RelationshipTypesContext,0);};RelationshipDetailContext.prototype.rangeLiteral=function(){return this.getTypedRuleContext(RangeLiteralContext,0);};RelationshipDetailContext.prototype.properties=function(){return this.getTypedRuleContext(PropertiesContext,0);};RelationshipDetailContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterRelationshipDetail(this);}};RelationshipDetailContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitRelationshipDetail(this);}};CypherParser.RelationshipDetailContext=RelationshipDetailContext;CypherParser.prototype.relationshipDetail=function(){var localctx=new RelationshipDetailContext(this,this._ctx,this.state);this.enterRule(localctx,238,CypherParser.RULE_relationshipDetail);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1734;this.match(CypherParser.T__16);this.state=1736;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1735;this.match(CypherParser.SP);}this.state=1742;this._errHandler.sync(this);_la=this._input.LA(1);if((_la-54&~0x1f)==0&&(1<<_la-54&(1<<CypherParser.CYPHER-54|1<<CypherParser.EXPLAIN-54|1<<CypherParser.PROFILE-54|1<<CypherParser.USING-54|1<<CypherParser.PERIODIC-54|1<<CypherParser.COMMIT-54|1<<CypherParser.UNION-54|1<<CypherParser.ALL-54|1<<CypherParser.CREATE-54|1<<CypherParser.DROP-54|1<<CypherParser.INDEX-54|1<<CypherParser.ON-54|1<<CypherParser.CONSTRAINT-54|1<<CypherParser.ASSERT-54|1<<CypherParser.IS-54|1<<CypherParser.UNIQUE-54|1<<CypherParser.EXISTS-54|1<<CypherParser.LOAD-54|1<<CypherParser.CSV-54|1<<CypherParser.WITH-54|1<<CypherParser.HEADERS-54|1<<CypherParser.FROM-54|1<<CypherParser.AS-54|1<<CypherParser.FIELDTERMINATOR-54|1<<CypherParser.OPTIONAL-54|1<<CypherParser.MATCH-54|1<<CypherParser.UNWIND-54|1<<CypherParser.MERGE-54|1<<CypherParser.SET-54|1<<CypherParser.DETACH-54|1<<CypherParser.DELETE-54|1<<CypherParser.REMOVE-54))!==0||(_la-86&~0x1f)==0&&(1<<_la-86&(1<<CypherParser.FOREACH-86|1<<CypherParser.IN-86|1<<CypherParser.DISTINCT-86|1<<CypherParser.RETURN-86|1<<CypherParser.ORDER-86|1<<CypherParser.BY-86|1<<CypherParser.L_SKIP-86|1<<CypherParser.LIMIT-86|1<<CypherParser.ASCENDING-86|1<<CypherParser.ASC-86|1<<CypherParser.DESCENDING-86|1<<CypherParser.DESC-86|1<<CypherParser.JOIN-86|1<<CypherParser.SCAN-86|1<<CypherParser.START-86|1<<CypherParser.NODE-86|1<<CypherParser.RELATIONSHIP-86|1<<CypherParser.REL-86|1<<CypherParser.WHERE-86|1<<CypherParser.SHORTESTPATH-86|1<<CypherParser.ALLSHORTESTPATHS-86|1<<CypherParser.OR-86|1<<CypherParser.XOR-86|1<<CypherParser.AND-86|1<<CypherParser.NOT-86|1<<CypherParser.STARTS-86|1<<CypherParser.ENDS-86|1<<CypherParser.CONTAINS-86|1<<CypherParser.NULL-86|1<<CypherParser.COUNT-86|1<<CypherParser.FILTER-86|1<<CypherParser.EXTRACT-86))!==0||(_la-118&~0x1f)==0&&(1<<_la-118&(1<<CypherParser.ANY-118|1<<CypherParser.NONE-118|1<<CypherParser.SINGLE-118|1<<CypherParser.TRUE-118|1<<CypherParser.FALSE-118|1<<CypherParser.REDUCE-118|1<<CypherParser.CASE-118|1<<CypherParser.ELSE-118|1<<CypherParser.END-118|1<<CypherParser.WHEN-118|1<<CypherParser.THEN-118|1<<CypherParser.CALL-118|1<<CypherParser.YIELD-118|1<<CypherParser.KEY-118|1<<CypherParser.HexLetter-118|1<<CypherParser.UnescapedSymbolicName-118))!==0||_la===CypherParser.EscapedSymbolicName){this.state=1738;this.variable();this.state=1740;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1739;this.match(CypherParser.SP);}}this.state=1748;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.T__1){this.state=1744;this.relationshipTypes();this.state=1746;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1745;this.match(CypherParser.SP);}}this.state=1751;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.T__22){this.state=1750;this.rangeLiteral();}this.state=1757;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.T__13||_la===CypherParser.T__33){this.state=1753;this.properties();this.state=1755;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1754;this.match(CypherParser.SP);}}this.state=1759;this.match(CypherParser.T__17);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PropertiesContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_properties;return this;}PropertiesContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PropertiesContext.prototype.constructor=PropertiesContext;PropertiesContext.prototype.mapLiteral=function(){return this.getTypedRuleContext(MapLiteralContext,0);};PropertiesContext.prototype.parameter=function(){return this.getTypedRuleContext(ParameterContext,0);};PropertiesContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterProperties(this);}};PropertiesContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitProperties(this);}};CypherParser.PropertiesContext=PropertiesContext;CypherParser.prototype.properties=function(){var localctx=new PropertiesContext(this,this._ctx,this.state);this.enterRule(localctx,240,CypherParser.RULE_properties);try{this.state=1763;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,236,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1761;this.mapLiteral();break;case 2:this.enterOuterAlt(localctx,2);this.state=1762;this.parameter();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RelTypeContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_relType;return this;}RelTypeContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RelTypeContext.prototype.constructor=RelTypeContext;RelTypeContext.prototype.relTypeName=function(){return this.getTypedRuleContext(RelTypeNameContext,0);};RelTypeContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};RelTypeContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterRelType(this);}};RelTypeContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitRelType(this);}};CypherParser.RelTypeContext=RelTypeContext;CypherParser.prototype.relType=function(){var localctx=new RelTypeContext(this,this._ctx,this.state);this.enterRule(localctx,242,CypherParser.RULE_relType);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1765;this.match(CypherParser.T__1);this.state=1767;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1766;this.match(CypherParser.SP);}this.state=1769;this.relTypeName();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RelationshipTypesContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_relationshipTypes;return this;}RelationshipTypesContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RelationshipTypesContext.prototype.constructor=RelationshipTypesContext;RelationshipTypesContext.prototype.relationshipType=function(){return this.getTypedRuleContext(RelationshipTypeContext,0);};RelationshipTypesContext.prototype.relationshipTypeOptionalColon=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(RelationshipTypeOptionalColonContext);}else{return this.getTypedRuleContext(RelationshipTypeOptionalColonContext,i);}};RelationshipTypesContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};RelationshipTypesContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterRelationshipTypes(this);}};RelationshipTypesContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitRelationshipTypes(this);}};CypherParser.RelationshipTypesContext=RelationshipTypesContext;CypherParser.prototype.relationshipTypes=function(){var localctx=new RelationshipTypesContext(this,this._ctx,this.state);this.enterRule(localctx,244,CypherParser.RULE_relationshipTypes);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1771;this.relationshipType();this.state=1779;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,239,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1773;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1772;this.match(CypherParser.SP);}this.state=1775;this.match(CypherParser.T__21);this.state=1776;this.relationshipTypeOptionalColon();}this.state=1781;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,239,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RelationshipTypeContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_relationshipType;return this;}RelationshipTypeContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RelationshipTypeContext.prototype.constructor=RelationshipTypeContext;RelationshipTypeContext.prototype.relTypeName=function(){return this.getTypedRuleContext(RelTypeNameContext,0);};RelationshipTypeContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterRelationshipType(this);}};RelationshipTypeContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitRelationshipType(this);}};CypherParser.RelationshipTypeContext=RelationshipTypeContext;CypherParser.prototype.relationshipType=function(){var localctx=new RelationshipTypeContext(this,this._ctx,this.state);this.enterRule(localctx,246,CypherParser.RULE_relationshipType);try{this.enterOuterAlt(localctx,1);this.state=1782;this.match(CypherParser.T__1);this.state=1783;this.relTypeName();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RelationshipTypeOptionalColonContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_relationshipTypeOptionalColon;return this;}RelationshipTypeOptionalColonContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RelationshipTypeOptionalColonContext.prototype.constructor=RelationshipTypeOptionalColonContext;RelationshipTypeOptionalColonContext.prototype.relTypeName=function(){return this.getTypedRuleContext(RelTypeNameContext,0);};RelationshipTypeOptionalColonContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterRelationshipTypeOptionalColon(this);}};RelationshipTypeOptionalColonContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitRelationshipTypeOptionalColon(this);}};CypherParser.RelationshipTypeOptionalColonContext=RelationshipTypeOptionalColonContext;CypherParser.prototype.relationshipTypeOptionalColon=function(){var localctx=new RelationshipTypeOptionalColonContext(this,this._ctx,this.state);this.enterRule(localctx,248,CypherParser.RULE_relationshipTypeOptionalColon);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1786;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.T__1){this.state=1785;this.match(CypherParser.T__1);}this.state=1788;this.relTypeName();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function NodeLabelsContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_nodeLabels;return this;}NodeLabelsContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);NodeLabelsContext.prototype.constructor=NodeLabelsContext;NodeLabelsContext.prototype.nodeLabel=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(NodeLabelContext);}else{return this.getTypedRuleContext(NodeLabelContext,i);}};NodeLabelsContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};NodeLabelsContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterNodeLabels(this);}};NodeLabelsContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitNodeLabels(this);}};CypherParser.NodeLabelsContext=NodeLabelsContext;CypherParser.prototype.nodeLabels=function(){var localctx=new NodeLabelsContext(this,this._ctx,this.state);this.enterRule(localctx,250,CypherParser.RULE_nodeLabels);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1790;this.nodeLabel();this.state=1797;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,242,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1792;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1791;this.match(CypherParser.SP);}this.state=1794;this.nodeLabel();}this.state=1799;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,242,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function NodeLabelContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_nodeLabel;return this;}NodeLabelContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);NodeLabelContext.prototype.constructor=NodeLabelContext;NodeLabelContext.prototype.labelName=function(){return this.getTypedRuleContext(LabelNameContext,0);};NodeLabelContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterNodeLabel(this);}};NodeLabelContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitNodeLabel(this);}};CypherParser.NodeLabelContext=NodeLabelContext;CypherParser.prototype.nodeLabel=function(){var localctx=new NodeLabelContext(this,this._ctx,this.state);this.enterRule(localctx,252,CypherParser.RULE_nodeLabel);try{this.enterOuterAlt(localctx,1);this.state=1800;this.match(CypherParser.T__1);this.state=1801;this.labelName();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RangeLiteralContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_rangeLiteral;return this;}RangeLiteralContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RangeLiteralContext.prototype.constructor=RangeLiteralContext;RangeLiteralContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};RangeLiteralContext.prototype.integerLiteral=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(IntegerLiteralContext);}else{return this.getTypedRuleContext(IntegerLiteralContext,i);}};RangeLiteralContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterRangeLiteral(this);}};RangeLiteralContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitRangeLiteral(this);}};CypherParser.RangeLiteralContext=RangeLiteralContext;CypherParser.prototype.rangeLiteral=function(){var localctx=new RangeLiteralContext(this,this._ctx,this.state);this.enterRule(localctx,254,CypherParser.RULE_rangeLiteral);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1803;this.match(CypherParser.T__22);this.state=1805;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1804;this.match(CypherParser.SP);}this.state=1811;this._errHandler.sync(this);_la=this._input.LA(1);if((_la-135&~0x1f)==0&&(1<<_la-135&(1<<CypherParser.HexInteger-135|1<<CypherParser.DecimalInteger-135|1<<CypherParser.OctalInteger-135))!==0){this.state=1807;this.integerLiteral();this.state=1809;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1808;this.match(CypherParser.SP);}}this.state=1823;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.T__23){this.state=1813;this.match(CypherParser.T__23);this.state=1815;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1814;this.match(CypherParser.SP);}this.state=1821;this._errHandler.sync(this);_la=this._input.LA(1);if((_la-135&~0x1f)==0&&(1<<_la-135&(1<<CypherParser.HexInteger-135|1<<CypherParser.DecimalInteger-135|1<<CypherParser.OctalInteger-135))!==0){this.state=1817;this.integerLiteral();this.state=1819;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1818;this.match(CypherParser.SP);}}}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function LabelNameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_labelName;return this;}LabelNameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);LabelNameContext.prototype.constructor=LabelNameContext;LabelNameContext.prototype.symbolicName=function(){return this.getTypedRuleContext(SymbolicNameContext,0);};LabelNameContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterLabelName(this);}};LabelNameContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitLabelName(this);}};CypherParser.LabelNameContext=LabelNameContext;CypherParser.prototype.labelName=function(){var localctx=new LabelNameContext(this,this._ctx,this.state);this.enterRule(localctx,256,CypherParser.RULE_labelName);try{this.enterOuterAlt(localctx,1);this.state=1825;this.symbolicName();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RelTypeNameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_relTypeName;return this;}RelTypeNameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RelTypeNameContext.prototype.constructor=RelTypeNameContext;RelTypeNameContext.prototype.symbolicName=function(){return this.getTypedRuleContext(SymbolicNameContext,0);};RelTypeNameContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterRelTypeName(this);}};RelTypeNameContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitRelTypeName(this);}};CypherParser.RelTypeNameContext=RelTypeNameContext;CypherParser.prototype.relTypeName=function(){var localctx=new RelTypeNameContext(this,this._ctx,this.state);this.enterRule(localctx,258,CypherParser.RULE_relTypeName);try{this.enterOuterAlt(localctx,1);this.state=1827;this.symbolicName();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ExpressionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_expression;return this;}ExpressionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ExpressionContext.prototype.constructor=ExpressionContext;ExpressionContext.prototype.orExpression=function(){return this.getTypedRuleContext(OrExpressionContext,0);};ExpressionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterExpression(this);}};ExpressionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitExpression(this);}};CypherParser.ExpressionContext=ExpressionContext;CypherParser.prototype.expression=function(){var localctx=new ExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,260,CypherParser.RULE_expression);try{this.enterOuterAlt(localctx,1);this.state=1829;this.orExpression();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function OrExpressionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_orExpression;return this;}OrExpressionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);OrExpressionContext.prototype.constructor=OrExpressionContext;OrExpressionContext.prototype.xorExpression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(XorExpressionContext);}else{return this.getTypedRuleContext(XorExpressionContext,i);}};OrExpressionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};OrExpressionContext.prototype.OR=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.OR);}else{return this.getToken(CypherParser.OR,i);}};OrExpressionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterOrExpression(this);}};OrExpressionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitOrExpression(this);}};CypherParser.OrExpressionContext=OrExpressionContext;CypherParser.prototype.orExpression=function(){var localctx=new OrExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,262,CypherParser.RULE_orExpression);try{this.enterOuterAlt(localctx,1);this.state=1831;this.xorExpression();this.state=1838;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,250,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1832;this.match(CypherParser.SP);this.state=1833;this.match(CypherParser.OR);this.state=1834;this.match(CypherParser.SP);this.state=1835;this.xorExpression();}this.state=1840;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,250,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function XorExpressionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_xorExpression;return this;}XorExpressionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);XorExpressionContext.prototype.constructor=XorExpressionContext;XorExpressionContext.prototype.andExpression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(AndExpressionContext);}else{return this.getTypedRuleContext(AndExpressionContext,i);}};XorExpressionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};XorExpressionContext.prototype.XOR=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.XOR);}else{return this.getToken(CypherParser.XOR,i);}};XorExpressionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterXorExpression(this);}};XorExpressionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitXorExpression(this);}};CypherParser.XorExpressionContext=XorExpressionContext;CypherParser.prototype.xorExpression=function(){var localctx=new XorExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,264,CypherParser.RULE_xorExpression);try{this.enterOuterAlt(localctx,1);this.state=1841;this.andExpression();this.state=1848;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,251,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1842;this.match(CypherParser.SP);this.state=1843;this.match(CypherParser.XOR);this.state=1844;this.match(CypherParser.SP);this.state=1845;this.andExpression();}this.state=1850;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,251,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function AndExpressionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_andExpression;return this;}AndExpressionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);AndExpressionContext.prototype.constructor=AndExpressionContext;AndExpressionContext.prototype.notExpression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(NotExpressionContext);}else{return this.getTypedRuleContext(NotExpressionContext,i);}};AndExpressionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};AndExpressionContext.prototype.AND=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.AND);}else{return this.getToken(CypherParser.AND,i);}};AndExpressionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterAndExpression(this);}};AndExpressionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitAndExpression(this);}};CypherParser.AndExpressionContext=AndExpressionContext;CypherParser.prototype.andExpression=function(){var localctx=new AndExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,266,CypherParser.RULE_andExpression);try{this.enterOuterAlt(localctx,1);this.state=1851;this.notExpression();this.state=1858;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,252,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1852;this.match(CypherParser.SP);this.state=1853;this.match(CypherParser.AND);this.state=1854;this.match(CypherParser.SP);this.state=1855;this.notExpression();}this.state=1860;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,252,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function NotExpressionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_notExpression;return this;}NotExpressionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);NotExpressionContext.prototype.constructor=NotExpressionContext;NotExpressionContext.prototype.comparisonExpression=function(){return this.getTypedRuleContext(ComparisonExpressionContext,0);};NotExpressionContext.prototype.NOT=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.NOT);}else{return this.getToken(CypherParser.NOT,i);}};NotExpressionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};NotExpressionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterNotExpression(this);}};NotExpressionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitNotExpression(this);}};CypherParser.NotExpressionContext=NotExpressionContext;CypherParser.prototype.notExpression=function(){var localctx=new NotExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,268,CypherParser.RULE_notExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1867;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,254,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1861;this.match(CypherParser.NOT);this.state=1863;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1862;this.match(CypherParser.SP);}}this.state=1869;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,254,this._ctx);}this.state=1870;this.comparisonExpression();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ComparisonExpressionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_comparisonExpression;return this;}ComparisonExpressionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ComparisonExpressionContext.prototype.constructor=ComparisonExpressionContext;ComparisonExpressionContext.prototype.addOrSubtractExpression=function(){return this.getTypedRuleContext(AddOrSubtractExpressionContext,0);};ComparisonExpressionContext.prototype.partialComparisonExpression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(PartialComparisonExpressionContext);}else{return this.getTypedRuleContext(PartialComparisonExpressionContext,i);}};ComparisonExpressionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};ComparisonExpressionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterComparisonExpression(this);}};ComparisonExpressionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitComparisonExpression(this);}};CypherParser.ComparisonExpressionContext=ComparisonExpressionContext;CypherParser.prototype.comparisonExpression=function(){var localctx=new ComparisonExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,270,CypherParser.RULE_comparisonExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1872;this.addOrSubtractExpression();this.state=1879;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,256,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1874;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1873;this.match(CypherParser.SP);}this.state=1876;this.partialComparisonExpression();}this.state=1881;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,256,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function AddOrSubtractExpressionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_addOrSubtractExpression;return this;}AddOrSubtractExpressionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);AddOrSubtractExpressionContext.prototype.constructor=AddOrSubtractExpressionContext;AddOrSubtractExpressionContext.prototype.multiplyDivideModuloExpression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(MultiplyDivideModuloExpressionContext);}else{return this.getTypedRuleContext(MultiplyDivideModuloExpressionContext,i);}};AddOrSubtractExpressionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};AddOrSubtractExpressionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterAddOrSubtractExpression(this);}};AddOrSubtractExpressionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitAddOrSubtractExpression(this);}};CypherParser.AddOrSubtractExpressionContext=AddOrSubtractExpressionContext;CypherParser.prototype.addOrSubtractExpression=function(){var localctx=new AddOrSubtractExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,272,CypherParser.RULE_addOrSubtractExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1882;this.multiplyDivideModuloExpression();this.state=1901;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,262,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1899;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,261,this._ctx);switch(la_){case 1:this.state=1884;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1883;this.match(CypherParser.SP);}this.state=1886;this.match(CypherParser.T__12);this.state=1888;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1887;this.match(CypherParser.SP);}this.state=1890;this.multiplyDivideModuloExpression();break;case 2:this.state=1892;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1891;this.match(CypherParser.SP);}this.state=1894;this.match(CypherParser.T__2);this.state=1896;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1895;this.match(CypherParser.SP);}this.state=1898;this.multiplyDivideModuloExpression();break;}}this.state=1903;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,262,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function MultiplyDivideModuloExpressionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_multiplyDivideModuloExpression;return this;}MultiplyDivideModuloExpressionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);MultiplyDivideModuloExpressionContext.prototype.constructor=MultiplyDivideModuloExpressionContext;MultiplyDivideModuloExpressionContext.prototype.powerOfExpression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(PowerOfExpressionContext);}else{return this.getTypedRuleContext(PowerOfExpressionContext,i);}};MultiplyDivideModuloExpressionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};MultiplyDivideModuloExpressionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterMultiplyDivideModuloExpression(this);}};MultiplyDivideModuloExpressionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitMultiplyDivideModuloExpression(this);}};CypherParser.MultiplyDivideModuloExpressionContext=MultiplyDivideModuloExpressionContext;CypherParser.prototype.multiplyDivideModuloExpression=function(){var localctx=new MultiplyDivideModuloExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,274,CypherParser.RULE_multiplyDivideModuloExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1904;this.powerOfExpression();this.state=1931;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,270,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1929;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,269,this._ctx);switch(la_){case 1:this.state=1906;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1905;this.match(CypherParser.SP);}this.state=1908;this.match(CypherParser.T__22);this.state=1910;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1909;this.match(CypherParser.SP);}this.state=1912;this.powerOfExpression();break;case 2:this.state=1914;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1913;this.match(CypherParser.SP);}this.state=1916;this.match(CypherParser.T__5);this.state=1918;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1917;this.match(CypherParser.SP);}this.state=1920;this.powerOfExpression();break;case 3:this.state=1922;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1921;this.match(CypherParser.SP);}this.state=1924;this.match(CypherParser.T__24);this.state=1926;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1925;this.match(CypherParser.SP);}this.state=1928;this.powerOfExpression();break;}}this.state=1933;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,270,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PowerOfExpressionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_powerOfExpression;return this;}PowerOfExpressionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PowerOfExpressionContext.prototype.constructor=PowerOfExpressionContext;PowerOfExpressionContext.prototype.unaryAddOrSubtractExpression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(UnaryAddOrSubtractExpressionContext);}else{return this.getTypedRuleContext(UnaryAddOrSubtractExpressionContext,i);}};PowerOfExpressionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};PowerOfExpressionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterPowerOfExpression(this);}};PowerOfExpressionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitPowerOfExpression(this);}};CypherParser.PowerOfExpressionContext=PowerOfExpressionContext;CypherParser.prototype.powerOfExpression=function(){var localctx=new PowerOfExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,276,CypherParser.RULE_powerOfExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1934;this.unaryAddOrSubtractExpression();this.state=1945;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,273,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=1936;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1935;this.match(CypherParser.SP);}this.state=1938;this.match(CypherParser.T__25);this.state=1940;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1939;this.match(CypherParser.SP);}this.state=1942;this.unaryAddOrSubtractExpression();}this.state=1947;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,273,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function UnaryAddOrSubtractExpressionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_unaryAddOrSubtractExpression;return this;}UnaryAddOrSubtractExpressionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);UnaryAddOrSubtractExpressionContext.prototype.constructor=UnaryAddOrSubtractExpressionContext;UnaryAddOrSubtractExpressionContext.prototype.stringListNullOperatorExpression=function(){return this.getTypedRuleContext(StringListNullOperatorExpressionContext,0);};UnaryAddOrSubtractExpressionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};UnaryAddOrSubtractExpressionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterUnaryAddOrSubtractExpression(this);}};UnaryAddOrSubtractExpressionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitUnaryAddOrSubtractExpression(this);}};CypherParser.UnaryAddOrSubtractExpressionContext=UnaryAddOrSubtractExpressionContext;CypherParser.prototype.unaryAddOrSubtractExpression=function(){var localctx=new UnaryAddOrSubtractExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,278,CypherParser.RULE_unaryAddOrSubtractExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1954;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CypherParser.T__2||_la===CypherParser.T__12){this.state=1948;_la=this._input.LA(1);if(!(_la===CypherParser.T__2||_la===CypherParser.T__12)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}this.state=1950;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1949;this.match(CypherParser.SP);}this.state=1956;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=1957;this.stringListNullOperatorExpression();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function StringListNullOperatorExpressionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_stringListNullOperatorExpression;return this;}StringListNullOperatorExpressionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);StringListNullOperatorExpressionContext.prototype.constructor=StringListNullOperatorExpressionContext;StringListNullOperatorExpressionContext.prototype.propertyOrLabelsExpression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(PropertyOrLabelsExpressionContext);}else{return this.getTypedRuleContext(PropertyOrLabelsExpressionContext,i);}};StringListNullOperatorExpressionContext.prototype.expression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExpressionContext);}else{return this.getTypedRuleContext(ExpressionContext,i);}};StringListNullOperatorExpressionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};StringListNullOperatorExpressionContext.prototype.IS=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.IS);}else{return this.getToken(CypherParser.IS,i);}};StringListNullOperatorExpressionContext.prototype.NULL=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.NULL);}else{return this.getToken(CypherParser.NULL,i);}};StringListNullOperatorExpressionContext.prototype.NOT=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.NOT);}else{return this.getToken(CypherParser.NOT,i);}};StringListNullOperatorExpressionContext.prototype.IN=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.IN);}else{return this.getToken(CypherParser.IN,i);}};StringListNullOperatorExpressionContext.prototype.STARTS=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.STARTS);}else{return this.getToken(CypherParser.STARTS,i);}};StringListNullOperatorExpressionContext.prototype.WITH=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.WITH);}else{return this.getToken(CypherParser.WITH,i);}};StringListNullOperatorExpressionContext.prototype.ENDS=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.ENDS);}else{return this.getToken(CypherParser.ENDS,i);}};StringListNullOperatorExpressionContext.prototype.CONTAINS=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.CONTAINS);}else{return this.getToken(CypherParser.CONTAINS,i);}};StringListNullOperatorExpressionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterStringListNullOperatorExpression(this);}};StringListNullOperatorExpressionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitStringListNullOperatorExpression(this);}};CypherParser.StringListNullOperatorExpressionContext=StringListNullOperatorExpressionContext;CypherParser.prototype.stringListNullOperatorExpression=function(){var localctx=new StringListNullOperatorExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,280,CypherParser.RULE_stringListNullOperatorExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=1959;this.propertyOrLabelsExpression();this.state=2013;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,284,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=2011;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,283,this._ctx);switch(la_){case 1:this.state=1961;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1960;this.match(CypherParser.SP);}this.state=1963;this.match(CypherParser.T__16);this.state=1964;this.expression();this.state=1965;this.match(CypherParser.T__17);break;case 2:this.state=1968;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1967;this.match(CypherParser.SP);}this.state=1970;this.match(CypherParser.T__16);this.state=1972;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<CypherParser.T__2|1<<CypherParser.T__12|1<<CypherParser.T__13|1<<CypherParser.T__16|1<<CypherParser.T__18))!==0||(_la-34&~0x1f)==0&&(1<<_la-34&(1<<CypherParser.T__33-34|1<<CypherParser.CYPHER-34|1<<CypherParser.EXPLAIN-34|1<<CypherParser.PROFILE-34|1<<CypherParser.USING-34|1<<CypherParser.PERIODIC-34|1<<CypherParser.COMMIT-34|1<<CypherParser.UNION-34|1<<CypherParser.ALL-34|1<<CypherParser.CREATE-34|1<<CypherParser.DROP-34|1<<CypherParser.INDEX-34|1<<CypherParser.ON-34))!==0||(_la-66&~0x1f)==0&&(1<<_la-66&(1<<CypherParser.CONSTRAINT-66|1<<CypherParser.ASSERT-66|1<<CypherParser.IS-66|1<<CypherParser.UNIQUE-66|1<<CypherParser.EXISTS-66|1<<CypherParser.LOAD-66|1<<CypherParser.CSV-66|1<<CypherParser.WITH-66|1<<CypherParser.HEADERS-66|1<<CypherParser.FROM-66|1<<CypherParser.AS-66|1<<CypherParser.FIELDTERMINATOR-66|1<<CypherParser.OPTIONAL-66|1<<CypherParser.MATCH-66|1<<CypherParser.UNWIND-66|1<<CypherParser.MERGE-66|1<<CypherParser.SET-66|1<<CypherParser.DETACH-66|1<<CypherParser.DELETE-66|1<<CypherParser.REMOVE-66|1<<CypherParser.FOREACH-66|1<<CypherParser.IN-66|1<<CypherParser.DISTINCT-66|1<<CypherParser.RETURN-66|1<<CypherParser.ORDER-66|1<<CypherParser.BY-66|1<<CypherParser.L_SKIP-66|1<<CypherParser.LIMIT-66|1<<CypherParser.ASCENDING-66|1<<CypherParser.ASC-66|1<<CypherParser.DESCENDING-66|1<<CypherParser.DESC-66))!==0||(_la-98&~0x1f)==0&&(1<<_la-98&(1<<CypherParser.JOIN-98|1<<CypherParser.SCAN-98|1<<CypherParser.START-98|1<<CypherParser.NODE-98|1<<CypherParser.RELATIONSHIP-98|1<<CypherParser.REL-98|1<<CypherParser.WHERE-98|1<<CypherParser.SHORTESTPATH-98|1<<CypherParser.ALLSHORTESTPATHS-98|1<<CypherParser.OR-98|1<<CypherParser.XOR-98|1<<CypherParser.AND-98|1<<CypherParser.NOT-98|1<<CypherParser.STARTS-98|1<<CypherParser.ENDS-98|1<<CypherParser.CONTAINS-98|1<<CypherParser.NULL-98|1<<CypherParser.COUNT-98|1<<CypherParser.FILTER-98|1<<CypherParser.EXTRACT-98|1<<CypherParser.ANY-98|1<<CypherParser.NONE-98|1<<CypherParser.SINGLE-98|1<<CypherParser.TRUE-98|1<<CypherParser.FALSE-98|1<<CypherParser.REDUCE-98|1<<CypherParser.CASE-98|1<<CypherParser.ELSE-98|1<<CypherParser.END-98|1<<CypherParser.WHEN-98|1<<CypherParser.THEN-98|1<<CypherParser.CALL-98))!==0||(_la-130&~0x1f)==0&&(1<<_la-130&(1<<CypherParser.YIELD-130|1<<CypherParser.KEY-130|1<<CypherParser.StringLiteral-130|1<<CypherParser.HexInteger-130|1<<CypherParser.DecimalInteger-130|1<<CypherParser.OctalInteger-130|1<<CypherParser.HexLetter-130|1<<CypherParser.ExponentDecimalReal-130|1<<CypherParser.RegularDecimalReal-130|1<<CypherParser.UnescapedSymbolicName-130|1<<CypherParser.EscapedSymbolicName-130))!==0){this.state=1971;this.expression();}this.state=1974;this.match(CypherParser.T__23);this.state=1976;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<CypherParser.T__2|1<<CypherParser.T__12|1<<CypherParser.T__13|1<<CypherParser.T__16|1<<CypherParser.T__18))!==0||(_la-34&~0x1f)==0&&(1<<_la-34&(1<<CypherParser.T__33-34|1<<CypherParser.CYPHER-34|1<<CypherParser.EXPLAIN-34|1<<CypherParser.PROFILE-34|1<<CypherParser.USING-34|1<<CypherParser.PERIODIC-34|1<<CypherParser.COMMIT-34|1<<CypherParser.UNION-34|1<<CypherParser.ALL-34|1<<CypherParser.CREATE-34|1<<CypherParser.DROP-34|1<<CypherParser.INDEX-34|1<<CypherParser.ON-34))!==0||(_la-66&~0x1f)==0&&(1<<_la-66&(1<<CypherParser.CONSTRAINT-66|1<<CypherParser.ASSERT-66|1<<CypherParser.IS-66|1<<CypherParser.UNIQUE-66|1<<CypherParser.EXISTS-66|1<<CypherParser.LOAD-66|1<<CypherParser.CSV-66|1<<CypherParser.WITH-66|1<<CypherParser.HEADERS-66|1<<CypherParser.FROM-66|1<<CypherParser.AS-66|1<<CypherParser.FIELDTERMINATOR-66|1<<CypherParser.OPTIONAL-66|1<<CypherParser.MATCH-66|1<<CypherParser.UNWIND-66|1<<CypherParser.MERGE-66|1<<CypherParser.SET-66|1<<CypherParser.DETACH-66|1<<CypherParser.DELETE-66|1<<CypherParser.REMOVE-66|1<<CypherParser.FOREACH-66|1<<CypherParser.IN-66|1<<CypherParser.DISTINCT-66|1<<CypherParser.RETURN-66|1<<CypherParser.ORDER-66|1<<CypherParser.BY-66|1<<CypherParser.L_SKIP-66|1<<CypherParser.LIMIT-66|1<<CypherParser.ASCENDING-66|1<<CypherParser.ASC-66|1<<CypherParser.DESCENDING-66|1<<CypherParser.DESC-66))!==0||(_la-98&~0x1f)==0&&(1<<_la-98&(1<<CypherParser.JOIN-98|1<<CypherParser.SCAN-98|1<<CypherParser.START-98|1<<CypherParser.NODE-98|1<<CypherParser.RELATIONSHIP-98|1<<CypherParser.REL-98|1<<CypherParser.WHERE-98|1<<CypherParser.SHORTESTPATH-98|1<<CypherParser.ALLSHORTESTPATHS-98|1<<CypherParser.OR-98|1<<CypherParser.XOR-98|1<<CypherParser.AND-98|1<<CypherParser.NOT-98|1<<CypherParser.STARTS-98|1<<CypherParser.ENDS-98|1<<CypherParser.CONTAINS-98|1<<CypherParser.NULL-98|1<<CypherParser.COUNT-98|1<<CypherParser.FILTER-98|1<<CypherParser.EXTRACT-98|1<<CypherParser.ANY-98|1<<CypherParser.NONE-98|1<<CypherParser.SINGLE-98|1<<CypherParser.TRUE-98|1<<CypherParser.FALSE-98|1<<CypherParser.REDUCE-98|1<<CypherParser.CASE-98|1<<CypherParser.ELSE-98|1<<CypherParser.END-98|1<<CypherParser.WHEN-98|1<<CypherParser.THEN-98|1<<CypherParser.CALL-98))!==0||(_la-130&~0x1f)==0&&(1<<_la-130&(1<<CypherParser.YIELD-130|1<<CypherParser.KEY-130|1<<CypherParser.StringLiteral-130|1<<CypherParser.HexInteger-130|1<<CypherParser.DecimalInteger-130|1<<CypherParser.OctalInteger-130|1<<CypherParser.HexLetter-130|1<<CypherParser.ExponentDecimalReal-130|1<<CypherParser.RegularDecimalReal-130|1<<CypherParser.UnescapedSymbolicName-130|1<<CypherParser.EscapedSymbolicName-130))!==0){this.state=1975;this.expression();}this.state=1978;this.match(CypherParser.T__17);break;case 3:this.state=1995;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,281,this._ctx);switch(la_){case 1:this.state=1980;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1979;this.match(CypherParser.SP);}this.state=1982;this.match(CypherParser.T__26);break;case 2:this.state=1983;this.match(CypherParser.SP);this.state=1984;this.match(CypherParser.IN);break;case 3:this.state=1985;this.match(CypherParser.SP);this.state=1986;this.match(CypherParser.STARTS);this.state=1987;this.match(CypherParser.SP);this.state=1988;this.match(CypherParser.WITH);break;case 4:this.state=1989;this.match(CypherParser.SP);this.state=1990;this.match(CypherParser.ENDS);this.state=1991;this.match(CypherParser.SP);this.state=1992;this.match(CypherParser.WITH);break;case 5:this.state=1993;this.match(CypherParser.SP);this.state=1994;this.match(CypherParser.CONTAINS);break;}this.state=1998;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=1997;this.match(CypherParser.SP);}this.state=2000;this.propertyOrLabelsExpression();break;case 4:this.state=2001;this.match(CypherParser.SP);this.state=2002;this.match(CypherParser.IS);this.state=2003;this.match(CypherParser.SP);this.state=2004;this.match(CypherParser.NULL);break;case 5:this.state=2005;this.match(CypherParser.SP);this.state=2006;this.match(CypherParser.IS);this.state=2007;this.match(CypherParser.SP);this.state=2008;this.match(CypherParser.NOT);this.state=2009;this.match(CypherParser.SP);this.state=2010;this.match(CypherParser.NULL);break;}}this.state=2015;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,284,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PropertyOrLabelsExpressionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_propertyOrLabelsExpression;return this;}PropertyOrLabelsExpressionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PropertyOrLabelsExpressionContext.prototype.constructor=PropertyOrLabelsExpressionContext;PropertyOrLabelsExpressionContext.prototype.atom=function(){return this.getTypedRuleContext(AtomContext,0);};PropertyOrLabelsExpressionContext.prototype.propertyLookup=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(PropertyLookupContext);}else{return this.getTypedRuleContext(PropertyLookupContext,i);}};PropertyOrLabelsExpressionContext.prototype.nodeLabels=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(NodeLabelsContext);}else{return this.getTypedRuleContext(NodeLabelsContext,i);}};PropertyOrLabelsExpressionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};PropertyOrLabelsExpressionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterPropertyOrLabelsExpression(this);}};PropertyOrLabelsExpressionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitPropertyOrLabelsExpression(this);}};CypherParser.PropertyOrLabelsExpressionContext=PropertyOrLabelsExpressionContext;CypherParser.prototype.propertyOrLabelsExpression=function(){var localctx=new PropertyOrLabelsExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,282,CypherParser.RULE_propertyOrLabelsExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2016;this.atom();this.state=2026;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,287,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=2018;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2017;this.match(CypherParser.SP);}this.state=2022;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.T__6:this.state=2020;this.propertyLookup();break;case CypherParser.T__1:this.state=2021;this.nodeLabels();break;default:throw new antlr4.error.NoViableAltException(this);}}this.state=2028;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,287,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function FilterFunctionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_filterFunction;return this;}FilterFunctionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);FilterFunctionContext.prototype.constructor=FilterFunctionContext;FilterFunctionContext.prototype.filterFunctionName=function(){return this.getTypedRuleContext(FilterFunctionNameContext,0);};FilterFunctionContext.prototype.filterExpression=function(){return this.getTypedRuleContext(FilterExpressionContext,0);};FilterFunctionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};FilterFunctionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterFilterFunction(this);}};FilterFunctionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitFilterFunction(this);}};CypherParser.FilterFunctionContext=FilterFunctionContext;CypherParser.prototype.filterFunction=function(){var localctx=new FilterFunctionContext(this,this._ctx,this.state);this.enterRule(localctx,284,CypherParser.RULE_filterFunction);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2029;this.filterFunctionName();this.state=2031;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2030;this.match(CypherParser.SP);}this.state=2033;this.match(CypherParser.T__18);this.state=2035;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2034;this.match(CypherParser.SP);}this.state=2037;this.filterExpression();this.state=2039;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2038;this.match(CypherParser.SP);}this.state=2041;this.match(CypherParser.T__19);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function FilterFunctionNameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_filterFunctionName;return this;}FilterFunctionNameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);FilterFunctionNameContext.prototype.constructor=FilterFunctionNameContext;FilterFunctionNameContext.prototype.FILTER=function(){return this.getToken(CypherParser.FILTER,0);};FilterFunctionNameContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterFilterFunctionName(this);}};FilterFunctionNameContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitFilterFunctionName(this);}};CypherParser.FilterFunctionNameContext=FilterFunctionNameContext;CypherParser.prototype.filterFunctionName=function(){var localctx=new FilterFunctionNameContext(this,this._ctx,this.state);this.enterRule(localctx,286,CypherParser.RULE_filterFunctionName);try{this.enterOuterAlt(localctx,1);this.state=2043;this.match(CypherParser.FILTER);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ExistsFunctionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_existsFunction;return this;}ExistsFunctionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ExistsFunctionContext.prototype.constructor=ExistsFunctionContext;ExistsFunctionContext.prototype.existsFunctionName=function(){return this.getTypedRuleContext(ExistsFunctionNameContext,0);};ExistsFunctionContext.prototype.expression=function(){return this.getTypedRuleContext(ExpressionContext,0);};ExistsFunctionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};ExistsFunctionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterExistsFunction(this);}};ExistsFunctionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitExistsFunction(this);}};CypherParser.ExistsFunctionContext=ExistsFunctionContext;CypherParser.prototype.existsFunction=function(){var localctx=new ExistsFunctionContext(this,this._ctx,this.state);this.enterRule(localctx,288,CypherParser.RULE_existsFunction);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2045;this.existsFunctionName();this.state=2047;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2046;this.match(CypherParser.SP);}this.state=2049;this.match(CypherParser.T__18);this.state=2051;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2050;this.match(CypherParser.SP);}this.state=2053;this.expression();this.state=2055;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2054;this.match(CypherParser.SP);}this.state=2057;this.match(CypherParser.T__19);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ExistsFunctionNameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_existsFunctionName;return this;}ExistsFunctionNameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ExistsFunctionNameContext.prototype.constructor=ExistsFunctionNameContext;ExistsFunctionNameContext.prototype.EXISTS=function(){return this.getToken(CypherParser.EXISTS,0);};ExistsFunctionNameContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterExistsFunctionName(this);}};ExistsFunctionNameContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitExistsFunctionName(this);}};CypherParser.ExistsFunctionNameContext=ExistsFunctionNameContext;CypherParser.prototype.existsFunctionName=function(){var localctx=new ExistsFunctionNameContext(this,this._ctx,this.state);this.enterRule(localctx,290,CypherParser.RULE_existsFunctionName);try{this.enterOuterAlt(localctx,1);this.state=2059;this.match(CypherParser.EXISTS);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function AllFunctionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_allFunction;return this;}AllFunctionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);AllFunctionContext.prototype.constructor=AllFunctionContext;AllFunctionContext.prototype.allFunctionName=function(){return this.getTypedRuleContext(AllFunctionNameContext,0);};AllFunctionContext.prototype.filterExpression=function(){return this.getTypedRuleContext(FilterExpressionContext,0);};AllFunctionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};AllFunctionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterAllFunction(this);}};AllFunctionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitAllFunction(this);}};CypherParser.AllFunctionContext=AllFunctionContext;CypherParser.prototype.allFunction=function(){var localctx=new AllFunctionContext(this,this._ctx,this.state);this.enterRule(localctx,292,CypherParser.RULE_allFunction);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2061;this.allFunctionName();this.state=2063;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2062;this.match(CypherParser.SP);}this.state=2065;this.match(CypherParser.T__18);this.state=2067;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2066;this.match(CypherParser.SP);}this.state=2069;this.filterExpression();this.state=2071;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2070;this.match(CypherParser.SP);}this.state=2073;this.match(CypherParser.T__19);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function AllFunctionNameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_allFunctionName;return this;}AllFunctionNameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);AllFunctionNameContext.prototype.constructor=AllFunctionNameContext;AllFunctionNameContext.prototype.ALL=function(){return this.getToken(CypherParser.ALL,0);};AllFunctionNameContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterAllFunctionName(this);}};AllFunctionNameContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitAllFunctionName(this);}};CypherParser.AllFunctionNameContext=AllFunctionNameContext;CypherParser.prototype.allFunctionName=function(){var localctx=new AllFunctionNameContext(this,this._ctx,this.state);this.enterRule(localctx,294,CypherParser.RULE_allFunctionName);try{this.enterOuterAlt(localctx,1);this.state=2075;this.match(CypherParser.ALL);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function AnyFunctionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_anyFunction;return this;}AnyFunctionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);AnyFunctionContext.prototype.constructor=AnyFunctionContext;AnyFunctionContext.prototype.anyFunctionName=function(){return this.getTypedRuleContext(AnyFunctionNameContext,0);};AnyFunctionContext.prototype.filterExpression=function(){return this.getTypedRuleContext(FilterExpressionContext,0);};AnyFunctionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};AnyFunctionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterAnyFunction(this);}};AnyFunctionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitAnyFunction(this);}};CypherParser.AnyFunctionContext=AnyFunctionContext;CypherParser.prototype.anyFunction=function(){var localctx=new AnyFunctionContext(this,this._ctx,this.state);this.enterRule(localctx,296,CypherParser.RULE_anyFunction);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2077;this.anyFunctionName();this.state=2079;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2078;this.match(CypherParser.SP);}this.state=2081;this.match(CypherParser.T__18);this.state=2083;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2082;this.match(CypherParser.SP);}this.state=2085;this.filterExpression();this.state=2087;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2086;this.match(CypherParser.SP);}this.state=2089;this.match(CypherParser.T__19);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function AnyFunctionNameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_anyFunctionName;return this;}AnyFunctionNameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);AnyFunctionNameContext.prototype.constructor=AnyFunctionNameContext;AnyFunctionNameContext.prototype.ANY=function(){return this.getToken(CypherParser.ANY,0);};AnyFunctionNameContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterAnyFunctionName(this);}};AnyFunctionNameContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitAnyFunctionName(this);}};CypherParser.AnyFunctionNameContext=AnyFunctionNameContext;CypherParser.prototype.anyFunctionName=function(){var localctx=new AnyFunctionNameContext(this,this._ctx,this.state);this.enterRule(localctx,298,CypherParser.RULE_anyFunctionName);try{this.enterOuterAlt(localctx,1);this.state=2091;this.match(CypherParser.ANY);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function NoneFunctionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_noneFunction;return this;}NoneFunctionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);NoneFunctionContext.prototype.constructor=NoneFunctionContext;NoneFunctionContext.prototype.noneFunctionName=function(){return this.getTypedRuleContext(NoneFunctionNameContext,0);};NoneFunctionContext.prototype.filterExpression=function(){return this.getTypedRuleContext(FilterExpressionContext,0);};NoneFunctionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};NoneFunctionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterNoneFunction(this);}};NoneFunctionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitNoneFunction(this);}};CypherParser.NoneFunctionContext=NoneFunctionContext;CypherParser.prototype.noneFunction=function(){var localctx=new NoneFunctionContext(this,this._ctx,this.state);this.enterRule(localctx,300,CypherParser.RULE_noneFunction);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2093;this.noneFunctionName();this.state=2095;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2094;this.match(CypherParser.SP);}this.state=2097;this.match(CypherParser.T__18);this.state=2099;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2098;this.match(CypherParser.SP);}this.state=2101;this.filterExpression();this.state=2103;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2102;this.match(CypherParser.SP);}this.state=2105;this.match(CypherParser.T__19);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function NoneFunctionNameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_noneFunctionName;return this;}NoneFunctionNameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);NoneFunctionNameContext.prototype.constructor=NoneFunctionNameContext;NoneFunctionNameContext.prototype.NONE=function(){return this.getToken(CypherParser.NONE,0);};NoneFunctionNameContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterNoneFunctionName(this);}};NoneFunctionNameContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitNoneFunctionName(this);}};CypherParser.NoneFunctionNameContext=NoneFunctionNameContext;CypherParser.prototype.noneFunctionName=function(){var localctx=new NoneFunctionNameContext(this,this._ctx,this.state);this.enterRule(localctx,302,CypherParser.RULE_noneFunctionName);try{this.enterOuterAlt(localctx,1);this.state=2107;this.match(CypherParser.NONE);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function SingleFunctionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_singleFunction;return this;}SingleFunctionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);SingleFunctionContext.prototype.constructor=SingleFunctionContext;SingleFunctionContext.prototype.singleFunctionName=function(){return this.getTypedRuleContext(SingleFunctionNameContext,0);};SingleFunctionContext.prototype.filterExpression=function(){return this.getTypedRuleContext(FilterExpressionContext,0);};SingleFunctionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};SingleFunctionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterSingleFunction(this);}};SingleFunctionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitSingleFunction(this);}};CypherParser.SingleFunctionContext=SingleFunctionContext;CypherParser.prototype.singleFunction=function(){var localctx=new SingleFunctionContext(this,this._ctx,this.state);this.enterRule(localctx,304,CypherParser.RULE_singleFunction);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2109;this.singleFunctionName();this.state=2111;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2110;this.match(CypherParser.SP);}this.state=2113;this.match(CypherParser.T__18);this.state=2115;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2114;this.match(CypherParser.SP);}this.state=2117;this.filterExpression();this.state=2119;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2118;this.match(CypherParser.SP);}this.state=2121;this.match(CypherParser.T__19);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function SingleFunctionNameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_singleFunctionName;return this;}SingleFunctionNameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);SingleFunctionNameContext.prototype.constructor=SingleFunctionNameContext;SingleFunctionNameContext.prototype.SINGLE=function(){return this.getToken(CypherParser.SINGLE,0);};SingleFunctionNameContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterSingleFunctionName(this);}};SingleFunctionNameContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitSingleFunctionName(this);}};CypherParser.SingleFunctionNameContext=SingleFunctionNameContext;CypherParser.prototype.singleFunctionName=function(){var localctx=new SingleFunctionNameContext(this,this._ctx,this.state);this.enterRule(localctx,306,CypherParser.RULE_singleFunctionName);try{this.enterOuterAlt(localctx,1);this.state=2123;this.match(CypherParser.SINGLE);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ExtractFunctionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_extractFunction;return this;}ExtractFunctionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ExtractFunctionContext.prototype.constructor=ExtractFunctionContext;ExtractFunctionContext.prototype.extractFunctionName=function(){return this.getTypedRuleContext(ExtractFunctionNameContext,0);};ExtractFunctionContext.prototype.filterExpression=function(){return this.getTypedRuleContext(FilterExpressionContext,0);};ExtractFunctionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};ExtractFunctionContext.prototype.expression=function(){return this.getTypedRuleContext(ExpressionContext,0);};ExtractFunctionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterExtractFunction(this);}};ExtractFunctionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitExtractFunction(this);}};CypherParser.ExtractFunctionContext=ExtractFunctionContext;CypherParser.prototype.extractFunction=function(){var localctx=new ExtractFunctionContext(this,this._ctx,this.state);this.enterRule(localctx,308,CypherParser.RULE_extractFunction);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2125;this.extractFunctionName();this.state=2127;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2126;this.match(CypherParser.SP);}this.state=2129;this.match(CypherParser.T__18);this.state=2131;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2130;this.match(CypherParser.SP);}this.state=2133;this.filterExpression();this.state=2142;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,310,this._ctx);if(la_===1){this.state=2135;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2134;this.match(CypherParser.SP);}this.state=2137;this.match(CypherParser.T__21);this.state=2139;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2138;this.match(CypherParser.SP);}this.state=2141;this.expression();}this.state=2145;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2144;this.match(CypherParser.SP);}this.state=2147;this.match(CypherParser.T__19);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ExtractFunctionNameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_extractFunctionName;return this;}ExtractFunctionNameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ExtractFunctionNameContext.prototype.constructor=ExtractFunctionNameContext;ExtractFunctionNameContext.prototype.EXTRACT=function(){return this.getToken(CypherParser.EXTRACT,0);};ExtractFunctionNameContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterExtractFunctionName(this);}};ExtractFunctionNameContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitExtractFunctionName(this);}};CypherParser.ExtractFunctionNameContext=ExtractFunctionNameContext;CypherParser.prototype.extractFunctionName=function(){var localctx=new ExtractFunctionNameContext(this,this._ctx,this.state);this.enterRule(localctx,310,CypherParser.RULE_extractFunctionName);try{this.enterOuterAlt(localctx,1);this.state=2149;this.match(CypherParser.EXTRACT);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ReduceFunctionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_reduceFunction;return this;}ReduceFunctionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ReduceFunctionContext.prototype.constructor=ReduceFunctionContext;ReduceFunctionContext.prototype.reduceFunctionName=function(){return this.getTypedRuleContext(ReduceFunctionNameContext,0);};ReduceFunctionContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};ReduceFunctionContext.prototype.expression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExpressionContext);}else{return this.getTypedRuleContext(ExpressionContext,i);}};ReduceFunctionContext.prototype.idInColl=function(){return this.getTypedRuleContext(IdInCollContext,0);};ReduceFunctionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};ReduceFunctionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterReduceFunction(this);}};ReduceFunctionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitReduceFunction(this);}};CypherParser.ReduceFunctionContext=ReduceFunctionContext;CypherParser.prototype.reduceFunction=function(){var localctx=new ReduceFunctionContext(this,this._ctx,this.state);this.enterRule(localctx,312,CypherParser.RULE_reduceFunction);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2151;this.reduceFunctionName();this.state=2153;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2152;this.match(CypherParser.SP);}this.state=2155;this.match(CypherParser.T__18);this.state=2157;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2156;this.match(CypherParser.SP);}this.state=2159;this.variable();this.state=2161;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2160;this.match(CypherParser.SP);}this.state=2163;this.match(CypherParser.T__11);this.state=2165;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2164;this.match(CypherParser.SP);}this.state=2167;this.expression();this.state=2169;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2168;this.match(CypherParser.SP);}this.state=2171;this.match(CypherParser.T__14);this.state=2173;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2172;this.match(CypherParser.SP);}this.state=2175;this.idInColl();this.state=2177;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2176;this.match(CypherParser.SP);}this.state=2179;this.match(CypherParser.T__21);this.state=2181;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2180;this.match(CypherParser.SP);}this.state=2183;this.expression();this.state=2185;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2184;this.match(CypherParser.SP);}this.state=2187;this.match(CypherParser.T__19);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ReduceFunctionNameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_reduceFunctionName;return this;}ReduceFunctionNameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ReduceFunctionNameContext.prototype.constructor=ReduceFunctionNameContext;ReduceFunctionNameContext.prototype.REDUCE=function(){return this.getToken(CypherParser.REDUCE,0);};ReduceFunctionNameContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterReduceFunctionName(this);}};ReduceFunctionNameContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitReduceFunctionName(this);}};CypherParser.ReduceFunctionNameContext=ReduceFunctionNameContext;CypherParser.prototype.reduceFunctionName=function(){var localctx=new ReduceFunctionNameContext(this,this._ctx,this.state);this.enterRule(localctx,314,CypherParser.RULE_reduceFunctionName);try{this.enterOuterAlt(localctx,1);this.state=2189;this.match(CypherParser.REDUCE);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ShortestPathPatternFunctionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_shortestPathPatternFunction;return this;}ShortestPathPatternFunctionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ShortestPathPatternFunctionContext.prototype.constructor=ShortestPathPatternFunctionContext;ShortestPathPatternFunctionContext.prototype.shortestPathFunctionName=function(){return this.getTypedRuleContext(ShortestPathFunctionNameContext,0);};ShortestPathPatternFunctionContext.prototype.patternElement=function(){return this.getTypedRuleContext(PatternElementContext,0);};ShortestPathPatternFunctionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};ShortestPathPatternFunctionContext.prototype.allShortestPathFunctionName=function(){return this.getTypedRuleContext(AllShortestPathFunctionNameContext,0);};ShortestPathPatternFunctionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterShortestPathPatternFunction(this);}};ShortestPathPatternFunctionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitShortestPathPatternFunction(this);}};CypherParser.ShortestPathPatternFunctionContext=ShortestPathPatternFunctionContext;CypherParser.prototype.shortestPathPatternFunction=function(){var localctx=new ShortestPathPatternFunctionContext(this,this._ctx,this.state);this.enterRule(localctx,316,CypherParser.RULE_shortestPathPatternFunction);var _la=0;// Token type
try{this.state=2219;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.SHORTESTPATH:this.enterOuterAlt(localctx,1);this.state=2191;this.shortestPathFunctionName();this.state=2193;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2192;this.match(CypherParser.SP);}this.state=2195;this.match(CypherParser.T__18);this.state=2197;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2196;this.match(CypherParser.SP);}this.state=2199;this.patternElement();this.state=2201;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2200;this.match(CypherParser.SP);}this.state=2203;this.match(CypherParser.T__19);break;case CypherParser.ALLSHORTESTPATHS:this.enterOuterAlt(localctx,2);this.state=2205;this.allShortestPathFunctionName();this.state=2207;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2206;this.match(CypherParser.SP);}this.state=2209;this.match(CypherParser.T__18);this.state=2211;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2210;this.match(CypherParser.SP);}this.state=2213;this.patternElement();this.state=2215;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2214;this.match(CypherParser.SP);}this.state=2217;this.match(CypherParser.T__19);break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ShortestPathFunctionNameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_shortestPathFunctionName;return this;}ShortestPathFunctionNameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ShortestPathFunctionNameContext.prototype.constructor=ShortestPathFunctionNameContext;ShortestPathFunctionNameContext.prototype.SHORTESTPATH=function(){return this.getToken(CypherParser.SHORTESTPATH,0);};ShortestPathFunctionNameContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterShortestPathFunctionName(this);}};ShortestPathFunctionNameContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitShortestPathFunctionName(this);}};CypherParser.ShortestPathFunctionNameContext=ShortestPathFunctionNameContext;CypherParser.prototype.shortestPathFunctionName=function(){var localctx=new ShortestPathFunctionNameContext(this,this._ctx,this.state);this.enterRule(localctx,318,CypherParser.RULE_shortestPathFunctionName);try{this.enterOuterAlt(localctx,1);this.state=2221;this.match(CypherParser.SHORTESTPATH);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function AllShortestPathFunctionNameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_allShortestPathFunctionName;return this;}AllShortestPathFunctionNameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);AllShortestPathFunctionNameContext.prototype.constructor=AllShortestPathFunctionNameContext;AllShortestPathFunctionNameContext.prototype.ALLSHORTESTPATHS=function(){return this.getToken(CypherParser.ALLSHORTESTPATHS,0);};AllShortestPathFunctionNameContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterAllShortestPathFunctionName(this);}};AllShortestPathFunctionNameContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitAllShortestPathFunctionName(this);}};CypherParser.AllShortestPathFunctionNameContext=AllShortestPathFunctionNameContext;CypherParser.prototype.allShortestPathFunctionName=function(){var localctx=new AllShortestPathFunctionNameContext(this,this._ctx,this.state);this.enterRule(localctx,320,CypherParser.RULE_allShortestPathFunctionName);try{this.enterOuterAlt(localctx,1);this.state=2223;this.match(CypherParser.ALLSHORTESTPATHS);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function AtomContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_atom;return this;}AtomContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);AtomContext.prototype.constructor=AtomContext;AtomContext.prototype.literal=function(){return this.getTypedRuleContext(LiteralContext,0);};AtomContext.prototype.parameter=function(){return this.getTypedRuleContext(ParameterContext,0);};AtomContext.prototype.caseExpression=function(){return this.getTypedRuleContext(CaseExpressionContext,0);};AtomContext.prototype.COUNT=function(){return this.getToken(CypherParser.COUNT,0);};AtomContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};AtomContext.prototype.listComprehension=function(){return this.getTypedRuleContext(ListComprehensionContext,0);};AtomContext.prototype.patternComprehension=function(){return this.getTypedRuleContext(PatternComprehensionContext,0);};AtomContext.prototype.filterFunction=function(){return this.getTypedRuleContext(FilterFunctionContext,0);};AtomContext.prototype.extractFunction=function(){return this.getTypedRuleContext(ExtractFunctionContext,0);};AtomContext.prototype.reduceFunction=function(){return this.getTypedRuleContext(ReduceFunctionContext,0);};AtomContext.prototype.allFunction=function(){return this.getTypedRuleContext(AllFunctionContext,0);};AtomContext.prototype.anyFunction=function(){return this.getTypedRuleContext(AnyFunctionContext,0);};AtomContext.prototype.noneFunction=function(){return this.getTypedRuleContext(NoneFunctionContext,0);};AtomContext.prototype.singleFunction=function(){return this.getTypedRuleContext(SingleFunctionContext,0);};AtomContext.prototype.existsFunction=function(){return this.getTypedRuleContext(ExistsFunctionContext,0);};AtomContext.prototype.shortestPathPatternFunction=function(){return this.getTypedRuleContext(ShortestPathPatternFunctionContext,0);};AtomContext.prototype.relationshipsPattern=function(){return this.getTypedRuleContext(RelationshipsPatternContext,0);};AtomContext.prototype.parenthesizedExpression=function(){return this.getTypedRuleContext(ParenthesizedExpressionContext,0);};AtomContext.prototype.functionInvocation=function(){return this.getTypedRuleContext(FunctionInvocationContext,0);};AtomContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};AtomContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterAtom(this);}};AtomContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitAtom(this);}};CypherParser.AtomContext=AtomContext;CypherParser.prototype.atom=function(){var localctx=new AtomContext(this,this._ctx,this.state);this.enterRule(localctx,322,CypherParser.RULE_atom);var _la=0;// Token type
try{this.state=2256;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,331,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=2225;this.literal();break;case 2:this.enterOuterAlt(localctx,2);this.state=2226;this.parameter();break;case 3:this.enterOuterAlt(localctx,3);this.state=2227;this.caseExpression();break;case 4:this.enterOuterAlt(localctx,4);this.state=2228;this.match(CypherParser.COUNT);this.state=2230;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2229;this.match(CypherParser.SP);}this.state=2232;this.match(CypherParser.T__18);this.state=2234;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2233;this.match(CypherParser.SP);}this.state=2236;this.match(CypherParser.T__22);this.state=2238;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2237;this.match(CypherParser.SP);}this.state=2240;this.match(CypherParser.T__19);break;case 5:this.enterOuterAlt(localctx,5);this.state=2241;this.listComprehension();break;case 6:this.enterOuterAlt(localctx,6);this.state=2242;this.patternComprehension();break;case 7:this.enterOuterAlt(localctx,7);this.state=2243;this.filterFunction();break;case 8:this.enterOuterAlt(localctx,8);this.state=2244;this.extractFunction();break;case 9:this.enterOuterAlt(localctx,9);this.state=2245;this.reduceFunction();break;case 10:this.enterOuterAlt(localctx,10);this.state=2246;this.allFunction();break;case 11:this.enterOuterAlt(localctx,11);this.state=2247;this.anyFunction();break;case 12:this.enterOuterAlt(localctx,12);this.state=2248;this.noneFunction();break;case 13:this.enterOuterAlt(localctx,13);this.state=2249;this.singleFunction();break;case 14:this.enterOuterAlt(localctx,14);this.state=2250;this.existsFunction();break;case 15:this.enterOuterAlt(localctx,15);this.state=2251;this.shortestPathPatternFunction();break;case 16:this.enterOuterAlt(localctx,16);this.state=2252;this.relationshipsPattern();break;case 17:this.enterOuterAlt(localctx,17);this.state=2253;this.parenthesizedExpression();break;case 18:this.enterOuterAlt(localctx,18);this.state=2254;this.functionInvocation();break;case 19:this.enterOuterAlt(localctx,19);this.state=2255;this.variable();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function LiteralContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_literal;return this;}LiteralContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);LiteralContext.prototype.constructor=LiteralContext;LiteralContext.prototype.numberLiteral=function(){return this.getTypedRuleContext(NumberLiteralContext,0);};LiteralContext.prototype.stringLiteral=function(){return this.getTypedRuleContext(StringLiteralContext,0);};LiteralContext.prototype.booleanLiteral=function(){return this.getTypedRuleContext(BooleanLiteralContext,0);};LiteralContext.prototype.NULL=function(){return this.getToken(CypherParser.NULL,0);};LiteralContext.prototype.mapLiteral=function(){return this.getTypedRuleContext(MapLiteralContext,0);};LiteralContext.prototype.listLiteral=function(){return this.getTypedRuleContext(ListLiteralContext,0);};LiteralContext.prototype.mapProjection=function(){return this.getTypedRuleContext(MapProjectionContext,0);};LiteralContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterLiteral(this);}};LiteralContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitLiteral(this);}};CypherParser.LiteralContext=LiteralContext;CypherParser.prototype.literal=function(){var localctx=new LiteralContext(this,this._ctx,this.state);this.enterRule(localctx,324,CypherParser.RULE_literal);try{this.state=2265;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,332,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=2258;this.numberLiteral();break;case 2:this.enterOuterAlt(localctx,2);this.state=2259;this.stringLiteral();break;case 3:this.enterOuterAlt(localctx,3);this.state=2260;this.booleanLiteral();break;case 4:this.enterOuterAlt(localctx,4);this.state=2261;this.match(CypherParser.NULL);break;case 5:this.enterOuterAlt(localctx,5);this.state=2262;this.mapLiteral();break;case 6:this.enterOuterAlt(localctx,6);this.state=2263;this.listLiteral();break;case 7:this.enterOuterAlt(localctx,7);this.state=2264;this.mapProjection();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function StringLiteralContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_stringLiteral;return this;}StringLiteralContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);StringLiteralContext.prototype.constructor=StringLiteralContext;StringLiteralContext.prototype.StringLiteral=function(){return this.getToken(CypherParser.StringLiteral,0);};StringLiteralContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterStringLiteral(this);}};StringLiteralContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitStringLiteral(this);}};CypherParser.StringLiteralContext=StringLiteralContext;CypherParser.prototype.stringLiteral=function(){var localctx=new StringLiteralContext(this,this._ctx,this.state);this.enterRule(localctx,326,CypherParser.RULE_stringLiteral);try{this.enterOuterAlt(localctx,1);this.state=2267;this.match(CypherParser.StringLiteral);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function BooleanLiteralContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_booleanLiteral;return this;}BooleanLiteralContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);BooleanLiteralContext.prototype.constructor=BooleanLiteralContext;BooleanLiteralContext.prototype.TRUE=function(){return this.getToken(CypherParser.TRUE,0);};BooleanLiteralContext.prototype.FALSE=function(){return this.getToken(CypherParser.FALSE,0);};BooleanLiteralContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterBooleanLiteral(this);}};BooleanLiteralContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitBooleanLiteral(this);}};CypherParser.BooleanLiteralContext=BooleanLiteralContext;CypherParser.prototype.booleanLiteral=function(){var localctx=new BooleanLiteralContext(this,this._ctx,this.state);this.enterRule(localctx,328,CypherParser.RULE_booleanLiteral);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2269;_la=this._input.LA(1);if(!(_la===CypherParser.TRUE||_la===CypherParser.FALSE)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ListLiteralContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_listLiteral;return this;}ListLiteralContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ListLiteralContext.prototype.constructor=ListLiteralContext;ListLiteralContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};ListLiteralContext.prototype.expression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExpressionContext);}else{return this.getTypedRuleContext(ExpressionContext,i);}};ListLiteralContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterListLiteral(this);}};ListLiteralContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitListLiteral(this);}};CypherParser.ListLiteralContext=ListLiteralContext;CypherParser.prototype.listLiteral=function(){var localctx=new ListLiteralContext(this,this._ctx,this.state);this.enterRule(localctx,330,CypherParser.RULE_listLiteral);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2271;this.match(CypherParser.T__16);this.state=2273;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2272;this.match(CypherParser.SP);}this.state=2292;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<CypherParser.T__2|1<<CypherParser.T__12|1<<CypherParser.T__13|1<<CypherParser.T__16|1<<CypherParser.T__18))!==0||(_la-34&~0x1f)==0&&(1<<_la-34&(1<<CypherParser.T__33-34|1<<CypherParser.CYPHER-34|1<<CypherParser.EXPLAIN-34|1<<CypherParser.PROFILE-34|1<<CypherParser.USING-34|1<<CypherParser.PERIODIC-34|1<<CypherParser.COMMIT-34|1<<CypherParser.UNION-34|1<<CypherParser.ALL-34|1<<CypherParser.CREATE-34|1<<CypherParser.DROP-34|1<<CypherParser.INDEX-34|1<<CypherParser.ON-34))!==0||(_la-66&~0x1f)==0&&(1<<_la-66&(1<<CypherParser.CONSTRAINT-66|1<<CypherParser.ASSERT-66|1<<CypherParser.IS-66|1<<CypherParser.UNIQUE-66|1<<CypherParser.EXISTS-66|1<<CypherParser.LOAD-66|1<<CypherParser.CSV-66|1<<CypherParser.WITH-66|1<<CypherParser.HEADERS-66|1<<CypherParser.FROM-66|1<<CypherParser.AS-66|1<<CypherParser.FIELDTERMINATOR-66|1<<CypherParser.OPTIONAL-66|1<<CypherParser.MATCH-66|1<<CypherParser.UNWIND-66|1<<CypherParser.MERGE-66|1<<CypherParser.SET-66|1<<CypherParser.DETACH-66|1<<CypherParser.DELETE-66|1<<CypherParser.REMOVE-66|1<<CypherParser.FOREACH-66|1<<CypherParser.IN-66|1<<CypherParser.DISTINCT-66|1<<CypherParser.RETURN-66|1<<CypherParser.ORDER-66|1<<CypherParser.BY-66|1<<CypherParser.L_SKIP-66|1<<CypherParser.LIMIT-66|1<<CypherParser.ASCENDING-66|1<<CypherParser.ASC-66|1<<CypherParser.DESCENDING-66|1<<CypherParser.DESC-66))!==0||(_la-98&~0x1f)==0&&(1<<_la-98&(1<<CypherParser.JOIN-98|1<<CypherParser.SCAN-98|1<<CypherParser.START-98|1<<CypherParser.NODE-98|1<<CypherParser.RELATIONSHIP-98|1<<CypherParser.REL-98|1<<CypherParser.WHERE-98|1<<CypherParser.SHORTESTPATH-98|1<<CypherParser.ALLSHORTESTPATHS-98|1<<CypherParser.OR-98|1<<CypherParser.XOR-98|1<<CypherParser.AND-98|1<<CypherParser.NOT-98|1<<CypherParser.STARTS-98|1<<CypherParser.ENDS-98|1<<CypherParser.CONTAINS-98|1<<CypherParser.NULL-98|1<<CypherParser.COUNT-98|1<<CypherParser.FILTER-98|1<<CypherParser.EXTRACT-98|1<<CypherParser.ANY-98|1<<CypherParser.NONE-98|1<<CypherParser.SINGLE-98|1<<CypherParser.TRUE-98|1<<CypherParser.FALSE-98|1<<CypherParser.REDUCE-98|1<<CypherParser.CASE-98|1<<CypherParser.ELSE-98|1<<CypherParser.END-98|1<<CypherParser.WHEN-98|1<<CypherParser.THEN-98|1<<CypherParser.CALL-98))!==0||(_la-130&~0x1f)==0&&(1<<_la-130&(1<<CypherParser.YIELD-130|1<<CypherParser.KEY-130|1<<CypherParser.StringLiteral-130|1<<CypherParser.HexInteger-130|1<<CypherParser.DecimalInteger-130|1<<CypherParser.OctalInteger-130|1<<CypherParser.HexLetter-130|1<<CypherParser.ExponentDecimalReal-130|1<<CypherParser.RegularDecimalReal-130|1<<CypherParser.UnescapedSymbolicName-130|1<<CypherParser.EscapedSymbolicName-130))!==0){this.state=2275;this.expression();this.state=2277;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2276;this.match(CypherParser.SP);}this.state=2289;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CypherParser.T__14){this.state=2279;this.match(CypherParser.T__14);this.state=2281;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2280;this.match(CypherParser.SP);}this.state=2283;this.expression();this.state=2285;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2284;this.match(CypherParser.SP);}this.state=2291;this._errHandler.sync(this);_la=this._input.LA(1);}}this.state=2294;this.match(CypherParser.T__17);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PartialComparisonExpressionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_partialComparisonExpression;return this;}PartialComparisonExpressionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PartialComparisonExpressionContext.prototype.constructor=PartialComparisonExpressionContext;PartialComparisonExpressionContext.prototype.addOrSubtractExpression=function(){return this.getTypedRuleContext(AddOrSubtractExpressionContext,0);};PartialComparisonExpressionContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};PartialComparisonExpressionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterPartialComparisonExpression(this);}};PartialComparisonExpressionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitPartialComparisonExpression(this);}};CypherParser.PartialComparisonExpressionContext=PartialComparisonExpressionContext;CypherParser.prototype.partialComparisonExpression=function(){var localctx=new PartialComparisonExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,332,CypherParser.RULE_partialComparisonExpression);var _la=0;// Token type
try{this.state=2331;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.T__11:this.enterOuterAlt(localctx,1);this.state=2296;this.match(CypherParser.T__11);this.state=2298;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2297;this.match(CypherParser.SP);}this.state=2300;this.addOrSubtractExpression();break;case CypherParser.T__27:this.enterOuterAlt(localctx,2);this.state=2301;this.match(CypherParser.T__27);this.state=2303;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2302;this.match(CypherParser.SP);}this.state=2305;this.addOrSubtractExpression();break;case CypherParser.T__28:this.enterOuterAlt(localctx,3);this.state=2306;this.match(CypherParser.T__28);this.state=2308;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2307;this.match(CypherParser.SP);}this.state=2310;this.addOrSubtractExpression();break;case CypherParser.T__29:this.enterOuterAlt(localctx,4);this.state=2311;this.match(CypherParser.T__29);this.state=2313;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2312;this.match(CypherParser.SP);}this.state=2315;this.addOrSubtractExpression();break;case CypherParser.T__30:this.enterOuterAlt(localctx,5);this.state=2316;this.match(CypherParser.T__30);this.state=2318;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2317;this.match(CypherParser.SP);}this.state=2320;this.addOrSubtractExpression();break;case CypherParser.T__31:this.enterOuterAlt(localctx,6);this.state=2321;this.match(CypherParser.T__31);this.state=2323;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2322;this.match(CypherParser.SP);}this.state=2325;this.addOrSubtractExpression();break;case CypherParser.T__32:this.enterOuterAlt(localctx,7);this.state=2326;this.match(CypherParser.T__32);this.state=2328;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2327;this.match(CypherParser.SP);}this.state=2330;this.addOrSubtractExpression();break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ParenthesizedExpressionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_parenthesizedExpression;return this;}ParenthesizedExpressionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ParenthesizedExpressionContext.prototype.constructor=ParenthesizedExpressionContext;ParenthesizedExpressionContext.prototype.expression=function(){return this.getTypedRuleContext(ExpressionContext,0);};ParenthesizedExpressionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};ParenthesizedExpressionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterParenthesizedExpression(this);}};ParenthesizedExpressionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitParenthesizedExpression(this);}};CypherParser.ParenthesizedExpressionContext=ParenthesizedExpressionContext;CypherParser.prototype.parenthesizedExpression=function(){var localctx=new ParenthesizedExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,334,CypherParser.RULE_parenthesizedExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2333;this.match(CypherParser.T__18);this.state=2335;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2334;this.match(CypherParser.SP);}this.state=2337;this.expression();this.state=2339;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2338;this.match(CypherParser.SP);}this.state=2341;this.match(CypherParser.T__19);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RelationshipsPatternContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_relationshipsPattern;return this;}RelationshipsPatternContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RelationshipsPatternContext.prototype.constructor=RelationshipsPatternContext;RelationshipsPatternContext.prototype.nodePattern=function(){return this.getTypedRuleContext(NodePatternContext,0);};RelationshipsPatternContext.prototype.patternElementChain=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(PatternElementChainContext);}else{return this.getTypedRuleContext(PatternElementChainContext,i);}};RelationshipsPatternContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};RelationshipsPatternContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterRelationshipsPattern(this);}};RelationshipsPatternContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitRelationshipsPattern(this);}};CypherParser.RelationshipsPatternContext=RelationshipsPatternContext;CypherParser.prototype.relationshipsPattern=function(){var localctx=new RelationshipsPatternContext(this,this._ctx,this.state);this.enterRule(localctx,336,CypherParser.RULE_relationshipsPattern);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2343;this.nodePattern();this.state=2348;this._errHandler.sync(this);var _alt=1;do{switch(_alt){case 1:this.state=2345;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2344;this.match(CypherParser.SP);}this.state=2347;this.patternElementChain();break;default:throw new antlr4.error.NoViableAltException(this);}this.state=2350;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,350,this._ctx);}while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function FilterExpressionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_filterExpression;return this;}FilterExpressionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);FilterExpressionContext.prototype.constructor=FilterExpressionContext;FilterExpressionContext.prototype.idInColl=function(){return this.getTypedRuleContext(IdInCollContext,0);};FilterExpressionContext.prototype.where=function(){return this.getTypedRuleContext(WhereContext,0);};FilterExpressionContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};FilterExpressionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterFilterExpression(this);}};FilterExpressionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitFilterExpression(this);}};CypherParser.FilterExpressionContext=FilterExpressionContext;CypherParser.prototype.filterExpression=function(){var localctx=new FilterExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,338,CypherParser.RULE_filterExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2352;this.idInColl();this.state=2357;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,352,this._ctx);if(la_===1){this.state=2354;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2353;this.match(CypherParser.SP);}this.state=2356;this.where();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function IdInCollContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_idInColl;return this;}IdInCollContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);IdInCollContext.prototype.constructor=IdInCollContext;IdInCollContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};IdInCollContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};IdInCollContext.prototype.IN=function(){return this.getToken(CypherParser.IN,0);};IdInCollContext.prototype.expression=function(){return this.getTypedRuleContext(ExpressionContext,0);};IdInCollContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterIdInColl(this);}};IdInCollContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitIdInColl(this);}};CypherParser.IdInCollContext=IdInCollContext;CypherParser.prototype.idInColl=function(){var localctx=new IdInCollContext(this,this._ctx,this.state);this.enterRule(localctx,340,CypherParser.RULE_idInColl);try{this.enterOuterAlt(localctx,1);this.state=2359;this.variable();this.state=2360;this.match(CypherParser.SP);this.state=2361;this.match(CypherParser.IN);this.state=2362;this.match(CypherParser.SP);this.state=2363;this.expression();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function FunctionInvocationContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_functionInvocation;return this;}FunctionInvocationContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);FunctionInvocationContext.prototype.constructor=FunctionInvocationContext;FunctionInvocationContext.prototype.functionInvocationBody=function(){return this.getTypedRuleContext(FunctionInvocationBodyContext,0);};FunctionInvocationContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};FunctionInvocationContext.prototype.DISTINCT=function(){return this.getToken(CypherParser.DISTINCT,0);};FunctionInvocationContext.prototype.expression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExpressionContext);}else{return this.getTypedRuleContext(ExpressionContext,i);}};FunctionInvocationContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterFunctionInvocation(this);}};FunctionInvocationContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitFunctionInvocation(this);}};CypherParser.FunctionInvocationContext=FunctionInvocationContext;CypherParser.prototype.functionInvocation=function(){var localctx=new FunctionInvocationContext(this,this._ctx,this.state);this.enterRule(localctx,342,CypherParser.RULE_functionInvocation);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2365;this.functionInvocationBody();this.state=2367;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2366;this.match(CypherParser.SP);}this.state=2369;this.match(CypherParser.T__18);this.state=2371;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2370;this.match(CypherParser.SP);}this.state=2377;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,356,this._ctx);if(la_===1){this.state=2373;this.match(CypherParser.DISTINCT);this.state=2375;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2374;this.match(CypherParser.SP);}}this.state=2396;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<CypherParser.T__2|1<<CypherParser.T__12|1<<CypherParser.T__13|1<<CypherParser.T__16|1<<CypherParser.T__18))!==0||(_la-34&~0x1f)==0&&(1<<_la-34&(1<<CypherParser.T__33-34|1<<CypherParser.CYPHER-34|1<<CypherParser.EXPLAIN-34|1<<CypherParser.PROFILE-34|1<<CypherParser.USING-34|1<<CypherParser.PERIODIC-34|1<<CypherParser.COMMIT-34|1<<CypherParser.UNION-34|1<<CypherParser.ALL-34|1<<CypherParser.CREATE-34|1<<CypherParser.DROP-34|1<<CypherParser.INDEX-34|1<<CypherParser.ON-34))!==0||(_la-66&~0x1f)==0&&(1<<_la-66&(1<<CypherParser.CONSTRAINT-66|1<<CypherParser.ASSERT-66|1<<CypherParser.IS-66|1<<CypherParser.UNIQUE-66|1<<CypherParser.EXISTS-66|1<<CypherParser.LOAD-66|1<<CypherParser.CSV-66|1<<CypherParser.WITH-66|1<<CypherParser.HEADERS-66|1<<CypherParser.FROM-66|1<<CypherParser.AS-66|1<<CypherParser.FIELDTERMINATOR-66|1<<CypherParser.OPTIONAL-66|1<<CypherParser.MATCH-66|1<<CypherParser.UNWIND-66|1<<CypherParser.MERGE-66|1<<CypherParser.SET-66|1<<CypherParser.DETACH-66|1<<CypherParser.DELETE-66|1<<CypherParser.REMOVE-66|1<<CypherParser.FOREACH-66|1<<CypherParser.IN-66|1<<CypherParser.DISTINCT-66|1<<CypherParser.RETURN-66|1<<CypherParser.ORDER-66|1<<CypherParser.BY-66|1<<CypherParser.L_SKIP-66|1<<CypherParser.LIMIT-66|1<<CypherParser.ASCENDING-66|1<<CypherParser.ASC-66|1<<CypherParser.DESCENDING-66|1<<CypherParser.DESC-66))!==0||(_la-98&~0x1f)==0&&(1<<_la-98&(1<<CypherParser.JOIN-98|1<<CypherParser.SCAN-98|1<<CypherParser.START-98|1<<CypherParser.NODE-98|1<<CypherParser.RELATIONSHIP-98|1<<CypherParser.REL-98|1<<CypherParser.WHERE-98|1<<CypherParser.SHORTESTPATH-98|1<<CypherParser.ALLSHORTESTPATHS-98|1<<CypherParser.OR-98|1<<CypherParser.XOR-98|1<<CypherParser.AND-98|1<<CypherParser.NOT-98|1<<CypherParser.STARTS-98|1<<CypherParser.ENDS-98|1<<CypherParser.CONTAINS-98|1<<CypherParser.NULL-98|1<<CypherParser.COUNT-98|1<<CypherParser.FILTER-98|1<<CypherParser.EXTRACT-98|1<<CypherParser.ANY-98|1<<CypherParser.NONE-98|1<<CypherParser.SINGLE-98|1<<CypherParser.TRUE-98|1<<CypherParser.FALSE-98|1<<CypherParser.REDUCE-98|1<<CypherParser.CASE-98|1<<CypherParser.ELSE-98|1<<CypherParser.END-98|1<<CypherParser.WHEN-98|1<<CypherParser.THEN-98|1<<CypherParser.CALL-98))!==0||(_la-130&~0x1f)==0&&(1<<_la-130&(1<<CypherParser.YIELD-130|1<<CypherParser.KEY-130|1<<CypherParser.StringLiteral-130|1<<CypherParser.HexInteger-130|1<<CypherParser.DecimalInteger-130|1<<CypherParser.OctalInteger-130|1<<CypherParser.HexLetter-130|1<<CypherParser.ExponentDecimalReal-130|1<<CypherParser.RegularDecimalReal-130|1<<CypherParser.UnescapedSymbolicName-130|1<<CypherParser.EscapedSymbolicName-130))!==0){this.state=2379;this.expression();this.state=2381;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2380;this.match(CypherParser.SP);}this.state=2393;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CypherParser.T__14){this.state=2383;this.match(CypherParser.T__14);this.state=2385;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2384;this.match(CypherParser.SP);}this.state=2387;this.expression();this.state=2389;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2388;this.match(CypherParser.SP);}this.state=2395;this._errHandler.sync(this);_la=this._input.LA(1);}}this.state=2398;this.match(CypherParser.T__19);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function FunctionInvocationBodyContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_functionInvocationBody;return this;}FunctionInvocationBodyContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);FunctionInvocationBodyContext.prototype.constructor=FunctionInvocationBodyContext;FunctionInvocationBodyContext.prototype.namespace=function(){return this.getTypedRuleContext(NamespaceContext,0);};FunctionInvocationBodyContext.prototype.functionName=function(){return this.getTypedRuleContext(FunctionNameContext,0);};FunctionInvocationBodyContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterFunctionInvocationBody(this);}};FunctionInvocationBodyContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitFunctionInvocationBody(this);}};CypherParser.FunctionInvocationBodyContext=FunctionInvocationBodyContext;CypherParser.prototype.functionInvocationBody=function(){var localctx=new FunctionInvocationBodyContext(this,this._ctx,this.state);this.enterRule(localctx,344,CypherParser.RULE_functionInvocationBody);try{this.enterOuterAlt(localctx,1);this.state=2400;this.namespace();this.state=2401;this.functionName();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function FunctionNameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_functionName;return this;}FunctionNameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);FunctionNameContext.prototype.constructor=FunctionNameContext;FunctionNameContext.prototype.UnescapedSymbolicName=function(){return this.getToken(CypherParser.UnescapedSymbolicName,0);};FunctionNameContext.prototype.EscapedSymbolicName=function(){return this.getToken(CypherParser.EscapedSymbolicName,0);};FunctionNameContext.prototype.COUNT=function(){return this.getToken(CypherParser.COUNT,0);};FunctionNameContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterFunctionName(this);}};FunctionNameContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitFunctionName(this);}};CypherParser.FunctionNameContext=FunctionNameContext;CypherParser.prototype.functionName=function(){var localctx=new FunctionNameContext(this,this._ctx,this.state);this.enterRule(localctx,346,CypherParser.RULE_functionName);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2403;_la=this._input.LA(1);if(!(_la===CypherParser.COUNT||_la===CypherParser.UnescapedSymbolicName||_la===CypherParser.EscapedSymbolicName)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ProcedureNameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_procedureName;return this;}ProcedureNameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ProcedureNameContext.prototype.constructor=ProcedureNameContext;ProcedureNameContext.prototype.symbolicName=function(){return this.getTypedRuleContext(SymbolicNameContext,0);};ProcedureNameContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterProcedureName(this);}};ProcedureNameContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitProcedureName(this);}};CypherParser.ProcedureNameContext=ProcedureNameContext;CypherParser.prototype.procedureName=function(){var localctx=new ProcedureNameContext(this,this._ctx,this.state);this.enterRule(localctx,348,CypherParser.RULE_procedureName);try{this.enterOuterAlt(localctx,1);this.state=2405;this.symbolicName();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ListComprehensionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_listComprehension;return this;}ListComprehensionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ListComprehensionContext.prototype.constructor=ListComprehensionContext;ListComprehensionContext.prototype.filterExpression=function(){return this.getTypedRuleContext(FilterExpressionContext,0);};ListComprehensionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};ListComprehensionContext.prototype.expression=function(){return this.getTypedRuleContext(ExpressionContext,0);};ListComprehensionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterListComprehension(this);}};ListComprehensionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitListComprehension(this);}};CypherParser.ListComprehensionContext=ListComprehensionContext;CypherParser.prototype.listComprehension=function(){var localctx=new ListComprehensionContext(this,this._ctx,this.state);this.enterRule(localctx,350,CypherParser.RULE_listComprehension);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2407;this.match(CypherParser.T__16);this.state=2409;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2408;this.match(CypherParser.SP);}this.state=2411;this.filterExpression();this.state=2420;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,365,this._ctx);if(la_===1){this.state=2413;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2412;this.match(CypherParser.SP);}this.state=2415;this.match(CypherParser.T__21);this.state=2417;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2416;this.match(CypherParser.SP);}this.state=2419;this.expression();}this.state=2423;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2422;this.match(CypherParser.SP);}this.state=2425;this.match(CypherParser.T__17);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PatternComprehensionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_patternComprehension;return this;}PatternComprehensionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PatternComprehensionContext.prototype.constructor=PatternComprehensionContext;PatternComprehensionContext.prototype.relationshipsPattern=function(){return this.getTypedRuleContext(RelationshipsPatternContext,0);};PatternComprehensionContext.prototype.expression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExpressionContext);}else{return this.getTypedRuleContext(ExpressionContext,i);}};PatternComprehensionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};PatternComprehensionContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};PatternComprehensionContext.prototype.WHERE=function(){return this.getToken(CypherParser.WHERE,0);};PatternComprehensionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterPatternComprehension(this);}};PatternComprehensionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitPatternComprehension(this);}};CypherParser.PatternComprehensionContext=PatternComprehensionContext;CypherParser.prototype.patternComprehension=function(){var localctx=new PatternComprehensionContext(this,this._ctx,this.state);this.enterRule(localctx,352,CypherParser.RULE_patternComprehension);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2427;this.match(CypherParser.T__16);this.state=2429;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2428;this.match(CypherParser.SP);}this.state=2439;this._errHandler.sync(this);_la=this._input.LA(1);if((_la-54&~0x1f)==0&&(1<<_la-54&(1<<CypherParser.CYPHER-54|1<<CypherParser.EXPLAIN-54|1<<CypherParser.PROFILE-54|1<<CypherParser.USING-54|1<<CypherParser.PERIODIC-54|1<<CypherParser.COMMIT-54|1<<CypherParser.UNION-54|1<<CypherParser.ALL-54|1<<CypherParser.CREATE-54|1<<CypherParser.DROP-54|1<<CypherParser.INDEX-54|1<<CypherParser.ON-54|1<<CypherParser.CONSTRAINT-54|1<<CypherParser.ASSERT-54|1<<CypherParser.IS-54|1<<CypherParser.UNIQUE-54|1<<CypherParser.EXISTS-54|1<<CypherParser.LOAD-54|1<<CypherParser.CSV-54|1<<CypherParser.WITH-54|1<<CypherParser.HEADERS-54|1<<CypherParser.FROM-54|1<<CypherParser.AS-54|1<<CypherParser.FIELDTERMINATOR-54|1<<CypherParser.OPTIONAL-54|1<<CypherParser.MATCH-54|1<<CypherParser.UNWIND-54|1<<CypherParser.MERGE-54|1<<CypherParser.SET-54|1<<CypherParser.DETACH-54|1<<CypherParser.DELETE-54|1<<CypherParser.REMOVE-54))!==0||(_la-86&~0x1f)==0&&(1<<_la-86&(1<<CypherParser.FOREACH-86|1<<CypherParser.IN-86|1<<CypherParser.DISTINCT-86|1<<CypherParser.RETURN-86|1<<CypherParser.ORDER-86|1<<CypherParser.BY-86|1<<CypherParser.L_SKIP-86|1<<CypherParser.LIMIT-86|1<<CypherParser.ASCENDING-86|1<<CypherParser.ASC-86|1<<CypherParser.DESCENDING-86|1<<CypherParser.DESC-86|1<<CypherParser.JOIN-86|1<<CypherParser.SCAN-86|1<<CypherParser.START-86|1<<CypherParser.NODE-86|1<<CypherParser.RELATIONSHIP-86|1<<CypherParser.REL-86|1<<CypherParser.WHERE-86|1<<CypherParser.SHORTESTPATH-86|1<<CypherParser.ALLSHORTESTPATHS-86|1<<CypherParser.OR-86|1<<CypherParser.XOR-86|1<<CypherParser.AND-86|1<<CypherParser.NOT-86|1<<CypherParser.STARTS-86|1<<CypherParser.ENDS-86|1<<CypherParser.CONTAINS-86|1<<CypherParser.NULL-86|1<<CypherParser.COUNT-86|1<<CypherParser.FILTER-86|1<<CypherParser.EXTRACT-86))!==0||(_la-118&~0x1f)==0&&(1<<_la-118&(1<<CypherParser.ANY-118|1<<CypherParser.NONE-118|1<<CypherParser.SINGLE-118|1<<CypherParser.TRUE-118|1<<CypherParser.FALSE-118|1<<CypherParser.REDUCE-118|1<<CypherParser.CASE-118|1<<CypherParser.ELSE-118|1<<CypherParser.END-118|1<<CypherParser.WHEN-118|1<<CypherParser.THEN-118|1<<CypherParser.CALL-118|1<<CypherParser.YIELD-118|1<<CypherParser.KEY-118|1<<CypherParser.HexLetter-118|1<<CypherParser.UnescapedSymbolicName-118))!==0||_la===CypherParser.EscapedSymbolicName){this.state=2431;this.variable();this.state=2433;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2432;this.match(CypherParser.SP);}this.state=2435;this.match(CypherParser.T__11);this.state=2437;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2436;this.match(CypherParser.SP);}}this.state=2441;this.relationshipsPattern();this.state=2443;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2442;this.match(CypherParser.SP);}this.state=2453;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.WHERE){this.state=2445;this.match(CypherParser.WHERE);this.state=2447;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2446;this.match(CypherParser.SP);}this.state=2449;this.expression();this.state=2451;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2450;this.match(CypherParser.SP);}}this.state=2455;this.match(CypherParser.T__21);this.state=2457;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2456;this.match(CypherParser.SP);}this.state=2459;this.expression();this.state=2461;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2460;this.match(CypherParser.SP);}this.state=2463;this.match(CypherParser.T__17);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PropertyLookupContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_propertyLookup;return this;}PropertyLookupContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PropertyLookupContext.prototype.constructor=PropertyLookupContext;PropertyLookupContext.prototype.propertyKeyName=function(){return this.getTypedRuleContext(PropertyKeyNameContext,0);};PropertyLookupContext.prototype.SP=function(){return this.getToken(CypherParser.SP,0);};PropertyLookupContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterPropertyLookup(this);}};PropertyLookupContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitPropertyLookup(this);}};CypherParser.PropertyLookupContext=PropertyLookupContext;CypherParser.prototype.propertyLookup=function(){var localctx=new PropertyLookupContext(this,this._ctx,this.state);this.enterRule(localctx,354,CypherParser.RULE_propertyLookup);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2465;this.match(CypherParser.T__6);this.state=2467;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2466;this.match(CypherParser.SP);}this.state=2469;this.propertyKeyName();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CaseExpressionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_caseExpression;return this;}CaseExpressionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CaseExpressionContext.prototype.constructor=CaseExpressionContext;CaseExpressionContext.prototype.END=function(){return this.getToken(CypherParser.END,0);};CaseExpressionContext.prototype.ELSE=function(){return this.getToken(CypherParser.ELSE,0);};CaseExpressionContext.prototype.expression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExpressionContext);}else{return this.getTypedRuleContext(ExpressionContext,i);}};CaseExpressionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};CaseExpressionContext.prototype.CASE=function(){return this.getToken(CypherParser.CASE,0);};CaseExpressionContext.prototype.caseAlternatives=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(CaseAlternativesContext);}else{return this.getTypedRuleContext(CaseAlternativesContext,i);}};CaseExpressionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCaseExpression(this);}};CaseExpressionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCaseExpression(this);}};CypherParser.CaseExpressionContext=CaseExpressionContext;CypherParser.prototype.caseExpression=function(){var localctx=new CaseExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,356,CypherParser.RULE_caseExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2493;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,383,this._ctx);switch(la_){case 1:this.state=2471;this.match(CypherParser.CASE);this.state=2476;this._errHandler.sync(this);var _alt=1;do{switch(_alt){case 1:this.state=2473;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2472;this.match(CypherParser.SP);}this.state=2475;this.caseAlternatives();break;default:throw new antlr4.error.NoViableAltException(this);}this.state=2478;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,379,this._ctx);}while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER);break;case 2:this.state=2480;this.match(CypherParser.CASE);this.state=2482;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2481;this.match(CypherParser.SP);}this.state=2484;this.expression();this.state=2489;this._errHandler.sync(this);var _alt=1;do{switch(_alt){case 1:this.state=2486;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2485;this.match(CypherParser.SP);}this.state=2488;this.caseAlternatives();break;default:throw new antlr4.error.NoViableAltException(this);}this.state=2491;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,382,this._ctx);}while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER);break;}this.state=2503;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,386,this._ctx);if(la_===1){this.state=2496;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2495;this.match(CypherParser.SP);}this.state=2498;this.match(CypherParser.ELSE);this.state=2500;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2499;this.match(CypherParser.SP);}this.state=2502;this.expression();}this.state=2506;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2505;this.match(CypherParser.SP);}this.state=2508;this.match(CypherParser.END);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CaseAlternativesContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_caseAlternatives;return this;}CaseAlternativesContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CaseAlternativesContext.prototype.constructor=CaseAlternativesContext;CaseAlternativesContext.prototype.WHEN=function(){return this.getToken(CypherParser.WHEN,0);};CaseAlternativesContext.prototype.expression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExpressionContext);}else{return this.getTypedRuleContext(ExpressionContext,i);}};CaseAlternativesContext.prototype.THEN=function(){return this.getToken(CypherParser.THEN,0);};CaseAlternativesContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};CaseAlternativesContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterCaseAlternatives(this);}};CaseAlternativesContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitCaseAlternatives(this);}};CypherParser.CaseAlternativesContext=CaseAlternativesContext;CypherParser.prototype.caseAlternatives=function(){var localctx=new CaseAlternativesContext(this,this._ctx,this.state);this.enterRule(localctx,358,CypherParser.RULE_caseAlternatives);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2510;this.match(CypherParser.WHEN);this.state=2512;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2511;this.match(CypherParser.SP);}this.state=2514;this.expression();this.state=2516;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2515;this.match(CypherParser.SP);}this.state=2518;this.match(CypherParser.THEN);this.state=2520;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2519;this.match(CypherParser.SP);}this.state=2522;this.expression();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function VariableContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_variable;return this;}VariableContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);VariableContext.prototype.constructor=VariableContext;VariableContext.prototype.symbolicName=function(){return this.getTypedRuleContext(SymbolicNameContext,0);};VariableContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterVariable(this);}};VariableContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitVariable(this);}};CypherParser.VariableContext=VariableContext;CypherParser.prototype.variable=function(){var localctx=new VariableContext(this,this._ctx,this.state);this.enterRule(localctx,360,CypherParser.RULE_variable);try{this.enterOuterAlt(localctx,1);this.state=2524;this.symbolicName();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function NumberLiteralContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_numberLiteral;return this;}NumberLiteralContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);NumberLiteralContext.prototype.constructor=NumberLiteralContext;NumberLiteralContext.prototype.doubleLiteral=function(){return this.getTypedRuleContext(DoubleLiteralContext,0);};NumberLiteralContext.prototype.integerLiteral=function(){return this.getTypedRuleContext(IntegerLiteralContext,0);};NumberLiteralContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterNumberLiteral(this);}};NumberLiteralContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitNumberLiteral(this);}};CypherParser.NumberLiteralContext=NumberLiteralContext;CypherParser.prototype.numberLiteral=function(){var localctx=new NumberLiteralContext(this,this._ctx,this.state);this.enterRule(localctx,362,CypherParser.RULE_numberLiteral);try{this.state=2528;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.ExponentDecimalReal:case CypherParser.RegularDecimalReal:this.enterOuterAlt(localctx,1);this.state=2526;this.doubleLiteral();break;case CypherParser.HexInteger:case CypherParser.DecimalInteger:case CypherParser.OctalInteger:this.enterOuterAlt(localctx,2);this.state=2527;this.integerLiteral();break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function MapLiteralContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_mapLiteral;return this;}MapLiteralContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);MapLiteralContext.prototype.constructor=MapLiteralContext;MapLiteralContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};MapLiteralContext.prototype.literalEntry=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(LiteralEntryContext);}else{return this.getTypedRuleContext(LiteralEntryContext,i);}};MapLiteralContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterMapLiteral(this);}};MapLiteralContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitMapLiteral(this);}};CypherParser.MapLiteralContext=MapLiteralContext;CypherParser.prototype.mapLiteral=function(){var localctx=new MapLiteralContext(this,this._ctx,this.state);this.enterRule(localctx,364,CypherParser.RULE_mapLiteral);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2530;this.match(CypherParser.T__13);this.state=2532;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2531;this.match(CypherParser.SP);}this.state=2551;this._errHandler.sync(this);_la=this._input.LA(1);if((_la-54&~0x1f)==0&&(1<<_la-54&(1<<CypherParser.CYPHER-54|1<<CypherParser.EXPLAIN-54|1<<CypherParser.PROFILE-54|1<<CypherParser.USING-54|1<<CypherParser.PERIODIC-54|1<<CypherParser.COMMIT-54|1<<CypherParser.UNION-54|1<<CypherParser.ALL-54|1<<CypherParser.CREATE-54|1<<CypherParser.DROP-54|1<<CypherParser.INDEX-54|1<<CypherParser.ON-54|1<<CypherParser.CONSTRAINT-54|1<<CypherParser.ASSERT-54|1<<CypherParser.IS-54|1<<CypherParser.UNIQUE-54|1<<CypherParser.EXISTS-54|1<<CypherParser.LOAD-54|1<<CypherParser.CSV-54|1<<CypherParser.WITH-54|1<<CypherParser.HEADERS-54|1<<CypherParser.FROM-54|1<<CypherParser.AS-54|1<<CypherParser.FIELDTERMINATOR-54|1<<CypherParser.OPTIONAL-54|1<<CypherParser.MATCH-54|1<<CypherParser.UNWIND-54|1<<CypherParser.MERGE-54|1<<CypherParser.SET-54|1<<CypherParser.DETACH-54|1<<CypherParser.DELETE-54|1<<CypherParser.REMOVE-54))!==0||(_la-86&~0x1f)==0&&(1<<_la-86&(1<<CypherParser.FOREACH-86|1<<CypherParser.IN-86|1<<CypherParser.DISTINCT-86|1<<CypherParser.RETURN-86|1<<CypherParser.ORDER-86|1<<CypherParser.BY-86|1<<CypherParser.L_SKIP-86|1<<CypherParser.LIMIT-86|1<<CypherParser.ASCENDING-86|1<<CypherParser.ASC-86|1<<CypherParser.DESCENDING-86|1<<CypherParser.DESC-86|1<<CypherParser.JOIN-86|1<<CypherParser.SCAN-86|1<<CypherParser.START-86|1<<CypherParser.NODE-86|1<<CypherParser.RELATIONSHIP-86|1<<CypherParser.REL-86|1<<CypherParser.WHERE-86|1<<CypherParser.SHORTESTPATH-86|1<<CypherParser.ALLSHORTESTPATHS-86|1<<CypherParser.OR-86|1<<CypherParser.XOR-86|1<<CypherParser.AND-86|1<<CypherParser.NOT-86|1<<CypherParser.STARTS-86|1<<CypherParser.ENDS-86|1<<CypherParser.CONTAINS-86|1<<CypherParser.NULL-86|1<<CypherParser.COUNT-86|1<<CypherParser.FILTER-86|1<<CypherParser.EXTRACT-86))!==0||(_la-118&~0x1f)==0&&(1<<_la-118&(1<<CypherParser.ANY-118|1<<CypherParser.NONE-118|1<<CypherParser.SINGLE-118|1<<CypherParser.TRUE-118|1<<CypherParser.FALSE-118|1<<CypherParser.REDUCE-118|1<<CypherParser.CASE-118|1<<CypherParser.ELSE-118|1<<CypherParser.END-118|1<<CypherParser.WHEN-118|1<<CypherParser.THEN-118|1<<CypherParser.CALL-118|1<<CypherParser.YIELD-118|1<<CypherParser.KEY-118|1<<CypherParser.HexLetter-118|1<<CypherParser.UnescapedSymbolicName-118))!==0||_la===CypherParser.EscapedSymbolicName){this.state=2534;this.literalEntry();this.state=2536;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2535;this.match(CypherParser.SP);}this.state=2548;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===CypherParser.T__14){this.state=2538;this.match(CypherParser.T__14);this.state=2540;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2539;this.match(CypherParser.SP);}this.state=2542;this.literalEntry();this.state=2544;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2543;this.match(CypherParser.SP);}this.state=2550;this._errHandler.sync(this);_la=this._input.LA(1);}}this.state=2553;this.match(CypherParser.T__15);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function MapProjectionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_mapProjection;return this;}MapProjectionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);MapProjectionContext.prototype.constructor=MapProjectionContext;MapProjectionContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};MapProjectionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};MapProjectionContext.prototype.mapProjectionVariants=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(MapProjectionVariantsContext);}else{return this.getTypedRuleContext(MapProjectionVariantsContext,i);}};MapProjectionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterMapProjection(this);}};MapProjectionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitMapProjection(this);}};CypherParser.MapProjectionContext=MapProjectionContext;CypherParser.prototype.mapProjection=function(){var localctx=new MapProjectionContext(this,this._ctx,this.state);this.enterRule(localctx,366,CypherParser.RULE_mapProjection);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2555;this.variable();this.state=2557;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2556;this.match(CypherParser.SP);}this.state=2559;this.match(CypherParser.T__13);this.state=2561;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,399,this._ctx);if(la_===1){this.state=2560;this.match(CypherParser.SP);}this.state=2564;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.T__6||(_la-54&~0x1f)==0&&(1<<_la-54&(1<<CypherParser.CYPHER-54|1<<CypherParser.EXPLAIN-54|1<<CypherParser.PROFILE-54|1<<CypherParser.USING-54|1<<CypherParser.PERIODIC-54|1<<CypherParser.COMMIT-54|1<<CypherParser.UNION-54|1<<CypherParser.ALL-54|1<<CypherParser.CREATE-54|1<<CypherParser.DROP-54|1<<CypherParser.INDEX-54|1<<CypherParser.ON-54|1<<CypherParser.CONSTRAINT-54|1<<CypherParser.ASSERT-54|1<<CypherParser.IS-54|1<<CypherParser.UNIQUE-54|1<<CypherParser.EXISTS-54|1<<CypherParser.LOAD-54|1<<CypherParser.CSV-54|1<<CypherParser.WITH-54|1<<CypherParser.HEADERS-54|1<<CypherParser.FROM-54|1<<CypherParser.AS-54|1<<CypherParser.FIELDTERMINATOR-54|1<<CypherParser.OPTIONAL-54|1<<CypherParser.MATCH-54|1<<CypherParser.UNWIND-54|1<<CypherParser.MERGE-54|1<<CypherParser.SET-54|1<<CypherParser.DETACH-54|1<<CypherParser.DELETE-54|1<<CypherParser.REMOVE-54))!==0||(_la-86&~0x1f)==0&&(1<<_la-86&(1<<CypherParser.FOREACH-86|1<<CypherParser.IN-86|1<<CypherParser.DISTINCT-86|1<<CypherParser.RETURN-86|1<<CypherParser.ORDER-86|1<<CypherParser.BY-86|1<<CypherParser.L_SKIP-86|1<<CypherParser.LIMIT-86|1<<CypherParser.ASCENDING-86|1<<CypherParser.ASC-86|1<<CypherParser.DESCENDING-86|1<<CypherParser.DESC-86|1<<CypherParser.JOIN-86|1<<CypherParser.SCAN-86|1<<CypherParser.START-86|1<<CypherParser.NODE-86|1<<CypherParser.RELATIONSHIP-86|1<<CypherParser.REL-86|1<<CypherParser.WHERE-86|1<<CypherParser.SHORTESTPATH-86|1<<CypherParser.ALLSHORTESTPATHS-86|1<<CypherParser.OR-86|1<<CypherParser.XOR-86|1<<CypherParser.AND-86|1<<CypherParser.NOT-86|1<<CypherParser.STARTS-86|1<<CypherParser.ENDS-86|1<<CypherParser.CONTAINS-86|1<<CypherParser.NULL-86|1<<CypherParser.COUNT-86|1<<CypherParser.FILTER-86|1<<CypherParser.EXTRACT-86))!==0||(_la-118&~0x1f)==0&&(1<<_la-118&(1<<CypherParser.ANY-118|1<<CypherParser.NONE-118|1<<CypherParser.SINGLE-118|1<<CypherParser.TRUE-118|1<<CypherParser.FALSE-118|1<<CypherParser.REDUCE-118|1<<CypherParser.CASE-118|1<<CypherParser.ELSE-118|1<<CypherParser.END-118|1<<CypherParser.WHEN-118|1<<CypherParser.THEN-118|1<<CypherParser.CALL-118|1<<CypherParser.YIELD-118|1<<CypherParser.KEY-118|1<<CypherParser.HexLetter-118|1<<CypherParser.UnescapedSymbolicName-118))!==0||_la===CypherParser.EscapedSymbolicName){this.state=2563;this.mapProjectionVariants();}this.state=2576;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,403,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=2567;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2566;this.match(CypherParser.SP);}this.state=2569;this.match(CypherParser.T__14);this.state=2571;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2570;this.match(CypherParser.SP);}this.state=2573;this.mapProjectionVariants();}this.state=2578;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,403,this._ctx);}this.state=2580;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2579;this.match(CypherParser.SP);}this.state=2582;this.match(CypherParser.T__15);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function MapProjectionVariantsContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_mapProjectionVariants;return this;}MapProjectionVariantsContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);MapProjectionVariantsContext.prototype.constructor=MapProjectionVariantsContext;MapProjectionVariantsContext.prototype.literalEntry=function(){return this.getTypedRuleContext(LiteralEntryContext,0);};MapProjectionVariantsContext.prototype.propertySelector=function(){return this.getTypedRuleContext(PropertySelectorContext,0);};MapProjectionVariantsContext.prototype.variableSelector=function(){return this.getTypedRuleContext(VariableSelectorContext,0);};MapProjectionVariantsContext.prototype.allPropertiesSelector=function(){return this.getTypedRuleContext(AllPropertiesSelectorContext,0);};MapProjectionVariantsContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterMapProjectionVariants(this);}};MapProjectionVariantsContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitMapProjectionVariants(this);}};CypherParser.MapProjectionVariantsContext=MapProjectionVariantsContext;CypherParser.prototype.mapProjectionVariants=function(){var localctx=new MapProjectionVariantsContext(this,this._ctx,this.state);this.enterRule(localctx,368,CypherParser.RULE_mapProjectionVariants);try{this.enterOuterAlt(localctx,1);this.state=2588;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,405,this._ctx);switch(la_){case 1:this.state=2584;this.literalEntry();break;case 2:this.state=2585;this.propertySelector();break;case 3:this.state=2586;this.variableSelector();break;case 4:this.state=2587;this.allPropertiesSelector();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function LiteralEntryContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_literalEntry;return this;}LiteralEntryContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);LiteralEntryContext.prototype.constructor=LiteralEntryContext;LiteralEntryContext.prototype.propertyKeyName=function(){return this.getTypedRuleContext(PropertyKeyNameContext,0);};LiteralEntryContext.prototype.expression=function(){return this.getTypedRuleContext(ExpressionContext,0);};LiteralEntryContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};LiteralEntryContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterLiteralEntry(this);}};LiteralEntryContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitLiteralEntry(this);}};CypherParser.LiteralEntryContext=LiteralEntryContext;CypherParser.prototype.literalEntry=function(){var localctx=new LiteralEntryContext(this,this._ctx,this.state);this.enterRule(localctx,370,CypherParser.RULE_literalEntry);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2590;this.propertyKeyName();this.state=2592;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2591;this.match(CypherParser.SP);}this.state=2594;this.match(CypherParser.T__1);this.state=2596;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2595;this.match(CypherParser.SP);}this.state=2598;this.expression();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PropertySelectorContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_propertySelector;return this;}PropertySelectorContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PropertySelectorContext.prototype.constructor=PropertySelectorContext;PropertySelectorContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};PropertySelectorContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterPropertySelector(this);}};PropertySelectorContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitPropertySelector(this);}};CypherParser.PropertySelectorContext=PropertySelectorContext;CypherParser.prototype.propertySelector=function(){var localctx=new PropertySelectorContext(this,this._ctx,this.state);this.enterRule(localctx,372,CypherParser.RULE_propertySelector);try{this.enterOuterAlt(localctx,1);this.state=2600;this.match(CypherParser.T__6);this.state=2601;this.variable();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function VariableSelectorContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_variableSelector;return this;}VariableSelectorContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);VariableSelectorContext.prototype.constructor=VariableSelectorContext;VariableSelectorContext.prototype.variable=function(){return this.getTypedRuleContext(VariableContext,0);};VariableSelectorContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterVariableSelector(this);}};VariableSelectorContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitVariableSelector(this);}};CypherParser.VariableSelectorContext=VariableSelectorContext;CypherParser.prototype.variableSelector=function(){var localctx=new VariableSelectorContext(this,this._ctx,this.state);this.enterRule(localctx,374,CypherParser.RULE_variableSelector);try{this.enterOuterAlt(localctx,1);this.state=2603;this.variable();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function AllPropertiesSelectorContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_allPropertiesSelector;return this;}AllPropertiesSelectorContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);AllPropertiesSelectorContext.prototype.constructor=AllPropertiesSelectorContext;AllPropertiesSelectorContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterAllPropertiesSelector(this);}};AllPropertiesSelectorContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitAllPropertiesSelector(this);}};CypherParser.AllPropertiesSelectorContext=AllPropertiesSelectorContext;CypherParser.prototype.allPropertiesSelector=function(){var localctx=new AllPropertiesSelectorContext(this,this._ctx,this.state);this.enterRule(localctx,376,CypherParser.RULE_allPropertiesSelector);try{this.enterOuterAlt(localctx,1);this.state=2605;this.match(CypherParser.T__6);this.state=2606;this.match(CypherParser.T__22);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ParameterContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_parameter;return this;}ParameterContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ParameterContext.prototype.constructor=ParameterContext;ParameterContext.prototype.legacyParameter=function(){return this.getTypedRuleContext(LegacyParameterContext,0);};ParameterContext.prototype.newParameter=function(){return this.getTypedRuleContext(NewParameterContext,0);};ParameterContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterParameter(this);}};ParameterContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitParameter(this);}};CypherParser.ParameterContext=ParameterContext;CypherParser.prototype.parameter=function(){var localctx=new ParameterContext(this,this._ctx,this.state);this.enterRule(localctx,378,CypherParser.RULE_parameter);try{this.state=2610;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.T__13:this.enterOuterAlt(localctx,1);this.state=2608;this.legacyParameter();break;case CypherParser.T__33:this.enterOuterAlt(localctx,2);this.state=2609;this.newParameter();break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function LegacyParameterContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_legacyParameter;return this;}LegacyParameterContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);LegacyParameterContext.prototype.constructor=LegacyParameterContext;LegacyParameterContext.prototype.parameterName=function(){return this.getTypedRuleContext(ParameterNameContext,0);};LegacyParameterContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};LegacyParameterContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterLegacyParameter(this);}};LegacyParameterContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitLegacyParameter(this);}};CypherParser.LegacyParameterContext=LegacyParameterContext;CypherParser.prototype.legacyParameter=function(){var localctx=new LegacyParameterContext(this,this._ctx,this.state);this.enterRule(localctx,380,CypherParser.RULE_legacyParameter);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2612;this.match(CypherParser.T__13);this.state=2614;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2613;this.match(CypherParser.SP);}this.state=2616;this.parameterName();this.state=2618;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2617;this.match(CypherParser.SP);}this.state=2620;this.match(CypherParser.T__15);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function NewParameterContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_newParameter;return this;}NewParameterContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);NewParameterContext.prototype.constructor=NewParameterContext;NewParameterContext.prototype.parameterName=function(){return this.getTypedRuleContext(ParameterNameContext,0);};NewParameterContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterNewParameter(this);}};NewParameterContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitNewParameter(this);}};CypherParser.NewParameterContext=NewParameterContext;CypherParser.prototype.newParameter=function(){var localctx=new NewParameterContext(this,this._ctx,this.state);this.enterRule(localctx,382,CypherParser.RULE_newParameter);try{this.enterOuterAlt(localctx,1);this.state=2622;this.match(CypherParser.T__33);this.state=2623;this.parameterName();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ParameterNameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_parameterName;return this;}ParameterNameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ParameterNameContext.prototype.constructor=ParameterNameContext;ParameterNameContext.prototype.symbolicName=function(){return this.getTypedRuleContext(SymbolicNameContext,0);};ParameterNameContext.prototype.DecimalInteger=function(){return this.getToken(CypherParser.DecimalInteger,0);};ParameterNameContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterParameterName(this);}};ParameterNameContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitParameterName(this);}};CypherParser.ParameterNameContext=ParameterNameContext;CypherParser.prototype.parameterName=function(){var localctx=new ParameterNameContext(this,this._ctx,this.state);this.enterRule(localctx,384,CypherParser.RULE_parameterName);try{this.state=2627;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.CYPHER:case CypherParser.EXPLAIN:case CypherParser.PROFILE:case CypherParser.USING:case CypherParser.PERIODIC:case CypherParser.COMMIT:case CypherParser.UNION:case CypherParser.ALL:case CypherParser.CREATE:case CypherParser.DROP:case CypherParser.INDEX:case CypherParser.ON:case CypherParser.CONSTRAINT:case CypherParser.ASSERT:case CypherParser.IS:case CypherParser.UNIQUE:case CypherParser.EXISTS:case CypherParser.LOAD:case CypherParser.CSV:case CypherParser.WITH:case CypherParser.HEADERS:case CypherParser.FROM:case CypherParser.AS:case CypherParser.FIELDTERMINATOR:case CypherParser.OPTIONAL:case CypherParser.MATCH:case CypherParser.UNWIND:case CypherParser.MERGE:case CypherParser.SET:case CypherParser.DETACH:case CypherParser.DELETE:case CypherParser.REMOVE:case CypherParser.FOREACH:case CypherParser.IN:case CypherParser.DISTINCT:case CypherParser.RETURN:case CypherParser.ORDER:case CypherParser.BY:case CypherParser.L_SKIP:case CypherParser.LIMIT:case CypherParser.ASCENDING:case CypherParser.ASC:case CypherParser.DESCENDING:case CypherParser.DESC:case CypherParser.JOIN:case CypherParser.SCAN:case CypherParser.START:case CypherParser.NODE:case CypherParser.RELATIONSHIP:case CypherParser.REL:case CypherParser.WHERE:case CypherParser.SHORTESTPATH:case CypherParser.ALLSHORTESTPATHS:case CypherParser.OR:case CypherParser.XOR:case CypherParser.AND:case CypherParser.NOT:case CypherParser.STARTS:case CypherParser.ENDS:case CypherParser.CONTAINS:case CypherParser.NULL:case CypherParser.COUNT:case CypherParser.FILTER:case CypherParser.EXTRACT:case CypherParser.ANY:case CypherParser.NONE:case CypherParser.SINGLE:case CypherParser.TRUE:case CypherParser.FALSE:case CypherParser.REDUCE:case CypherParser.CASE:case CypherParser.ELSE:case CypherParser.END:case CypherParser.WHEN:case CypherParser.THEN:case CypherParser.CALL:case CypherParser.YIELD:case CypherParser.KEY:case CypherParser.HexLetter:case CypherParser.UnescapedSymbolicName:case CypherParser.EscapedSymbolicName:this.enterOuterAlt(localctx,1);this.state=2625;this.symbolicName();break;case CypherParser.DecimalInteger:this.enterOuterAlt(localctx,2);this.state=2626;this.match(CypherParser.DecimalInteger);break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PropertyExpressionsContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_propertyExpressions;return this;}PropertyExpressionsContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PropertyExpressionsContext.prototype.constructor=PropertyExpressionsContext;PropertyExpressionsContext.prototype.propertyExpression=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(PropertyExpressionContext);}else{return this.getTypedRuleContext(PropertyExpressionContext,i);}};PropertyExpressionsContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};PropertyExpressionsContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterPropertyExpressions(this);}};PropertyExpressionsContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitPropertyExpressions(this);}};CypherParser.PropertyExpressionsContext=PropertyExpressionsContext;CypherParser.prototype.propertyExpressions=function(){var localctx=new PropertyExpressionsContext(this,this._ctx,this.state);this.enterRule(localctx,386,CypherParser.RULE_propertyExpressions);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2629;this.propertyExpression();this.state=2640;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,414,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=2631;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2630;this.match(CypherParser.SP);}this.state=2633;this.match(CypherParser.T__14);this.state=2635;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2634;this.match(CypherParser.SP);}this.state=2637;this.propertyExpression();}this.state=2642;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,414,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PropertyExpressionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_propertyExpression;return this;}PropertyExpressionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PropertyExpressionContext.prototype.constructor=PropertyExpressionContext;PropertyExpressionContext.prototype.atom=function(){return this.getTypedRuleContext(AtomContext,0);};PropertyExpressionContext.prototype.propertyLookup=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(PropertyLookupContext);}else{return this.getTypedRuleContext(PropertyLookupContext,i);}};PropertyExpressionContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};PropertyExpressionContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterPropertyExpression(this);}};PropertyExpressionContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitPropertyExpression(this);}};CypherParser.PropertyExpressionContext=PropertyExpressionContext;CypherParser.prototype.propertyExpression=function(){var localctx=new PropertyExpressionContext(this,this._ctx,this.state);this.enterRule(localctx,388,CypherParser.RULE_propertyExpression);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2643;this.atom();this.state=2648;this._errHandler.sync(this);var _alt=1;do{switch(_alt){case 1:this.state=2645;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2644;this.match(CypherParser.SP);}this.state=2647;this.propertyLookup();break;default:throw new antlr4.error.NoViableAltException(this);}this.state=2650;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,416,this._ctx);}while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PropertyKeysContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_propertyKeys;return this;}PropertyKeysContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PropertyKeysContext.prototype.constructor=PropertyKeysContext;PropertyKeysContext.prototype.propertyKeyName=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(PropertyKeyNameContext);}else{return this.getTypedRuleContext(PropertyKeyNameContext,i);}};PropertyKeysContext.prototype.SP=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(CypherParser.SP);}else{return this.getToken(CypherParser.SP,i);}};PropertyKeysContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterPropertyKeys(this);}};PropertyKeysContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitPropertyKeys(this);}};CypherParser.PropertyKeysContext=PropertyKeysContext;CypherParser.prototype.propertyKeys=function(){var localctx=new PropertyKeysContext(this,this._ctx,this.state);this.enterRule(localctx,390,CypherParser.RULE_propertyKeys);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2652;this.propertyKeyName();this.state=2663;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,419,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=2654;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2653;this.match(CypherParser.SP);}this.state=2656;this.match(CypherParser.T__14);this.state=2658;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===CypherParser.SP){this.state=2657;this.match(CypherParser.SP);}this.state=2660;this.propertyKeyName();}this.state=2665;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,419,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PropertyKeyNameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_propertyKeyName;return this;}PropertyKeyNameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PropertyKeyNameContext.prototype.constructor=PropertyKeyNameContext;PropertyKeyNameContext.prototype.symbolicName=function(){return this.getTypedRuleContext(SymbolicNameContext,0);};PropertyKeyNameContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterPropertyKeyName(this);}};PropertyKeyNameContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitPropertyKeyName(this);}};CypherParser.PropertyKeyNameContext=PropertyKeyNameContext;CypherParser.prototype.propertyKeyName=function(){var localctx=new PropertyKeyNameContext(this,this._ctx,this.state);this.enterRule(localctx,392,CypherParser.RULE_propertyKeyName);try{this.enterOuterAlt(localctx,1);this.state=2666;this.symbolicName();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function IntegerLiteralContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_integerLiteral;return this;}IntegerLiteralContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);IntegerLiteralContext.prototype.constructor=IntegerLiteralContext;IntegerLiteralContext.prototype.HexInteger=function(){return this.getToken(CypherParser.HexInteger,0);};IntegerLiteralContext.prototype.OctalInteger=function(){return this.getToken(CypherParser.OctalInteger,0);};IntegerLiteralContext.prototype.DecimalInteger=function(){return this.getToken(CypherParser.DecimalInteger,0);};IntegerLiteralContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterIntegerLiteral(this);}};IntegerLiteralContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitIntegerLiteral(this);}};CypherParser.IntegerLiteralContext=IntegerLiteralContext;CypherParser.prototype.integerLiteral=function(){var localctx=new IntegerLiteralContext(this,this._ctx,this.state);this.enterRule(localctx,394,CypherParser.RULE_integerLiteral);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2668;_la=this._input.LA(1);if(!((_la-135&~0x1f)==0&&(1<<_la-135&(1<<CypherParser.HexInteger-135|1<<CypherParser.DecimalInteger-135|1<<CypherParser.OctalInteger-135))!==0)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function DoubleLiteralContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_doubleLiteral;return this;}DoubleLiteralContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);DoubleLiteralContext.prototype.constructor=DoubleLiteralContext;DoubleLiteralContext.prototype.ExponentDecimalReal=function(){return this.getToken(CypherParser.ExponentDecimalReal,0);};DoubleLiteralContext.prototype.RegularDecimalReal=function(){return this.getToken(CypherParser.RegularDecimalReal,0);};DoubleLiteralContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterDoubleLiteral(this);}};DoubleLiteralContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitDoubleLiteral(this);}};CypherParser.DoubleLiteralContext=DoubleLiteralContext;CypherParser.prototype.doubleLiteral=function(){var localctx=new DoubleLiteralContext(this,this._ctx,this.state);this.enterRule(localctx,396,CypherParser.RULE_doubleLiteral);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2670;_la=this._input.LA(1);if(!(_la===CypherParser.ExponentDecimalReal||_la===CypherParser.RegularDecimalReal)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function NamespaceContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_namespace;return this;}NamespaceContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);NamespaceContext.prototype.constructor=NamespaceContext;NamespaceContext.prototype.symbolicName=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(SymbolicNameContext);}else{return this.getTypedRuleContext(SymbolicNameContext,i);}};NamespaceContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterNamespace(this);}};NamespaceContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitNamespace(this);}};CypherParser.NamespaceContext=NamespaceContext;CypherParser.prototype.namespace=function(){var localctx=new NamespaceContext(this,this._ctx,this.state);this.enterRule(localctx,398,CypherParser.RULE_namespace);try{this.enterOuterAlt(localctx,1);this.state=2677;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,420,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){this.state=2672;this.symbolicName();this.state=2673;this.match(CypherParser.T__6);}this.state=2679;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,420,this._ctx);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function LeftArrowHeadContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_leftArrowHead;return this;}LeftArrowHeadContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);LeftArrowHeadContext.prototype.constructor=LeftArrowHeadContext;LeftArrowHeadContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterLeftArrowHead(this);}};LeftArrowHeadContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitLeftArrowHead(this);}};CypherParser.LeftArrowHeadContext=LeftArrowHeadContext;CypherParser.prototype.leftArrowHead=function(){var localctx=new LeftArrowHeadContext(this,this._ctx,this.state);this.enterRule(localctx,400,CypherParser.RULE_leftArrowHead);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2680;_la=this._input.LA(1);if(!((_la-30&~0x1f)==0&&(1<<_la-30&(1<<CypherParser.T__29-30|1<<CypherParser.T__34-30|1<<CypherParser.T__35-30|1<<CypherParser.T__36-30|1<<CypherParser.T__37-30))!==0)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RightArrowHeadContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_rightArrowHead;return this;}RightArrowHeadContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RightArrowHeadContext.prototype.constructor=RightArrowHeadContext;RightArrowHeadContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterRightArrowHead(this);}};RightArrowHeadContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitRightArrowHead(this);}};CypherParser.RightArrowHeadContext=RightArrowHeadContext;CypherParser.prototype.rightArrowHead=function(){var localctx=new RightArrowHeadContext(this,this._ctx,this.state);this.enterRule(localctx,402,CypherParser.RULE_rightArrowHead);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2682;_la=this._input.LA(1);if(!((_la-31&~0x1f)==0&&(1<<_la-31&(1<<CypherParser.T__30-31|1<<CypherParser.T__38-31|1<<CypherParser.T__39-31|1<<CypherParser.T__40-31|1<<CypherParser.T__41-31))!==0)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function DashContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_dash;return this;}DashContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);DashContext.prototype.constructor=DashContext;DashContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterDash(this);}};DashContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitDash(this);}};CypherParser.DashContext=DashContext;CypherParser.prototype.dash=function(){var localctx=new DashContext(this,this._ctx,this.state);this.enterRule(localctx,404,CypherParser.RULE_dash);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2684;_la=this._input.LA(1);if(!(_la===CypherParser.T__2||(_la-43&~0x1f)==0&&(1<<_la-43&(1<<CypherParser.T__42-43|1<<CypherParser.T__43-43|1<<CypherParser.T__44-43|1<<CypherParser.T__45-43|1<<CypherParser.T__46-43|1<<CypherParser.T__47-43|1<<CypherParser.T__48-43|1<<CypherParser.T__49-43|1<<CypherParser.T__50-43|1<<CypherParser.T__51-43|1<<CypherParser.T__52-43))!==0)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function SymbolicNameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_symbolicName;return this;}SymbolicNameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);SymbolicNameContext.prototype.constructor=SymbolicNameContext;SymbolicNameContext.prototype.keyword=function(){return this.getTypedRuleContext(KeywordContext,0);};SymbolicNameContext.prototype.UnescapedSymbolicName=function(){return this.getToken(CypherParser.UnescapedSymbolicName,0);};SymbolicNameContext.prototype.EscapedSymbolicName=function(){return this.getToken(CypherParser.EscapedSymbolicName,0);};SymbolicNameContext.prototype.HexLetter=function(){return this.getToken(CypherParser.HexLetter,0);};SymbolicNameContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterSymbolicName(this);}};SymbolicNameContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitSymbolicName(this);}};CypherParser.SymbolicNameContext=SymbolicNameContext;CypherParser.prototype.symbolicName=function(){var localctx=new SymbolicNameContext(this,this._ctx,this.state);this.enterRule(localctx,406,CypherParser.RULE_symbolicName);try{this.state=2690;this._errHandler.sync(this);switch(this._input.LA(1)){case CypherParser.CYPHER:case CypherParser.EXPLAIN:case CypherParser.PROFILE:case CypherParser.USING:case CypherParser.PERIODIC:case CypherParser.COMMIT:case CypherParser.UNION:case CypherParser.ALL:case CypherParser.CREATE:case CypherParser.DROP:case CypherParser.INDEX:case CypherParser.ON:case CypherParser.CONSTRAINT:case CypherParser.ASSERT:case CypherParser.IS:case CypherParser.UNIQUE:case CypherParser.EXISTS:case CypherParser.LOAD:case CypherParser.CSV:case CypherParser.WITH:case CypherParser.HEADERS:case CypherParser.FROM:case CypherParser.AS:case CypherParser.FIELDTERMINATOR:case CypherParser.OPTIONAL:case CypherParser.MATCH:case CypherParser.UNWIND:case CypherParser.MERGE:case CypherParser.SET:case CypherParser.DETACH:case CypherParser.DELETE:case CypherParser.REMOVE:case CypherParser.FOREACH:case CypherParser.IN:case CypherParser.DISTINCT:case CypherParser.RETURN:case CypherParser.ORDER:case CypherParser.BY:case CypherParser.L_SKIP:case CypherParser.LIMIT:case CypherParser.ASCENDING:case CypherParser.ASC:case CypherParser.DESCENDING:case CypherParser.DESC:case CypherParser.JOIN:case CypherParser.SCAN:case CypherParser.START:case CypherParser.NODE:case CypherParser.RELATIONSHIP:case CypherParser.REL:case CypherParser.WHERE:case CypherParser.SHORTESTPATH:case CypherParser.ALLSHORTESTPATHS:case CypherParser.OR:case CypherParser.XOR:case CypherParser.AND:case CypherParser.NOT:case CypherParser.STARTS:case CypherParser.ENDS:case CypherParser.CONTAINS:case CypherParser.NULL:case CypherParser.COUNT:case CypherParser.FILTER:case CypherParser.EXTRACT:case CypherParser.ANY:case CypherParser.NONE:case CypherParser.SINGLE:case CypherParser.TRUE:case CypherParser.FALSE:case CypherParser.REDUCE:case CypherParser.CASE:case CypherParser.ELSE:case CypherParser.END:case CypherParser.WHEN:case CypherParser.THEN:case CypherParser.CALL:case CypherParser.YIELD:case CypherParser.KEY:this.enterOuterAlt(localctx,1);this.state=2686;this.keyword();break;case CypherParser.UnescapedSymbolicName:this.enterOuterAlt(localctx,2);this.state=2687;this.match(CypherParser.UnescapedSymbolicName);break;case CypherParser.EscapedSymbolicName:this.enterOuterAlt(localctx,3);this.state=2688;this.match(CypherParser.EscapedSymbolicName);break;case CypherParser.HexLetter:this.enterOuterAlt(localctx,4);this.state=2689;this.match(CypherParser.HexLetter);break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function KeywordContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=CypherParser.RULE_keyword;return this;}KeywordContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);KeywordContext.prototype.constructor=KeywordContext;KeywordContext.prototype.CYPHER=function(){return this.getToken(CypherParser.CYPHER,0);};KeywordContext.prototype.EXPLAIN=function(){return this.getToken(CypherParser.EXPLAIN,0);};KeywordContext.prototype.PROFILE=function(){return this.getToken(CypherParser.PROFILE,0);};KeywordContext.prototype.USING=function(){return this.getToken(CypherParser.USING,0);};KeywordContext.prototype.PERIODIC=function(){return this.getToken(CypherParser.PERIODIC,0);};KeywordContext.prototype.COMMIT=function(){return this.getToken(CypherParser.COMMIT,0);};KeywordContext.prototype.UNION=function(){return this.getToken(CypherParser.UNION,0);};KeywordContext.prototype.ALL=function(){return this.getToken(CypherParser.ALL,0);};KeywordContext.prototype.CREATE=function(){return this.getToken(CypherParser.CREATE,0);};KeywordContext.prototype.DROP=function(){return this.getToken(CypherParser.DROP,0);};KeywordContext.prototype.INDEX=function(){return this.getToken(CypherParser.INDEX,0);};KeywordContext.prototype.ON=function(){return this.getToken(CypherParser.ON,0);};KeywordContext.prototype.CONSTRAINT=function(){return this.getToken(CypherParser.CONSTRAINT,0);};KeywordContext.prototype.ASSERT=function(){return this.getToken(CypherParser.ASSERT,0);};KeywordContext.prototype.IS=function(){return this.getToken(CypherParser.IS,0);};KeywordContext.prototype.UNIQUE=function(){return this.getToken(CypherParser.UNIQUE,0);};KeywordContext.prototype.EXISTS=function(){return this.getToken(CypherParser.EXISTS,0);};KeywordContext.prototype.LOAD=function(){return this.getToken(CypherParser.LOAD,0);};KeywordContext.prototype.CSV=function(){return this.getToken(CypherParser.CSV,0);};KeywordContext.prototype.WITH=function(){return this.getToken(CypherParser.WITH,0);};KeywordContext.prototype.HEADERS=function(){return this.getToken(CypherParser.HEADERS,0);};KeywordContext.prototype.FROM=function(){return this.getToken(CypherParser.FROM,0);};KeywordContext.prototype.AS=function(){return this.getToken(CypherParser.AS,0);};KeywordContext.prototype.FIELDTERMINATOR=function(){return this.getToken(CypherParser.FIELDTERMINATOR,0);};KeywordContext.prototype.OPTIONAL=function(){return this.getToken(CypherParser.OPTIONAL,0);};KeywordContext.prototype.MATCH=function(){return this.getToken(CypherParser.MATCH,0);};KeywordContext.prototype.UNWIND=function(){return this.getToken(CypherParser.UNWIND,0);};KeywordContext.prototype.MERGE=function(){return this.getToken(CypherParser.MERGE,0);};KeywordContext.prototype.SET=function(){return this.getToken(CypherParser.SET,0);};KeywordContext.prototype.DETACH=function(){return this.getToken(CypherParser.DETACH,0);};KeywordContext.prototype.DELETE=function(){return this.getToken(CypherParser.DELETE,0);};KeywordContext.prototype.REMOVE=function(){return this.getToken(CypherParser.REMOVE,0);};KeywordContext.prototype.FOREACH=function(){return this.getToken(CypherParser.FOREACH,0);};KeywordContext.prototype.IN=function(){return this.getToken(CypherParser.IN,0);};KeywordContext.prototype.DISTINCT=function(){return this.getToken(CypherParser.DISTINCT,0);};KeywordContext.prototype.RETURN=function(){return this.getToken(CypherParser.RETURN,0);};KeywordContext.prototype.ORDER=function(){return this.getToken(CypherParser.ORDER,0);};KeywordContext.prototype.BY=function(){return this.getToken(CypherParser.BY,0);};KeywordContext.prototype.L_SKIP=function(){return this.getToken(CypherParser.L_SKIP,0);};KeywordContext.prototype.LIMIT=function(){return this.getToken(CypherParser.LIMIT,0);};KeywordContext.prototype.ASCENDING=function(){return this.getToken(CypherParser.ASCENDING,0);};KeywordContext.prototype.ASC=function(){return this.getToken(CypherParser.ASC,0);};KeywordContext.prototype.DESCENDING=function(){return this.getToken(CypherParser.DESCENDING,0);};KeywordContext.prototype.DESC=function(){return this.getToken(CypherParser.DESC,0);};KeywordContext.prototype.JOIN=function(){return this.getToken(CypherParser.JOIN,0);};KeywordContext.prototype.SCAN=function(){return this.getToken(CypherParser.SCAN,0);};KeywordContext.prototype.START=function(){return this.getToken(CypherParser.START,0);};KeywordContext.prototype.NODE=function(){return this.getToken(CypherParser.NODE,0);};KeywordContext.prototype.RELATIONSHIP=function(){return this.getToken(CypherParser.RELATIONSHIP,0);};KeywordContext.prototype.REL=function(){return this.getToken(CypherParser.REL,0);};KeywordContext.prototype.WHERE=function(){return this.getToken(CypherParser.WHERE,0);};KeywordContext.prototype.SHORTESTPATH=function(){return this.getToken(CypherParser.SHORTESTPATH,0);};KeywordContext.prototype.ALLSHORTESTPATHS=function(){return this.getToken(CypherParser.ALLSHORTESTPATHS,0);};KeywordContext.prototype.OR=function(){return this.getToken(CypherParser.OR,0);};KeywordContext.prototype.XOR=function(){return this.getToken(CypherParser.XOR,0);};KeywordContext.prototype.AND=function(){return this.getToken(CypherParser.AND,0);};KeywordContext.prototype.NOT=function(){return this.getToken(CypherParser.NOT,0);};KeywordContext.prototype.STARTS=function(){return this.getToken(CypherParser.STARTS,0);};KeywordContext.prototype.ENDS=function(){return this.getToken(CypherParser.ENDS,0);};KeywordContext.prototype.CONTAINS=function(){return this.getToken(CypherParser.CONTAINS,0);};KeywordContext.prototype.NULL=function(){return this.getToken(CypherParser.NULL,0);};KeywordContext.prototype.COUNT=function(){return this.getToken(CypherParser.COUNT,0);};KeywordContext.prototype.FILTER=function(){return this.getToken(CypherParser.FILTER,0);};KeywordContext.prototype.EXTRACT=function(){return this.getToken(CypherParser.EXTRACT,0);};KeywordContext.prototype.ANY=function(){return this.getToken(CypherParser.ANY,0);};KeywordContext.prototype.NONE=function(){return this.getToken(CypherParser.NONE,0);};KeywordContext.prototype.SINGLE=function(){return this.getToken(CypherParser.SINGLE,0);};KeywordContext.prototype.TRUE=function(){return this.getToken(CypherParser.TRUE,0);};KeywordContext.prototype.FALSE=function(){return this.getToken(CypherParser.FALSE,0);};KeywordContext.prototype.REDUCE=function(){return this.getToken(CypherParser.REDUCE,0);};KeywordContext.prototype.CASE=function(){return this.getToken(CypherParser.CASE,0);};KeywordContext.prototype.ELSE=function(){return this.getToken(CypherParser.ELSE,0);};KeywordContext.prototype.END=function(){return this.getToken(CypherParser.END,0);};KeywordContext.prototype.WHEN=function(){return this.getToken(CypherParser.WHEN,0);};KeywordContext.prototype.THEN=function(){return this.getToken(CypherParser.THEN,0);};KeywordContext.prototype.CALL=function(){return this.getToken(CypherParser.CALL,0);};KeywordContext.prototype.YIELD=function(){return this.getToken(CypherParser.YIELD,0);};KeywordContext.prototype.KEY=function(){return this.getToken(CypherParser.KEY,0);};KeywordContext.prototype.enterRule=function(listener){if(listener instanceof CypherListener){listener.enterKeyword(this);}};KeywordContext.prototype.exitRule=function(listener){if(listener instanceof CypherListener){listener.exitKeyword(this);}};CypherParser.KeywordContext=KeywordContext;CypherParser.prototype.keyword=function(){var localctx=new KeywordContext(this,this._ctx,this.state);this.enterRule(localctx,408,CypherParser.RULE_keyword);var _la=0;// Token type
try{this.enterOuterAlt(localctx,1);this.state=2692;_la=this._input.LA(1);if(!((_la-54&~0x1f)==0&&(1<<_la-54&(1<<CypherParser.CYPHER-54|1<<CypherParser.EXPLAIN-54|1<<CypherParser.PROFILE-54|1<<CypherParser.USING-54|1<<CypherParser.PERIODIC-54|1<<CypherParser.COMMIT-54|1<<CypherParser.UNION-54|1<<CypherParser.ALL-54|1<<CypherParser.CREATE-54|1<<CypherParser.DROP-54|1<<CypherParser.INDEX-54|1<<CypherParser.ON-54|1<<CypherParser.CONSTRAINT-54|1<<CypherParser.ASSERT-54|1<<CypherParser.IS-54|1<<CypherParser.UNIQUE-54|1<<CypherParser.EXISTS-54|1<<CypherParser.LOAD-54|1<<CypherParser.CSV-54|1<<CypherParser.WITH-54|1<<CypherParser.HEADERS-54|1<<CypherParser.FROM-54|1<<CypherParser.AS-54|1<<CypherParser.FIELDTERMINATOR-54|1<<CypherParser.OPTIONAL-54|1<<CypherParser.MATCH-54|1<<CypherParser.UNWIND-54|1<<CypherParser.MERGE-54|1<<CypherParser.SET-54|1<<CypherParser.DETACH-54|1<<CypherParser.DELETE-54|1<<CypherParser.REMOVE-54))!==0||(_la-86&~0x1f)==0&&(1<<_la-86&(1<<CypherParser.FOREACH-86|1<<CypherParser.IN-86|1<<CypherParser.DISTINCT-86|1<<CypherParser.RETURN-86|1<<CypherParser.ORDER-86|1<<CypherParser.BY-86|1<<CypherParser.L_SKIP-86|1<<CypherParser.LIMIT-86|1<<CypherParser.ASCENDING-86|1<<CypherParser.ASC-86|1<<CypherParser.DESCENDING-86|1<<CypherParser.DESC-86|1<<CypherParser.JOIN-86|1<<CypherParser.SCAN-86|1<<CypherParser.START-86|1<<CypherParser.NODE-86|1<<CypherParser.RELATIONSHIP-86|1<<CypherParser.REL-86|1<<CypherParser.WHERE-86|1<<CypherParser.SHORTESTPATH-86|1<<CypherParser.ALLSHORTESTPATHS-86|1<<CypherParser.OR-86|1<<CypherParser.XOR-86|1<<CypherParser.AND-86|1<<CypherParser.NOT-86|1<<CypherParser.STARTS-86|1<<CypherParser.ENDS-86|1<<CypherParser.CONTAINS-86|1<<CypherParser.NULL-86|1<<CypherParser.COUNT-86|1<<CypherParser.FILTER-86|1<<CypherParser.EXTRACT-86))!==0||(_la-118&~0x1f)==0&&(1<<_la-118&(1<<CypherParser.ANY-118|1<<CypherParser.NONE-118|1<<CypherParser.SINGLE-118|1<<CypherParser.TRUE-118|1<<CypherParser.FALSE-118|1<<CypherParser.REDUCE-118|1<<CypherParser.CASE-118|1<<CypherParser.ELSE-118|1<<CypherParser.END-118|1<<CypherParser.WHEN-118|1<<CypherParser.THEN-118|1<<CypherParser.CALL-118|1<<CypherParser.YIELD-118|1<<CypherParser.KEY-118))!==0)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};exports.CypherParser=CypherParser;

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Generated from cypher-editor-support/src/_generated.simple/Cypher.g4 by ANTLR 4.7
// jshint ignore: start
var antlr4 = __webpack_require__(9);

var serializedATN = ["\x03\u608B\uA72A\u8133\uB9ED\u417C\u3BE7\u7786\u5964", "\x02\x9C\u050F\b\x01\x04\x02\t\x02\x04\x03\t\x03\x04", "\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07\t", "\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\x0B\t\x0B\x04", "\f\t\f\x04\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10", "\t\x10\x04\x11\t\x11\x04\x12\t\x12\x04\x13\t\x13", "\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17", "\t\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A", "\x04\x1B\t\x1B\x04\x1C\t\x1C\x04\x1D\t\x1D\x04\x1E", "\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04#", "\t#\x04$\t$\x04%\t%\x04&\t&\x04'\t'\x04(\t(\x04)\t)\x04", "*\t*\x04+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x04", "1\t1\x042\t2\x043\t3\x044\t4\x045\t5\x046\t6\x047\t7\x04", "8\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04=\t=\x04>\t>\x04", "?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04", "F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04", "M\tM\x04N\tN\x04O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04", "T\tT\x04U\tU\x04V\tV\x04W\tW\x04X\tX\x04Y\tY\x04Z\tZ\x04", "[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t`\x04a\ta\x04", "b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04", "i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04", "p\tp\x04q\tq\x04r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04", "w\tw\x04x\tx\x04y\ty\x04z\tz\x04{\t{\x04|\t|\x04}\t}\x04", "~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81\x04", "\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t", "\x85\x04\x86\t\x86\x04\x87\t\x87\x04\x88\t\x88\x04", "\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B\x04\x8C\t", "\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04", "\x90\t\x90\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t", "\x93\x04\x94\t\x94\x04\x95\t\x95\x04\x96\t\x96\x04", "\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t", "\x9A\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04", "\x9E\t\x9E\x04\x9F\t\x9F\x04\xA0\t\xA0\x04\xA1\t", "\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4\x04", "\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t", "\xA8\x04\xA9\t\xA9\x04\xAA\t\xAA\x04\xAB\t\xAB\x04", "\xAC\t\xAC\x04\xAD\t\xAD\x04\xAE\t\xAE\x04\xAF\t", "\xAF\x04\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04", "\xB3\t\xB3\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t", "\xB6\x04\xB7\t\xB7\x04\xB8\t\xB8\x04\xB9\t\xB9\x04", "\xBA\t\xBA\x04\xBB\t\xBB\x04\xBC\t\xBC\x04\xBD\t", "\xBD\x04\xBE\t\xBE\x04\xBF\t\xBF\x04\xC0\t\xC0\x04", "\xC1\t\xC1\x04\xC2\t\xC2\x03\x02\x03\x02\x03\x03", "\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05", "\x03\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07", "\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\x0B\x03\x0B", "\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F", "\x03\x0F\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12", "\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15", "\x03\x15\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17", "\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x1A", "\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1C", "\x03\x1D\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1E", "\x03\x1F\x03\x1F\x03 \x03 \x03!\x03!\x03!\x03\"", "\x03\"\x03\"\x03#\x03#\x03$\x03$\x03%\x03%\x03&\x03", "&\x03'\x03'\x03(\x03(\x03)\x03)\x03*\x03*\x03+\x03", "+\x03,\x03,\x03-\x03-\x03.\x03.\x03/\x03/\x030\x03", "0\x031\x031\x032\x032\x033\x033\x034\x034\x035\x03", "5\x036\x036\x037\x037\x037\x037\x037\x037\x037\x03", "8\x038\x038\x038\x038\x038\x038\x038\x039\x039\x03", "9\x039\x039\x039\x039\x039\x03:\x03:\x03:\x03:\x03", ":\x03:\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x03", ";\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03=\x03=\x03", "=\x03=\x03=\x03=\x03>\x03>\x03>\x03>\x03?\x03?\x03", "?\x03?\x03?\x03?\x03?\x03@\x03@\x03@\x03@\x03@\x03", "A\x03A\x03A\x03A\x03A\x03A\x03B\x03B\x03B\x03C\x03", "C\x03C\x03C\x03C\x03C\x03C\x03C\x03C\x03C\x03C\x03", "D\x03D\x03D\x03D\x03D\x03D\x03D\x03E\x03E\x03E\x03", "F\x03F\x03F\x03F\x03F\x03F\x03F\x03G\x03G\x03G\x03", "G\x03G\x03G\x03G\x03H\x03H\x03H\x03H\x03H\x03I\x03", "I\x03I\x03I\x03J\x03J\x03J\x03J\x03J\x03K\x03K\x03", "K\x03K\x03K\x03K\x03K\x03K\x03L\x03L\x03L\x03L\x03", "L\x03M\x03M\x03M\x03N\x03N\x03N\x03N\x03N\x03N\x03", "N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03", "O\x03O\x03O\x03O\x03O\x03O\x03O\x03O\x03O\x03P\x03", "P\x03P\x03P\x03P\x03P\x03Q\x03Q\x03Q\x03Q\x03Q\x03", "Q\x03Q\x03R\x03R\x03R\x03R\x03R\x03R\x03S\x03S\x03", "S\x03S\x03T\x03T\x03T\x03T\x03T\x03T\x03T\x03U\x03", "U\x03U\x03U\x03U\x03U\x03U\x03V\x03V\x03V\x03V\x03", "V\x03V\x03V\x03W\x03W\x03W\x03W\x03W\x03W\x03W\x03", "W\x03X\x03X\x03X\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x03", "Y\x03Y\x03Y\x03Z\x03Z\x03Z\x03Z\x03Z\x03Z\x03Z\x03", "[\x03[\x03[\x03[\x03[\x03[\x03\\\x03\\\x03\\\x03]", "\x03]\x03]\x03]\x03]\x03^\x03^\x03^\x03^\x03^\x03", "^\x03_\x03_\x03_\x03_\x03_\x03_\x03_\x03_\x03_\x03", "_\x03`\x03`\x03`\x03`\x03a\x03a\x03a\x03a\x03a\x03", "a\x03a\x03a\x03a\x03a\x03a\x03b\x03b\x03b\x03b\x03", "b\x03c\x03c\x03c\x03c\x03c\x03d\x03d\x03d\x03d\x03", "d\x03e\x03e\x03e\x03e\x03e\x03e\x03f\x03f\x03f\x03", "f\x03f\x03g\x03g\x03g\x03g\x03g\x03g\x03g\x03g\x03", "g\x03g\x03g\x03g\x03g\x03h\x03h\x03h\x03h\x03i\x03", "i\x03i\x03i\x03i\x03i\x03j\x03j\x03j\x03j\x03j\x03", "j\x03j\x03j\x03j\x03j\x03j\x03j\x03j\x03k\x03k\x03", "k\x03k\x03k\x03k\x03k\x03k\x03k\x03k\x03k\x03k\x03", "k\x03k\x03k\x03k\x03k\x03l\x03l\x03l\x03m\x03m\x03", "m\x03m\x03n\x03n\x03n\x03n\x03o\x03o\x03o\x03o\x03", "p\x03p\x03p\x03p\x03p\x03p\x03p\x03q\x03q\x03q\x03", "q\x03q\x03r\x03r\x03r\x03r\x03r\x03r\x03r\x03r\x03", "r\x03s\x03s\x03s\x03s\x03s\x03t\x03t\x03t\x03t\x03", "t\x03t\x03u\x03u\x03u\x03u\x03u\x03u\x03u\x03v\x03", "v\x03v\x03v\x03v\x03v\x03v\x03v\x03w\x03w\x03w\x03", "w\x03x\x03x\x03x\x03x\x03x\x03y\x03y\x03y\x03y\x03", "y\x03y\x03y\x03z\x03z\x03z\x03z\x03z\x03{\x03{\x03", "{\x03{\x03{\x03{\x03|\x03|\x03|\x03|\x03|\x03|\x03", "|\x03}\x03}\x03}\x03}\x03}\x03~\x03~\x03~\x03~\x03", "~\x03\x7F\x03\x7F\x03\x7F\x03\x7F\x03\x80\x03", "\x80\x03\x80\x03\x80\x03\x80\x03\x81\x03\x81\x03", "\x81\x03\x81\x03\x81\x03\x82\x03\x82\x03\x82\x03", "\x82\x03\x82\x03\x83\x03\x83\x03\x83\x03\x83\x03", "\x83\x03\x83\x03\x84\x03\x84\x03\x84\x03\x84\x03", "\x85\x03\x85\x03\x85\x03\x85\x03\x85\x05\x85\u03EF", "\n\x85\x07\x85\u03F1\n\x85\f\x85\x0E\x85\u03F4\x0B\x85", "\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85", "\x05\x85\u03FC\n\x85\x07\x85\u03FE\n\x85\f\x85\x0E\x85", "\u0401\x0B\x85\x03\x85\x05\x85\u0404\n\x85\x03\x86", "\x03\x86\x03\x86\x06\x86\u0409\n\x86\r\x86\x0E\x86", "\u040A\x03\x87\x03\x87\x03\x87\x03\x87\x03\x87\x03", "\x87\x03\x87\x03\x87\x03\x87\x03\x87\x03\x87\x03", "\x87\x03\x87\x03\x87\x03\x87\x03\x87\x03\x87\x03", "\x87\x05\x87\u041F\n\x87\x03\x88\x03\x88\x03\x88", "\x03\x88\x06\x88\u0425\n\x88\r\x88\x0E\x88\u0426\x03", "\x89\x03\x89\x03\x89\x07\x89\u042C\n\x89\f\x89\x0E", "\x89\u042F\x0B\x89\x05\x89\u0431\n\x89\x03\x8A\x03", "\x8A\x06\x8A\u0435\n\x8A\r\x8A\x0E\x8A\u0436\x03\x8B", "\x05\x8B\u043A\n\x8B\x03\x8C\x03\x8C\x05\x8C\u043E", "\n\x8C\x03\x8D\x03\x8D\x05\x8D\u0442\n\x8D\x03\x8E", "\x03\x8E\x05\x8E\u0446\n\x8E\x03\x8F\x03\x8F\x03", "\x90\x03\x90\x05\x90\u044C\n\x90\x03\x91\x03\x91", "\x03\x92\x06\x92\u0451\n\x92\r\x92\x0E\x92\u0452\x03", "\x92\x06\x92\u0456\n\x92\r\x92\x0E\x92\u0457\x03\x92", "\x03\x92\x06\x92\u045C\n\x92\r\x92\x0E\x92\u045D\x03", "\x92\x03\x92\x06\x92\u0462\n\x92\r\x92\x0E\x92\u0463", "\x05\x92\u0466\n\x92\x03\x92\x03\x92\x05\x92\u046A", "\n\x92\x03\x92\x06\x92\u046D\n\x92\r\x92\x0E\x92\u046E", "\x03\x93\x07\x93\u0472\n\x93\f\x93\x0E\x93\u0475\x0B", "\x93\x03\x93\x03\x93\x06\x93\u0479\n\x93\r\x93\x0E", "\x93\u047A\x03\x94\x03\x94\x07\x94\u047F\n\x94\f\x94", "\x0E\x94\u0482\x0B\x94\x03\x95\x03\x95\x05\x95\u0486", "\n\x95\x03\x96\x03\x96\x05\x96\u048A\n\x96\x03\x97", "\x03\x97\x03\x97\x03\x97\x07\x97\u0490\n\x97\f\x97", "\x0E\x97\u0493\x0B\x97\x03\x97\x03\x97\x03\x98\x06", "\x98\u0498\n\x98\r\x98\x0E\x98\u0499\x03\x99\x03\x99", "\x03\x99\x03\x99\x03\x99\x03\x99\x03\x99\x03\x99", "\x03\x99\x03\x99\x03\x99\x03\x99\x05\x99\u04A8\n", "\x99\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x07\x9A\u04AE", "\n\x9A\f\x9A\x0E\x9A\u04B1\x0B\x9A\x03\x9A\x03\x9A", "\x03\x9A\x03\x9A\x03\x9A\x03\x9A\x07\x9A\u04B9\n", "\x9A\f\x9A\x0E\x9A\u04BC\x0B\x9A\x05\x9A\u04BE\n\x9A", "\x03\x9B\x03\x9B\x03\x9C\x03\x9C\x03\x9D\x03\x9D", "\x03\x9E\x03\x9E\x03\x9F\x03\x9F\x03\xA0\x03\xA0", "\x03\xA1\x03\xA1\x03\xA2\x03\xA2\x03\xA3\x03\xA3", "\x03\xA4\x03\xA4\x03\xA5\x03\xA5\x03\xA6\x03\xA6", "\x03\xA7\x03\xA7\x03\xA8\x03\xA8\x03\xA9\x03\xA9", "\x03\xAA\x03\xAA\x03\xAB\x03\xAB\x03\xAC\x03\xAC", "\x03\xAD\x03\xAD\x03\xAE\x03\xAE\x03\xAF\x03\xAF", "\x03\xB0\x03\xB0\x03\xB1\x03\xB1\x03\xB2\x03\xB2", "\x03\xB3\x03\xB3\x03\xB4\x03\xB4\x03\xB5\x03\xB5", "\x03\xB6\x03\xB6\x03\xB7\x03\xB7\x03\xB8\x03\xB8", "\x03\xB9\x03\xB9\x03\xBA\x03\xBA\x03\xBB\x03\xBB", "\x03\xBC\x03\xBC\x03\xBD\x03\xBD\x03\xBE\x03\xBE", "\x03\xBF\x03\xBF\x03\xC0\x03\xC0\x03\xC1\x03\xC1", "\x03\xC2\x03\xC2\x03\u04AF\x02\xC3\x03\x03\x05\x04", "\x07\x05\t\x06\x0B\x07\r\b\x0F\t\x11\n\x13\x0B\x15", "\f\x17\r\x19\x0E\x1B\x0F\x1D\x10\x1F\x11!\x12#\x13", "%\x14'\x15)\x16+\x17-\x18/\x191\x1A3\x1B5\x1C7\x1D", "9\x1E;\x1F= ?!A\"C#E$G%I&K'M(O)Q*S+U,W-Y.[/]0_1a2c3e4g5i6k7m8o", "9q:s;u<w=y>{?}@\x7FA\x81B\x83C\x85D\x87E\x89F\x8BG\x8D", "H\x8FI\x91J\x93K\x95L\x97M\x99N\x9BO\x9DP\x9FQ\xA1", "R\xA3S\xA5T\xA7U\xA9V\xABW\xADX\xAFY\xB1Z\xB3[\xB5", "\\\xB7]\xB9^\xBB_\xBD`\xBFa\xC1b\xC3c\xC5d\xC7e\xC9", "f\xCBg\xCDh\xCFi\xD1j\xD3k\xD5l\xD7m\xD9n\xDBo\xDD", "p\xDFq\xE1r\xE3s\xE5t\xE7u\xE9v\xEBw\xEDx\xEFy\xF1", "z\xF3{\xF5|\xF7}\xF9~\xFB\x7F\xFD\x80\xFF\x81\u0101", "\x82\u0103\x83\u0105\x84\u0107\x85\u0109\x86\u010B\x87\u010D", "\x88\u010F\x89\u0111\x8A\u0113\x8B\u0115\x8C\u0117\x8D\u0119", "\x8E\u011B\x8F\u011D\x90\u011F\x91\u0121\x92\u0123\x93\u0125", "\x94\u0127\x95\u0129\x96\u012B\x97\u012D\x98\u012F\x99\u0131", "\x9A\u0133\x9B\u0135\x9C\u0137\x02\u0139\x02\u013B\x02\u013D", "\x02\u013F\x02\u0141\x02\u0143\x02\u0145\x02\u0147\x02\u0149", "\x02\u014B\x02\u014D\x02\u014F\x02\u0151\x02\u0153\x02\u0155", "\x02\u0157\x02\u0159\x02\u015B\x02\u015D\x02\u015F\x02\u0161", "\x02\u0163\x02\u0165\x02\u0167\x02\u0169\x02\u016B\x02\u016D", "\x02\u016F\x02\u0171\x02\u0173\x02\u0175\x02\u0177\x02\u0179", "\x02\u017B\x02\u017D\x02\u017F\x02\u0181\x02\u0183\x02\x03", "\x022\x04\x02$$^^\x04\x02))^^\x05\x022;CHch\x0F\x02", "$$))DDHHPPTTVV^^ddhhppttvv\x04\x02WWww\x04\x02CHch\x04\x02", "GGgg\b\x02aa\u2041\u2042\u2056\u2056\uFE35\uFE36\uFE4F\uFE51\uFF41", "\uFF41\x03\x02bb\n\x02\xA2\xA2\u1682\u1682\u1810\u1810\u2002", "\u200C\u202A\u202B\u2031\u2031\u2061\u2061\u3002\u3002\x04\x02\f", "\f\x0F\x0F\x03\x02\x0E\x0E\x03\x02  \u01AF\x022;C", "\\aac|\xAC\xAC\xB7\xB7\xB9\xB9\xBC\xBC\xC2\xD8\xDA", "\xF8\xFA\u02C3\u02C8\u02D3\u02E2\u02E6\u02EE\u02EE\u02F0\u02F0\u0302", "\u0376\u0378\u0379\u037C\u037F\u0388\u038C\u038E\u038E\u0390\u03A3\u03A5", "\u03F7\u03F9\u0483\u0485\u0489\u048C\u0529\u0533\u0558\u055B\u055B\u0563", "\u0589\u0593\u05BF\u05C1\u05C1\u05C3\u05C4\u05C6\u05C7\u05C9\u05C9\u05D2", "\u05EC\u05F2\u05F4\u0612\u061C\u0622\u066B\u0670\u06D5\u06D7\u06DE\u06E1", "\u06EA\u06EC\u06FE\u0701\u0701\u0712\u074C\u074F\u07B3\u07C2\u07F7\u07FC", "\u07FC\u0802\u082F\u0842\u085D\u08A2\u08A2\u08A4\u08AE\u08E6\u0900\u0902", "\u0965\u0968\u0971\u0973\u0979\u097B\u0981\u0983\u0985\u0987\u098E\u0991", "\u0992\u0995\u09AA\u09AC\u09B2\u09B4\u09B4\u09B8\u09BB\u09BE\u09C6\u09C9", "\u09CA\u09CD\u09D0\u09D9\u09D9\u09DE\u09DF\u09E1\u09E5\u09E8\u09F3\u0A03", "\u0A05\u0A07\u0A0C\u0A11\u0A12\u0A15\u0A2A\u0A2C\u0A32\u0A34\u0A35\u0A37", "\u0A38\u0A3A\u0A3B\u0A3E\u0A3E\u0A40\u0A44\u0A49\u0A4A\u0A4D\u0A4F\u0A53", "\u0A53\u0A5B\u0A5E\u0A60\u0A60\u0A68\u0A77\u0A83\u0A85\u0A87\u0A8F\u0A91", "\u0A93\u0A95\u0AAA\u0AAC\u0AB2\u0AB4\u0AB5\u0AB7\u0ABB\u0ABE\u0AC7\u0AC9", "\u0ACB\u0ACD\u0ACF\u0AD2\u0AD2\u0AE2\u0AE5\u0AE8\u0AF1\u0B03\u0B05\u0B07", "\u0B0E\u0B11\u0B12\u0B15\u0B2A\u0B2C\u0B32\u0B34\u0B35\u0B37\u0B3B\u0B3E", "\u0B46\u0B49\u0B4A\u0B4D\u0B4F\u0B58\u0B59\u0B5E\u0B5F\u0B61\u0B65\u0B68", "\u0B71\u0B73\u0B73\u0B84\u0B85\u0B87\u0B8C\u0B90\u0B92\u0B94\u0B97\u0B9B", "\u0B9C\u0B9E\u0B9E\u0BA0\u0BA1\u0BA5\u0BA6\u0BAA\u0BAC\u0BB0\u0BBB\u0BC0", "\u0BC4\u0BC8\u0BCA\u0BCC\u0BCF\u0BD2\u0BD2\u0BD9\u0BD9\u0BE8\u0BF1\u0C03", "\u0C05\u0C07\u0C0E\u0C10\u0C12\u0C14\u0C2A\u0C2C\u0C35\u0C37\u0C3B\u0C3F", "\u0C46\u0C48\u0C4A\u0C4C\u0C4F\u0C57\u0C58\u0C5A\u0C5B\u0C62\u0C65\u0C68", "\u0C71\u0C84\u0C85\u0C87\u0C8E\u0C90\u0C92\u0C94\u0CAA\u0CAC\u0CB5\u0CB7", "\u0CBB\u0CBE\u0CC6\u0CC8\u0CCA\u0CCC\u0CCF\u0CD7\u0CD8\u0CE0\u0CE0\u0CE2", "\u0CE5\u0CE8\u0CF1\u0CF3\u0CF4\u0D04\u0D05\u0D07\u0D0E\u0D10\u0D12\u0D14", "\u0D3C\u0D3F\u0D46\u0D48\u0D4A\u0D4C\u0D50\u0D59\u0D59\u0D62\u0D65\u0D68", "\u0D71\u0D7C\u0D81\u0D84\u0D85\u0D87\u0D98\u0D9C\u0DB3\u0DB5\u0DBD\u0DBF", "\u0DBF\u0DC2\u0DC8\u0DCC\u0DCC\u0DD1\u0DD6\u0DD8\u0DD8\u0DDA\u0DE1\u0DF4", "\u0DF5\u0E03\u0E3C\u0E42\u0E50\u0E52\u0E5B\u0E83\u0E84\u0E86\u0E86\u0E89", "\u0E8A\u0E8C\u0E8C\u0E8F\u0E8F\u0E96\u0E99\u0E9B\u0EA1\u0EA3\u0EA5\u0EA7", "\u0EA7\u0EA9\u0EA9\u0EAC\u0EAD\u0EAF\u0EBB\u0EBD\u0EBF\u0EC2\u0EC6\u0EC8", "\u0EC8\u0ECA\u0ECF\u0ED2\u0EDB\u0EDE\u0EE1\u0F02\u0F02\u0F1A\u0F1B\u0F22", "\u0F2B\u0F37\u0F37\u0F39\u0F39\u0F3B\u0F3B\u0F40\u0F49\u0F4B\u0F6E\u0F73", "\u0F86\u0F88\u0F99\u0F9B\u0FBE\u0FC8\u0FC8\u1002\u104B\u1052\u109F\u10A2", "\u10C7\u10C9\u10C9\u10CF\u10CF\u10D2\u10FC\u10FE\u124A\u124C\u124F\u1252", "\u1258\u125A\u125A\u125C\u125F\u1262\u128A\u128C\u128F\u1292\u12B2\u12B4", "\u12B7\u12BA\u12C0\u12C2\u12C2\u12C4\u12C7\u12CA\u12D8\u12DA\u1312\u1314", "\u1317\u131A\u135C\u135F\u1361\u136B\u1373\u1382\u1391\u13A2\u13F6\u1403", "\u166E\u1671\u1681\u1683\u169C\u16A2\u16EC\u16F0\u16F2\u1702\u170E\u1710", "\u1716\u1722\u1736\u1742\u1755\u1762\u176E\u1770\u1772\u1774\u1775\u1782", "\u17D5\u17D9\u17D9\u17DE\u17DF\u17E2\u17EB\u180D\u180F\u1812\u181B\u1822", "\u1879\u1882\u18AC\u18B2\u18F7\u1902\u191E\u1922\u192D\u1932\u193D\u1948", "\u196F\u1972\u1976\u1982\u19AD\u19B2\u19CB\u19D2\u19DC\u1A02\u1A1D\u1A22", "\u1A60\u1A62\u1A7E\u1A81\u1A8B\u1A92\u1A9B\u1AA9\u1AA9\u1B02\u1B4D\u1B52", "\u1B5B\u1B6D\u1B75\u1B82\u1BF5\u1C02\u1C39\u1C42\u1C4B\u1C4F\u1C7F\u1CD2", "\u1CD4\u1CD6\u1CF8\u1D02\u1DE8\u1DFE\u1F17\u1F1A\u1F1F\u1F22\u1F47\u1F4A", "\u1F4F\u1F52\u1F59\u1F5B\u1F5B\u1F5D\u1F5D\u1F5F\u1F5F\u1F61\u1F7F\u1F82", "\u1FB6\u1FB8\u1FBE\u1FC0\u1FC0\u1FC4\u1FC6\u1FC8\u1FCE\u1FD2\u1FD5\u1FD8", "\u1FDD\u1FE2\u1FEE\u1FF4\u1FF6\u1FF8\u1FFE\u2041\u2042\u2056\u2056\u2073", "\u2073\u2081\u2081\u2092\u209E\u20D2\u20DE\u20E3\u20E3\u20E7\u20F2\u2104", "\u2104\u2109\u2109\u210C\u2115\u2117\u2117\u211A\u211F\u2126\u2126\u2128", "\u2128\u212A\u212A\u212C\u213B\u213E\u2141\u2147\u214B\u2150\u2150\u2162", "\u218A\u2C02\u2C30\u2C32\u2C60\u2C62\u2CE6\u2CED\u2CF5\u2D02\u2D27\u2D29", "\u2D29\u2D2F\u2D2F\u2D32\u2D69\u2D71\u2D71\u2D81\u2D98\u2DA2\u2DA8\u2DAA", "\u2DB0\u2DB2\u2DB8\u2DBA\u2DC0\u2DC2\u2DC8\u2DCA\u2DD0\u2DD2\u2DD8\u2DDA", "\u2DE0\u2DE2\u2E01\u3007\u3009\u3023\u3031\u3033\u3037\u303A\u303E\u3043", "\u3098\u309B\u30A1\u30A3\u30FC\u30FE\u3101\u3107\u312F\u3133\u3190\u31A2", "\u31BC\u31F2\u3201\u3402\u4DB7\u4E02\u9FCE\uA002\uA48E\uA4D2\uA4FF\uA502", "\uA60E\uA612\uA62D\uA642\uA671\uA676\uA67F\uA681\uA699\uA6A1\uA6F3\uA719", "\uA721\uA724\uA78A\uA78D\uA790\uA792\uA795\uA7A2\uA7AC\uA7FA\uA829\uA842", "\uA875\uA882\uA8C6\uA8D2\uA8DB\uA8E2\uA8F9\uA8FD\uA8FD\uA902\uA92F\uA932", "\uA955\uA962\uA97E\uA982\uA9C2\uA9D1\uA9DB\uAA02\uAA38\uAA42\uAA4F\uAA52", "\uAA5B\uAA62\uAA78\uAA7C\uAA7D\uAA82\uAAC4\uAADD\uAADF\uAAE2\uAAF1\uAAF4", "\uAAF8\uAB03\uAB08\uAB0B\uAB10\uAB13\uAB18\uAB22\uAB28\uAB2A\uAB30\uABC2", "\uABEC\uABEE\uABEF\uABF2\uABFB\uAC02\uD7A5\uD7B2\uD7C8\uD7CD\uD7FD\uF902", "\uFA6F\uFA72\uFADB\uFB02\uFB08\uFB15\uFB19\uFB1F\uFB2A\uFB2C\uFB38\uFB3A", "\uFB3E\uFB40\uFB40\uFB42\uFB43\uFB45\uFB46\uFB48\uFBB3\uFBD5\uFD3F\uFD52", "\uFD91\uFD94\uFDC9\uFDF2\uFDFD\uFE02\uFE11\uFE22\uFE28\uFE35\uFE36\uFE4F", "\uFE51\uFE72\uFE76\uFE78\uFEFE\uFF12\uFF1B\uFF23\uFF3C\uFF41\uFF41\uFF43", "\uFF5C\uFF68\uFFC0\uFFC4\uFFC9\uFFCC\uFFD1\uFFD4\uFFD9\uFFDC\uFFDE\x03", "\x02\x1F\x1F\x03\x02\x1E\x1E\x03\x02\x0F\x0F\x13", "\x02&&\xA4\xA7\u0591\u0591\u060D\u060D\u09F4\u09F5\u09FD\u09FD", "\u0AF3\u0AF3\u0BFB\u0BFB\u0E41\u0E41\u17DD\u17DD\u20A2\u20BC\uA83A\uA83A", "\uFDFE\uFDFE\uFE6B\uFE6B\uFF06\uFF06\uFFE2\uFFE3\uFFE7\uFFE8\x03\x02", "\"\"\x03\x02\x0B\x0B\x03\x02\f\f\x03\x02\r\r\x03\x02", "!!\u0174\x02C\\c|\xAC\xAC\xB7\xB7\xBC\xBC\xC2\xD8", "\xDA\xF8\xFA\u02C3\u02C8\u02D3\u02E2\u02E6\u02EE\u02EE\u02F0\u02F0", "\u0372\u0376\u0378\u0379\u037C\u037F\u0388\u0388\u038A\u038C\u038E\u038E", "\u0390\u03A3\u03A5\u03F7\u03F9\u0483\u048C\u0529\u0533\u0558\u055B\u055B", "\u0563\u0589\u05D2\u05EC\u05F2\u05F4\u0622\u064C\u0670\u0671\u0673\u06D5", "\u06D7\u06D7\u06E7\u06E8\u06F0\u06F1\u06FC\u06FE\u0701\u0701\u0712\u0712", "\u0714\u0731\u074F\u07A7\u07B3\u07B3\u07CC\u07EC\u07F6\u07F7\u07FC\u07FC", "\u0802\u0817\u081C\u081C\u0826\u0826\u082A\u082A\u0842\u085A\u08A2\u08A2", "\u08A4\u08AE\u0906\u093B\u093F\u093F\u0952\u0952\u095A\u0963\u0973\u0979", "\u097B\u0981\u0987\u098E\u0991\u0992\u0995\u09AA\u09AC\u09B2\u09B4\u09B4", "\u09B8\u09BB\u09BF\u09BF\u09D0\u09D0\u09DE\u09DF\u09E1\u09E3\u09F2\u09F3", "\u0A07\u0A0C\u0A11\u0A12\u0A15\u0A2A\u0A2C\u0A32\u0A34\u0A35\u0A37\u0A38", "\u0A3A\u0A3B\u0A5B\u0A5E\u0A60\u0A60\u0A74\u0A76\u0A87\u0A8F\u0A91\u0A93", "\u0A95\u0AAA\u0AAC\u0AB2\u0AB4\u0AB5\u0AB7\u0ABB\u0ABF\u0ABF\u0AD2\u0AD2", "\u0AE2\u0AE3\u0B07\u0B0E\u0B11\u0B12\u0B15\u0B2A\u0B2C\u0B32\u0B34\u0B35", "\u0B37\u0B3B\u0B3F\u0B3F\u0B5E\u0B5F\u0B61\u0B63\u0B73\u0B73\u0B85\u0B85", "\u0B87\u0B8C\u0B90\u0B92\u0B94\u0B97\u0B9B\u0B9C\u0B9E\u0B9E\u0BA0\u0BA1", "\u0BA5\u0BA6\u0BAA\u0BAC\u0BB0\u0BBB\u0BD2\u0BD2\u0C07\u0C0E\u0C10\u0C12", "\u0C14\u0C2A\u0C2C\u0C35\u0C37\u0C3B\u0C3F\u0C3F\u0C5A\u0C5B\u0C62\u0C63", "\u0C87\u0C8E\u0C90\u0C92\u0C94\u0CAA\u0CAC\u0CB5\u0CB7\u0CBB\u0CBF\u0CBF", "\u0CE0\u0CE0\u0CE2\u0CE3\u0CF3\u0CF4\u0D07\u0D0E\u0D10\u0D12\u0D14\u0D3C", "\u0D3F\u0D3F\u0D50\u0D50\u0D62\u0D63\u0D7C\u0D81\u0D87\u0D98\u0D9C\u0DB3", "\u0DB5\u0DBD\u0DBF\u0DBF\u0DC2\u0DC8\u0E03\u0E32\u0E34\u0E35\u0E42\u0E48", "\u0E83\u0E84\u0E86\u0E86\u0E89\u0E8A\u0E8C\u0E8C\u0E8F\u0E8F\u0E96\u0E99", "\u0E9B\u0EA1\u0EA3\u0EA5\u0EA7\u0EA7\u0EA9\u0EA9\u0EAC\u0EAD\u0EAF\u0EB2", "\u0EB4\u0EB5\u0EBF\u0EBF\u0EC2\u0EC6\u0EC8\u0EC8\u0EDE\u0EE1\u0F02\u0F02", "\u0F42\u0F49\u0F4B\u0F6E\u0F8A\u0F8E\u1002\u102C\u1041\u1041\u1052\u1057", "\u105C\u105F\u1063\u1063\u1067\u1068\u1070\u1072\u1077\u1083\u1090\u1090", "\u10A2\u10C7\u10C9\u10C9\u10CF\u10CF\u10D2\u10FC\u10FE\u124A\u124C\u124F", "\u1252\u1258\u125A\u125A\u125C\u125F\u1262\u128A\u128C\u128F\u1292\u12B2", "\u12B4\u12B7\u12BA\u12C0\u12C2\u12C2\u12C4\u12C7\u12CA\u12D8\u12DA\u1312", "\u1314\u1317\u131A\u135C\u1382\u1391\u13A2\u13F6\u1403\u166E\u1671\u1681", "\u1683\u169C\u16A2\u16EC\u16F0\u16F2\u1702\u170E\u1710\u1713\u1722\u1733", "\u1742\u1753\u1762\u176E\u1770\u1772\u1782\u17B5\u17D9\u17D9\u17DE\u17DE", "\u1822\u1879\u1882\u18AA\u18AC\u18AC\u18B2\u18F7\u1902\u191E\u1952\u196F", "\u1972\u1976\u1982\u19AD\u19C3\u19C9\u1A02\u1A18\u1A22\u1A56\u1AA9\u1AA9", "\u1B07\u1B35\u1B47\u1B4D\u1B85\u1BA2\u1BB0\u1BB1\u1BBC\u1BE7\u1C02\u1C25", "\u1C4F\u1C51\u1C5C\u1C7F\u1CEB\u1CEE\u1CF0\u1CF3\u1CF7\u1CF8\u1D02\u1DC1", "\u1E02\u1F17\u1F1A\u1F1F\u1F22\u1F47\u1F4A\u1F4F\u1F52\u1F59\u1F5B\u1F5B", "\u1F5D\u1F5D\u1F5F\u1F5F\u1F61\u1F7F\u1F82\u1FB6\u1FB8\u1FBE\u1FC0\u1FC0", "\u1FC4\u1FC6\u1FC8\u1FCE\u1FD2\u1FD5\u1FD8\u1FDD\u1FE2\u1FEE\u1FF4\u1FF6", "\u1FF8\u1FFE\u2073\u2073\u2081\u2081\u2092\u209E\u2104\u2104\u2109\u2109", "\u210C\u2115\u2117\u2117\u211A\u211F\u2126\u2126\u2128\u2128\u212A\u212A", "\u212C\u213B\u213E\u2141\u2147\u214B\u2150\u2150\u2162\u218A\u2C02\u2C30", "\u2C32\u2C60\u2C62\u2CE6\u2CED\u2CF0\u2CF4\u2CF5\u2D02\u2D27\u2D29\u2D29", "\u2D2F\u2D2F\u2D32\u2D69\u2D71\u2D71\u2D82\u2D98\u2DA2\u2DA8\u2DAA\u2DB0", "\u2DB2\u2DB8\u2DBA\u2DC0\u2DC2\u2DC8\u2DCA\u2DD0\u2DD2\u2DD8\u2DDA\u2DE0", "\u3007\u3009\u3023\u302B\u3033\u3037\u303A\u303E\u3043\u3098\u309D\u30A1", "\u30A3\u30FC\u30FE\u3101\u3107\u312F\u3133\u3190\u31A2\u31BC\u31F2\u3201", "\u3402\u4DB7\u4E02\u9FCE\uA002\uA48E\uA4D2\uA4FF\uA502\uA60E\uA612\uA621", "\uA62C\uA62D\uA642\uA670\uA681\uA699\uA6A2\uA6F1\uA719\uA721\uA724\uA78A", "\uA78D\uA790\uA792\uA795\uA7A2\uA7AC\uA7FA\uA803\uA805\uA807\uA809\uA80C", "\uA80E\uA824\uA842\uA875\uA884\uA8B5\uA8F4\uA8F9\uA8FD\uA8FD\uA90C\uA927", "\uA932\uA948\uA962\uA97E\uA986\uA9B4\uA9D1\uA9D1\uAA02\uAA2A\uAA42\uAA44", "\uAA46\uAA4D\uAA62\uAA78\uAA7C\uAA7C\uAA82\uAAB1\uAAB3\uAAB3\uAAB7\uAAB8", "\uAABB\uAABF\uAAC2\uAAC2\uAAC4\uAAC4\uAADD\uAADF\uAAE2\uAAEC\uAAF4\uAAF6", "\uAB03\uAB08\uAB0B\uAB10\uAB13\uAB18\uAB22\uAB28\uAB2A\uAB30\uABC2\uABE4", "\uAC02\uD7A5\uD7B2\uD7C8\uD7CD\uD7FD\uF902\uFA6F\uFA72\uFADB\uFB02\uFB08", "\uFB15\uFB19\uFB1F\uFB1F\uFB21\uFB2A\uFB2C\uFB38\uFB3A\uFB3E\uFB40\uFB40", "\uFB42\uFB43\uFB45\uFB46\uFB48\uFBB3\uFBD5\uFD3F\uFD52\uFD91\uFD94\uFDC9", "\uFDF2\uFDFD\uFE72\uFE76\uFE78\uFEFE\uFF23\uFF3C\uFF43\uFF5C\uFF68\uFFC0", "\uFFC4\uFFC9\uFFCC\uFFD1\uFFD4\uFFD9\uFFDC\uFFDE\x04\x02CCcc\x04", "\x02DDdd\x04\x02EEee\x04\x02FFff\x04\x02HHhh\x04\x02", "IIii\x04\x02JJjj\x04\x02KKkk\x04\x02LLll\x04\x02MMm", "m\x04\x02NNnn\x04\x02OOoo\x04\x02PPpp\x04\x02QQqq\x04", "\x02RRrr\x04\x02SSss\x04\x02TTtt\x04\x02UUuu\x04\x02", "VVvv\x04\x02XXxx\x04\x02YYyy\x04\x02ZZzz\x04\x02[[{", "{\x04\x02\\\\||\x02\u0517\x02\x03\x03\x02\x02\x02", "\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02", "\x02\t\x03\x02\x02\x02\x02\x0B\x03\x02\x02\x02", "\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02", "\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02", "\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02", "\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02", "\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02", "\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02", "%\x03\x02\x02\x02\x02'\x03\x02\x02\x02\x02)\x03", "\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02", "\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02", "\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02", "\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02", ";\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03", "\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02", "\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02", "\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02\x02", "\x02M\x03\x02\x02\x02\x02O\x03\x02\x02\x02\x02", "Q\x03\x02\x02\x02\x02S\x03\x02\x02\x02\x02U\x03", "\x02\x02\x02\x02W\x03\x02\x02\x02\x02Y\x03\x02", "\x02\x02\x02[\x03\x02\x02\x02\x02]\x03\x02\x02", "\x02\x02_\x03\x02\x02\x02\x02a\x03\x02\x02\x02", "\x02c\x03\x02\x02\x02\x02e\x03\x02\x02\x02\x02", "g\x03\x02\x02\x02\x02i\x03\x02\x02\x02\x02k\x03", "\x02\x02\x02\x02m\x03\x02\x02\x02\x02o\x03\x02", "\x02\x02\x02q\x03\x02\x02\x02\x02s\x03\x02\x02", "\x02\x02u\x03\x02\x02\x02\x02w\x03\x02\x02\x02", "\x02y\x03\x02\x02\x02\x02{\x03\x02\x02\x02\x02", "}\x03\x02\x02\x02\x02\x7F\x03\x02\x02\x02\x02", "\x81\x03\x02\x02\x02\x02\x83\x03\x02\x02\x02\x02", "\x85\x03\x02\x02\x02\x02\x87\x03\x02\x02\x02\x02", "\x89\x03\x02\x02\x02\x02\x8B\x03\x02\x02\x02\x02", "\x8D\x03\x02\x02\x02\x02\x8F\x03\x02\x02\x02\x02", "\x91\x03\x02\x02\x02\x02\x93\x03\x02\x02\x02\x02", "\x95\x03\x02\x02\x02\x02\x97\x03\x02\x02\x02\x02", "\x99\x03\x02\x02\x02\x02\x9B\x03\x02\x02\x02\x02", "\x9D\x03\x02\x02\x02\x02\x9F\x03\x02\x02\x02\x02", "\xA1\x03\x02\x02\x02\x02\xA3\x03\x02\x02\x02\x02", "\xA5\x03\x02\x02\x02\x02\xA7\x03\x02\x02\x02\x02", "\xA9\x03\x02\x02\x02\x02\xAB\x03\x02\x02\x02\x02", "\xAD\x03\x02\x02\x02\x02\xAF\x03\x02\x02\x02\x02", "\xB1\x03\x02\x02\x02\x02\xB3\x03\x02\x02\x02\x02", "\xB5\x03\x02\x02\x02\x02\xB7\x03\x02\x02\x02\x02", "\xB9\x03\x02\x02\x02\x02\xBB\x03\x02\x02\x02\x02", "\xBD\x03\x02\x02\x02\x02\xBF\x03\x02\x02\x02\x02", "\xC1\x03\x02\x02\x02\x02\xC3\x03\x02\x02\x02\x02", "\xC5\x03\x02\x02\x02\x02\xC7\x03\x02\x02\x02\x02", "\xC9\x03\x02\x02\x02\x02\xCB\x03\x02\x02\x02\x02", "\xCD\x03\x02\x02\x02\x02\xCF\x03\x02\x02\x02\x02", "\xD1\x03\x02\x02\x02\x02\xD3\x03\x02\x02\x02\x02", "\xD5\x03\x02\x02\x02\x02\xD7\x03\x02\x02\x02\x02", "\xD9\x03\x02\x02\x02\x02\xDB\x03\x02\x02\x02\x02", "\xDD\x03\x02\x02\x02\x02\xDF\x03\x02\x02\x02\x02", "\xE1\x03\x02\x02\x02\x02\xE3\x03\x02\x02\x02\x02", "\xE5\x03\x02\x02\x02\x02\xE7\x03\x02\x02\x02\x02", "\xE9\x03\x02\x02\x02\x02\xEB\x03\x02\x02\x02\x02", "\xED\x03\x02\x02\x02\x02\xEF\x03\x02\x02\x02\x02", "\xF1\x03\x02\x02\x02\x02\xF3\x03\x02\x02\x02\x02", "\xF5\x03\x02\x02\x02\x02\xF7\x03\x02\x02\x02\x02", "\xF9\x03\x02\x02\x02\x02\xFB\x03\x02\x02\x02\x02", "\xFD\x03\x02\x02\x02\x02\xFF\x03\x02\x02\x02\x02", "\u0101\x03\x02\x02\x02\x02\u0103\x03\x02\x02\x02\x02", "\u0105\x03\x02\x02\x02\x02\u0107\x03\x02\x02\x02\x02", "\u0109\x03\x02\x02\x02\x02\u010B\x03\x02\x02\x02\x02", "\u010D\x03\x02\x02\x02\x02\u010F\x03\x02\x02\x02\x02", "\u0111\x03\x02\x02\x02\x02\u0113\x03\x02\x02\x02\x02", "\u0115\x03\x02\x02\x02\x02\u0117\x03\x02\x02\x02\x02", "\u0119\x03\x02\x02\x02\x02\u011B\x03\x02\x02\x02\x02", "\u011D\x03\x02\x02\x02\x02\u011F\x03\x02\x02\x02\x02", "\u0121\x03\x02\x02\x02\x02\u0123\x03\x02\x02\x02\x02", "\u0125\x03\x02\x02\x02\x02\u0127\x03\x02\x02\x02\x02", "\u0129\x03\x02\x02\x02\x02\u012B\x03\x02\x02\x02\x02", "\u012D\x03\x02\x02\x02\x02\u012F\x03\x02\x02\x02\x02", "\u0131\x03\x02\x02\x02\x02\u0133\x03\x02\x02\x02\x02", "\u0135\x03\x02\x02\x02\x03\u0185\x03\x02\x02\x02\x05", "\u0187\x03\x02\x02\x02\x07\u0189\x03\x02\x02\x02\t", "\u018B\x03\x02\x02\x02\x0B\u018E\x03\x02\x02\x02\r", "\u0192\x03\x02\x02\x02\x0F\u0194\x03\x02\x02\x02\x11", "\u0196\x03\x02\x02\x02\x13\u0198\x03\x02\x02\x02\x15", "\u019A\x03\x02\x02\x02\x17\u019C\x03\x02\x02\x02\x19", "\u019E\x03\x02\x02\x02\x1B\u01A0\x03\x02\x02\x02\x1D", "\u01A2\x03\x02\x02\x02\x1F\u01A4\x03\x02\x02\x02!", "\u01A6\x03\x02\x02\x02#\u01A8\x03\x02\x02\x02%\u01AA", "\x03\x02\x02\x02'\u01AC\x03\x02\x02\x02)\u01AE\x03", "\x02\x02\x02+\u01B0\x03\x02\x02\x02-\u01B3\x03\x02", "\x02\x02/\u01B5\x03\x02\x02\x021\u01B7\x03\x02\x02", "\x023\u01BA\x03\x02\x02\x025\u01BC\x03\x02\x02\x02", "7\u01BE\x03\x02\x02\x029\u01C1\x03\x02\x02\x02;\u01C4", "\x03\x02\x02\x02=\u01C7\x03\x02\x02\x02?\u01C9\x03", "\x02\x02\x02A\u01CB\x03\x02\x02\x02C\u01CE\x03\x02", "\x02\x02E\u01D1\x03\x02\x02\x02G\u01D3\x03\x02\x02", "\x02I\u01D5\x03\x02\x02\x02K\u01D7\x03\x02\x02\x02", "M\u01D9\x03\x02\x02\x02O\u01DB\x03\x02\x02\x02Q\u01DD", "\x03\x02\x02\x02S\u01DF\x03\x02\x02\x02U\u01E1\x03", "\x02\x02\x02W\u01E3\x03\x02\x02\x02Y\u01E5\x03\x02", "\x02\x02[\u01E7\x03\x02\x02\x02]\u01E9\x03\x02\x02", "\x02_\u01EB\x03\x02\x02\x02a\u01ED\x03\x02\x02\x02", "c\u01EF\x03\x02\x02\x02e\u01F1\x03\x02\x02\x02g\u01F3", "\x03\x02\x02\x02i\u01F5\x03\x02\x02\x02k\u01F7\x03", "\x02\x02\x02m\u01F9\x03\x02\x02\x02o\u0200\x03\x02", "\x02\x02q\u0208\x03\x02\x02\x02s\u0210\x03\x02\x02", "\x02u\u0216\x03\x02\x02\x02w\u021F\x03\x02\x02\x02", "y\u0226\x03\x02\x02\x02{\u022C\x03\x02\x02\x02}\u0230", "\x03\x02\x02\x02\x7F\u0237\x03\x02\x02\x02\x81\u023C", "\x03\x02\x02\x02\x83\u0242\x03\x02\x02\x02\x85\u0245", "\x03\x02\x02\x02\x87\u0250\x03\x02\x02\x02\x89\u0257", "\x03\x02\x02\x02\x8B\u025A\x03\x02\x02\x02\x8D\u0261", "\x03\x02\x02\x02\x8F\u0268\x03\x02\x02\x02\x91\u026D", "\x03\x02\x02\x02\x93\u0271\x03\x02\x02\x02\x95\u0276", "\x03\x02\x02\x02\x97\u027E\x03\x02\x02\x02\x99\u0283", "\x03\x02\x02\x02\x9B\u0286\x03\x02\x02\x02\x9D\u0296", "\x03\x02\x02\x02\x9F\u029F\x03\x02\x02\x02\xA1\u02A5", "\x03\x02\x02\x02\xA3\u02AC\x03\x02\x02\x02\xA5\u02B2", "\x03\x02\x02\x02\xA7\u02B6\x03\x02\x02\x02\xA9\u02BD", "\x03\x02\x02\x02\xAB\u02C4\x03\x02\x02\x02\xAD\u02CB", "\x03\x02\x02\x02\xAF\u02D3\x03\x02\x02\x02\xB1\u02D6", "\x03\x02\x02\x02\xB3\u02DF\x03\x02\x02\x02\xB5\u02E6", "\x03\x02\x02\x02\xB7\u02EC\x03\x02\x02\x02\xB9\u02EF", "\x03\x02\x02\x02\xBB\u02F4\x03\x02\x02\x02\xBD\u02FA", "\x03\x02\x02\x02\xBF\u0304\x03\x02\x02\x02\xC1\u0308", "\x03\x02\x02\x02\xC3\u0313\x03\x02\x02\x02\xC5\u0318", "\x03\x02\x02\x02\xC7\u031D\x03\x02\x02\x02\xC9\u0322", "\x03\x02\x02\x02\xCB\u0328\x03\x02\x02\x02\xCD\u032D", "\x03\x02\x02\x02\xCF\u033A\x03\x02\x02\x02\xD1\u033E", "\x03\x02\x02\x02\xD3\u0344\x03\x02\x02\x02\xD5\u0351", "\x03\x02\x02\x02\xD7\u0362\x03\x02\x02\x02\xD9\u0365", "\x03\x02\x02\x02\xDB\u0369\x03\x02\x02\x02\xDD\u036D", "\x03\x02\x02\x02\xDF\u0371\x03\x02\x02\x02\xE1\u0378", "\x03\x02\x02\x02\xE3\u037D\x03\x02\x02\x02\xE5\u0386", "\x03\x02\x02\x02\xE7\u038B\x03\x02\x02\x02\xE9\u0391", "\x03\x02\x02\x02\xEB\u0398\x03\x02\x02\x02\xED\u03A0", "\x03\x02\x02\x02\xEF\u03A4\x03\x02\x02\x02\xF1\u03A9", "\x03\x02\x02\x02\xF3\u03B0\x03\x02\x02\x02\xF5\u03B5", "\x03\x02\x02\x02\xF7\u03BB\x03\x02\x02\x02\xF9\u03C2", "\x03\x02\x02\x02\xFB\u03C7\x03\x02\x02\x02\xFD\u03CC", "\x03\x02\x02\x02\xFF\u03D0\x03\x02\x02\x02\u0101\u03D5", "\x03\x02\x02\x02\u0103\u03DA\x03\x02\x02\x02\u0105\u03DF", "\x03\x02\x02\x02\u0107\u03E5\x03\x02\x02\x02\u0109\u0403", "\x03\x02\x02\x02\u010B\u0408\x03\x02\x02\x02\u010D\u040C", "\x03\x02\x02\x02\u010F\u0420\x03\x02\x02\x02\u0111\u0430", "\x03\x02\x02\x02\u0113\u0432\x03\x02\x02\x02\u0115\u0439", "\x03\x02\x02\x02\u0117\u043D\x03\x02\x02\x02\u0119\u0441", "\x03\x02\x02\x02\u011B\u0445\x03\x02\x02\x02\u011D\u0447", "\x03\x02\x02\x02\u011F\u044B\x03\x02\x02\x02\u0121\u044D", "\x03\x02\x02\x02\u0123\u0465\x03\x02\x02\x02\u0125\u0473", "\x03\x02\x02\x02\u0127\u047C\x03\x02\x02\x02\u0129\u0485", "\x03\x02\x02\x02\u012B\u0489\x03\x02\x02\x02\u012D\u048B", "\x03\x02\x02\x02\u012F\u0497\x03\x02\x02\x02\u0131\u04A7", "\x03\x02\x02\x02\u0133\u04BD\x03\x02\x02\x02\u0135\u04BF", "\x03\x02\x02\x02\u0137\u04C1\x03\x02\x02\x02\u0139\u04C3", "\x03\x02\x02\x02\u013B\u04C5\x03\x02\x02\x02\u013D\u04C7", "\x03\x02\x02\x02\u013F\u04C9\x03\x02\x02\x02\u0141\u04CB", "\x03\x02\x02\x02\u0143\u04CD\x03\x02\x02\x02\u0145\u04CF", "\x03\x02\x02\x02\u0147\u04D1\x03\x02\x02\x02\u0149\u04D3", "\x03\x02\x02\x02\u014B\u04D5\x03\x02\x02\x02\u014D\u04D7", "\x03\x02\x02\x02\u014F\u04D9\x03\x02\x02\x02\u0151\u04DB", "\x03\x02\x02\x02\u0153\u04DD\x03\x02\x02\x02\u0155\u04DF", "\x03\x02\x02\x02\u0157\u04E1\x03\x02\x02\x02\u0159\u04E3", "\x03\x02\x02\x02\u015B\u04E5\x03\x02\x02\x02\u015D\u04E7", "\x03\x02\x02\x02\u015F\u04E9\x03\x02\x02\x02\u0161\u04EB", "\x03\x02\x02\x02\u0163\u04ED\x03\x02\x02\x02\u0165\u04EF", "\x03\x02\x02\x02\u0167\u04F1\x03\x02\x02\x02\u0169\u04F3", "\x03\x02\x02\x02\u016B\u04F5\x03\x02\x02\x02\u016D\u04F7", "\x03\x02\x02\x02\u016F\u04F9\x03\x02\x02\x02\u0171\u04FB", "\x03\x02\x02\x02\u0173\u04FD\x03\x02\x02\x02\u0175\u04FF", "\x03\x02\x02\x02\u0177\u0501\x03\x02\x02\x02\u0179\u0503", "\x03\x02\x02\x02\u017B\u0505\x03\x02\x02\x02\u017D\u0507", "\x03\x02\x02\x02\u017F\u0509\x03\x02\x02\x02\u0181\u050B", "\x03\x02\x02\x02\u0183\u050D\x03\x02\x02\x02\u0185\u0186", "\x07=\x02\x02\u0186\x04\x03\x02\x02\x02\u0187\u0188", "\x07<\x02\x02\u0188\x06\x03\x02\x02\x02\u0189\u018A", "\x07/\x02\x02\u018A\b\x03\x02\x02\x02\u018B\u018C\x07", "?\x02\x02\u018C\u018D\x07@\x02\x02\u018D\n\x03\x02\x02", "\x02\u018E\u018F\x07<\x02\x02\u018F\u0190\x071\x02\x02", "\u0190\u0191\x071\x02\x02\u0191\f\x03\x02\x02\x02\u0192", "\u0193\x071\x02\x02\u0193\x0E\x03\x02\x02\x02\u0194", "\u0195\x070\x02\x02\u0195\x10\x03\x02\x02\x02\u0196", "\u0197\x07B\x02\x02\u0197\x12\x03\x02\x02\x02\u0198", "\u0199\x07%\x02\x02\u0199\x14\x03\x02\x02\x02\u019A", "\u019B\x07A\x02\x02\u019B\x16\x03\x02\x02\x02\u019C", "\u019D\x07(\x02\x02\u019D\x18\x03\x02\x02\x02\u019E", "\u019F\x07?\x02\x02\u019F\x1A\x03\x02\x02\x02\u01A0", "\u01A1\x07-\x02\x02\u01A1\x1C\x03\x02\x02\x02\u01A2", "\u01A3\x07}\x02\x02\u01A3\x1E\x03\x02\x02\x02\u01A4", "\u01A5\x07.\x02\x02\u01A5 \x03\x02\x02\x02\u01A6\u01A7", "\x07\x7F\x02\x02\u01A7\"\x03\x02\x02\x02\u01A8\u01A9", "\x07]\x02\x02\u01A9$\x03\x02\x02\x02\u01AA\u01AB\x07", "_\x02\x02\u01AB&\x03\x02\x02\x02\u01AC\u01AD\x07*\x02", "\x02\u01AD(\x03\x02\x02\x02\u01AE\u01AF\x07+\x02\x02", "\u01AF*\x03\x02\x02\x02\u01B0\u01B1\x07-\x02\x02\u01B1", "\u01B2\x07?\x02\x02\u01B2,\x03\x02\x02\x02\u01B3\u01B4", "\x07~\x02\x02\u01B4.\x03\x02\x02\x02\u01B5\u01B6\x07", ",\x02\x02\u01B60\x03\x02\x02\x02\u01B7\u01B8\x070\x02", "\x02\u01B8\u01B9\x070\x02\x02\u01B92\x03\x02\x02\x02", "\u01BA\u01BB\x07'\x02\x02\u01BB4\x03\x02\x02\x02\u01BC", "\u01BD\x07`\x02\x02\u01BD6\x03\x02\x02\x02\u01BE\u01BF", "\x07?\x02\x02\u01BF\u01C0\x07\x80\x02\x02\u01C08\x03", "\x02\x02\x02\u01C1\u01C2\x07>\x02\x02\u01C2\u01C3\x07", "@\x02\x02\u01C3:\x03\x02\x02\x02\u01C4\u01C5\x07#\x02", "\x02\u01C5\u01C6\x07?\x02\x02\u01C6<\x03\x02\x02\x02", "\u01C7\u01C8\x07>\x02\x02\u01C8>\x03\x02\x02\x02\u01C9", "\u01CA\x07@\x02\x02\u01CA@\x03\x02\x02\x02\u01CB\u01CC", "\x07>\x02\x02\u01CC\u01CD\x07?\x02\x02\u01CDB\x03\x02", "\x02\x02\u01CE\u01CF\x07@\x02\x02\u01CF\u01D0\x07?\x02", "\x02\u01D0D\x03\x02\x02\x02\u01D1\u01D2\x07&\x02\x02", "\u01D2F\x03\x02\x02\x02\u01D3\u01D4\x07\u27EA\x02\x02", "\u01D4H\x03\x02\x02\x02\u01D5\u01D6\x07\u300A\x02\x02", "\u01D6J\x03\x02\x02\x02\u01D7\u01D8\x07\uFE66\x02\x02", "\u01D8L\x03\x02\x02\x02\u01D9\u01DA\x07\uFF1E\x02\x02", "\u01DAN\x03\x02\x02\x02\u01DB\u01DC\x07\u27EB\x02\x02", "\u01DCP\x03\x02\x02\x02\u01DD\u01DE\x07\u300B\x02\x02", "\u01DER\x03\x02\x02\x02\u01DF\u01E0\x07\uFE67\x02\x02", "\u01E0T\x03\x02\x02\x02\u01E1\u01E2\x07\uFF20\x02\x02", "\u01E2V\x03\x02\x02\x02\u01E3\u01E4\x07\xAF\x02\x02", "\u01E4X\x03\x02\x02\x02\u01E5\u01E6\x07\u2012\x02\x02", "\u01E6Z\x03\x02\x02\x02\u01E7\u01E8\x07\u2013\x02\x02", "\u01E8\\\x03\x02\x02\x02\u01E9\u01EA\x07\u2014\x02\x02", "\u01EA^\x03\x02\x02\x02\u01EB\u01EC\x07\u2015\x02\x02", "\u01EC`\x03\x02\x02\x02\u01ED\u01EE\x07\u2016\x02\x02", "\u01EEb\x03\x02\x02\x02\u01EF\u01F0\x07\u2017\x02\x02", "\u01F0d\x03\x02\x02\x02\u01F1\u01F2\x07\u2214\x02\x02", "\u01F2f\x03\x02\x02\x02\u01F3\u01F4\x07\uFE5A\x02\x02", "\u01F4h\x03\x02\x02\x02\u01F5\u01F6\x07\uFE65\x02\x02", "\u01F6j\x03\x02\x02\x02\u01F7\u01F8\x07\uFF0F\x02\x02", "\u01F8l\x03\x02\x02\x02\u01F9\u01FA\x05\u0155\xAB\x02", "\u01FA\u01FB\x05\u0181\xC1\x02\u01FB\u01FC\x05\u016F\xB8\x02", "\u01FC\u01FD\x05\u015F\xB0\x02\u01FD\u01FE\x05\u0159\xAD\x02", "\u01FE\u01FF\x05\u0173\xBA\x02\u01FFn\x03\x02\x02\x02", "\u0200\u0201\x05\u0159\xAD\x02\u0201\u0202\x05\u017F\xC0\x02", "\u0202\u0203\x05\u016F\xB8\x02\u0203\u0204\x05\u0167\xB4\x02", "\u0204\u0205\x05\u0151\xA9\x02\u0205\u0206\x05\u0161\xB1\x02", "\u0206\u0207\x05\u016B\xB6\x02\u0207p\x03\x02\x02\x02", "\u0208\u0209\x05\u016F\xB8\x02\u0209\u020A\x05\u0173\xBA\x02", "\u020A\u020B\x05\u016D\xB7\x02\u020B\u020C\x05\u015B\xAE\x02", "\u020C\u020D\x05\u0161\xB1\x02\u020D\u020E\x05\u0167\xB4\x02", "\u020E\u020F\x05\u0159\xAD\x02\u020Fr\x03\x02\x02\x02", "\u0210\u0211\x05\u0179\xBD\x02\u0211\u0212\x05\u0175\xBB\x02", "\u0212\u0213\x05\u0161\xB1\x02\u0213\u0214\x05\u016B\xB6\x02", "\u0214\u0215\x05\u015D\xAF\x02\u0215t\x03\x02\x02\x02", "\u0216\u0217\x05\u016F\xB8\x02\u0217\u0218\x05\u0159\xAD\x02", "\u0218\u0219\x05\u0173\xBA\x02\u0219\u021A\x05\u0161\xB1\x02", "\u021A\u021B\x05\u016D\xB7\x02\u021B\u021C\x05\u0157\xAC\x02", "\u021C\u021D\x05\u0161\xB1\x02\u021D\u021E\x05\u0155\xAB\x02", "\u021Ev\x03\x02\x02\x02\u021F\u0220\x05\u0155\xAB\x02", "\u0220\u0221\x05\u016D\xB7\x02\u0221\u0222\x05\u0169\xB5\x02", "\u0222\u0223\x05\u0169\xB5\x02\u0223\u0224\x05\u0161\xB1\x02", "\u0224\u0225\x05\u0177\xBC\x02\u0225x\x03\x02\x02\x02", "\u0226\u0227\x05\u0179\xBD\x02\u0227\u0228\x05\u016B\xB6\x02", "\u0228\u0229\x05\u0161\xB1\x02\u0229\u022A\x05\u016D\xB7\x02", "\u022A\u022B\x05\u016B\xB6\x02\u022Bz\x03\x02\x02\x02", "\u022C\u022D\x05\u0151\xA9\x02\u022D\u022E\x05\u0167\xB4\x02", "\u022E\u022F\x05\u0167\xB4\x02\u022F|\x03\x02\x02\x02", "\u0230\u0231\x05\u0155\xAB\x02\u0231\u0232\x05\u0173\xBA\x02", "\u0232\u0233\x05\u0159\xAD\x02\u0233\u0234\x05\u0151\xA9\x02", "\u0234\u0235\x05\u0177\xBC\x02\u0235\u0236\x05\u0159\xAD\x02", "\u0236~\x03\x02\x02\x02\u0237\u0238\x05\u0157\xAC\x02", "\u0238\u0239\x05\u0173\xBA\x02\u0239\u023A\x05\u016D\xB7\x02", "\u023A\u023B\x05\u016F\xB8\x02\u023B\x80\x03\x02\x02\x02", "\u023C\u023D\x05\u0161\xB1\x02\u023D\u023E\x05\u016B\xB6\x02", "\u023E\u023F\x05\u0157\xAC\x02\u023F\u0240\x05\u0159\xAD\x02", "\u0240\u0241\x05\u017F\xC0\x02\u0241\x82\x03\x02\x02\x02", "\u0242\u0243\x05\u016D\xB7\x02\u0243\u0244\x05\u016B\xB6\x02", "\u0244\x84\x03\x02\x02\x02\u0245\u0246\x05\u0155\xAB\x02", "\u0246\u0247\x05\u016D\xB7\x02\u0247\u0248\x05\u016B\xB6\x02", "\u0248\u0249\x05\u0175\xBB\x02\u0249\u024A\x05\u0177\xBC\x02", "\u024A\u024B\x05\u0173\xBA\x02\u024B\u024C\x05\u0151\xA9\x02", "\u024C\u024D\x05\u0161\xB1\x02\u024D\u024E\x05\u016B\xB6\x02", "\u024E\u024F\x05\u0177\xBC\x02\u024F\x86\x03\x02\x02\x02", "\u0250\u0251\x05\u0151\xA9\x02\u0251\u0252\x05\u0175\xBB\x02", "\u0252\u0253\x05\u0175\xBB\x02\u0253\u0254\x05\u0159\xAD\x02", "\u0254\u0255\x05\u0173\xBA\x02\u0255\u0256\x05\u0177\xBC\x02", "\u0256\x88\x03\x02\x02\x02\u0257\u0258\x05\u0161\xB1\x02", "\u0258\u0259\x05\u0175\xBB\x02\u0259\x8A\x03\x02\x02\x02", "\u025A\u025B\x05\u0179\xBD\x02\u025B\u025C\x05\u016B\xB6\x02", "\u025C\u025D\x05\u0161\xB1\x02\u025D\u025E\x05\u0171\xB9\x02", "\u025E\u025F\x05\u0179\xBD\x02\u025F\u0260\x05\u0159\xAD\x02", "\u0260\x8C\x03\x02\x02\x02\u0261\u0262\x05\u0159\xAD\x02", "\u0262\u0263\x05\u017F\xC0\x02\u0263\u0264\x05\u0161\xB1\x02", "\u0264\u0265\x05\u0175\xBB\x02\u0265\u0266\x05\u0177\xBC\x02", "\u0266\u0267\x05\u0175\xBB\x02\u0267\x8E\x03\x02\x02\x02", "\u0268\u0269\x05\u0167\xB4\x02\u0269\u026A\x05\u016D\xB7\x02", "\u026A\u026B\x05\u0151\xA9\x02\u026B\u026C\x05\u0157\xAC\x02", "\u026C\x90\x03\x02\x02\x02\u026D\u026E\x05\u0155\xAB\x02", "\u026E\u026F\x05\u0175\xBB\x02\u026F\u0270\x05\u017B\xBE\x02", "\u0270\x92\x03\x02\x02\x02\u0271\u0272\x05\u017D\xBF\x02", "\u0272\u0273\x05\u0161\xB1\x02\u0273\u0274\x05\u0177\xBC\x02", "\u0274\u0275\x05\u015F\xB0\x02\u0275\x94\x03\x02\x02\x02", "\u0276\u0277\x05\u015F\xB0\x02\u0277\u0278\x05\u0159\xAD\x02", "\u0278\u0279\x05\u0151\xA9\x02\u0279\u027A\x05\u0157\xAC\x02", "\u027A\u027B\x05\u0159\xAD\x02\u027B\u027C\x05\u0173\xBA\x02", "\u027C\u027D\x05\u0175\xBB\x02\u027D\x96\x03\x02\x02\x02", "\u027E\u027F\x05\u015B\xAE\x02\u027F\u0280\x05\u0173\xBA\x02", "\u0280\u0281\x05\u016D\xB7\x02\u0281\u0282\x05\u0169\xB5\x02", "\u0282\x98\x03\x02\x02\x02\u0283\u0284\x05\u0151\xA9\x02", "\u0284\u0285\x05\u0175\xBB\x02\u0285\x9A\x03\x02\x02\x02", "\u0286\u0287\x05\u015B\xAE\x02\u0287\u0288\x05\u0161\xB1\x02", "\u0288\u0289\x05\u0159\xAD\x02\u0289\u028A\x05\u0167\xB4\x02", "\u028A\u028B\x05\u0157\xAC\x02\u028B\u028C\x05\u0177\xBC\x02", "\u028C\u028D\x05\u0159\xAD\x02\u028D\u028E\x05\u0173\xBA\x02", "\u028E\u028F\x05\u0169\xB5\x02\u028F\u0290\x05\u0161\xB1\x02", "\u0290\u0291\x05\u016B\xB6\x02\u0291\u0292\x05\u0151\xA9\x02", "\u0292\u0293\x05\u0177\xBC\x02\u0293\u0294\x05\u016D\xB7\x02", "\u0294\u0295\x05\u0173\xBA\x02\u0295\x9C\x03\x02\x02\x02", "\u0296\u0297\x05\u016D\xB7\x02\u0297\u0298\x05\u016F\xB8\x02", "\u0298\u0299\x05\u0177\xBC\x02\u0299\u029A\x05\u0161\xB1\x02", "\u029A\u029B\x05\u016D\xB7\x02\u029B\u029C\x05\u016B\xB6\x02", "\u029C\u029D\x05\u0151\xA9\x02\u029D\u029E\x05\u0167\xB4\x02", "\u029E\x9E\x03\x02\x02\x02\u029F\u02A0\x05\u0169\xB5\x02", "\u02A0\u02A1\x05\u0151\xA9\x02\u02A1\u02A2\x05\u0177\xBC\x02", "\u02A2\u02A3\x05\u0155\xAB\x02\u02A3\u02A4\x05\u015F\xB0\x02", "\u02A4\xA0\x03\x02\x02\x02\u02A5\u02A6\x05\u0179\xBD\x02", "\u02A6\u02A7\x05\u016B\xB6\x02\u02A7\u02A8\x05\u017D\xBF\x02", "\u02A8\u02A9\x05\u0161\xB1\x02\u02A9\u02AA\x05\u016B\xB6\x02", "\u02AA\u02AB\x05\u0157\xAC\x02\u02AB\xA2\x03\x02\x02\x02", "\u02AC\u02AD\x05\u0169\xB5\x02\u02AD\u02AE\x05\u0159\xAD\x02", "\u02AE\u02AF\x05\u0173\xBA\x02\u02AF\u02B0\x05\u015D\xAF\x02", "\u02B0\u02B1\x05\u0159\xAD\x02\u02B1\xA4\x03\x02\x02\x02", "\u02B2\u02B3\x05\u0175\xBB\x02\u02B3\u02B4\x05\u0159\xAD\x02", "\u02B4\u02B5\x05\u0177\xBC\x02\u02B5\xA6\x03\x02\x02\x02", "\u02B6\u02B7\x05\u0157\xAC\x02\u02B7\u02B8\x05\u0159\xAD\x02", "\u02B8\u02B9\x05\u0177\xBC\x02\u02B9\u02BA\x05\u0151\xA9\x02", "\u02BA\u02BB\x05\u0155\xAB\x02\u02BB\u02BC\x05\u015F\xB0\x02", "\u02BC\xA8\x03\x02\x02\x02\u02BD\u02BE\x05\u0157\xAC\x02", "\u02BE\u02BF\x05\u0159\xAD\x02\u02BF\u02C0\x05\u0167\xB4\x02", "\u02C0\u02C1\x05\u0159\xAD\x02\u02C1\u02C2\x05\u0177\xBC\x02", "\u02C2\u02C3\x05\u0159\xAD\x02\u02C3\xAA\x03\x02\x02\x02", "\u02C4\u02C5\x05\u0173\xBA\x02\u02C5\u02C6\x05\u0159\xAD\x02", "\u02C6\u02C7\x05\u0169\xB5\x02\u02C7\u02C8\x05\u016D\xB7\x02", "\u02C8\u02C9\x05\u017B\xBE\x02\u02C9\u02CA\x05\u0159\xAD\x02", "\u02CA\xAC\x03\x02\x02\x02\u02CB\u02CC\x05\u015B\xAE\x02", "\u02CC\u02CD\x05\u016D\xB7\x02\u02CD\u02CE\x05\u0173\xBA\x02", "\u02CE\u02CF\x05\u0159\xAD\x02\u02CF\u02D0\x05\u0151\xA9\x02", "\u02D0\u02D1\x05\u0155\xAB\x02\u02D1\u02D2\x05\u015F\xB0\x02", "\u02D2\xAE\x03\x02\x02\x02\u02D3\u02D4\x05\u0161\xB1\x02", "\u02D4\u02D5\x05\u016B\xB6\x02\u02D5\xB0\x03\x02\x02\x02", "\u02D6\u02D7\x05\u0157\xAC\x02\u02D7\u02D8\x05\u0161\xB1\x02", "\u02D8\u02D9\x05\u0175\xBB\x02\u02D9\u02DA\x05\u0177\xBC\x02", "\u02DA\u02DB\x05\u0161\xB1\x02\u02DB\u02DC\x05\u016B\xB6\x02", "\u02DC\u02DD\x05\u0155\xAB\x02\u02DD\u02DE\x05\u0177\xBC\x02", "\u02DE\xB2\x03\x02\x02\x02\u02DF\u02E0\x05\u0173\xBA\x02", "\u02E0\u02E1\x05\u0159\xAD\x02\u02E1\u02E2\x05\u0177\xBC\x02", "\u02E2\u02E3\x05\u0179\xBD\x02\u02E3\u02E4\x05\u0173\xBA\x02", "\u02E4\u02E5\x05\u016B\xB6\x02\u02E5\xB4\x03\x02\x02\x02", "\u02E6\u02E7\x05\u016D\xB7\x02\u02E7\u02E8\x05\u0173\xBA\x02", "\u02E8\u02E9\x05\u0157\xAC\x02\u02E9\u02EA\x05\u0159\xAD\x02", "\u02EA\u02EB\x05\u0173\xBA\x02\u02EB\xB6\x03\x02\x02\x02", "\u02EC\u02ED\x05\u0153\xAA\x02\u02ED\u02EE\x05\u0181\xC1\x02", "\u02EE\xB8\x03\x02\x02\x02\u02EF\u02F0\x05\u0175\xBB\x02", "\u02F0\u02F1\x05\u0165\xB3\x02\u02F1\u02F2\x05\u0161\xB1\x02", "\u02F2\u02F3\x05\u016F\xB8\x02\u02F3\xBA\x03\x02\x02\x02", "\u02F4\u02F5\x05\u0167\xB4\x02\u02F5\u02F6\x05\u0161\xB1\x02", "\u02F6\u02F7\x05\u0169\xB5\x02\u02F7\u02F8\x05\u0161\xB1\x02", "\u02F8\u02F9\x05\u0177\xBC\x02\u02F9\xBC\x03\x02\x02\x02", "\u02FA\u02FB\x05\u0151\xA9\x02\u02FB\u02FC\x05\u0175\xBB\x02", "\u02FC\u02FD\x05\u0155\xAB\x02\u02FD\u02FE\x05\u0159\xAD\x02", "\u02FE\u02FF\x05\u016B\xB6\x02\u02FF\u0300\x05\u0157\xAC\x02", "\u0300\u0301\x05\u0161\xB1\x02\u0301\u0302\x05\u016B\xB6\x02", "\u0302\u0303\x05\u015D\xAF\x02\u0303\xBE\x03\x02\x02\x02", "\u0304\u0305\x05\u0151\xA9\x02\u0305\u0306\x05\u0175\xBB\x02", "\u0306\u0307\x05\u0155\xAB\x02\u0307\xC0\x03\x02\x02\x02", "\u0308\u0309\x05\u0157\xAC\x02\u0309\u030A\x05\u0159\xAD\x02", "\u030A\u030B\x05\u0175\xBB\x02\u030B\u030C\x05\u0155\xAB\x02", "\u030C\u030D\x05\u0159\xAD\x02\u030D\u030E\x05\u016B\xB6\x02", "\u030E\u030F\x05\u0157\xAC\x02\u030F\u0310\x05\u0161\xB1\x02", "\u0310\u0311\x05\u016B\xB6\x02\u0311\u0312\x05\u015D\xAF\x02", "\u0312\xC2\x03\x02\x02\x02\u0313\u0314\x05\u0157\xAC\x02", "\u0314\u0315\x05\u0159\xAD\x02\u0315\u0316\x05\u0175\xBB\x02", "\u0316\u0317\x05\u0155\xAB\x02\u0317\xC4\x03\x02\x02\x02", "\u0318\u0319\x05\u0163\xB2\x02\u0319\u031A\x05\u016D\xB7\x02", "\u031A\u031B\x05\u0161\xB1\x02\u031B\u031C\x05\u016B\xB6\x02", "\u031C\xC6\x03\x02\x02\x02\u031D\u031E\x05\u0175\xBB\x02", "\u031E\u031F\x05\u0155\xAB\x02\u031F\u0320\x05\u0151\xA9\x02", "\u0320\u0321\x05\u016B\xB6\x02\u0321\xC8\x03\x02\x02\x02", "\u0322\u0323\x05\u0175\xBB\x02\u0323\u0324\x05\u0177\xBC\x02", "\u0324\u0325\x05\u0151\xA9\x02\u0325\u0326\x05\u0173\xBA\x02", "\u0326\u0327\x05\u0177\xBC\x02\u0327\xCA\x03\x02\x02\x02", "\u0328\u0329\x05\u016B\xB6\x02\u0329\u032A\x05\u016D\xB7\x02", "\u032A\u032B\x05\u0157\xAC\x02\u032B\u032C\x05\u0159\xAD\x02", "\u032C\xCC\x03\x02\x02\x02\u032D\u032E\x05\u0173\xBA\x02", "\u032E\u032F\x05\u0159\xAD\x02\u032F\u0330\x05\u0167\xB4\x02", "\u0330\u0331\x05\u0151\xA9\x02\u0331\u0332\x05\u0177\xBC\x02", "\u0332\u0333\x05\u0161\xB1\x02\u0333\u0334\x05\u016D\xB7\x02", "\u0334\u0335\x05\u016B\xB6\x02\u0335\u0336\x05\u0175\xBB\x02", "\u0336\u0337\x05\u015F\xB0\x02\u0337\u0338\x05\u0161\xB1\x02", "\u0338\u0339\x05\u016F\xB8\x02\u0339\xCE\x03\x02\x02\x02", "\u033A\u033B\x05\u0173\xBA\x02\u033B\u033C\x05\u0159\xAD\x02", "\u033C\u033D\x05\u0167\xB4\x02\u033D\xD0\x03\x02\x02\x02", "\u033E\u033F\x05\u017D\xBF\x02\u033F\u0340\x05\u015F\xB0\x02", "\u0340\u0341\x05\u0159\xAD\x02\u0341\u0342\x05\u0173\xBA\x02", "\u0342\u0343\x05\u0159\xAD\x02\u0343\xD2\x03\x02\x02\x02", "\u0344\u0345\x05\u0175\xBB\x02\u0345\u0346\x05\u015F\xB0\x02", "\u0346\u0347\x05\u016D\xB7\x02\u0347\u0348\x05\u0173\xBA\x02", "\u0348\u0349\x05\u0177\xBC\x02\u0349\u034A\x05\u0159\xAD\x02", "\u034A\u034B\x05\u0175\xBB\x02\u034B\u034C\x05\u0177\xBC\x02", "\u034C\u034D\x05\u016F\xB8\x02\u034D\u034E\x05\u0151\xA9\x02", "\u034E\u034F\x05\u0177\xBC\x02\u034F\u0350\x05\u015F\xB0\x02", "\u0350\xD4\x03\x02\x02\x02\u0351\u0352\x05\u0151\xA9\x02", "\u0352\u0353\x05\u0167\xB4\x02\u0353\u0354\x05\u0167\xB4\x02", "\u0354\u0355\x05\u0175\xBB\x02\u0355\u0356\x05\u015F\xB0\x02", "\u0356\u0357\x05\u016D\xB7\x02\u0357\u0358\x05\u0173\xBA\x02", "\u0358\u0359\x05\u0177\xBC\x02\u0359\u035A\x05\u0159\xAD\x02", "\u035A\u035B\x05\u0175\xBB\x02\u035B\u035C\x05\u0177\xBC\x02", "\u035C\u035D\x05\u016F\xB8\x02\u035D\u035E\x05\u0151\xA9\x02", "\u035E\u035F\x05\u0177\xBC\x02\u035F\u0360\x05\u015F\xB0\x02", "\u0360\u0361\x05\u0175\xBB\x02\u0361\xD6\x03\x02\x02\x02", "\u0362\u0363\x05\u016D\xB7\x02\u0363\u0364\x05\u0173\xBA\x02", "\u0364\xD8\x03\x02\x02\x02\u0365\u0366\x05\u017F\xC0\x02", "\u0366\u0367\x05\u016D\xB7\x02\u0367\u0368\x05\u0173\xBA\x02", "\u0368\xDA\x03\x02\x02\x02\u0369\u036A\x05\u0151\xA9\x02", "\u036A\u036B\x05\u016B\xB6\x02\u036B\u036C\x05\u0157\xAC\x02", "\u036C\xDC\x03\x02\x02\x02\u036D\u036E\x05\u016B\xB6\x02", "\u036E\u036F\x05\u016D\xB7\x02\u036F\u0370\x05\u0177\xBC\x02", "\u0370\xDE\x03\x02\x02\x02\u0371\u0372\x05\u0175\xBB\x02", "\u0372\u0373\x05\u0177\xBC\x02\u0373\u0374\x05\u0151\xA9\x02", "\u0374\u0375\x05\u0173\xBA\x02\u0375\u0376\x05\u0177\xBC\x02", "\u0376\u0377\x05\u0175\xBB\x02\u0377\xE0\x03\x02\x02\x02", "\u0378\u0379\x05\u0159\xAD\x02\u0379\u037A\x05\u016B\xB6\x02", "\u037A\u037B\x05\u0157\xAC\x02\u037B\u037C\x05\u0175\xBB\x02", "\u037C\xE2\x03\x02\x02\x02\u037D\u037E\x05\u0155\xAB\x02", "\u037E\u037F\x05\u016D\xB7\x02\u037F\u0380\x05\u016B\xB6\x02", "\u0380\u0381\x05\u0177\xBC\x02\u0381\u0382\x05\u0151\xA9\x02", "\u0382\u0383\x05\u0161\xB1\x02\u0383\u0384\x05\u016B\xB6\x02", "\u0384\u0385\x05\u0175\xBB\x02\u0385\xE4\x03\x02\x02\x02", "\u0386\u0387\x05\u016B\xB6\x02\u0387\u0388\x05\u0179\xBD\x02", "\u0388\u0389\x05\u0167\xB4\x02\u0389\u038A\x05\u0167\xB4\x02", "\u038A\xE6\x03\x02\x02\x02\u038B\u038C\x05\u0155\xAB\x02", "\u038C\u038D\x05\u016D\xB7\x02\u038D\u038E\x05\u0179\xBD\x02", "\u038E\u038F\x05\u016B\xB6\x02\u038F\u0390\x05\u0177\xBC\x02", "\u0390\xE8\x03\x02\x02\x02\u0391\u0392\x05\u015B\xAE\x02", "\u0392\u0393\x05\u0161\xB1\x02\u0393\u0394\x05\u0167\xB4\x02", "\u0394\u0395\x05\u0177\xBC\x02\u0395\u0396\x05\u0159\xAD\x02", "\u0396\u0397\x05\u0173\xBA\x02\u0397\xEA\x03\x02\x02\x02", "\u0398\u0399\x05\u0159\xAD\x02\u0399\u039A\x05\u017F\xC0\x02", "\u039A\u039B\x05\u0177\xBC\x02\u039B\u039C\x05\u0173\xBA\x02", "\u039C\u039D\x05\u0151\xA9\x02\u039D\u039E\x05\u0155\xAB\x02", "\u039E\u039F\x05\u0177\xBC\x02\u039F\xEC\x03\x02\x02\x02", "\u03A0\u03A1\x05\u0151\xA9\x02\u03A1\u03A2\x05\u016B\xB6\x02", "\u03A2\u03A3\x05\u0181\xC1\x02\u03A3\xEE\x03\x02\x02\x02", "\u03A4\u03A5\x05\u016B\xB6\x02\u03A5\u03A6\x05\u016D\xB7\x02", "\u03A6\u03A7\x05\u016B\xB6\x02\u03A7\u03A8\x05\u0159\xAD\x02", "\u03A8\xF0\x03\x02\x02\x02\u03A9\u03AA\x05\u0175\xBB\x02", "\u03AA\u03AB\x05\u0161\xB1\x02\u03AB\u03AC\x05\u016B\xB6\x02", "\u03AC\u03AD\x05\u015D\xAF\x02\u03AD\u03AE\x05\u0167\xB4\x02", "\u03AE\u03AF\x05\u0159\xAD\x02\u03AF\xF2\x03\x02\x02\x02", "\u03B0\u03B1\x05\u0177\xBC\x02\u03B1\u03B2\x05\u0173\xBA\x02", "\u03B2\u03B3\x05\u0179\xBD\x02\u03B3\u03B4\x05\u0159\xAD\x02", "\u03B4\xF4\x03\x02\x02\x02\u03B5\u03B6\x05\u015B\xAE\x02", "\u03B6\u03B7\x05\u0151\xA9\x02\u03B7\u03B8\x05\u0167\xB4\x02", "\u03B8\u03B9\x05\u0175\xBB\x02\u03B9\u03BA\x05\u0159\xAD\x02", "\u03BA\xF6\x03\x02\x02\x02\u03BB\u03BC\x05\u0173\xBA\x02", "\u03BC\u03BD\x05\u0159\xAD\x02\u03BD\u03BE\x05\u0157\xAC\x02", "\u03BE\u03BF\x05\u0179\xBD\x02\u03BF\u03C0\x05\u0155\xAB\x02", "\u03C0\u03C1\x05\u0159\xAD\x02\u03C1\xF8\x03\x02\x02\x02", "\u03C2\u03C3\x05\u0155\xAB\x02\u03C3\u03C4\x05\u0151\xA9\x02", "\u03C4\u03C5\x05\u0175\xBB\x02\u03C5\u03C6\x05\u0159\xAD\x02", "\u03C6\xFA\x03\x02\x02\x02\u03C7\u03C8\x05\u0159\xAD\x02", "\u03C8\u03C9\x05\u0167\xB4\x02\u03C9\u03CA\x05\u0175\xBB\x02", "\u03CA\u03CB\x05\u0159\xAD\x02\u03CB\xFC\x03\x02\x02\x02", "\u03CC\u03CD\x05\u0159\xAD\x02\u03CD\u03CE\x05\u016B\xB6\x02", "\u03CE\u03CF\x05\u0157\xAC\x02\u03CF\xFE\x03\x02\x02\x02", "\u03D0\u03D1\x05\u017D\xBF\x02\u03D1\u03D2\x05\u015F\xB0\x02", "\u03D2\u03D3\x05\u0159\xAD\x02\u03D3\u03D4\x05\u016B\xB6\x02", "\u03D4\u0100\x03\x02\x02\x02\u03D5\u03D6\x05\u0177\xBC\x02", "\u03D6\u03D7\x05\u015F\xB0\x02\u03D7\u03D8\x05\u0159\xAD\x02", "\u03D8\u03D9\x05\u016B\xB6\x02\u03D9\u0102\x03\x02\x02\x02", "\u03DA\u03DB\x05\u0155\xAB\x02\u03DB\u03DC\x05\u0151\xA9\x02", "\u03DC\u03DD\x05\u0167\xB4\x02\u03DD\u03DE\x05\u0167\xB4\x02", "\u03DE\u0104\x03\x02\x02\x02\u03DF\u03E0\x05\u0181\xC1\x02", "\u03E0\u03E1\x05\u0161\xB1\x02\u03E1\u03E2\x05\u0159\xAD\x02", "\u03E2\u03E3\x05\u0167\xB4\x02\u03E3\u03E4\x05\u0157\xAC\x02", "\u03E4\u0106\x03\x02\x02\x02\u03E5\u03E6\x05\u0165\xB3\x02", "\u03E6\u03E7\x05\u0159\xAD\x02\u03E7\u03E8\x05\u0181\xC1\x02", "\u03E8\u0108\x03\x02\x02\x02\u03E9\u03F2\x07$\x02\x02", "\u03EA\u03F1\n\x02\x02\x02\u03EB\u03EE\x07^\x02\x02\u03EC", "\u03EF\x0B\x02\x02\x02\u03ED\u03EF\x07\x02\x02\x03\u03EE", "\u03EC\x03\x02\x02\x02\u03EE\u03ED\x03\x02\x02\x02\u03EF", "\u03F1\x03\x02\x02\x02\u03F0\u03EA\x03\x02\x02\x02\u03F0", "\u03EB\x03\x02\x02\x02\u03F1\u03F4\x03\x02\x02\x02\u03F2", "\u03F0\x03\x02\x02\x02\u03F2\u03F3\x03\x02\x02\x02\u03F3", "\u03F5\x03\x02\x02\x02\u03F4\u03F2\x03\x02\x02\x02\u03F5", "\u0404\x07$\x02\x02\u03F6\u03FF\x07)\x02\x02\u03F7\u03FE", "\n\x03\x02\x02\u03F8\u03FB\x07^\x02\x02\u03F9\u03FC\x0B", "\x02\x02\x02\u03FA\u03FC\x07\x02\x02\x03\u03FB\u03F9\x03", "\x02\x02\x02\u03FB\u03FA\x03\x02\x02\x02\u03FC\u03FE\x03", "\x02\x02\x02\u03FD\u03F7\x03\x02\x02\x02\u03FD\u03F8\x03", "\x02\x02\x02\u03FE\u0401\x03\x02\x02\x02\u03FF\u03FD\x03", "\x02\x02\x02\u03FF\u0400\x03\x02\x02\x02\u0400\u0402\x03", "\x02\x02\x02\u0401\u03FF\x03\x02\x02\x02\u0402\u0404\x07", ")\x02\x02\u0403\u03E9\x03\x02\x02\x02\u0403\u03F6\x03", "\x02\x02\x02\u0404\u010A\x03\x02\x02\x02\u0405\u0406\x07", "'\x02\x02\u0406\u0407\t\x04\x02\x02\u0407\u0409\t\x04\x02", "\x02\u0408\u0405\x03\x02\x02\x02\u0409\u040A\x03\x02\x02", "\x02\u040A\u0408\x03\x02\x02\x02\u040A\u040B\x03\x02\x02", "\x02\u040B\u010C\x03\x02\x02\x02\u040C\u041E\x07^\x02", "\x02\u040D\u041F\t\x05\x02\x02\u040E\u040F\t\x06\x02\x02", "\u040F\u0410\x05\u0117\x8C\x02\u0410\u0411\x05\u0117\x8C\x02", "\u0411\u0412\x05\u0117\x8C\x02\u0412\u0413\x05\u0117\x8C\x02", "\u0413\u041F\x03\x02\x02\x02\u0414\u0415\t\x06\x02\x02", "\u0415\u0416\x05\u0117\x8C\x02\u0416\u0417\x05\u0117\x8C\x02", "\u0417\u0418\x05\u0117\x8C\x02\u0418\u0419\x05\u0117\x8C\x02", "\u0419\u041A\x05\u0117\x8C\x02\u041A\u041B\x05\u0117\x8C\x02", "\u041B\u041C\x05\u0117\x8C\x02\u041C\u041D\x05\u0117\x8C\x02", "\u041D\u041F\x03\x02\x02\x02\u041E\u040D\x03\x02\x02\x02", "\u041E\u040E\x03\x02\x02\x02\u041E\u0414\x03\x02\x02\x02", "\u041F\u010E\x03\x02\x02\x02\u0420\u0421\x072\x02\x02", "\u0421\u0422\x07z\x02\x02\u0422\u0424\x03\x02\x02\x02", "\u0423\u0425\x05\u0117\x8C\x02\u0424\u0423\x03\x02\x02\x02", "\u0425\u0426\x03\x02\x02\x02\u0426\u0424\x03\x02\x02\x02", "\u0426\u0427\x03\x02\x02\x02\u0427\u0110\x03\x02\x02\x02", "\u0428\u0431\x05\u0121\x91\x02\u0429\u042D\x05\u011B\x8E\x02", "\u042A\u042C\x05\u0119\x8D\x02\u042B\u042A\x03\x02\x02\x02", "\u042C\u042F\x03\x02\x02\x02\u042D\u042B\x03\x02\x02\x02", "\u042D\u042E\x03\x02\x02\x02\u042E\u0431\x03\x02\x02\x02", "\u042F\u042D\x03\x02\x02\x02\u0430\u0428\x03\x02\x02\x02", "\u0430\u0429\x03\x02\x02\x02\u0431\u0112\x03\x02\x02\x02", "\u0432\u0434\x05\u0121\x91\x02\u0433\u0435\x05\u011F\x90\x02", "\u0434\u0433\x03\x02\x02\x02\u0435\u0436\x03\x02\x02\x02", "\u0436\u0434\x03\x02\x02\x02\u0436\u0437\x03\x02\x02\x02", "\u0437\u0114\x03\x02\x02\x02\u0438\u043A\t\x07\x02\x02", "\u0439\u0438\x03\x02\x02\x02\u043A\u0116\x03\x02\x02\x02", "\u043B\u043E\x05\u0119\x8D\x02\u043C\u043E\x05\u0115\x8B\x02", "\u043D\u043B\x03\x02\x02\x02\u043D\u043C\x03\x02\x02\x02", "\u043E\u0118\x03\x02\x02\x02\u043F\u0442\x05\u0121\x91\x02", "\u0440\u0442\x05\u011B\x8E\x02\u0441\u043F\x03\x02\x02\x02", "\u0441\u0440\x03\x02\x02\x02\u0442\u011A\x03\x02\x02\x02", "\u0443\u0446\x05\u011D\x8F\x02\u0444\u0446\x04:;\x02\u0445", "\u0443\x03\x02\x02\x02\u0445\u0444\x03\x02\x02\x02\u0446", "\u011C\x03\x02\x02\x02\u0447\u0448\x0439\x02\u0448\u011E", "\x03\x02\x02\x02\u0449\u044C\x05\u0121\x91\x02\u044A\u044C", "\x05\u011D\x8F\x02\u044B\u0449\x03\x02\x02\x02\u044B\u044A", "\x03\x02\x02\x02\u044C\u0120\x03\x02\x02\x02\u044D\u044E", "\x072\x02\x02\u044E\u0122\x03\x02\x02\x02\u044F\u0451", "\x05\u0119\x8D\x02\u0450\u044F\x03\x02\x02\x02\u0451\u0452", "\x03\x02\x02\x02\u0452\u0450\x03\x02\x02\x02\u0452\u0453", "\x03\x02\x02\x02\u0453\u0466\x03\x02\x02\x02\u0454\u0456", "\x05\u0119\x8D\x02\u0455\u0454\x03\x02\x02\x02\u0456\u0457", "\x03\x02\x02\x02\u0457\u0455\x03\x02\x02\x02\u0457\u0458", "\x03\x02\x02\x02\u0458\u0459\x03\x02\x02\x02\u0459\u045B", "\x070\x02\x02\u045A\u045C\x05\u0119\x8D\x02\u045B\u045A", "\x03\x02\x02\x02\u045C\u045D\x03\x02\x02\x02\u045D\u045B", "\x03\x02\x02\x02\u045D\u045E\x03\x02\x02\x02\u045E\u0466", "\x03\x02\x02\x02\u045F\u0461\x070\x02\x02\u0460\u0462", "\x05\u0119\x8D\x02\u0461\u0460\x03\x02\x02\x02\u0462\u0463", "\x03\x02\x02\x02\u0463\u0461\x03\x02\x02\x02\u0463\u0464", "\x03\x02\x02\x02\u0464\u0466\x03\x02\x02\x02\u0465\u0450", "\x03\x02\x02\x02\u0465\u0455\x03\x02\x02\x02\u0465\u045F", "\x03\x02\x02\x02\u0466\u0467\x03\x02\x02\x02\u0467\u0469", "\t\b\x02\x02\u0468\u046A\x07/\x02\x02\u0469\u0468\x03\x02", "\x02\x02\u0469\u046A\x03\x02\x02\x02\u046A\u046C\x03\x02", "\x02\x02\u046B\u046D\x05\u0119\x8D\x02\u046C\u046B\x03\x02", "\x02\x02\u046D\u046E\x03\x02\x02\x02\u046E\u046C\x03\x02", "\x02\x02\u046E\u046F\x03\x02\x02\x02\u046F\u0124\x03\x02", "\x02\x02\u0470\u0472\x05\u0119\x8D\x02\u0471\u0470\x03\x02", "\x02\x02\u0472\u0475\x03\x02\x02\x02\u0473\u0471\x03\x02", "\x02\x02\u0473\u0474\x03\x02\x02\x02\u0474\u0476\x03\x02", "\x02\x02\u0475\u0473\x03\x02\x02\x02\u0476\u0478\x070", "\x02\x02\u0477\u0479\x05\u0119\x8D\x02\u0478\u0477\x03\x02", "\x02\x02\u0479\u047A\x03\x02\x02\x02\u047A\u0478\x03\x02", "\x02\x02\u047A\u047B\x03\x02\x02\x02\u047B\u0126\x03\x02", "\x02\x02\u047C\u0480\x05\u0129\x95\x02\u047D\u047F\x05\u012B", "\x96\x02\u047E\u047D\x03\x02\x02\x02\u047F\u0482\x03\x02", "\x02\x02\u0480\u047E\x03\x02\x02\x02\u0480\u0481\x03\x02", "\x02\x02\u0481\u0128\x03\x02\x02\x02\u0482\u0480\x03\x02", "\x02\x02\u0483\u0486\x05\u014F\xA8\x02\u0484\u0486\t\t\x02", "\x02\u0485\u0483\x03\x02\x02\x02\u0485\u0484\x03\x02\x02", "\x02\u0486\u012A\x03\x02\x02\x02\u0487\u048A\x05\u013B\x9E", "\x02\u0488\u048A\x05\u0143\xA2\x02\u0489\u0487\x03\x02\x02", "\x02\u0489\u0488\x03\x02\x02\x02\u048A\u012C\x03\x02\x02", "\x02\u048B\u0491\x07b\x02\x02\u048C\u0490\n\n\x02\x02\u048D", "\u048E\x07b\x02\x02\u048E\u0490\x07b\x02\x02\u048F\u048C", "\x03\x02\x02\x02\u048F\u048D\x03\x02\x02\x02\u0490\u0493", "\x03\x02\x02\x02\u0491\u048F\x03\x02\x02\x02\u0491\u0492", "\x03\x02\x02\x02\u0492\u0494\x03\x02\x02\x02\u0493\u0491", "\x03\x02\x02\x02\u0494\u0495\x07b\x02\x02\u0495\u012E", "\x03\x02\x02\x02\u0496\u0498\x05\u0131\x99\x02\u0497\u0496", "\x03\x02\x02\x02\u0498\u0499\x03\x02\x02\x02\u0499\u0497", "\x03\x02\x02\x02\u0499\u049A\x03\x02\x02\x02\u049A\u0130", "\x03\x02\x02\x02\u049B\u04A8\x05\u0145\xA3\x02\u049C\u04A8", "\x05\u0147\xA4\x02\u049D\u04A8\x05\u0149\xA5\x02\u049E\u04A8", "\x05\u014B\xA6\x02\u049F\u04A8\x05\u0137\x9C\x02\u04A0\u04A8", "\x05\u0141\xA1\x02\u04A1\u04A8\x05\u013F\xA0\x02\u04A2\u04A8", "\x05\u013D\x9F\x02\u04A3\u04A8\x05\u0139\x9D\x02\u04A4\u04A8", "\x05\u014D\xA7\x02\u04A5\u04A8\t\x0B\x02\x02\u04A6\u04A8", "\x05\u0133\x9A\x02\u04A7\u049B\x03\x02\x02\x02\u04A7\u049C", "\x03\x02\x02\x02\u04A7\u049D\x03\x02\x02\x02\u04A7\u049E", "\x03\x02\x02\x02\u04A7\u049F\x03\x02\x02\x02\u04A7\u04A0", "\x03\x02\x02\x02\u04A7\u04A1\x03\x02\x02\x02\u04A7\u04A2", "\x03\x02\x02\x02\u04A7\u04A3\x03\x02\x02\x02\u04A7\u04A4", "\x03\x02\x02\x02\u04A7\u04A5\x03\x02\x02\x02\u04A7\u04A6", "\x03\x02\x02\x02\u04A8\u0132\x03\x02\x02\x02\u04A9\u04AA", "\x071\x02\x02\u04AA\u04AB\x07,\x02\x02\u04AB\u04AF\x03", "\x02\x02\x02\u04AC\u04AE\x0B\x02\x02\x02\u04AD\u04AC\x03", "\x02\x02\x02\u04AE\u04B1\x03\x02\x02\x02\u04AF\u04B0\x03", "\x02\x02\x02\u04AF\u04AD\x03\x02\x02\x02\u04B0\u04B2\x03", "\x02\x02\x02\u04B1\u04AF\x03\x02\x02\x02\u04B2\u04B3\x07", ",\x02\x02\u04B3\u04BE\x071\x02\x02\u04B4\u04B5\x071\x02", "\x02\u04B5\u04B6\x071\x02\x02\u04B6\u04BA\x03\x02\x02", "\x02\u04B7\u04B9\n\f\x02\x02\u04B8\u04B7\x03\x02\x02\x02", "\u04B9\u04BC\x03\x02\x02\x02\u04BA\u04B8\x03\x02\x02\x02", "\u04BA\u04BB\x03\x02\x02\x02\u04BB\u04BE\x03\x02\x02\x02", "\u04BC\u04BA\x03\x02\x02\x02\u04BD\u04A9\x03\x02\x02\x02", "\u04BD\u04B4\x03\x02\x02\x02\u04BE\u0134\x03\x02\x02\x02", "\u04BF\u04C0\x0B\x02\x02\x02\u04C0\u0136\x03\x02\x02\x02", "\u04C1\u04C2\t\r\x02\x02\u04C2\u0138\x03\x02\x02\x02\u04C3", "\u04C4\t\x0E\x02\x02\u04C4\u013A\x03\x02\x02\x02\u04C5", "\u04C6\t\x0F\x02\x02\u04C6\u013C\x03\x02\x02\x02\u04C7", "\u04C8\t\x10\x02\x02\u04C8\u013E\x03\x02\x02\x02\u04C9", "\u04CA\t\x11\x02\x02\u04CA\u0140\x03\x02\x02\x02\u04CB", "\u04CC\t\x12\x02\x02\u04CC\u0142\x03\x02\x02\x02\u04CD", "\u04CE\t\x13\x02\x02\u04CE\u0144\x03\x02\x02\x02\u04CF", "\u04D0\t\x14\x02\x02\u04D0\u0146\x03\x02\x02\x02\u04D1", "\u04D2\t\x15\x02\x02\u04D2\u0148\x03\x02\x02\x02\u04D3", "\u04D4\t\x16\x02\x02\u04D4\u014A\x03\x02\x02\x02\u04D5", "\u04D6\t\x17\x02\x02\u04D6\u014C\x03\x02\x02\x02\u04D7", "\u04D8\t\x18\x02\x02\u04D8\u014E\x03\x02\x02\x02\u04D9", "\u04DA\t\x19\x02\x02\u04DA\u0150\x03\x02\x02\x02\u04DB", "\u04DC\t\x1A\x02\x02\u04DC\u0152\x03\x02\x02\x02\u04DD", "\u04DE\t\x1B\x02\x02\u04DE\u0154\x03\x02\x02\x02\u04DF", "\u04E0\t\x1C\x02\x02\u04E0\u0156\x03\x02\x02\x02\u04E1", "\u04E2\t\x1D\x02\x02\u04E2\u0158\x03\x02\x02\x02\u04E3", "\u04E4\t\b\x02\x02\u04E4\u015A\x03\x02\x02\x02\u04E5\u04E6", "\t\x1E\x02\x02\u04E6\u015C\x03\x02\x02\x02\u04E7\u04E8", "\t\x1F\x02\x02\u04E8\u015E\x03\x02\x02\x02\u04E9\u04EA", "\t \x02\x02\u04EA\u0160\x03\x02\x02\x02\u04EB\u04EC\t!\x02", "\x02\u04EC\u0162\x03\x02\x02\x02\u04ED\u04EE\t\"\x02\x02", "\u04EE\u0164\x03\x02\x02\x02\u04EF\u04F0\t#\x02\x02\u04F0", "\u0166\x03\x02\x02\x02\u04F1\u04F2\t$\x02\x02\u04F2\u0168", "\x03\x02\x02\x02\u04F3\u04F4\t%\x02\x02\u04F4\u016A\x03", "\x02\x02\x02\u04F5\u04F6\t&\x02\x02\u04F6\u016C\x03\x02", "\x02\x02\u04F7\u04F8\t'\x02\x02\u04F8\u016E\x03\x02\x02", "\x02\u04F9\u04FA\t(\x02\x02\u04FA\u0170\x03\x02\x02\x02", "\u04FB\u04FC\t)\x02\x02\u04FC\u0172\x03\x02\x02\x02\u04FD", "\u04FE\t*\x02\x02\u04FE\u0174\x03\x02\x02\x02\u04FF\u0500", "\t+\x02\x02\u0500\u0176\x03\x02\x02\x02\u0501\u0502\t,\x02", "\x02\u0502\u0178\x03\x02\x02\x02\u0503\u0504\t\x06\x02", "\x02\u0504\u017A\x03\x02\x02\x02\u0505\u0506\t-\x02\x02", "\u0506\u017C\x03\x02\x02\x02\u0507\u0508\t.\x02\x02\u0508", "\u017E\x03\x02\x02\x02\u0509\u050A\t/\x02\x02\u050A\u0180", "\x03\x02\x02\x02\u050B\u050C\t0\x02\x02\u050C\u0182\x03", "\x02\x02\x02\u050D\u050E\t1\x02\x02\u050E\u0184\x03\x02", "\x02\x02(\x02\u03EE\u03F0\u03F2\u03FB\u03FD\u03FF\u0403\u040A", "\u041E\u0426\u042D\u0430\u0436\u0439\u043D\u0441\u0445\u044B\u0452\u0457", "\u045D\u0463\u0465\u0469\u046E\u0473\u047A\u0480\u0485\u0489\u048F\u0491", "\u0499\u04A7\u04AF\u04BA\u04BD\x02"].join("");

var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map(function (ds, index) {
    return new antlr4.dfa.DFA(ds, index);
});

function CypherLexer(input) {
    antlr4.Lexer.call(this, input);
    this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    return this;
}

CypherLexer.prototype = Object.create(antlr4.Lexer.prototype);
CypherLexer.prototype.constructor = CypherLexer;

CypherLexer.EOF = antlr4.Token.EOF;
CypherLexer.T__0 = 1;
CypherLexer.T__1 = 2;
CypherLexer.T__2 = 3;
CypherLexer.T__3 = 4;
CypherLexer.T__4 = 5;
CypherLexer.T__5 = 6;
CypherLexer.T__6 = 7;
CypherLexer.T__7 = 8;
CypherLexer.T__8 = 9;
CypherLexer.T__9 = 10;
CypherLexer.T__10 = 11;
CypherLexer.T__11 = 12;
CypherLexer.T__12 = 13;
CypherLexer.T__13 = 14;
CypherLexer.T__14 = 15;
CypherLexer.T__15 = 16;
CypherLexer.T__16 = 17;
CypherLexer.T__17 = 18;
CypherLexer.T__18 = 19;
CypherLexer.T__19 = 20;
CypherLexer.T__20 = 21;
CypherLexer.T__21 = 22;
CypherLexer.T__22 = 23;
CypherLexer.T__23 = 24;
CypherLexer.T__24 = 25;
CypherLexer.T__25 = 26;
CypherLexer.T__26 = 27;
CypherLexer.T__27 = 28;
CypherLexer.T__28 = 29;
CypherLexer.T__29 = 30;
CypherLexer.T__30 = 31;
CypherLexer.T__31 = 32;
CypherLexer.T__32 = 33;
CypherLexer.T__33 = 34;
CypherLexer.T__34 = 35;
CypherLexer.T__35 = 36;
CypherLexer.T__36 = 37;
CypherLexer.T__37 = 38;
CypherLexer.T__38 = 39;
CypherLexer.T__39 = 40;
CypherLexer.T__40 = 41;
CypherLexer.T__41 = 42;
CypherLexer.T__42 = 43;
CypherLexer.T__43 = 44;
CypherLexer.T__44 = 45;
CypherLexer.T__45 = 46;
CypherLexer.T__46 = 47;
CypherLexer.T__47 = 48;
CypherLexer.T__48 = 49;
CypherLexer.T__49 = 50;
CypherLexer.T__50 = 51;
CypherLexer.T__51 = 52;
CypherLexer.T__52 = 53;
CypherLexer.CYPHER = 54;
CypherLexer.EXPLAIN = 55;
CypherLexer.PROFILE = 56;
CypherLexer.USING = 57;
CypherLexer.PERIODIC = 58;
CypherLexer.COMMIT = 59;
CypherLexer.UNION = 60;
CypherLexer.ALL = 61;
CypherLexer.CREATE = 62;
CypherLexer.DROP = 63;
CypherLexer.INDEX = 64;
CypherLexer.ON = 65;
CypherLexer.CONSTRAINT = 66;
CypherLexer.ASSERT = 67;
CypherLexer.IS = 68;
CypherLexer.UNIQUE = 69;
CypherLexer.EXISTS = 70;
CypherLexer.LOAD = 71;
CypherLexer.CSV = 72;
CypherLexer.WITH = 73;
CypherLexer.HEADERS = 74;
CypherLexer.FROM = 75;
CypherLexer.AS = 76;
CypherLexer.FIELDTERMINATOR = 77;
CypherLexer.OPTIONAL = 78;
CypherLexer.MATCH = 79;
CypherLexer.UNWIND = 80;
CypherLexer.MERGE = 81;
CypherLexer.SET = 82;
CypherLexer.DETACH = 83;
CypherLexer.DELETE = 84;
CypherLexer.REMOVE = 85;
CypherLexer.FOREACH = 86;
CypherLexer.IN = 87;
CypherLexer.DISTINCT = 88;
CypherLexer.RETURN = 89;
CypherLexer.ORDER = 90;
CypherLexer.BY = 91;
CypherLexer.L_SKIP = 92;
CypherLexer.LIMIT = 93;
CypherLexer.ASCENDING = 94;
CypherLexer.ASC = 95;
CypherLexer.DESCENDING = 96;
CypherLexer.DESC = 97;
CypherLexer.JOIN = 98;
CypherLexer.SCAN = 99;
CypherLexer.START = 100;
CypherLexer.NODE = 101;
CypherLexer.RELATIONSHIP = 102;
CypherLexer.REL = 103;
CypherLexer.WHERE = 104;
CypherLexer.SHORTESTPATH = 105;
CypherLexer.ALLSHORTESTPATHS = 106;
CypherLexer.OR = 107;
CypherLexer.XOR = 108;
CypherLexer.AND = 109;
CypherLexer.NOT = 110;
CypherLexer.STARTS = 111;
CypherLexer.ENDS = 112;
CypherLexer.CONTAINS = 113;
CypherLexer.NULL = 114;
CypherLexer.COUNT = 115;
CypherLexer.FILTER = 116;
CypherLexer.EXTRACT = 117;
CypherLexer.ANY = 118;
CypherLexer.NONE = 119;
CypherLexer.SINGLE = 120;
CypherLexer.TRUE = 121;
CypherLexer.FALSE = 122;
CypherLexer.REDUCE = 123;
CypherLexer.CASE = 124;
CypherLexer.ELSE = 125;
CypherLexer.END = 126;
CypherLexer.WHEN = 127;
CypherLexer.THEN = 128;
CypherLexer.CALL = 129;
CypherLexer.YIELD = 130;
CypherLexer.KEY = 131;
CypherLexer.StringLiteral = 132;
CypherLexer.UrlHex = 133;
CypherLexer.EscapedChar = 134;
CypherLexer.HexInteger = 135;
CypherLexer.DecimalInteger = 136;
CypherLexer.OctalInteger = 137;
CypherLexer.HexLetter = 138;
CypherLexer.HexDigit = 139;
CypherLexer.Digit = 140;
CypherLexer.NonZeroDigit = 141;
CypherLexer.NonZeroOctDigit = 142;
CypherLexer.OctDigit = 143;
CypherLexer.ZeroDigit = 144;
CypherLexer.ExponentDecimalReal = 145;
CypherLexer.RegularDecimalReal = 146;
CypherLexer.UnescapedSymbolicName = 147;
CypherLexer.IdentifierStart = 148;
CypherLexer.IdentifierPart = 149;
CypherLexer.EscapedSymbolicName = 150;
CypherLexer.SP = 151;
CypherLexer.WHITESPACE = 152;
CypherLexer.Comment = 153;
CypherLexer.ERROR_TOKEN = 154;

CypherLexer.prototype.channelNames = ["DEFAULT_TOKEN_CHANNEL", "HIDDEN"];

CypherLexer.prototype.modeNames = ["DEFAULT_MODE"];

CypherLexer.prototype.literalNames = [null, "';'", "':'", "'-'", "'=>'", "'://'", "'/'", "'.'", "'@'", "'#'", "'?'", "'&'", "'='", "'+'", "'{'", "','", "'}'", "'['", "']'", "'('", "')'", "'+='", "'|'", "'*'", "'..'", "'%'", "'^'", "'=~'", "'<>'", "'!='", "'<'", "'>'", "'<='", "'>='", "'$'", "'\u27E8'", "'\u3008'", "'\uFE64'", "'\uFF1C'", "'\u27E9'", "'\u3009'", "'\uFE65'", "'\uFF1E'", "'\xAD'", "'\u2010'", "'\u2011'", "'\u2012'", "'\u2013'", "'\u2014'", "'\u2015'", "'\u2212'", "'\uFE58'", "'\uFE63'", "'\uFF0D'", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "'0'"];

CypherLexer.prototype.symbolicNames = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "CYPHER", "EXPLAIN", "PROFILE", "USING", "PERIODIC", "COMMIT", "UNION", "ALL", "CREATE", "DROP", "INDEX", "ON", "CONSTRAINT", "ASSERT", "IS", "UNIQUE", "EXISTS", "LOAD", "CSV", "WITH", "HEADERS", "FROM", "AS", "FIELDTERMINATOR", "OPTIONAL", "MATCH", "UNWIND", "MERGE", "SET", "DETACH", "DELETE", "REMOVE", "FOREACH", "IN", "DISTINCT", "RETURN", "ORDER", "BY", "L_SKIP", "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", "JOIN", "SCAN", "START", "NODE", "RELATIONSHIP", "REL", "WHERE", "SHORTESTPATH", "ALLSHORTESTPATHS", "OR", "XOR", "AND", "NOT", "STARTS", "ENDS", "CONTAINS", "NULL", "COUNT", "FILTER", "EXTRACT", "ANY", "NONE", "SINGLE", "TRUE", "FALSE", "REDUCE", "CASE", "ELSE", "END", "WHEN", "THEN", "CALL", "YIELD", "KEY", "StringLiteral", "UrlHex", "EscapedChar", "HexInteger", "DecimalInteger", "OctalInteger", "HexLetter", "HexDigit", "Digit", "NonZeroDigit", "NonZeroOctDigit", "OctDigit", "ZeroDigit", "ExponentDecimalReal", "RegularDecimalReal", "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", "EscapedSymbolicName", "SP", "WHITESPACE", "Comment", "ERROR_TOKEN"];

CypherLexer.prototype.ruleNames = ["T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "T__40", "T__41", "T__42", "T__43", "T__44", "T__45", "T__46", "T__47", "T__48", "T__49", "T__50", "T__51", "T__52", "CYPHER", "EXPLAIN", "PROFILE", "USING", "PERIODIC", "COMMIT", "UNION", "ALL", "CREATE", "DROP", "INDEX", "ON", "CONSTRAINT", "ASSERT", "IS", "UNIQUE", "EXISTS", "LOAD", "CSV", "WITH", "HEADERS", "FROM", "AS", "FIELDTERMINATOR", "OPTIONAL", "MATCH", "UNWIND", "MERGE", "SET", "DETACH", "DELETE", "REMOVE", "FOREACH", "IN", "DISTINCT", "RETURN", "ORDER", "BY", "L_SKIP", "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", "JOIN", "SCAN", "START", "NODE", "RELATIONSHIP", "REL", "WHERE", "SHORTESTPATH", "ALLSHORTESTPATHS", "OR", "XOR", "AND", "NOT", "STARTS", "ENDS", "CONTAINS", "NULL", "COUNT", "FILTER", "EXTRACT", "ANY", "NONE", "SINGLE", "TRUE", "FALSE", "REDUCE", "CASE", "ELSE", "END", "WHEN", "THEN", "CALL", "YIELD", "KEY", "StringLiteral", "UrlHex", "EscapedChar", "HexInteger", "DecimalInteger", "OctalInteger", "HexLetter", "HexDigit", "Digit", "NonZeroDigit", "NonZeroOctDigit", "OctDigit", "ZeroDigit", "ExponentDecimalReal", "RegularDecimalReal", "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", "EscapedSymbolicName", "SP", "WHITESPACE", "Comment", "ERROR_TOKEN", "FF", "RS", "ID_Continue", "GS", "FS", "CR", "Sc", "SPACE", "TAB", "LF", "VT", "US", "ID_Start", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"];

CypherLexer.prototype.grammarFileName = "Cypher.g4";

exports.CypherLexer = CypherLexer;

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReferencesListener = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Copyright (c) 2002-2017 "Neo Technology,"
etwork Engine for Objects in Lund AB [http://neotechnology.com]

his file is part of Neo4j.;

eo4j is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * (at your option) any later version.

his program is distributed in the hope that it will be useful,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * but WITHOUT ANY WARRANTY; without even the implied warranty of
or FITNESS FOR A PARTICULAR PURPOSE.  See the
eneral Public License for more details.

ou should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */

var _CypherListener2 = __webpack_require__(45);

var _CypherTypes = __webpack_require__(1);

var CypherTypes = _interopRequireWildcard(_CypherTypes);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Index = function () {
  function Index() {
    _classCallCheck(this, Index);

    this.names = {};
    this.namesByQuery = [];
    this.referencesByName = {};
    this.referencesByQueryAndName = [];
  }

  _createClass(Index, [{
    key: 'addQuery',
    value: function addQuery() {
      this.namesByQuery.push([]);
      this.referencesByQueryAndName.push({});
    }
  }, {
    key: 'add',
    value: function add(ctx) {
      var addName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      var queryIndex = this.namesByQuery.length - 1;
      var text = ctx.getText();
      if (addName) {
        this.names[text] = true;
        this.namesByQuery[queryIndex][text] = true;
      }
      this.referencesByName[text] = [].concat(_toConsumableArray(this.referencesByName[text] || []), [ctx]);
      var index = this.referencesByQueryAndName[queryIndex];
      index[text] = [].concat(_toConsumableArray(index[text] || []), [ctx]);
    }

    /**
     * Variables have specific rules, because they participate in autocompletion.
     * We should not add to the names list variables that are in expression.
     */

  }, {
    key: 'addVariable',
    value: function addVariable(ctx) {
      var addName = true;

      // If variable is inside atom, then variable is inside expression.
      // Therefore, variables is node defined here.
      var parent = ctx.parentCtx;
      if (parent && parent.constructor.name === CypherTypes.ATOM_CONTEXT) {
        addName = false;
      }
      this.add(ctx, addName);
    }
  }]);

  return Index;
}();

var ReferencesListener = exports.ReferencesListener = function (_CypherListener) {
  _inherits(ReferencesListener, _CypherListener);

  function ReferencesListener() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ReferencesListener);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ReferencesListener.__proto__ || Object.getPrototypeOf(ReferencesListener)).call.apply(_ref, [this].concat(args))), _this), _this.queries = [], _this.queriesAndCommands = [], _this.statements = [], _this.raw = [], _this.indexes = CypherTypes.SYMBOLIC_CONTEXTS.reduce(function (acc, t) {
      return _extends({}, acc, _defineProperty({}, t, new Index(t)));
    }, {}), _this.inConsoleCommand = false, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ReferencesListener, [{
    key: 'enterRaw',
    value: function enterRaw(ctx) {
      this.raw.push(ctx);
    }
  }, {
    key: 'exitRaw',
    value: function exitRaw(ctx) {
      if (this.raw.length === 0) {
        this.raw.push(ctx);
      }
    }
  }, {
    key: 'enterCypherPart',
    value: function enterCypherPart(ctx) {
      this.statements.push(ctx);
    }
  }, {
    key: 'exitCypher',
    value: function exitCypher(ctx) {
      if (this.statements.length === 0) {
        this.statements.push(ctx);
      }
    }
  }, {
    key: 'enterCypherConsoleCommand',
    value: function enterCypherConsoleCommand(ctx) {
      var _this2 = this;

      this.queriesAndCommands.push(ctx);
      Object.keys(this.indexes).forEach(function (k) {
        return _this2.indexes[k].addQuery();
      });
      this.inConsoleCommand = true;
    }
  }, {
    key: 'exitCypherConsoleCommand',
    value: function exitCypherConsoleCommand() {
      this.inConsoleCommand = false;
    }
  }, {
    key: 'enterCypherQuery',
    value: function enterCypherQuery(ctx) {
      var _this3 = this;

      this.queries.push(ctx);
      this.queriesAndCommands.push(ctx);
      Object.keys(this.indexes).forEach(function (k) {
        return _this3.indexes[k].addQuery();
      });
    }
  }, {
    key: 'exitVariable',
    value: function exitVariable(ctx) {
      if (this.inConsoleCommand) {
        return;
      }
      this.indexes[CypherTypes.VARIABLE_CONTEXT].addVariable(ctx);
    }
  }, {
    key: 'exitLabelName',
    value: function exitLabelName(ctx) {
      if (this.inConsoleCommand) {
        return;
      }
      this.indexes[CypherTypes.LABEL_NAME_CONTEXT].add(ctx);
    }
  }, {
    key: 'exitRelTypeName',
    value: function exitRelTypeName(ctx) {
      if (this.inConsoleCommand) {
        return;
      }
      this.indexes[CypherTypes.RELATIONSHIP_TYPE_NAME_CONTEXT].add(ctx);
    }
  }, {
    key: 'exitPropertyKeyName',
    value: function exitPropertyKeyName(ctx) {
      if (this.inConsoleCommand) {
        return;
      }
      this.indexes[CypherTypes.PROPERTY_KEY_NAME_CONTEXT].add(ctx);
    }
  }, {
    key: 'exitParameterName',
    value: function exitParameterName(ctx) {
      if (this.inConsoleCommand) {
        return;
      }
      this.indexes[CypherTypes.PARAMETER_NAME_CONTEXT].add(ctx);
    }
  }]);

  return ReferencesListener;
}(_CypherListener2.CypherListener);

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _codemirror = __webpack_require__(25);

var _codemirror2 = _interopRequireDefault(_codemirror);

var _index = __webpack_require__(26);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright (c) 2002-2017 "Neo Technology,"
 * Network Engine for Objects in Lund AB [http://neotechnology.com]
 *
 * This file is part of Neo4j.
 *
 * Neo4j is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/* eslint-disable no-param-reassign */
// By the Neo4j Team and contributors.
// https://github.com/neo4j-contrib/CodeMirror

var operators = [';', '(', ')', '{', '}', '[', ']', '$', ':', '.', '=', '<', '>', '+', '-', '*', '`', ',', '?', '|', '..', '+=', '<>', '!=', '<=', '>=', '/', '%', '^', '=~'];

var keywordRegexes = _index.CypherKeywords.map(function (w) {
  return new RegExp(w, 'i');
});
var lineCommentRegex = /\/\/[^\r\n]*/;
var blockCommentRegex = /\/\*([\S\s]*?)\*\//;
var stringRegex = /('([^'\\]|\\.)*'|"([^"\\]|\\.)*")/;
var stringStartRegex = /('([^'\\]|\\.)*|"([^"\\]|\\.)*)/; // match just opened and not closed string as string
var integerRegex = /[+-]?(([1-9][0-9]+)|([0-9]))/;
var decimalRegex = /[+-]?(([1-9][0-9]+)|([0-9]))\.[0-9]+/;

_codemirror2.default.defineMode('cypher', function (config) {
  var curPunc = void 0;

  var tokenBase = function tokenBase(stream) {
    if (stream.match(lineCommentRegex) || stream.match(blockCommentRegex)) {
      return 'comment';
    } else if (stream.match(stringRegex)) {
      return 'string';
    } else if (stream.match(integerRegex)) {
      return 'number';
    } else if (stream.match(decimalRegex)) {
      return 'number';
    } else if (operators.find(function (o) {
      return stream.match(o);
    })) {
      return 'operator';
    } else if (keywordRegexes.find(function (k) {
      return stream.match(k);
    })) {
      return 'keyword';
    } else if (stream.match(stringStartRegex)) {
      return 'string';
    }

    stream.next();
    stream.eatWhile(/[_\w\d]/);

    return 'variable';
  };
  var pushContext = function pushContext(state, type, col) {
    state.context = {
      prev: state.context,
      indent: state.indent,
      col: col,
      type: type
    };
    return state.context;
  };
  var popContext = function popContext(state) {
    state.indent = state.context.indent;
    state.context = state.context.prev;
    return state.context;
  };
  var indentUnit = config.indentUnit;

  return {
    startState: function startState() {
      return {
        tokenize: tokenBase,
        context: null,
        indent: 0,
        col: 0
      };
    },
    token: function token(stream, state) {
      if (stream.sol()) {
        if (state.context && state.context.align == null) {
          state.context.align = false;
        }
        state.indent = stream.indentation();
      }
      if (stream.eatSpace()) {
        return null;
      }
      var style = state.tokenize(stream, state);
      if (style !== 'comment' && state.context && state.context.align == null && state.context.type !== 'pattern') {
        state.context.align = true;
      }
      if (curPunc === '(') {
        pushContext(state, ')', stream.column());
      } else if (curPunc === '[') {
        pushContext(state, ']', stream.column());
      } else if (curPunc === '{') {
        pushContext(state, '}', stream.column());
      } else if (/[\]})]/.test(curPunc)) {
        while (state.context && state.context.type === 'pattern') {
          popContext(state);
        }
        if (state.context && curPunc === state.context.type) {
          popContext(state);
        }
      } else if (curPunc === '.' && state.context && state.context.type === 'pattern') {
        popContext(state);
      } else if (/atom|string|variable/.test(style) && state.context) {
        if (/[}\]]/.test(state.context.type)) {
          pushContext(state, 'pattern', stream.column());
        } else if (state.context.type === 'pattern' && !state.context.align) {
          state.context.align = true;
          state.context.col = stream.column();
        }
      }
      return style;
    },

    indent: function indent(state, textAfter) {
      var firstChar = textAfter && textAfter.charAt(0);
      var context = state.context;
      if (/[\]}]/.test(firstChar)) {
        while (context && context.type === 'pattern') {
          context = context.prev;
        }
      }
      var closing = context && firstChar === context.type;
      if (!context) return 0;
      if (context.type === 'keywords') return _codemirror2.default.commands.newlineAndIndent;
      if (context.align) return context.col + (closing ? 0 : 1);
      return context.indent + (closing ? 0 : indentUnit);
    }
  };
});

_codemirror2.default.modeExtensions.cypher = {
  autoFormatLineBreaks: function autoFormatLineBreaks(text) {
    var lines = text.split('\n');
    var reProcessedPortion = /\s+\b(return|where|order by|match|with|skip|limit|create|delete|set)\b\s/g;
    for (var i = 0; i < lines.length; i++) {
      lines[i] = lines[i].replace(reProcessedPortion, ' \n$1 ').trim();
    }
    return lines.join('\n');
  }
};

_codemirror2.default.defineMIME('application/x-cypher-query', 'cypher');

/***/ })
/******/ ]);
});
//# sourceMappingURL=cypher-codemirror.js.map